# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'CheckpointSpec',
    'CheckpointSpecLastBackupRef',
    'ClusterClaimSpec',
    'ClusterClaimSpecSubjects',
    'ClusterClaimStatus',
    'ClusterClaimStatusConditions',
    'ClusterDeploymentSpec',
    'ClusterDeploymentSpecCertificateBundles',
    'ClusterDeploymentSpecCertificateBundlesCertificateSecretRef',
    'ClusterDeploymentSpecClusterMetadata',
    'ClusterDeploymentSpecClusterMetadataAdminKubeconfigSecretRef',
    'ClusterDeploymentSpecClusterMetadataAdminPasswordSecretRef',
    'ClusterDeploymentSpecClusterPoolRef',
    'ClusterDeploymentSpecControlPlaneConfig',
    'ClusterDeploymentSpecControlPlaneConfigServingCertificates',
    'ClusterDeploymentSpecControlPlaneConfigServingCertificatesAdditional',
    'ClusterDeploymentSpecIngress',
    'ClusterDeploymentSpecIngressNamespaceSelector',
    'ClusterDeploymentSpecIngressNamespaceSelectorMatchExpressions',
    'ClusterDeploymentSpecIngressRouteSelector',
    'ClusterDeploymentSpecIngressRouteSelectorMatchExpressions',
    'ClusterDeploymentSpecPlatform',
    'ClusterDeploymentSpecPlatformAws',
    'ClusterDeploymentSpecPlatformAwsCredentialsSecretRef',
    'ClusterDeploymentSpecPlatformAzure',
    'ClusterDeploymentSpecPlatformAzureCredentialsSecretRef',
    'ClusterDeploymentSpecPlatformBaremetal',
    'ClusterDeploymentSpecPlatformBaremetalLibvirtSSHPrivateKeySecretRef',
    'ClusterDeploymentSpecPlatformGcp',
    'ClusterDeploymentSpecPlatformGcpCredentialsSecretRef',
    'ClusterDeploymentSpecPlatformOpenstack',
    'ClusterDeploymentSpecPlatformOpenstackCertificatesSecretRef',
    'ClusterDeploymentSpecPlatformOpenstackCredentialsSecretRef',
    'ClusterDeploymentSpecPlatformOvirt',
    'ClusterDeploymentSpecPlatformOvirtCertificatesSecretRef',
    'ClusterDeploymentSpecPlatformOvirtCredentialsSecretRef',
    'ClusterDeploymentSpecPlatformVsphere',
    'ClusterDeploymentSpecPlatformVsphereCertificatesSecretRef',
    'ClusterDeploymentSpecPlatformVsphereCredentialsSecretRef',
    'ClusterDeploymentSpecProvisioning',
    'ClusterDeploymentSpecProvisioningImageSetRef',
    'ClusterDeploymentSpecProvisioningInstallConfigSecretRef',
    'ClusterDeploymentSpecProvisioningInstallerEnv',
    'ClusterDeploymentSpecProvisioningInstallerEnvValueFrom',
    'ClusterDeploymentSpecProvisioningInstallerEnvValueFromConfigMapKeyRef',
    'ClusterDeploymentSpecProvisioningInstallerEnvValueFromFieldRef',
    'ClusterDeploymentSpecProvisioningInstallerEnvValueFromResourceFieldRef',
    'ClusterDeploymentSpecProvisioningInstallerEnvValueFromSecretKeyRef',
    'ClusterDeploymentSpecProvisioningManifestsConfigMapRef',
    'ClusterDeploymentSpecProvisioningSshPrivateKeySecretRef',
    'ClusterDeploymentSpecPullSecretRef',
    'ClusterDeploymentStatus',
    'ClusterDeploymentStatusCertificateBundles',
    'ClusterDeploymentStatusConditions',
    'ClusterDeploymentStatusProvisionRef',
    'ClusterDeprovisionSpec',
    'ClusterDeprovisionSpecPlatform',
    'ClusterDeprovisionSpecPlatformAws',
    'ClusterDeprovisionSpecPlatformAwsCredentialsSecretRef',
    'ClusterDeprovisionSpecPlatformAzure',
    'ClusterDeprovisionSpecPlatformAzureCredentialsSecretRef',
    'ClusterDeprovisionSpecPlatformGcp',
    'ClusterDeprovisionSpecPlatformGcpCredentialsSecretRef',
    'ClusterDeprovisionSpecPlatformOpenstack',
    'ClusterDeprovisionSpecPlatformOpenstackCertificatesSecretRef',
    'ClusterDeprovisionSpecPlatformOpenstackCredentialsSecretRef',
    'ClusterDeprovisionSpecPlatformOvirt',
    'ClusterDeprovisionSpecPlatformOvirtCertificatesSecretRef',
    'ClusterDeprovisionSpecPlatformOvirtCredentialsSecretRef',
    'ClusterDeprovisionSpecPlatformVsphere',
    'ClusterDeprovisionSpecPlatformVsphereCertificatesSecretRef',
    'ClusterDeprovisionSpecPlatformVsphereCredentialsSecretRef',
    'ClusterDeprovisionStatus',
    'ClusterDeprovisionStatusConditions',
    'ClusterImageSetSpec',
    'ClusterPoolSpec',
    'ClusterPoolSpecImageSetRef',
    'ClusterPoolSpecInstallConfigSecretTemplateRef',
    'ClusterPoolSpecPlatform',
    'ClusterPoolSpecPlatformAws',
    'ClusterPoolSpecPlatformAwsCredentialsSecretRef',
    'ClusterPoolSpecPlatformAzure',
    'ClusterPoolSpecPlatformAzureCredentialsSecretRef',
    'ClusterPoolSpecPlatformBaremetal',
    'ClusterPoolSpecPlatformBaremetalLibvirtSSHPrivateKeySecretRef',
    'ClusterPoolSpecPlatformGcp',
    'ClusterPoolSpecPlatformGcpCredentialsSecretRef',
    'ClusterPoolSpecPlatformOpenstack',
    'ClusterPoolSpecPlatformOpenstackCertificatesSecretRef',
    'ClusterPoolSpecPlatformOpenstackCredentialsSecretRef',
    'ClusterPoolSpecPlatformOvirt',
    'ClusterPoolSpecPlatformOvirtCertificatesSecretRef',
    'ClusterPoolSpecPlatformOvirtCredentialsSecretRef',
    'ClusterPoolSpecPlatformVsphere',
    'ClusterPoolSpecPlatformVsphereCertificatesSecretRef',
    'ClusterPoolSpecPlatformVsphereCredentialsSecretRef',
    'ClusterPoolSpecPullSecretRef',
    'ClusterPoolStatus',
    'ClusterPoolStatusConditions',
    'ClusterProvisionSpec',
    'ClusterProvisionSpecAdminKubeconfigSecretRef',
    'ClusterProvisionSpecAdminPasswordSecretRef',
    'ClusterProvisionSpecClusterDeploymentRef',
    'ClusterProvisionSpecPodSpec',
    'ClusterProvisionSpecPodSpecAffinity',
    'ClusterProvisionSpecPodSpecAffinityNodeAffinity',
    'ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
    'ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions',
    'ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields',
    'ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms',
    'ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions',
    'ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields',
    'ClusterProvisionSpecPodSpecAffinityPodAffinity',
    'ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'ClusterProvisionSpecPodSpecAffinityPodAntiAffinity',
    'ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'ClusterProvisionSpecPodSpecContainers',
    'ClusterProvisionSpecPodSpecContainersEnv',
    'ClusterProvisionSpecPodSpecContainersEnvFrom',
    'ClusterProvisionSpecPodSpecContainersEnvFromConfigMapRef',
    'ClusterProvisionSpecPodSpecContainersEnvFromSecretRef',
    'ClusterProvisionSpecPodSpecContainersEnvValueFrom',
    'ClusterProvisionSpecPodSpecContainersEnvValueFromConfigMapKeyRef',
    'ClusterProvisionSpecPodSpecContainersEnvValueFromFieldRef',
    'ClusterProvisionSpecPodSpecContainersEnvValueFromResourceFieldRef',
    'ClusterProvisionSpecPodSpecContainersEnvValueFromSecretKeyRef',
    'ClusterProvisionSpecPodSpecContainersLifecycle',
    'ClusterProvisionSpecPodSpecContainersLifecyclePostStart',
    'ClusterProvisionSpecPodSpecContainersLifecyclePostStartExec',
    'ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGet',
    'ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetHttpHeaders',
    'ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetPort',
    'ClusterProvisionSpecPodSpecContainersLifecyclePostStartTcpSocket',
    'ClusterProvisionSpecPodSpecContainersLifecyclePostStartTcpSocketPort',
    'ClusterProvisionSpecPodSpecContainersLifecyclePreStop',
    'ClusterProvisionSpecPodSpecContainersLifecyclePreStopExec',
    'ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGet',
    'ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetHttpHeaders',
    'ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetPort',
    'ClusterProvisionSpecPodSpecContainersLifecyclePreStopTcpSocket',
    'ClusterProvisionSpecPodSpecContainersLifecyclePreStopTcpSocketPort',
    'ClusterProvisionSpecPodSpecContainersLivenessProbe',
    'ClusterProvisionSpecPodSpecContainersLivenessProbeExec',
    'ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGet',
    'ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetHttpHeaders',
    'ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetPort',
    'ClusterProvisionSpecPodSpecContainersLivenessProbeTcpSocket',
    'ClusterProvisionSpecPodSpecContainersLivenessProbeTcpSocketPort',
    'ClusterProvisionSpecPodSpecContainersPorts',
    'ClusterProvisionSpecPodSpecContainersReadinessProbe',
    'ClusterProvisionSpecPodSpecContainersReadinessProbeExec',
    'ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGet',
    'ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetHttpHeaders',
    'ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetPort',
    'ClusterProvisionSpecPodSpecContainersReadinessProbeTcpSocket',
    'ClusterProvisionSpecPodSpecContainersReadinessProbeTcpSocketPort',
    'ClusterProvisionSpecPodSpecContainersResources',
    'ClusterProvisionSpecPodSpecContainersSecurityContext',
    'ClusterProvisionSpecPodSpecContainersSecurityContextCapabilities',
    'ClusterProvisionSpecPodSpecContainersSecurityContextSeLinuxOptions',
    'ClusterProvisionSpecPodSpecContainersSecurityContextSeccompProfile',
    'ClusterProvisionSpecPodSpecContainersSecurityContextWindowsOptions',
    'ClusterProvisionSpecPodSpecContainersStartupProbe',
    'ClusterProvisionSpecPodSpecContainersStartupProbeExec',
    'ClusterProvisionSpecPodSpecContainersStartupProbeHttpGet',
    'ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetHttpHeaders',
    'ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetPort',
    'ClusterProvisionSpecPodSpecContainersStartupProbeTcpSocket',
    'ClusterProvisionSpecPodSpecContainersStartupProbeTcpSocketPort',
    'ClusterProvisionSpecPodSpecContainersVolumeDevices',
    'ClusterProvisionSpecPodSpecContainersVolumeMounts',
    'ClusterProvisionSpecPodSpecDnsConfig',
    'ClusterProvisionSpecPodSpecDnsConfigOptions',
    'ClusterProvisionSpecPodSpecEphemeralContainers',
    'ClusterProvisionSpecPodSpecEphemeralContainersEnv',
    'ClusterProvisionSpecPodSpecEphemeralContainersEnvFrom',
    'ClusterProvisionSpecPodSpecEphemeralContainersEnvFromConfigMapRef',
    'ClusterProvisionSpecPodSpecEphemeralContainersEnvFromSecretRef',
    'ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFrom',
    'ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromConfigMapKeyRef',
    'ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromFieldRef',
    'ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRef',
    'ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromSecretKeyRef',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecycle',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStart',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartExec',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGet',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetPort',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocket',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocketPort',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStop',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopExec',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGet',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetPort',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocket',
    'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocketPort',
    'ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbe',
    'ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeExec',
    'ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGet',
    'ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders',
    'ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetPort',
    'ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeTcpSocket',
    'ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeTcpSocketPort',
    'ClusterProvisionSpecPodSpecEphemeralContainersPorts',
    'ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbe',
    'ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeExec',
    'ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGet',
    'ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders',
    'ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetPort',
    'ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeTcpSocket',
    'ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeTcpSocketPort',
    'ClusterProvisionSpecPodSpecEphemeralContainersResources',
    'ClusterProvisionSpecPodSpecEphemeralContainersSecurityContext',
    'ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextCapabilities',
    'ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextSeLinuxOptions',
    'ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextSeccompProfile',
    'ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextWindowsOptions',
    'ClusterProvisionSpecPodSpecEphemeralContainersStartupProbe',
    'ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeExec',
    'ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGet',
    'ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetHttpHeaders',
    'ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetPort',
    'ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeTcpSocket',
    'ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeTcpSocketPort',
    'ClusterProvisionSpecPodSpecEphemeralContainersVolumeDevices',
    'ClusterProvisionSpecPodSpecEphemeralContainersVolumeMounts',
    'ClusterProvisionSpecPodSpecHostAliases',
    'ClusterProvisionSpecPodSpecImagePullSecrets',
    'ClusterProvisionSpecPodSpecInitContainers',
    'ClusterProvisionSpecPodSpecInitContainersEnv',
    'ClusterProvisionSpecPodSpecInitContainersEnvFrom',
    'ClusterProvisionSpecPodSpecInitContainersEnvFromConfigMapRef',
    'ClusterProvisionSpecPodSpecInitContainersEnvFromSecretRef',
    'ClusterProvisionSpecPodSpecInitContainersEnvValueFrom',
    'ClusterProvisionSpecPodSpecInitContainersEnvValueFromConfigMapKeyRef',
    'ClusterProvisionSpecPodSpecInitContainersEnvValueFromFieldRef',
    'ClusterProvisionSpecPodSpecInitContainersEnvValueFromResourceFieldRef',
    'ClusterProvisionSpecPodSpecInitContainersEnvValueFromSecretKeyRef',
    'ClusterProvisionSpecPodSpecInitContainersLifecycle',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePostStart',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartExec',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGet',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetHttpHeaders',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetPort',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartTcpSocket',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartTcpSocketPort',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePreStop',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopExec',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGet',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetHttpHeaders',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetPort',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopTcpSocket',
    'ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopTcpSocketPort',
    'ClusterProvisionSpecPodSpecInitContainersLivenessProbe',
    'ClusterProvisionSpecPodSpecInitContainersLivenessProbeExec',
    'ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGet',
    'ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetHttpHeaders',
    'ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetPort',
    'ClusterProvisionSpecPodSpecInitContainersLivenessProbeTcpSocket',
    'ClusterProvisionSpecPodSpecInitContainersLivenessProbeTcpSocketPort',
    'ClusterProvisionSpecPodSpecInitContainersPorts',
    'ClusterProvisionSpecPodSpecInitContainersReadinessProbe',
    'ClusterProvisionSpecPodSpecInitContainersReadinessProbeExec',
    'ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGet',
    'ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetHttpHeaders',
    'ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetPort',
    'ClusterProvisionSpecPodSpecInitContainersReadinessProbeTcpSocket',
    'ClusterProvisionSpecPodSpecInitContainersReadinessProbeTcpSocketPort',
    'ClusterProvisionSpecPodSpecInitContainersResources',
    'ClusterProvisionSpecPodSpecInitContainersSecurityContext',
    'ClusterProvisionSpecPodSpecInitContainersSecurityContextCapabilities',
    'ClusterProvisionSpecPodSpecInitContainersSecurityContextSeLinuxOptions',
    'ClusterProvisionSpecPodSpecInitContainersSecurityContextSeccompProfile',
    'ClusterProvisionSpecPodSpecInitContainersSecurityContextWindowsOptions',
    'ClusterProvisionSpecPodSpecInitContainersStartupProbe',
    'ClusterProvisionSpecPodSpecInitContainersStartupProbeExec',
    'ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGet',
    'ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetHttpHeaders',
    'ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetPort',
    'ClusterProvisionSpecPodSpecInitContainersStartupProbeTcpSocket',
    'ClusterProvisionSpecPodSpecInitContainersStartupProbeTcpSocketPort',
    'ClusterProvisionSpecPodSpecInitContainersVolumeDevices',
    'ClusterProvisionSpecPodSpecInitContainersVolumeMounts',
    'ClusterProvisionSpecPodSpecReadinessGates',
    'ClusterProvisionSpecPodSpecSecurityContext',
    'ClusterProvisionSpecPodSpecSecurityContextSeLinuxOptions',
    'ClusterProvisionSpecPodSpecSecurityContextSeccompProfile',
    'ClusterProvisionSpecPodSpecSecurityContextSysctls',
    'ClusterProvisionSpecPodSpecSecurityContextWindowsOptions',
    'ClusterProvisionSpecPodSpecTolerations',
    'ClusterProvisionSpecPodSpecTopologySpreadConstraints',
    'ClusterProvisionSpecPodSpecTopologySpreadConstraintsLabelSelector',
    'ClusterProvisionSpecPodSpecTopologySpreadConstraintsLabelSelectorMatchExpressions',
    'ClusterProvisionSpecPodSpecVolumes',
    'ClusterProvisionSpecPodSpecVolumesAwsElasticBlockStore',
    'ClusterProvisionSpecPodSpecVolumesAzureDisk',
    'ClusterProvisionSpecPodSpecVolumesAzureFile',
    'ClusterProvisionSpecPodSpecVolumesCephfs',
    'ClusterProvisionSpecPodSpecVolumesCephfsSecretRef',
    'ClusterProvisionSpecPodSpecVolumesCinder',
    'ClusterProvisionSpecPodSpecVolumesCinderSecretRef',
    'ClusterProvisionSpecPodSpecVolumesConfigMap',
    'ClusterProvisionSpecPodSpecVolumesConfigMapItems',
    'ClusterProvisionSpecPodSpecVolumesCsi',
    'ClusterProvisionSpecPodSpecVolumesCsiNodePublishSecretRef',
    'ClusterProvisionSpecPodSpecVolumesDownwardAPI',
    'ClusterProvisionSpecPodSpecVolumesDownwardAPIItems',
    'ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsFieldRef',
    'ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsResourceFieldRef',
    'ClusterProvisionSpecPodSpecVolumesEmptyDir',
    'ClusterProvisionSpecPodSpecVolumesEphemeral',
    'ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplate',
    'ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpec',
    'ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource',
    'ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResources',
    'ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelector',
    'ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions',
    'ClusterProvisionSpecPodSpecVolumesFc',
    'ClusterProvisionSpecPodSpecVolumesFlexVolume',
    'ClusterProvisionSpecPodSpecVolumesFlexVolumeSecretRef',
    'ClusterProvisionSpecPodSpecVolumesFlocker',
    'ClusterProvisionSpecPodSpecVolumesGcePersistentDisk',
    'ClusterProvisionSpecPodSpecVolumesGitRepo',
    'ClusterProvisionSpecPodSpecVolumesGlusterfs',
    'ClusterProvisionSpecPodSpecVolumesHostPath',
    'ClusterProvisionSpecPodSpecVolumesIscsi',
    'ClusterProvisionSpecPodSpecVolumesIscsiSecretRef',
    'ClusterProvisionSpecPodSpecVolumesNfs',
    'ClusterProvisionSpecPodSpecVolumesPersistentVolumeClaim',
    'ClusterProvisionSpecPodSpecVolumesPhotonPersistentDisk',
    'ClusterProvisionSpecPodSpecVolumesPortworxVolume',
    'ClusterProvisionSpecPodSpecVolumesProjected',
    'ClusterProvisionSpecPodSpecVolumesProjectedSources',
    'ClusterProvisionSpecPodSpecVolumesProjectedSourcesConfigMap',
    'ClusterProvisionSpecPodSpecVolumesProjectedSourcesConfigMapItems',
    'ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPI',
    'ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItems',
    'ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef',
    'ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef',
    'ClusterProvisionSpecPodSpecVolumesProjectedSourcesSecret',
    'ClusterProvisionSpecPodSpecVolumesProjectedSourcesSecretItems',
    'ClusterProvisionSpecPodSpecVolumesProjectedSourcesServiceAccountToken',
    'ClusterProvisionSpecPodSpecVolumesQuobyte',
    'ClusterProvisionSpecPodSpecVolumesRbd',
    'ClusterProvisionSpecPodSpecVolumesRbdSecretRef',
    'ClusterProvisionSpecPodSpecVolumesScaleIO',
    'ClusterProvisionSpecPodSpecVolumesScaleIOSecretRef',
    'ClusterProvisionSpecPodSpecVolumesSecret',
    'ClusterProvisionSpecPodSpecVolumesSecretItems',
    'ClusterProvisionSpecPodSpecVolumesStorageos',
    'ClusterProvisionSpecPodSpecVolumesStorageosSecretRef',
    'ClusterProvisionSpecPodSpecVolumesVsphereVolume',
    'ClusterProvisionStatus',
    'ClusterProvisionStatusConditions',
    'ClusterProvisionStatusJobRef',
    'ClusterRelocateSpec',
    'ClusterRelocateSpecClusterDeploymentSelector',
    'ClusterRelocateSpecClusterDeploymentSelectorMatchExpressions',
    'ClusterRelocateSpecKubeconfigSecretRef',
    'ClusterStateStatus',
    'ClusterStateStatusClusterOperators',
    'ClusterStateStatusClusterOperatorsConditions',
    'DNSZoneSpec',
    'DNSZoneSpecAws',
    'DNSZoneSpecAwsAdditionalTags',
    'DNSZoneSpecAwsCredentialsSecretRef',
    'DNSZoneSpecAzure',
    'DNSZoneSpecAzureCredentialsSecretRef',
    'DNSZoneSpecGcp',
    'DNSZoneSpecGcpCredentialsSecretRef',
    'DNSZoneStatus',
    'DNSZoneStatusAws',
    'DNSZoneStatusConditions',
    'DNSZoneStatusGcp',
    'HiveConfigSpec',
    'HiveConfigSpecAdditionalCertificateAuthoritiesSecretRef',
    'HiveConfigSpecBackup',
    'HiveConfigSpecBackupVelero',
    'HiveConfigSpecControllersConfig',
    'HiveConfigSpecControllersConfigControllers',
    'HiveConfigSpecControllersConfigControllersConfig',
    'HiveConfigSpecControllersConfigDefault',
    'HiveConfigSpecFailedProvisionConfig',
    'HiveConfigSpecFailedProvisionConfigAws',
    'HiveConfigSpecFailedProvisionConfigAwsCredentialsSecretRef',
    'HiveConfigSpecGlobalPullSecretRef',
    'HiveConfigSpecManagedDomains',
    'HiveConfigSpecManagedDomainsAws',
    'HiveConfigSpecManagedDomainsAwsCredentialsSecretRef',
    'HiveConfigSpecManagedDomainsAzure',
    'HiveConfigSpecManagedDomainsAzureCredentialsSecretRef',
    'HiveConfigSpecManagedDomainsGcp',
    'HiveConfigSpecManagedDomainsGcpCredentialsSecretRef',
    'HiveConfigStatus',
    'MachinePoolSpec',
    'MachinePoolSpecAutoscaling',
    'MachinePoolSpecClusterDeploymentRef',
    'MachinePoolSpecPlatform',
    'MachinePoolSpecPlatformAws',
    'MachinePoolSpecPlatformAwsRootVolume',
    'MachinePoolSpecPlatformAwsSpotMarketOptions',
    'MachinePoolSpecPlatformAzure',
    'MachinePoolSpecPlatformAzureOsDisk',
    'MachinePoolSpecPlatformGcp',
    'MachinePoolSpecPlatformOpenstack',
    'MachinePoolSpecPlatformOpenstackRootVolume',
    'MachinePoolSpecPlatformOvirt',
    'MachinePoolSpecPlatformOvirtCpu',
    'MachinePoolSpecPlatformOvirtOsDisk',
    'MachinePoolSpecPlatformVsphere',
    'MachinePoolSpecPlatformVsphereOsDisk',
    'MachinePoolSpecTaints',
    'MachinePoolStatus',
    'MachinePoolStatusConditions',
    'MachinePoolStatusMachineSets',
    'SelectorSyncIdentityProviderSpec',
    'SelectorSyncIdentityProviderSpecClusterDeploymentSelector',
    'SelectorSyncIdentityProviderSpecClusterDeploymentSelectorMatchExpressions',
    'SelectorSyncIdentityProviderSpecIdentityProviders',
    'SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuth',
    'SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthCa',
    'SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientCert',
    'SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientKey',
    'SelectorSyncIdentityProviderSpecIdentityProvidersGithub',
    'SelectorSyncIdentityProviderSpecIdentityProvidersGithubCa',
    'SelectorSyncIdentityProviderSpecIdentityProvidersGithubClientSecret',
    'SelectorSyncIdentityProviderSpecIdentityProvidersGitlab',
    'SelectorSyncIdentityProviderSpecIdentityProvidersGitlabCa',
    'SelectorSyncIdentityProviderSpecIdentityProvidersGitlabClientSecret',
    'SelectorSyncIdentityProviderSpecIdentityProvidersGoogle',
    'SelectorSyncIdentityProviderSpecIdentityProvidersGoogleClientSecret',
    'SelectorSyncIdentityProviderSpecIdentityProvidersHtpasswd',
    'SelectorSyncIdentityProviderSpecIdentityProvidersHtpasswdFileData',
    'SelectorSyncIdentityProviderSpecIdentityProvidersKeystone',
    'SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneCa',
    'SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientCert',
    'SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientKey',
    'SelectorSyncIdentityProviderSpecIdentityProvidersLdap',
    'SelectorSyncIdentityProviderSpecIdentityProvidersLdapAttributes',
    'SelectorSyncIdentityProviderSpecIdentityProvidersLdapBindPassword',
    'SelectorSyncIdentityProviderSpecIdentityProvidersLdapCa',
    'SelectorSyncIdentityProviderSpecIdentityProvidersOpenID',
    'SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDCa',
    'SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClaims',
    'SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClientSecret',
    'SelectorSyncIdentityProviderSpecIdentityProvidersRequestHeader',
    'SelectorSyncIdentityProviderSpecIdentityProvidersRequestHeaderCa',
    'SelectorSyncSetSpec',
    'SelectorSyncSetSpecClusterDeploymentSelector',
    'SelectorSyncSetSpecClusterDeploymentSelectorMatchExpressions',
    'SelectorSyncSetSpecPatches',
    'SelectorSyncSetSpecSecretMappings',
    'SelectorSyncSetSpecSecretMappingsSourceRef',
    'SelectorSyncSetSpecSecretMappingsTargetRef',
    'SyncIdentityProviderSpec',
    'SyncIdentityProviderSpecClusterDeploymentRefs',
    'SyncIdentityProviderSpecIdentityProviders',
    'SyncIdentityProviderSpecIdentityProvidersBasicAuth',
    'SyncIdentityProviderSpecIdentityProvidersBasicAuthCa',
    'SyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientCert',
    'SyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientKey',
    'SyncIdentityProviderSpecIdentityProvidersGithub',
    'SyncIdentityProviderSpecIdentityProvidersGithubCa',
    'SyncIdentityProviderSpecIdentityProvidersGithubClientSecret',
    'SyncIdentityProviderSpecIdentityProvidersGitlab',
    'SyncIdentityProviderSpecIdentityProvidersGitlabCa',
    'SyncIdentityProviderSpecIdentityProvidersGitlabClientSecret',
    'SyncIdentityProviderSpecIdentityProvidersGoogle',
    'SyncIdentityProviderSpecIdentityProvidersGoogleClientSecret',
    'SyncIdentityProviderSpecIdentityProvidersHtpasswd',
    'SyncIdentityProviderSpecIdentityProvidersHtpasswdFileData',
    'SyncIdentityProviderSpecIdentityProvidersKeystone',
    'SyncIdentityProviderSpecIdentityProvidersKeystoneCa',
    'SyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientCert',
    'SyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientKey',
    'SyncIdentityProviderSpecIdentityProvidersLdap',
    'SyncIdentityProviderSpecIdentityProvidersLdapAttributes',
    'SyncIdentityProviderSpecIdentityProvidersLdapBindPassword',
    'SyncIdentityProviderSpecIdentityProvidersLdapCa',
    'SyncIdentityProviderSpecIdentityProvidersOpenID',
    'SyncIdentityProviderSpecIdentityProvidersOpenIDCa',
    'SyncIdentityProviderSpecIdentityProvidersOpenIDClaims',
    'SyncIdentityProviderSpecIdentityProvidersOpenIDClientSecret',
    'SyncIdentityProviderSpecIdentityProvidersRequestHeader',
    'SyncIdentityProviderSpecIdentityProvidersRequestHeaderCa',
    'SyncSetSpec',
    'SyncSetSpecClusterDeploymentRefs',
    'SyncSetSpecPatches',
    'SyncSetSpecSecretMappings',
    'SyncSetSpecSecretMappingsSourceRef',
    'SyncSetSpecSecretMappingsTargetRef',
]

@pulumi.output_type
class CheckpointSpec(dict):
    """
    CheckpointSpec defines the metadata around the Hive objects state in the namespace at the time of the last backup.
    """
    def __init__(__self__, *,
                 last_backup_checksum: str,
                 last_backup_ref: 'outputs.CheckpointSpecLastBackupRef',
                 last_backup_time: str):
        """
        CheckpointSpec defines the metadata around the Hive objects state in the namespace at the time of the last backup.
        :param str last_backup_checksum: LastBackupChecksum is the checksum of all Hive objects in the namespace at the time of the last backup.
        :param 'CheckpointSpecLastBackupRefArgs' last_backup_ref: LastBackupRef is a reference to last backup object created
        :param str last_backup_time: LastBackupTime is the last time we performed a backup of the namespace
        """
        pulumi.set(__self__, "last_backup_checksum", last_backup_checksum)
        pulumi.set(__self__, "last_backup_ref", last_backup_ref)
        pulumi.set(__self__, "last_backup_time", last_backup_time)

    @property
    @pulumi.getter(name="lastBackupChecksum")
    def last_backup_checksum(self) -> str:
        """
        LastBackupChecksum is the checksum of all Hive objects in the namespace at the time of the last backup.
        """
        return pulumi.get(self, "last_backup_checksum")

    @property
    @pulumi.getter(name="lastBackupRef")
    def last_backup_ref(self) -> 'outputs.CheckpointSpecLastBackupRef':
        """
        LastBackupRef is a reference to last backup object created
        """
        return pulumi.get(self, "last_backup_ref")

    @property
    @pulumi.getter(name="lastBackupTime")
    def last_backup_time(self) -> str:
        """
        LastBackupTime is the last time we performed a backup of the namespace
        """
        return pulumi.get(self, "last_backup_time")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CheckpointSpecLastBackupRef(dict):
    """
    LastBackupRef is a reference to last backup object created
    """
    def __init__(__self__, *,
                 name: str,
                 namespace: str):
        """
        LastBackupRef is a reference to last backup object created
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterClaimSpec(dict):
    """
    ClusterClaimSpec defines the desired state of the ClusterClaim.
    """
    def __init__(__self__, *,
                 cluster_pool_name: str,
                 lifetime: Optional[str] = None,
                 namespace: Optional[str] = None,
                 subjects: Optional[Sequence['outputs.ClusterClaimSpecSubjects']] = None):
        """
        ClusterClaimSpec defines the desired state of the ClusterClaim.
        :param str cluster_pool_name: ClusterPoolName is the name of the cluster pool from which to claim a cluster.
        :param str lifetime: Lifetime is the maximum lifetime of the claim after it is assigned a cluster. If the claim still exists when the lifetime has elapsed, the claim will be deleted by Hive.
        :param str namespace: Namespace is the namespace containing the ClusterDeployment (name will match the namespace) of the claimed cluster. This field will be set as soon as a suitable cluster can be found, however that cluster may still be resuming and not yet ready for use. Wait for the ClusterRunning condition to be true to avoid this issue.
        :param Sequence['ClusterClaimSpecSubjectsArgs'] subjects: Subjects hold references to which to authorize access to the claimed cluster.
        """
        pulumi.set(__self__, "cluster_pool_name", cluster_pool_name)
        if lifetime is not None:
            pulumi.set(__self__, "lifetime", lifetime)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if subjects is not None:
            pulumi.set(__self__, "subjects", subjects)

    @property
    @pulumi.getter(name="clusterPoolName")
    def cluster_pool_name(self) -> str:
        """
        ClusterPoolName is the name of the cluster pool from which to claim a cluster.
        """
        return pulumi.get(self, "cluster_pool_name")

    @property
    @pulumi.getter
    def lifetime(self) -> Optional[str]:
        """
        Lifetime is the maximum lifetime of the claim after it is assigned a cluster. If the claim still exists when the lifetime has elapsed, the claim will be deleted by Hive.
        """
        return pulumi.get(self, "lifetime")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the namespace containing the ClusterDeployment (name will match the namespace) of the claimed cluster. This field will be set as soon as a suitable cluster can be found, however that cluster may still be resuming and not yet ready for use. Wait for the ClusterRunning condition to be true to avoid this issue.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def subjects(self) -> Optional[Sequence['outputs.ClusterClaimSpecSubjects']]:
        """
        Subjects hold references to which to authorize access to the claimed cluster.
        """
        return pulumi.get(self, "subjects")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterClaimSpecSubjects(dict):
    """
    Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
    """
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 api_group: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
        :param str kind: Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
        :param str name: Name of the object being referenced.
        :param str api_group: APIGroup holds the API group of the referenced subject. Defaults to "" for ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
        :param str namespace: Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty the Authorizer should report an error.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if api_group is not None:
            pulumi.set(__self__, "api_group", api_group)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the object being referenced.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="apiGroup")
    def api_group(self) -> Optional[str]:
        """
        APIGroup holds the API group of the referenced subject. Defaults to "" for ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
        """
        return pulumi.get(self, "api_group")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty the Authorizer should report an error.
        """
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterClaimStatus(dict):
    """
    ClusterClaimStatus defines the observed state of ClusterClaim.
    """
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.ClusterClaimStatusConditions']] = None):
        """
        ClusterClaimStatus defines the observed state of ClusterClaim.
        :param Sequence['ClusterClaimStatusConditionsArgs'] conditions: Conditions includes more detailed status for the cluster pool.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ClusterClaimStatusConditions']]:
        """
        Conditions includes more detailed status for the cluster pool.
        """
        return pulumi.get(self, "conditions")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterClaimStatusConditions(dict):
    """
    ClusterClaimCondition contains details for the current condition of a cluster claim.
    """
    def __init__(__self__, *,
                 status: str,
                 type: str,
                 last_probe_time: Optional[str] = None,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        ClusterClaimCondition contains details for the current condition of a cluster claim.
        :param str status: Status is the status of the condition.
        :param str type: Type is the type of the condition.
        :param str last_probe_time: LastProbeTime is the last time we probed the condition.
        :param str last_transition_time: LastTransitionTime is the last time the condition transitioned from one status to another.
        :param str message: Message is a human-readable message indicating details about last transition.
        :param str reason: Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_probe_time is not None:
            pulumi.set(__self__, "last_probe_time", last_probe_time)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status is the status of the condition.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type is the type of the condition.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="lastProbeTime")
    def last_probe_time(self) -> Optional[str]:
        """
        LastProbeTime is the last time we probed the condition.
        """
        return pulumi.get(self, "last_probe_time")

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        """
        LastTransitionTime is the last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message is a human-readable message indicating details about last transition.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpec(dict):
    """
    ClusterDeploymentSpec defines the desired state of ClusterDeployment
    """
    def __init__(__self__, *,
                 base_domain: str,
                 cluster_name: str,
                 platform: 'outputs.ClusterDeploymentSpecPlatform',
                 certificate_bundles: Optional[Sequence['outputs.ClusterDeploymentSpecCertificateBundles']] = None,
                 cluster_metadata: Optional['outputs.ClusterDeploymentSpecClusterMetadata'] = None,
                 cluster_pool_ref: Optional['outputs.ClusterDeploymentSpecClusterPoolRef'] = None,
                 control_plane_config: Optional['outputs.ClusterDeploymentSpecControlPlaneConfig'] = None,
                 hibernate_after: Optional[str] = None,
                 ingress: Optional[Sequence['outputs.ClusterDeploymentSpecIngress']] = None,
                 install_attempts_limit: Optional[int] = None,
                 installed: Optional[bool] = None,
                 manage_dns: Optional[bool] = None,
                 power_state: Optional[str] = None,
                 preserve_on_delete: Optional[bool] = None,
                 provisioning: Optional['outputs.ClusterDeploymentSpecProvisioning'] = None,
                 pull_secret_ref: Optional['outputs.ClusterDeploymentSpecPullSecretRef'] = None):
        """
        ClusterDeploymentSpec defines the desired state of ClusterDeployment
        :param str base_domain: BaseDomain is the base domain to which the cluster should belong.
        :param str cluster_name: ClusterName is the friendly name of the cluster. It is used for subdomains, some resource tagging, and other instances where a friendly name for the cluster is useful.
        :param 'ClusterDeploymentSpecPlatformArgs' platform: Platform is the configuration for the specific platform upon which to perform the installation.
        :param Sequence['ClusterDeploymentSpecCertificateBundlesArgs'] certificate_bundles: CertificateBundles is a list of certificate bundles associated with this cluster
        :param 'ClusterDeploymentSpecClusterMetadataArgs' cluster_metadata: ClusterMetadata contains metadata information about the installed cluster.
        :param 'ClusterDeploymentSpecClusterPoolRefArgs' cluster_pool_ref: ClusterPoolRef is a reference to the ClusterPool that this ClusterDeployment originated from.
        :param 'ClusterDeploymentSpecControlPlaneConfigArgs' control_plane_config: ControlPlaneConfig contains additional configuration for the target cluster's control plane
        :param str hibernate_after: HibernateAfter will transition a cluster to hibernating power state after it has been running for the given duration. The time that a cluster has been running is the time since the cluster was installed or the time since the cluster last came out of hibernation.
        :param Sequence['ClusterDeploymentSpecIngressArgs'] ingress: Ingress allows defining desired clusteringress/shards to be configured on the cluster.
        :param int install_attempts_limit: InstallAttemptsLimit is the maximum number of times Hive will attempt to install the cluster.
        :param bool installed: Installed is true if the cluster has been installed
        :param bool manage_dns: ManageDNS specifies whether a DNSZone should be created and managed automatically for this ClusterDeployment
        :param str power_state: PowerState indicates whether a cluster should be running or hibernating. When omitted, PowerState defaults to the Running state.
        :param bool preserve_on_delete: PreserveOnDelete allows the user to disconnect a cluster from Hive without deprovisioning it
        :param 'ClusterDeploymentSpecProvisioningArgs' provisioning: Provisioning contains settings used only for initial cluster provisioning. May be unset in the case of adopted clusters.
        :param 'ClusterDeploymentSpecPullSecretRefArgs' pull_secret_ref: PullSecretRef is the reference to the secret to use when pulling images.
        """
        pulumi.set(__self__, "base_domain", base_domain)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "platform", platform)
        if certificate_bundles is not None:
            pulumi.set(__self__, "certificate_bundles", certificate_bundles)
        if cluster_metadata is not None:
            pulumi.set(__self__, "cluster_metadata", cluster_metadata)
        if cluster_pool_ref is not None:
            pulumi.set(__self__, "cluster_pool_ref", cluster_pool_ref)
        if control_plane_config is not None:
            pulumi.set(__self__, "control_plane_config", control_plane_config)
        if hibernate_after is not None:
            pulumi.set(__self__, "hibernate_after", hibernate_after)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if install_attempts_limit is not None:
            pulumi.set(__self__, "install_attempts_limit", install_attempts_limit)
        if installed is not None:
            pulumi.set(__self__, "installed", installed)
        if manage_dns is not None:
            pulumi.set(__self__, "manage_dns", manage_dns)
        if power_state is not None:
            pulumi.set(__self__, "power_state", power_state)
        if preserve_on_delete is not None:
            pulumi.set(__self__, "preserve_on_delete", preserve_on_delete)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if pull_secret_ref is not None:
            pulumi.set(__self__, "pull_secret_ref", pull_secret_ref)

    @property
    @pulumi.getter(name="baseDomain")
    def base_domain(self) -> str:
        """
        BaseDomain is the base domain to which the cluster should belong.
        """
        return pulumi.get(self, "base_domain")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        ClusterName is the friendly name of the cluster. It is used for subdomains, some resource tagging, and other instances where a friendly name for the cluster is useful.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def platform(self) -> 'outputs.ClusterDeploymentSpecPlatform':
        """
        Platform is the configuration for the specific platform upon which to perform the installation.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="certificateBundles")
    def certificate_bundles(self) -> Optional[Sequence['outputs.ClusterDeploymentSpecCertificateBundles']]:
        """
        CertificateBundles is a list of certificate bundles associated with this cluster
        """
        return pulumi.get(self, "certificate_bundles")

    @property
    @pulumi.getter(name="clusterMetadata")
    def cluster_metadata(self) -> Optional['outputs.ClusterDeploymentSpecClusterMetadata']:
        """
        ClusterMetadata contains metadata information about the installed cluster.
        """
        return pulumi.get(self, "cluster_metadata")

    @property
    @pulumi.getter(name="clusterPoolRef")
    def cluster_pool_ref(self) -> Optional['outputs.ClusterDeploymentSpecClusterPoolRef']:
        """
        ClusterPoolRef is a reference to the ClusterPool that this ClusterDeployment originated from.
        """
        return pulumi.get(self, "cluster_pool_ref")

    @property
    @pulumi.getter(name="controlPlaneConfig")
    def control_plane_config(self) -> Optional['outputs.ClusterDeploymentSpecControlPlaneConfig']:
        """
        ControlPlaneConfig contains additional configuration for the target cluster's control plane
        """
        return pulumi.get(self, "control_plane_config")

    @property
    @pulumi.getter(name="hibernateAfter")
    def hibernate_after(self) -> Optional[str]:
        """
        HibernateAfter will transition a cluster to hibernating power state after it has been running for the given duration. The time that a cluster has been running is the time since the cluster was installed or the time since the cluster last came out of hibernation.
        """
        return pulumi.get(self, "hibernate_after")

    @property
    @pulumi.getter
    def ingress(self) -> Optional[Sequence['outputs.ClusterDeploymentSpecIngress']]:
        """
        Ingress allows defining desired clusteringress/shards to be configured on the cluster.
        """
        return pulumi.get(self, "ingress")

    @property
    @pulumi.getter(name="installAttemptsLimit")
    def install_attempts_limit(self) -> Optional[int]:
        """
        InstallAttemptsLimit is the maximum number of times Hive will attempt to install the cluster.
        """
        return pulumi.get(self, "install_attempts_limit")

    @property
    @pulumi.getter
    def installed(self) -> Optional[bool]:
        """
        Installed is true if the cluster has been installed
        """
        return pulumi.get(self, "installed")

    @property
    @pulumi.getter(name="manageDNS")
    def manage_dns(self) -> Optional[bool]:
        """
        ManageDNS specifies whether a DNSZone should be created and managed automatically for this ClusterDeployment
        """
        return pulumi.get(self, "manage_dns")

    @property
    @pulumi.getter(name="powerState")
    def power_state(self) -> Optional[str]:
        """
        PowerState indicates whether a cluster should be running or hibernating. When omitted, PowerState defaults to the Running state.
        """
        return pulumi.get(self, "power_state")

    @property
    @pulumi.getter(name="preserveOnDelete")
    def preserve_on_delete(self) -> Optional[bool]:
        """
        PreserveOnDelete allows the user to disconnect a cluster from Hive without deprovisioning it
        """
        return pulumi.get(self, "preserve_on_delete")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional['outputs.ClusterDeploymentSpecProvisioning']:
        """
        Provisioning contains settings used only for initial cluster provisioning. May be unset in the case of adopted clusters.
        """
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter(name="pullSecretRef")
    def pull_secret_ref(self) -> Optional['outputs.ClusterDeploymentSpecPullSecretRef']:
        """
        PullSecretRef is the reference to the secret to use when pulling images.
        """
        return pulumi.get(self, "pull_secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecCertificateBundles(dict):
    """
    CertificateBundleSpec specifies a certificate bundle associated with a cluster deployment
    """
    def __init__(__self__, *,
                 certificate_secret_ref: 'outputs.ClusterDeploymentSpecCertificateBundlesCertificateSecretRef',
                 name: str,
                 generate: Optional[bool] = None):
        """
        CertificateBundleSpec specifies a certificate bundle associated with a cluster deployment
        :param 'ClusterDeploymentSpecCertificateBundlesCertificateSecretRefArgs' certificate_secret_ref: CertificateSecretRef is the reference to the secret that contains the certificate bundle. If the certificate bundle is to be generated, it will be generated with the name in this reference. Otherwise, it is expected that the secret should exist in the same namespace as the ClusterDeployment
        :param str name: Name is an identifier that must be unique within the bundle and must be referenced by an ingress or by the control plane serving certs
        :param bool generate: Generate indicates whether this bundle should have real certificates generated for it.
        """
        pulumi.set(__self__, "certificate_secret_ref", certificate_secret_ref)
        pulumi.set(__self__, "name", name)
        if generate is not None:
            pulumi.set(__self__, "generate", generate)

    @property
    @pulumi.getter(name="certificateSecretRef")
    def certificate_secret_ref(self) -> 'outputs.ClusterDeploymentSpecCertificateBundlesCertificateSecretRef':
        """
        CertificateSecretRef is the reference to the secret that contains the certificate bundle. If the certificate bundle is to be generated, it will be generated with the name in this reference. Otherwise, it is expected that the secret should exist in the same namespace as the ClusterDeployment
        """
        return pulumi.get(self, "certificate_secret_ref")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is an identifier that must be unique within the bundle and must be referenced by an ingress or by the control plane serving certs
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def generate(self) -> Optional[bool]:
        """
        Generate indicates whether this bundle should have real certificates generated for it.
        """
        return pulumi.get(self, "generate")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecCertificateBundlesCertificateSecretRef(dict):
    """
    CertificateSecretRef is the reference to the secret that contains the certificate bundle. If the certificate bundle is to be generated, it will be generated with the name in this reference. Otherwise, it is expected that the secret should exist in the same namespace as the ClusterDeployment
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CertificateSecretRef is the reference to the secret that contains the certificate bundle. If the certificate bundle is to be generated, it will be generated with the name in this reference. Otherwise, it is expected that the secret should exist in the same namespace as the ClusterDeployment
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecClusterMetadata(dict):
    """
    ClusterMetadata contains metadata information about the installed cluster.
    """
    def __init__(__self__, *,
                 admin_kubeconfig_secret_ref: 'outputs.ClusterDeploymentSpecClusterMetadataAdminKubeconfigSecretRef',
                 admin_password_secret_ref: 'outputs.ClusterDeploymentSpecClusterMetadataAdminPasswordSecretRef',
                 cluster_id: str,
                 infra_id: str):
        """
        ClusterMetadata contains metadata information about the installed cluster.
        :param 'ClusterDeploymentSpecClusterMetadataAdminKubeconfigSecretRefArgs' admin_kubeconfig_secret_ref: AdminKubeconfigSecretRef references the secret containing the admin kubeconfig for this cluster.
        :param 'ClusterDeploymentSpecClusterMetadataAdminPasswordSecretRefArgs' admin_password_secret_ref: AdminPasswordSecretRef references the secret containing the admin username/password which can be used to login to this cluster.
        :param str cluster_id: ClusterID is a globally unique identifier for this cluster generated during installation. Used for reporting metrics among other places.
        :param str infra_id: InfraID is an identifier for this cluster generated during installation and used for tagging/naming resources in cloud providers.
        """
        pulumi.set(__self__, "admin_kubeconfig_secret_ref", admin_kubeconfig_secret_ref)
        pulumi.set(__self__, "admin_password_secret_ref", admin_password_secret_ref)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "infra_id", infra_id)

    @property
    @pulumi.getter(name="adminKubeconfigSecretRef")
    def admin_kubeconfig_secret_ref(self) -> 'outputs.ClusterDeploymentSpecClusterMetadataAdminKubeconfigSecretRef':
        """
        AdminKubeconfigSecretRef references the secret containing the admin kubeconfig for this cluster.
        """
        return pulumi.get(self, "admin_kubeconfig_secret_ref")

    @property
    @pulumi.getter(name="adminPasswordSecretRef")
    def admin_password_secret_ref(self) -> 'outputs.ClusterDeploymentSpecClusterMetadataAdminPasswordSecretRef':
        """
        AdminPasswordSecretRef references the secret containing the admin username/password which can be used to login to this cluster.
        """
        return pulumi.get(self, "admin_password_secret_ref")

    @property
    @pulumi.getter(name="clusterID")
    def cluster_id(self) -> str:
        """
        ClusterID is a globally unique identifier for this cluster generated during installation. Used for reporting metrics among other places.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="infraID")
    def infra_id(self) -> str:
        """
        InfraID is an identifier for this cluster generated during installation and used for tagging/naming resources in cloud providers.
        """
        return pulumi.get(self, "infra_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecClusterMetadataAdminKubeconfigSecretRef(dict):
    """
    AdminKubeconfigSecretRef references the secret containing the admin kubeconfig for this cluster.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        AdminKubeconfigSecretRef references the secret containing the admin kubeconfig for this cluster.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecClusterMetadataAdminPasswordSecretRef(dict):
    """
    AdminPasswordSecretRef references the secret containing the admin username/password which can be used to login to this cluster.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        AdminPasswordSecretRef references the secret containing the admin username/password which can be used to login to this cluster.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecClusterPoolRef(dict):
    """
    ClusterPoolRef is a reference to the ClusterPool that this ClusterDeployment originated from.
    """
    def __init__(__self__, *,
                 namespace: str,
                 pool_name: str,
                 claim_name: Optional[str] = None):
        """
        ClusterPoolRef is a reference to the ClusterPool that this ClusterDeployment originated from.
        :param str namespace: Namespace is the namespace where the ClusterPool resides.
        :param str pool_name: PoolName is the name of the ClusterPool for which the cluster was created.
        :param str claim_name: ClaimName is the name of the ClusterClaim that claimed the cluster from the pool.
        """
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "pool_name", pool_name)
        if claim_name is not None:
            pulumi.set(__self__, "claim_name", claim_name)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace is the namespace where the ClusterPool resides.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="poolName")
    def pool_name(self) -> str:
        """
        PoolName is the name of the ClusterPool for which the cluster was created.
        """
        return pulumi.get(self, "pool_name")

    @property
    @pulumi.getter(name="claimName")
    def claim_name(self) -> Optional[str]:
        """
        ClaimName is the name of the ClusterClaim that claimed the cluster from the pool.
        """
        return pulumi.get(self, "claim_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecControlPlaneConfig(dict):
    """
    ControlPlaneConfig contains additional configuration for the target cluster's control plane
    """
    def __init__(__self__, *,
                 api_url_override: Optional[str] = None,
                 serving_certificates: Optional['outputs.ClusterDeploymentSpecControlPlaneConfigServingCertificates'] = None):
        """
        ControlPlaneConfig contains additional configuration for the target cluster's control plane
        :param str api_url_override: APIURLOverride is the optional URL override to which Hive will transition for communication with the API server of the remote cluster. When a remote cluster is created, Hive will initially communicate using the API URL established during installation. If an API URL Override is specified, Hive will periodically attempt to connect to the remote cluster using the override URL. Once Hive has determined that the override URL is active, Hive will use the override URL for further communications with the API server of the remote cluster.
        :param 'ClusterDeploymentSpecControlPlaneConfigServingCertificatesArgs' serving_certificates: ServingCertificates specifies serving certificates for the control plane
        """
        if api_url_override is not None:
            pulumi.set(__self__, "api_url_override", api_url_override)
        if serving_certificates is not None:
            pulumi.set(__self__, "serving_certificates", serving_certificates)

    @property
    @pulumi.getter(name="apiURLOverride")
    def api_url_override(self) -> Optional[str]:
        """
        APIURLOverride is the optional URL override to which Hive will transition for communication with the API server of the remote cluster. When a remote cluster is created, Hive will initially communicate using the API URL established during installation. If an API URL Override is specified, Hive will periodically attempt to connect to the remote cluster using the override URL. Once Hive has determined that the override URL is active, Hive will use the override URL for further communications with the API server of the remote cluster.
        """
        return pulumi.get(self, "api_url_override")

    @property
    @pulumi.getter(name="servingCertificates")
    def serving_certificates(self) -> Optional['outputs.ClusterDeploymentSpecControlPlaneConfigServingCertificates']:
        """
        ServingCertificates specifies serving certificates for the control plane
        """
        return pulumi.get(self, "serving_certificates")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecControlPlaneConfigServingCertificates(dict):
    """
    ServingCertificates specifies serving certificates for the control plane
    """
    def __init__(__self__, *,
                 additional: Optional[Sequence['outputs.ClusterDeploymentSpecControlPlaneConfigServingCertificatesAdditional']] = None,
                 default: Optional[str] = None):
        """
        ServingCertificates specifies serving certificates for the control plane
        :param Sequence['ClusterDeploymentSpecControlPlaneConfigServingCertificatesAdditionalArgs'] additional: Additional is a list of additional domains and certificates that are also associated with the control plane's api endpoint.
        :param str default: Default references the name of a CertificateBundle in the ClusterDeployment that should be used for the control plane's default endpoint.
        """
        if additional is not None:
            pulumi.set(__self__, "additional", additional)
        if default is not None:
            pulumi.set(__self__, "default", default)

    @property
    @pulumi.getter
    def additional(self) -> Optional[Sequence['outputs.ClusterDeploymentSpecControlPlaneConfigServingCertificatesAdditional']]:
        """
        Additional is a list of additional domains and certificates that are also associated with the control plane's api endpoint.
        """
        return pulumi.get(self, "additional")

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        """
        Default references the name of a CertificateBundle in the ClusterDeployment that should be used for the control plane's default endpoint.
        """
        return pulumi.get(self, "default")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecControlPlaneConfigServingCertificatesAdditional(dict):
    """
    ControlPlaneAdditionalCertificate defines an additional serving certificate for a control plane
    """
    def __init__(__self__, *,
                 domain: str,
                 name: str):
        """
        ControlPlaneAdditionalCertificate defines an additional serving certificate for a control plane
        :param str domain: Domain is the domain of the additional control plane certificate
        :param str name: Name references a CertificateBundle in the ClusterDeployment.Spec that should be used for this additional certificate.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        Domain is the domain of the additional control plane certificate
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name references a CertificateBundle in the ClusterDeployment.Spec that should be used for this additional certificate.
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecIngress(dict):
    """
    ClusterIngress contains the configurable pieces for any ClusterIngress objects that should exist on the cluster.
    """
    def __init__(__self__, *,
                 domain: str,
                 name: str,
                 namespace_selector: Optional['outputs.ClusterDeploymentSpecIngressNamespaceSelector'] = None,
                 route_selector: Optional['outputs.ClusterDeploymentSpecIngressRouteSelector'] = None,
                 serving_certificate: Optional[str] = None):
        """
        ClusterIngress contains the configurable pieces for any ClusterIngress objects that should exist on the cluster.
        :param str domain: Domain (sometimes referred to as shard) is the full DNS suffix that the resulting IngressController object will service (eg abcd.mycluster.mydomain.com).
        :param str name: Name of the ClusterIngress object to create.
        :param 'ClusterDeploymentSpecIngressNamespaceSelectorArgs' namespace_selector: NamespaceSelector allows filtering the list of namespaces serviced by the ingress controller.
        :param 'ClusterDeploymentSpecIngressRouteSelectorArgs' route_selector: RouteSelector allows filtering the set of Routes serviced by the ingress controller
        :param str serving_certificate: ServingCertificate references a CertificateBundle in the ClusterDeployment.Spec that should be used for this Ingress
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "name", name)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if route_selector is not None:
            pulumi.set(__self__, "route_selector", route_selector)
        if serving_certificate is not None:
            pulumi.set(__self__, "serving_certificate", serving_certificate)

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        Domain (sometimes referred to as shard) is the full DNS suffix that the resulting IngressController object will service (eg abcd.mycluster.mydomain.com).
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the ClusterIngress object to create.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(self) -> Optional['outputs.ClusterDeploymentSpecIngressNamespaceSelector']:
        """
        NamespaceSelector allows filtering the list of namespaces serviced by the ingress controller.
        """
        return pulumi.get(self, "namespace_selector")

    @property
    @pulumi.getter(name="routeSelector")
    def route_selector(self) -> Optional['outputs.ClusterDeploymentSpecIngressRouteSelector']:
        """
        RouteSelector allows filtering the set of Routes serviced by the ingress controller
        """
        return pulumi.get(self, "route_selector")

    @property
    @pulumi.getter(name="servingCertificate")
    def serving_certificate(self) -> Optional[str]:
        """
        ServingCertificate references a CertificateBundle in the ClusterDeployment.Spec that should be used for this Ingress
        """
        return pulumi.get(self, "serving_certificate")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecIngressNamespaceSelector(dict):
    """
    NamespaceSelector allows filtering the list of namespaces serviced by the ingress controller.
    """
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ClusterDeploymentSpecIngressNamespaceSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        NamespaceSelector allows filtering the list of namespaces serviced by the ingress controller.
        :param Sequence['ClusterDeploymentSpecIngressNamespaceSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ClusterDeploymentSpecIngressNamespaceSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecIngressNamespaceSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecIngressRouteSelector(dict):
    """
    RouteSelector allows filtering the set of Routes serviced by the ingress controller
    """
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ClusterDeploymentSpecIngressRouteSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        RouteSelector allows filtering the set of Routes serviced by the ingress controller
        :param Sequence['ClusterDeploymentSpecIngressRouteSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ClusterDeploymentSpecIngressRouteSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecIngressRouteSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecPlatform(dict):
    """
    Platform is the configuration for the specific platform upon which to perform the installation.
    """
    def __init__(__self__, *,
                 aws: Optional['outputs.ClusterDeploymentSpecPlatformAws'] = None,
                 azure: Optional['outputs.ClusterDeploymentSpecPlatformAzure'] = None,
                 baremetal: Optional['outputs.ClusterDeploymentSpecPlatformBaremetal'] = None,
                 gcp: Optional['outputs.ClusterDeploymentSpecPlatformGcp'] = None,
                 openstack: Optional['outputs.ClusterDeploymentSpecPlatformOpenstack'] = None,
                 ovirt: Optional['outputs.ClusterDeploymentSpecPlatformOvirt'] = None,
                 vsphere: Optional['outputs.ClusterDeploymentSpecPlatformVsphere'] = None):
        """
        Platform is the configuration for the specific platform upon which to perform the installation.
        :param 'ClusterDeploymentSpecPlatformAwsArgs' aws: AWS is the configuration used when installing on AWS.
        :param 'ClusterDeploymentSpecPlatformAzureArgs' azure: Azure is the configuration used when installing on Azure.
        :param 'ClusterDeploymentSpecPlatformBaremetalArgs' baremetal: BareMetal is the configuration used when installing on bare metal.
        :param 'ClusterDeploymentSpecPlatformGcpArgs' gcp: GCP is the configuration used when installing on Google Cloud Platform.
        :param 'ClusterDeploymentSpecPlatformOpenstackArgs' openstack: OpenStack is the configuration used when installing on OpenStack
        :param 'ClusterDeploymentSpecPlatformOvirtArgs' ovirt: Ovirt is the configuration used when installing on oVirt
        :param 'ClusterDeploymentSpecPlatformVsphereArgs' vsphere: VSphere is the configuration used when installing on vSphere
        """
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if baremetal is not None:
            pulumi.set(__self__, "baremetal", baremetal)
        if gcp is not None:
            pulumi.set(__self__, "gcp", gcp)
        if openstack is not None:
            pulumi.set(__self__, "openstack", openstack)
        if ovirt is not None:
            pulumi.set(__self__, "ovirt", ovirt)
        if vsphere is not None:
            pulumi.set(__self__, "vsphere", vsphere)

    @property
    @pulumi.getter
    def aws(self) -> Optional['outputs.ClusterDeploymentSpecPlatformAws']:
        """
        AWS is the configuration used when installing on AWS.
        """
        return pulumi.get(self, "aws")

    @property
    @pulumi.getter
    def azure(self) -> Optional['outputs.ClusterDeploymentSpecPlatformAzure']:
        """
        Azure is the configuration used when installing on Azure.
        """
        return pulumi.get(self, "azure")

    @property
    @pulumi.getter
    def baremetal(self) -> Optional['outputs.ClusterDeploymentSpecPlatformBaremetal']:
        """
        BareMetal is the configuration used when installing on bare metal.
        """
        return pulumi.get(self, "baremetal")

    @property
    @pulumi.getter
    def gcp(self) -> Optional['outputs.ClusterDeploymentSpecPlatformGcp']:
        """
        GCP is the configuration used when installing on Google Cloud Platform.
        """
        return pulumi.get(self, "gcp")

    @property
    @pulumi.getter
    def openstack(self) -> Optional['outputs.ClusterDeploymentSpecPlatformOpenstack']:
        """
        OpenStack is the configuration used when installing on OpenStack
        """
        return pulumi.get(self, "openstack")

    @property
    @pulumi.getter
    def ovirt(self) -> Optional['outputs.ClusterDeploymentSpecPlatformOvirt']:
        """
        Ovirt is the configuration used when installing on oVirt
        """
        return pulumi.get(self, "ovirt")

    @property
    @pulumi.getter
    def vsphere(self) -> Optional['outputs.ClusterDeploymentSpecPlatformVsphere']:
        """
        VSphere is the configuration used when installing on vSphere
        """
        return pulumi.get(self, "vsphere")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecPlatformAws(dict):
    """
    AWS is the configuration used when installing on AWS.
    """
    def __init__(__self__, *,
                 credentials_secret_ref: 'outputs.ClusterDeploymentSpecPlatformAwsCredentialsSecretRef',
                 region: str,
                 user_tags: Optional[Mapping[str, str]] = None):
        """
        AWS is the configuration used when installing on AWS.
        :param 'ClusterDeploymentSpecPlatformAwsCredentialsSecretRefArgs' credentials_secret_ref: CredentialsSecretRef refers to a secret that contains the AWS account access credentials.
        :param str region: Region specifies the AWS region where the cluster will be created.
        :param Mapping[str, str] user_tags: UserTags specifies additional tags for AWS resources created for the cluster.
        """
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        pulumi.set(__self__, "region", region)
        if user_tags is not None:
            pulumi.set(__self__, "user_tags", user_tags)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> 'outputs.ClusterDeploymentSpecPlatformAwsCredentialsSecretRef':
        """
        CredentialsSecretRef refers to a secret that contains the AWS account access credentials.
        """
        return pulumi.get(self, "credentials_secret_ref")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region specifies the AWS region where the cluster will be created.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="userTags")
    def user_tags(self) -> Optional[Mapping[str, str]]:
        """
        UserTags specifies additional tags for AWS resources created for the cluster.
        """
        return pulumi.get(self, "user_tags")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecPlatformAwsCredentialsSecretRef(dict):
    """
    CredentialsSecretRef refers to a secret that contains the AWS account access credentials.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CredentialsSecretRef refers to a secret that contains the AWS account access credentials.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecPlatformAzure(dict):
    """
    Azure is the configuration used when installing on Azure.
    """
    def __init__(__self__, *,
                 credentials_secret_ref: 'outputs.ClusterDeploymentSpecPlatformAzureCredentialsSecretRef',
                 region: str,
                 base_domain_resource_group_name: Optional[str] = None):
        """
        Azure is the configuration used when installing on Azure.
        :param 'ClusterDeploymentSpecPlatformAzureCredentialsSecretRefArgs' credentials_secret_ref: CredentialsSecretRef refers to a secret that contains the Azure account access credentials.
        :param str region: Region specifies the Azure region where the cluster will be created.
        :param str base_domain_resource_group_name: BaseDomainResourceGroupName specifies the resource group where the azure DNS zone for the base domain is found
        """
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        pulumi.set(__self__, "region", region)
        if base_domain_resource_group_name is not None:
            pulumi.set(__self__, "base_domain_resource_group_name", base_domain_resource_group_name)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> 'outputs.ClusterDeploymentSpecPlatformAzureCredentialsSecretRef':
        """
        CredentialsSecretRef refers to a secret that contains the Azure account access credentials.
        """
        return pulumi.get(self, "credentials_secret_ref")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region specifies the Azure region where the cluster will be created.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="baseDomainResourceGroupName")
    def base_domain_resource_group_name(self) -> Optional[str]:
        """
        BaseDomainResourceGroupName specifies the resource group where the azure DNS zone for the base domain is found
        """
        return pulumi.get(self, "base_domain_resource_group_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecPlatformAzureCredentialsSecretRef(dict):
    """
    CredentialsSecretRef refers to a secret that contains the Azure account access credentials.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CredentialsSecretRef refers to a secret that contains the Azure account access credentials.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecPlatformBaremetal(dict):
    """
    BareMetal is the configuration used when installing on bare metal.
    """
    def __init__(__self__, *,
                 libvirt_ssh_private_key_secret_ref: 'outputs.ClusterDeploymentSpecPlatformBaremetalLibvirtSSHPrivateKeySecretRef'):
        """
        BareMetal is the configuration used when installing on bare metal.
        :param 'ClusterDeploymentSpecPlatformBaremetalLibvirtSSHPrivateKeySecretRefArgs' libvirt_ssh_private_key_secret_ref: LibvirtSSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to the libvirt provisioning host. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
        """
        pulumi.set(__self__, "libvirt_ssh_private_key_secret_ref", libvirt_ssh_private_key_secret_ref)

    @property
    @pulumi.getter(name="libvirtSSHPrivateKeySecretRef")
    def libvirt_ssh_private_key_secret_ref(self) -> 'outputs.ClusterDeploymentSpecPlatformBaremetalLibvirtSSHPrivateKeySecretRef':
        """
        LibvirtSSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to the libvirt provisioning host. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
        """
        return pulumi.get(self, "libvirt_ssh_private_key_secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecPlatformBaremetalLibvirtSSHPrivateKeySecretRef(dict):
    """
    LibvirtSSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to the libvirt provisioning host. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        LibvirtSSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to the libvirt provisioning host. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecPlatformGcp(dict):
    """
    GCP is the configuration used when installing on Google Cloud Platform.
    """
    def __init__(__self__, *,
                 credentials_secret_ref: 'outputs.ClusterDeploymentSpecPlatformGcpCredentialsSecretRef',
                 region: str):
        """
        GCP is the configuration used when installing on Google Cloud Platform.
        :param 'ClusterDeploymentSpecPlatformGcpCredentialsSecretRefArgs' credentials_secret_ref: CredentialsSecretRef refers to a secret that contains the GCP account access credentials.
        :param str region: Region specifies the GCP region where the cluster will be created.
        """
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> 'outputs.ClusterDeploymentSpecPlatformGcpCredentialsSecretRef':
        """
        CredentialsSecretRef refers to a secret that contains the GCP account access credentials.
        """
        return pulumi.get(self, "credentials_secret_ref")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region specifies the GCP region where the cluster will be created.
        """
        return pulumi.get(self, "region")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecPlatformGcpCredentialsSecretRef(dict):
    """
    CredentialsSecretRef refers to a secret that contains the GCP account access credentials.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CredentialsSecretRef refers to a secret that contains the GCP account access credentials.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecPlatformOpenstack(dict):
    """
    OpenStack is the configuration used when installing on OpenStack
    """
    def __init__(__self__, *,
                 cloud: str,
                 credentials_secret_ref: 'outputs.ClusterDeploymentSpecPlatformOpenstackCredentialsSecretRef',
                 certificates_secret_ref: Optional['outputs.ClusterDeploymentSpecPlatformOpenstackCertificatesSecretRef'] = None,
                 trunk_support: Optional[bool] = None):
        """
        OpenStack is the configuration used when installing on OpenStack
        :param str cloud: Cloud will be used to indicate the OS_CLOUD value to use the right section from the clouds.yaml in the CredentialsSecretRef.
        :param 'ClusterDeploymentSpecPlatformOpenstackCredentialsSecretRefArgs' credentials_secret_ref: CredentialsSecretRef refers to a secret that contains the OpenStack account access credentials.
        :param 'ClusterDeploymentSpecPlatformOpenstackCertificatesSecretRefArgs' certificates_secret_ref: CertificatesSecretRef refers to a secret that contains CA certificates necessary for communicating with the OpenStack. There is additional configuration required for the OpenShift cluster to trust the certificates provided in this secret. The "clouds.yaml" file included in the credentialsSecretRef Secret must also include a reference to the certificate bundle file for the OpenShift cluster being created to trust the OpenStack endpoints. The "clouds.yaml" file must set the "cacert" field to either "/etc/openstack-ca/<key name containing the trust bundle in credentialsSecretRef Secret>" or "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem". 
                For example, \"\"\"clouds.yaml clouds:   shiftstack:     auth: ...     cacert: "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem" \"\"\"
        :param bool trunk_support: TrunkSupport indicates whether or not to use trunk ports in your OpenShift cluster.
        """
        pulumi.set(__self__, "cloud", cloud)
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        if certificates_secret_ref is not None:
            pulumi.set(__self__, "certificates_secret_ref", certificates_secret_ref)
        if trunk_support is not None:
            pulumi.set(__self__, "trunk_support", trunk_support)

    @property
    @pulumi.getter
    def cloud(self) -> str:
        """
        Cloud will be used to indicate the OS_CLOUD value to use the right section from the clouds.yaml in the CredentialsSecretRef.
        """
        return pulumi.get(self, "cloud")

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> 'outputs.ClusterDeploymentSpecPlatformOpenstackCredentialsSecretRef':
        """
        CredentialsSecretRef refers to a secret that contains the OpenStack account access credentials.
        """
        return pulumi.get(self, "credentials_secret_ref")

    @property
    @pulumi.getter(name="certificatesSecretRef")
    def certificates_secret_ref(self) -> Optional['outputs.ClusterDeploymentSpecPlatformOpenstackCertificatesSecretRef']:
        """
        CertificatesSecretRef refers to a secret that contains CA certificates necessary for communicating with the OpenStack. There is additional configuration required for the OpenShift cluster to trust the certificates provided in this secret. The "clouds.yaml" file included in the credentialsSecretRef Secret must also include a reference to the certificate bundle file for the OpenShift cluster being created to trust the OpenStack endpoints. The "clouds.yaml" file must set the "cacert" field to either "/etc/openstack-ca/<key name containing the trust bundle in credentialsSecretRef Secret>" or "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem". 
         For example, \"\"\"clouds.yaml clouds:   shiftstack:     auth: ...     cacert: "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem" \"\"\"
        """
        return pulumi.get(self, "certificates_secret_ref")

    @property
    @pulumi.getter(name="trunkSupport")
    def trunk_support(self) -> Optional[bool]:
        """
        TrunkSupport indicates whether or not to use trunk ports in your OpenShift cluster.
        """
        return pulumi.get(self, "trunk_support")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecPlatformOpenstackCertificatesSecretRef(dict):
    """
    CertificatesSecretRef refers to a secret that contains CA certificates necessary for communicating with the OpenStack. There is additional configuration required for the OpenShift cluster to trust the certificates provided in this secret. The "clouds.yaml" file included in the credentialsSecretRef Secret must also include a reference to the certificate bundle file for the OpenShift cluster being created to trust the OpenStack endpoints. The "clouds.yaml" file must set the "cacert" field to either "/etc/openstack-ca/<key name containing the trust bundle in credentialsSecretRef Secret>" or "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem". 
     For example, \"\"\"clouds.yaml clouds:   shiftstack:     auth: ...     cacert: "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem" \"\"\"
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CertificatesSecretRef refers to a secret that contains CA certificates necessary for communicating with the OpenStack. There is additional configuration required for the OpenShift cluster to trust the certificates provided in this secret. The "clouds.yaml" file included in the credentialsSecretRef Secret must also include a reference to the certificate bundle file for the OpenShift cluster being created to trust the OpenStack endpoints. The "clouds.yaml" file must set the "cacert" field to either "/etc/openstack-ca/<key name containing the trust bundle in credentialsSecretRef Secret>" or "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem". 
         For example, \"\"\"clouds.yaml clouds:   shiftstack:     auth: ...     cacert: "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem" \"\"\"
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecPlatformOpenstackCredentialsSecretRef(dict):
    """
    CredentialsSecretRef refers to a secret that contains the OpenStack account access credentials.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CredentialsSecretRef refers to a secret that contains the OpenStack account access credentials.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecPlatformOvirt(dict):
    """
    Ovirt is the configuration used when installing on oVirt
    """
    def __init__(__self__, *,
                 certificates_secret_ref: 'outputs.ClusterDeploymentSpecPlatformOvirtCertificatesSecretRef',
                 credentials_secret_ref: 'outputs.ClusterDeploymentSpecPlatformOvirtCredentialsSecretRef',
                 ovirt_cluster_id: str,
                 storage_domain_id: str,
                 ovirt_network_name: Optional[str] = None):
        """
        Ovirt is the configuration used when installing on oVirt
        :param 'ClusterDeploymentSpecPlatformOvirtCertificatesSecretRefArgs' certificates_secret_ref: CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with oVirt.
        :param 'ClusterDeploymentSpecPlatformOvirtCredentialsSecretRefArgs' credentials_secret_ref: CredentialsSecretRef refers to a secret that contains the oVirt account access credentials with fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
        :param str ovirt_cluster_id: The target cluster under which all VMs will run
        :param str storage_domain_id: The target storage domain under which all VM disk would be created.
        :param str ovirt_network_name: The target network of all the network interfaces of the nodes. Omitting defaults to ovirtmgmt network which is a default network for evert ovirt cluster.
        """
        pulumi.set(__self__, "certificates_secret_ref", certificates_secret_ref)
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        pulumi.set(__self__, "ovirt_cluster_id", ovirt_cluster_id)
        pulumi.set(__self__, "storage_domain_id", storage_domain_id)
        if ovirt_network_name is not None:
            pulumi.set(__self__, "ovirt_network_name", ovirt_network_name)

    @property
    @pulumi.getter(name="certificatesSecretRef")
    def certificates_secret_ref(self) -> 'outputs.ClusterDeploymentSpecPlatformOvirtCertificatesSecretRef':
        """
        CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with oVirt.
        """
        return pulumi.get(self, "certificates_secret_ref")

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> 'outputs.ClusterDeploymentSpecPlatformOvirtCredentialsSecretRef':
        """
        CredentialsSecretRef refers to a secret that contains the oVirt account access credentials with fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
        """
        return pulumi.get(self, "credentials_secret_ref")

    @property
    @pulumi.getter
    def ovirt_cluster_id(self) -> str:
        """
        The target cluster under which all VMs will run
        """
        return pulumi.get(self, "ovirt_cluster_id")

    @property
    @pulumi.getter
    def storage_domain_id(self) -> str:
        """
        The target storage domain under which all VM disk would be created.
        """
        return pulumi.get(self, "storage_domain_id")

    @property
    @pulumi.getter
    def ovirt_network_name(self) -> Optional[str]:
        """
        The target network of all the network interfaces of the nodes. Omitting defaults to ovirtmgmt network which is a default network for evert ovirt cluster.
        """
        return pulumi.get(self, "ovirt_network_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecPlatformOvirtCertificatesSecretRef(dict):
    """
    CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with oVirt.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with oVirt.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecPlatformOvirtCredentialsSecretRef(dict):
    """
    CredentialsSecretRef refers to a secret that contains the oVirt account access credentials with fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CredentialsSecretRef refers to a secret that contains the oVirt account access credentials with fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecPlatformVsphere(dict):
    """
    VSphere is the configuration used when installing on vSphere
    """
    def __init__(__self__, *,
                 certificates_secret_ref: 'outputs.ClusterDeploymentSpecPlatformVsphereCertificatesSecretRef',
                 credentials_secret_ref: 'outputs.ClusterDeploymentSpecPlatformVsphereCredentialsSecretRef',
                 datacenter: str,
                 default_datastore: str,
                 v_center: str,
                 cluster: Optional[str] = None,
                 folder: Optional[str] = None,
                 network: Optional[str] = None):
        """
        VSphere is the configuration used when installing on vSphere
        :param 'ClusterDeploymentSpecPlatformVsphereCertificatesSecretRefArgs' certificates_secret_ref: CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
        :param 'ClusterDeploymentSpecPlatformVsphereCredentialsSecretRefArgs' credentials_secret_ref: CredentialsSecretRef refers to a secret that contains the vSphere account access credentials: GOVC_USERNAME, GOVC_PASSWORD fields.
        :param str datacenter: Datacenter is the name of the datacenter to use in the vCenter.
        :param str default_datastore: DefaultDatastore is the default datastore to use for provisioning volumes.
        :param str v_center: VCenter is the domain name or IP address of the vCenter.
        :param str cluster: Cluster is the name of the cluster virtual machines will be cloned into.
        :param str folder: Folder is the name of the folder that will be used and/or created for virtual machines.
        :param str network: Network specifies the name of the network to be used by the cluster.
        """
        pulumi.set(__self__, "certificates_secret_ref", certificates_secret_ref)
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        pulumi.set(__self__, "datacenter", datacenter)
        pulumi.set(__self__, "default_datastore", default_datastore)
        pulumi.set(__self__, "v_center", v_center)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if network is not None:
            pulumi.set(__self__, "network", network)

    @property
    @pulumi.getter(name="certificatesSecretRef")
    def certificates_secret_ref(self) -> 'outputs.ClusterDeploymentSpecPlatformVsphereCertificatesSecretRef':
        """
        CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
        """
        return pulumi.get(self, "certificates_secret_ref")

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> 'outputs.ClusterDeploymentSpecPlatformVsphereCredentialsSecretRef':
        """
        CredentialsSecretRef refers to a secret that contains the vSphere account access credentials: GOVC_USERNAME, GOVC_PASSWORD fields.
        """
        return pulumi.get(self, "credentials_secret_ref")

    @property
    @pulumi.getter
    def datacenter(self) -> str:
        """
        Datacenter is the name of the datacenter to use in the vCenter.
        """
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter(name="defaultDatastore")
    def default_datastore(self) -> str:
        """
        DefaultDatastore is the default datastore to use for provisioning volumes.
        """
        return pulumi.get(self, "default_datastore")

    @property
    @pulumi.getter(name="vCenter")
    def v_center(self) -> str:
        """
        VCenter is the domain name or IP address of the vCenter.
        """
        return pulumi.get(self, "v_center")

    @property
    @pulumi.getter
    def cluster(self) -> Optional[str]:
        """
        Cluster is the name of the cluster virtual machines will be cloned into.
        """
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter
    def folder(self) -> Optional[str]:
        """
        Folder is the name of the folder that will be used and/or created for virtual machines.
        """
        return pulumi.get(self, "folder")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        """
        Network specifies the name of the network to be used by the cluster.
        """
        return pulumi.get(self, "network")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecPlatformVsphereCertificatesSecretRef(dict):
    """
    CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecPlatformVsphereCredentialsSecretRef(dict):
    """
    CredentialsSecretRef refers to a secret that contains the vSphere account access credentials: GOVC_USERNAME, GOVC_PASSWORD fields.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CredentialsSecretRef refers to a secret that contains the vSphere account access credentials: GOVC_USERNAME, GOVC_PASSWORD fields.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecProvisioning(dict):
    """
    Provisioning contains settings used only for initial cluster provisioning. May be unset in the case of adopted clusters.
    """
    def __init__(__self__, *,
                 install_config_secret_ref: 'outputs.ClusterDeploymentSpecProvisioningInstallConfigSecretRef',
                 image_set_ref: Optional['outputs.ClusterDeploymentSpecProvisioningImageSetRef'] = None,
                 installer_env: Optional[Sequence['outputs.ClusterDeploymentSpecProvisioningInstallerEnv']] = None,
                 manifests_config_map_ref: Optional['outputs.ClusterDeploymentSpecProvisioningManifestsConfigMapRef'] = None,
                 release_image: Optional[str] = None,
                 ssh_known_hosts: Optional[Sequence[str]] = None,
                 ssh_private_key_secret_ref: Optional['outputs.ClusterDeploymentSpecProvisioningSshPrivateKeySecretRef'] = None):
        """
        Provisioning contains settings used only for initial cluster provisioning. May be unset in the case of adopted clusters.
        :param 'ClusterDeploymentSpecProvisioningInstallConfigSecretRefArgs' install_config_secret_ref: InstallConfigSecretRef is the reference to a secret that contains an openshift-install InstallConfig. This file will be passed through directly to the installer. Any version of InstallConfig can be used, provided it can be parsed by the openshift-install version for the release you are provisioning.
        :param 'ClusterDeploymentSpecProvisioningImageSetRefArgs' image_set_ref: ImageSetRef is a reference to a ClusterImageSet. If a value is specified for ReleaseImage, that will take precedence over the one from the ClusterImageSet.
        :param Sequence['ClusterDeploymentSpecProvisioningInstallerEnvArgs'] installer_env: InstallerEnv are extra environment variables to pass through to the installer. This may be used to enable additional features of the installer.
        :param 'ClusterDeploymentSpecProvisioningManifestsConfigMapRefArgs' manifests_config_map_ref: ManifestsConfigMapRef is a reference to user-provided manifests to add to or replace manifests that are generated by the installer.
        :param str release_image: ReleaseImage is the image containing metadata for all components that run in the cluster, and is the primary and best way to specify what specific version of OpenShift you wish to install.
        :param Sequence[str] ssh_known_hosts: SSHKnownHosts are known hosts to be configured in the hive install manager pod to avoid ssh prompts. Use of ssh in the install pod is somewhat limited today (failure log gathering from cluster, some bare metal provisioning scenarios), so this setting is often not needed.
        :param 'ClusterDeploymentSpecProvisioningSshPrivateKeySecretRefArgs' ssh_private_key_secret_ref: SSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to compute instances. This private key should correspond to the public key included in the InstallConfig. The private key is used by Hive to gather logs on the target cluster if there are install failures. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
        """
        pulumi.set(__self__, "install_config_secret_ref", install_config_secret_ref)
        if image_set_ref is not None:
            pulumi.set(__self__, "image_set_ref", image_set_ref)
        if installer_env is not None:
            pulumi.set(__self__, "installer_env", installer_env)
        if manifests_config_map_ref is not None:
            pulumi.set(__self__, "manifests_config_map_ref", manifests_config_map_ref)
        if release_image is not None:
            pulumi.set(__self__, "release_image", release_image)
        if ssh_known_hosts is not None:
            pulumi.set(__self__, "ssh_known_hosts", ssh_known_hosts)
        if ssh_private_key_secret_ref is not None:
            pulumi.set(__self__, "ssh_private_key_secret_ref", ssh_private_key_secret_ref)

    @property
    @pulumi.getter(name="installConfigSecretRef")
    def install_config_secret_ref(self) -> 'outputs.ClusterDeploymentSpecProvisioningInstallConfigSecretRef':
        """
        InstallConfigSecretRef is the reference to a secret that contains an openshift-install InstallConfig. This file will be passed through directly to the installer. Any version of InstallConfig can be used, provided it can be parsed by the openshift-install version for the release you are provisioning.
        """
        return pulumi.get(self, "install_config_secret_ref")

    @property
    @pulumi.getter(name="imageSetRef")
    def image_set_ref(self) -> Optional['outputs.ClusterDeploymentSpecProvisioningImageSetRef']:
        """
        ImageSetRef is a reference to a ClusterImageSet. If a value is specified for ReleaseImage, that will take precedence over the one from the ClusterImageSet.
        """
        return pulumi.get(self, "image_set_ref")

    @property
    @pulumi.getter(name="installerEnv")
    def installer_env(self) -> Optional[Sequence['outputs.ClusterDeploymentSpecProvisioningInstallerEnv']]:
        """
        InstallerEnv are extra environment variables to pass through to the installer. This may be used to enable additional features of the installer.
        """
        return pulumi.get(self, "installer_env")

    @property
    @pulumi.getter(name="manifestsConfigMapRef")
    def manifests_config_map_ref(self) -> Optional['outputs.ClusterDeploymentSpecProvisioningManifestsConfigMapRef']:
        """
        ManifestsConfigMapRef is a reference to user-provided manifests to add to or replace manifests that are generated by the installer.
        """
        return pulumi.get(self, "manifests_config_map_ref")

    @property
    @pulumi.getter(name="releaseImage")
    def release_image(self) -> Optional[str]:
        """
        ReleaseImage is the image containing metadata for all components that run in the cluster, and is the primary and best way to specify what specific version of OpenShift you wish to install.
        """
        return pulumi.get(self, "release_image")

    @property
    @pulumi.getter(name="sshKnownHosts")
    def ssh_known_hosts(self) -> Optional[Sequence[str]]:
        """
        SSHKnownHosts are known hosts to be configured in the hive install manager pod to avoid ssh prompts. Use of ssh in the install pod is somewhat limited today (failure log gathering from cluster, some bare metal provisioning scenarios), so this setting is often not needed.
        """
        return pulumi.get(self, "ssh_known_hosts")

    @property
    @pulumi.getter(name="sshPrivateKeySecretRef")
    def ssh_private_key_secret_ref(self) -> Optional['outputs.ClusterDeploymentSpecProvisioningSshPrivateKeySecretRef']:
        """
        SSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to compute instances. This private key should correspond to the public key included in the InstallConfig. The private key is used by Hive to gather logs on the target cluster if there are install failures. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
        """
        return pulumi.get(self, "ssh_private_key_secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecProvisioningImageSetRef(dict):
    """
    ImageSetRef is a reference to a ClusterImageSet. If a value is specified for ReleaseImage, that will take precedence over the one from the ClusterImageSet.
    """
    def __init__(__self__, *,
                 name: str):
        """
        ImageSetRef is a reference to a ClusterImageSet. If a value is specified for ReleaseImage, that will take precedence over the one from the ClusterImageSet.
        :param str name: Name is the name of the ClusterImageSet that this refers to
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the ClusterImageSet that this refers to
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecProvisioningInstallConfigSecretRef(dict):
    """
    InstallConfigSecretRef is the reference to a secret that contains an openshift-install InstallConfig. This file will be passed through directly to the installer. Any version of InstallConfig can be used, provided it can be parsed by the openshift-install version for the release you are provisioning.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        InstallConfigSecretRef is the reference to a secret that contains an openshift-install InstallConfig. This file will be passed through directly to the installer. Any version of InstallConfig can be used, provided it can be parsed by the openshift-install version for the release you are provisioning.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecProvisioningInstallerEnv(dict):
    """
    EnvVar represents an environment variable present in a Container.
    """
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.ClusterDeploymentSpecProvisioningInstallerEnvValueFrom'] = None):
        """
        EnvVar represents an environment variable present in a Container.
        :param str name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param str value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param 'ClusterDeploymentSpecProvisioningInstallerEnvValueFromArgs' value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the environment variable. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.ClusterDeploymentSpecProvisioningInstallerEnvValueFrom']:
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecProvisioningInstallerEnvValueFrom(dict):
    """
    Source for the environment variable's value. Cannot be used if value is not empty.
    """
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.ClusterDeploymentSpecProvisioningInstallerEnvValueFromConfigMapKeyRef'] = None,
                 field_ref: Optional['outputs.ClusterDeploymentSpecProvisioningInstallerEnvValueFromFieldRef'] = None,
                 resource_field_ref: Optional['outputs.ClusterDeploymentSpecProvisioningInstallerEnvValueFromResourceFieldRef'] = None,
                 secret_key_ref: Optional['outputs.ClusterDeploymentSpecProvisioningInstallerEnvValueFromSecretKeyRef'] = None):
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        :param 'ClusterDeploymentSpecProvisioningInstallerEnvValueFromConfigMapKeyRefArgs' config_map_key_ref: Selects a key of a ConfigMap.
        :param 'ClusterDeploymentSpecProvisioningInstallerEnvValueFromFieldRefArgs' field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param 'ClusterDeploymentSpecProvisioningInstallerEnvValueFromResourceFieldRefArgs' resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param 'ClusterDeploymentSpecProvisioningInstallerEnvValueFromSecretKeyRefArgs' secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.ClusterDeploymentSpecProvisioningInstallerEnvValueFromConfigMapKeyRef']:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.ClusterDeploymentSpecProvisioningInstallerEnvValueFromFieldRef']:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        """
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.ClusterDeploymentSpecProvisioningInstallerEnvValueFromResourceFieldRef']:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.ClusterDeploymentSpecProvisioningInstallerEnvValueFromSecretKeyRef']:
        """
        Selects a key of a secret in the pod's namespace
        """
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecProvisioningInstallerEnvValueFromConfigMapKeyRef(dict):
    """
    Selects a key of a ConfigMap.
    """
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        """
        Selects a key of a ConfigMap.
        :param str key: The key to select.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param bool optional: Specify whether the ConfigMap or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        """
        Specify whether the ConfigMap or its key must be defined
        """
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecProvisioningInstallerEnvValueFromFieldRef(dict):
    """
    Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
    """
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param str field_path: Path of the field to select in the specified API version.
        :param str api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecProvisioningInstallerEnvValueFromResourceFieldRef(dict):
    """
    Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
    """
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[str] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param str resource: Required: resource to select
        :param str container_name: Container name: required for volumes, optional for env vars
        :param str divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[str]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecProvisioningInstallerEnvValueFromSecretKeyRef(dict):
    """
    Selects a key of a secret in the pod's namespace
    """
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        """
        Selects a key of a secret in the pod's namespace
        :param str key: The key of the secret to select from.  Must be a valid secret key.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param bool optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecProvisioningManifestsConfigMapRef(dict):
    """
    ManifestsConfigMapRef is a reference to user-provided manifests to add to or replace manifests that are generated by the installer.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        ManifestsConfigMapRef is a reference to user-provided manifests to add to or replace manifests that are generated by the installer.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecProvisioningSshPrivateKeySecretRef(dict):
    """
    SSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to compute instances. This private key should correspond to the public key included in the InstallConfig. The private key is used by Hive to gather logs on the target cluster if there are install failures. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        SSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to compute instances. This private key should correspond to the public key included in the InstallConfig. The private key is used by Hive to gather logs on the target cluster if there are install failures. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentSpecPullSecretRef(dict):
    """
    PullSecretRef is the reference to the secret to use when pulling images.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        PullSecretRef is the reference to the secret to use when pulling images.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentStatus(dict):
    """
    ClusterDeploymentStatus defines the observed state of ClusterDeployment
    """
    def __init__(__self__, *,
                 api_url: Optional[str] = None,
                 certificate_bundles: Optional[Sequence['outputs.ClusterDeploymentStatusCertificateBundles']] = None,
                 cli_image: Optional[str] = None,
                 conditions: Optional[Sequence['outputs.ClusterDeploymentStatusConditions']] = None,
                 install_restarts: Optional[int] = None,
                 installed_timestamp: Optional[str] = None,
                 installer_image: Optional[str] = None,
                 provision_ref: Optional['outputs.ClusterDeploymentStatusProvisionRef'] = None,
                 web_console_url: Optional[str] = None):
        """
        ClusterDeploymentStatus defines the observed state of ClusterDeployment
        :param str api_url: APIURL is the URL where the cluster's API can be accessed.
        :param Sequence['ClusterDeploymentStatusCertificateBundlesArgs'] certificate_bundles: CertificateBundles contains of the status of the certificate bundles associated with this cluster deployment.
        :param str cli_image: CLIImage is the name of the oc cli image to use when installing the target cluster
        :param Sequence['ClusterDeploymentStatusConditionsArgs'] conditions: Conditions includes more detailed status for the cluster deployment
        :param int install_restarts: InstallRestarts is the total count of container restarts on the clusters install job.
        :param str installed_timestamp: InstalledTimestamp is the time we first detected that the cluster has been successfully installed.
        :param str installer_image: InstallerImage is the name of the installer image to use when installing the target cluster
        :param 'ClusterDeploymentStatusProvisionRefArgs' provision_ref: ProvisionRef is a reference to the last ClusterProvision created for the deployment
        :param str web_console_url: WebConsoleURL is the URL for the cluster's web console UI.
        """
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)
        if certificate_bundles is not None:
            pulumi.set(__self__, "certificate_bundles", certificate_bundles)
        if cli_image is not None:
            pulumi.set(__self__, "cli_image", cli_image)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if install_restarts is not None:
            pulumi.set(__self__, "install_restarts", install_restarts)
        if installed_timestamp is not None:
            pulumi.set(__self__, "installed_timestamp", installed_timestamp)
        if installer_image is not None:
            pulumi.set(__self__, "installer_image", installer_image)
        if provision_ref is not None:
            pulumi.set(__self__, "provision_ref", provision_ref)
        if web_console_url is not None:
            pulumi.set(__self__, "web_console_url", web_console_url)

    @property
    @pulumi.getter(name="apiURL")
    def api_url(self) -> Optional[str]:
        """
        APIURL is the URL where the cluster's API can be accessed.
        """
        return pulumi.get(self, "api_url")

    @property
    @pulumi.getter(name="certificateBundles")
    def certificate_bundles(self) -> Optional[Sequence['outputs.ClusterDeploymentStatusCertificateBundles']]:
        """
        CertificateBundles contains of the status of the certificate bundles associated with this cluster deployment.
        """
        return pulumi.get(self, "certificate_bundles")

    @property
    @pulumi.getter(name="cliImage")
    def cli_image(self) -> Optional[str]:
        """
        CLIImage is the name of the oc cli image to use when installing the target cluster
        """
        return pulumi.get(self, "cli_image")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ClusterDeploymentStatusConditions']]:
        """
        Conditions includes more detailed status for the cluster deployment
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="installRestarts")
    def install_restarts(self) -> Optional[int]:
        """
        InstallRestarts is the total count of container restarts on the clusters install job.
        """
        return pulumi.get(self, "install_restarts")

    @property
    @pulumi.getter(name="installedTimestamp")
    def installed_timestamp(self) -> Optional[str]:
        """
        InstalledTimestamp is the time we first detected that the cluster has been successfully installed.
        """
        return pulumi.get(self, "installed_timestamp")

    @property
    @pulumi.getter(name="installerImage")
    def installer_image(self) -> Optional[str]:
        """
        InstallerImage is the name of the installer image to use when installing the target cluster
        """
        return pulumi.get(self, "installer_image")

    @property
    @pulumi.getter(name="provisionRef")
    def provision_ref(self) -> Optional['outputs.ClusterDeploymentStatusProvisionRef']:
        """
        ProvisionRef is a reference to the last ClusterProvision created for the deployment
        """
        return pulumi.get(self, "provision_ref")

    @property
    @pulumi.getter(name="webConsoleURL")
    def web_console_url(self) -> Optional[str]:
        """
        WebConsoleURL is the URL for the cluster's web console UI.
        """
        return pulumi.get(self, "web_console_url")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentStatusCertificateBundles(dict):
    """
    CertificateBundleStatus specifies whether a certificate bundle was generated for this cluster deployment.
    """
    def __init__(__self__, *,
                 generated: bool,
                 name: str):
        """
        CertificateBundleStatus specifies whether a certificate bundle was generated for this cluster deployment.
        :param bool generated: Generated indicates whether the certificate bundle was generated
        :param str name: Name of the certificate bundle
        """
        pulumi.set(__self__, "generated", generated)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def generated(self) -> bool:
        """
        Generated indicates whether the certificate bundle was generated
        """
        return pulumi.get(self, "generated")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the certificate bundle
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentStatusConditions(dict):
    """
    ClusterDeploymentCondition contains details for the current condition of a cluster deployment
    """
    def __init__(__self__, *,
                 status: str,
                 type: str,
                 last_probe_time: Optional[str] = None,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        ClusterDeploymentCondition contains details for the current condition of a cluster deployment
        :param str status: Status is the status of the condition.
        :param str type: Type is the type of the condition.
        :param str last_probe_time: LastProbeTime is the last time we probed the condition.
        :param str last_transition_time: LastTransitionTime is the last time the condition transitioned from one status to another.
        :param str message: Message is a human-readable message indicating details about last transition.
        :param str reason: Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_probe_time is not None:
            pulumi.set(__self__, "last_probe_time", last_probe_time)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status is the status of the condition.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type is the type of the condition.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="lastProbeTime")
    def last_probe_time(self) -> Optional[str]:
        """
        LastProbeTime is the last time we probed the condition.
        """
        return pulumi.get(self, "last_probe_time")

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        """
        LastTransitionTime is the last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message is a human-readable message indicating details about last transition.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeploymentStatusProvisionRef(dict):
    """
    ProvisionRef is a reference to the last ClusterProvision created for the deployment
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        ProvisionRef is a reference to the last ClusterProvision created for the deployment
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeprovisionSpec(dict):
    """
    ClusterDeprovisionSpec defines the desired state of ClusterDeprovision
    """
    def __init__(__self__, *,
                 infra_id: str,
                 cluster_id: Optional[str] = None,
                 platform: Optional['outputs.ClusterDeprovisionSpecPlatform'] = None):
        """
        ClusterDeprovisionSpec defines the desired state of ClusterDeprovision
        :param str infra_id: InfraID is the identifier generated during installation for a cluster. It is used for tagging/naming resources in cloud providers.
        :param str cluster_id: ClusterID is a globally unique identifier for the cluster to deprovision. It will be used if specified.
        :param 'ClusterDeprovisionSpecPlatformArgs' platform: Platform contains platform-specific configuration for a ClusterDeprovision
        """
        pulumi.set(__self__, "infra_id", infra_id)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)

    @property
    @pulumi.getter(name="infraID")
    def infra_id(self) -> str:
        """
        InfraID is the identifier generated during installation for a cluster. It is used for tagging/naming resources in cloud providers.
        """
        return pulumi.get(self, "infra_id")

    @property
    @pulumi.getter(name="clusterID")
    def cluster_id(self) -> Optional[str]:
        """
        ClusterID is a globally unique identifier for the cluster to deprovision. It will be used if specified.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def platform(self) -> Optional['outputs.ClusterDeprovisionSpecPlatform']:
        """
        Platform contains platform-specific configuration for a ClusterDeprovision
        """
        return pulumi.get(self, "platform")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeprovisionSpecPlatform(dict):
    """
    Platform contains platform-specific configuration for a ClusterDeprovision
    """
    def __init__(__self__, *,
                 aws: Optional['outputs.ClusterDeprovisionSpecPlatformAws'] = None,
                 azure: Optional['outputs.ClusterDeprovisionSpecPlatformAzure'] = None,
                 gcp: Optional['outputs.ClusterDeprovisionSpecPlatformGcp'] = None,
                 openstack: Optional['outputs.ClusterDeprovisionSpecPlatformOpenstack'] = None,
                 ovirt: Optional['outputs.ClusterDeprovisionSpecPlatformOvirt'] = None,
                 vsphere: Optional['outputs.ClusterDeprovisionSpecPlatformVsphere'] = None):
        """
        Platform contains platform-specific configuration for a ClusterDeprovision
        :param 'ClusterDeprovisionSpecPlatformAwsArgs' aws: AWS contains AWS-specific deprovision settings
        :param 'ClusterDeprovisionSpecPlatformAzureArgs' azure: Azure contains Azure-specific deprovision settings
        :param 'ClusterDeprovisionSpecPlatformGcpArgs' gcp: GCP contains GCP-specific deprovision settings
        :param 'ClusterDeprovisionSpecPlatformOpenstackArgs' openstack: OpenStack contains OpenStack-specific deprovision settings
        :param 'ClusterDeprovisionSpecPlatformOvirtArgs' ovirt: Ovirt contains oVirt-specific deprovision settings
        :param 'ClusterDeprovisionSpecPlatformVsphereArgs' vsphere: VSphere contains VMWare vSphere-specific deprovision settings
        """
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if gcp is not None:
            pulumi.set(__self__, "gcp", gcp)
        if openstack is not None:
            pulumi.set(__self__, "openstack", openstack)
        if ovirt is not None:
            pulumi.set(__self__, "ovirt", ovirt)
        if vsphere is not None:
            pulumi.set(__self__, "vsphere", vsphere)

    @property
    @pulumi.getter
    def aws(self) -> Optional['outputs.ClusterDeprovisionSpecPlatformAws']:
        """
        AWS contains AWS-specific deprovision settings
        """
        return pulumi.get(self, "aws")

    @property
    @pulumi.getter
    def azure(self) -> Optional['outputs.ClusterDeprovisionSpecPlatformAzure']:
        """
        Azure contains Azure-specific deprovision settings
        """
        return pulumi.get(self, "azure")

    @property
    @pulumi.getter
    def gcp(self) -> Optional['outputs.ClusterDeprovisionSpecPlatformGcp']:
        """
        GCP contains GCP-specific deprovision settings
        """
        return pulumi.get(self, "gcp")

    @property
    @pulumi.getter
    def openstack(self) -> Optional['outputs.ClusterDeprovisionSpecPlatformOpenstack']:
        """
        OpenStack contains OpenStack-specific deprovision settings
        """
        return pulumi.get(self, "openstack")

    @property
    @pulumi.getter
    def ovirt(self) -> Optional['outputs.ClusterDeprovisionSpecPlatformOvirt']:
        """
        Ovirt contains oVirt-specific deprovision settings
        """
        return pulumi.get(self, "ovirt")

    @property
    @pulumi.getter
    def vsphere(self) -> Optional['outputs.ClusterDeprovisionSpecPlatformVsphere']:
        """
        VSphere contains VMWare vSphere-specific deprovision settings
        """
        return pulumi.get(self, "vsphere")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeprovisionSpecPlatformAws(dict):
    """
    AWS contains AWS-specific deprovision settings
    """
    def __init__(__self__, *,
                 region: str,
                 credentials_secret_ref: Optional['outputs.ClusterDeprovisionSpecPlatformAwsCredentialsSecretRef'] = None):
        """
        AWS contains AWS-specific deprovision settings
        :param str region: Region is the AWS region for this deprovisioning
        :param 'ClusterDeprovisionSpecPlatformAwsCredentialsSecretRefArgs' credentials_secret_ref: CredentialsSecretRef is the AWS account credentials to use for deprovisioning the cluster
        """
        pulumi.set(__self__, "region", region)
        if credentials_secret_ref is not None:
            pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region is the AWS region for this deprovisioning
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> Optional['outputs.ClusterDeprovisionSpecPlatformAwsCredentialsSecretRef']:
        """
        CredentialsSecretRef is the AWS account credentials to use for deprovisioning the cluster
        """
        return pulumi.get(self, "credentials_secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeprovisionSpecPlatformAwsCredentialsSecretRef(dict):
    """
    CredentialsSecretRef is the AWS account credentials to use for deprovisioning the cluster
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CredentialsSecretRef is the AWS account credentials to use for deprovisioning the cluster
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeprovisionSpecPlatformAzure(dict):
    """
    Azure contains Azure-specific deprovision settings
    """
    def __init__(__self__, *,
                 credentials_secret_ref: Optional['outputs.ClusterDeprovisionSpecPlatformAzureCredentialsSecretRef'] = None):
        """
        Azure contains Azure-specific deprovision settings
        :param 'ClusterDeprovisionSpecPlatformAzureCredentialsSecretRefArgs' credentials_secret_ref: CredentialsSecretRef is the Azure account credentials to use for deprovisioning the cluster
        """
        if credentials_secret_ref is not None:
            pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> Optional['outputs.ClusterDeprovisionSpecPlatformAzureCredentialsSecretRef']:
        """
        CredentialsSecretRef is the Azure account credentials to use for deprovisioning the cluster
        """
        return pulumi.get(self, "credentials_secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeprovisionSpecPlatformAzureCredentialsSecretRef(dict):
    """
    CredentialsSecretRef is the Azure account credentials to use for deprovisioning the cluster
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CredentialsSecretRef is the Azure account credentials to use for deprovisioning the cluster
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeprovisionSpecPlatformGcp(dict):
    """
    GCP contains GCP-specific deprovision settings
    """
    def __init__(__self__, *,
                 region: str,
                 credentials_secret_ref: Optional['outputs.ClusterDeprovisionSpecPlatformGcpCredentialsSecretRef'] = None):
        """
        GCP contains GCP-specific deprovision settings
        :param str region: Region is the GCP region for this deprovision
        :param 'ClusterDeprovisionSpecPlatformGcpCredentialsSecretRefArgs' credentials_secret_ref: CredentialsSecretRef is the GCP account credentials to use for deprovisioning the cluster
        """
        pulumi.set(__self__, "region", region)
        if credentials_secret_ref is not None:
            pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region is the GCP region for this deprovision
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> Optional['outputs.ClusterDeprovisionSpecPlatformGcpCredentialsSecretRef']:
        """
        CredentialsSecretRef is the GCP account credentials to use for deprovisioning the cluster
        """
        return pulumi.get(self, "credentials_secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeprovisionSpecPlatformGcpCredentialsSecretRef(dict):
    """
    CredentialsSecretRef is the GCP account credentials to use for deprovisioning the cluster
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CredentialsSecretRef is the GCP account credentials to use for deprovisioning the cluster
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeprovisionSpecPlatformOpenstack(dict):
    """
    OpenStack contains OpenStack-specific deprovision settings
    """
    def __init__(__self__, *,
                 cloud: str,
                 certificates_secret_ref: Optional['outputs.ClusterDeprovisionSpecPlatformOpenstackCertificatesSecretRef'] = None,
                 credentials_secret_ref: Optional['outputs.ClusterDeprovisionSpecPlatformOpenstackCredentialsSecretRef'] = None):
        """
        OpenStack contains OpenStack-specific deprovision settings
        :param str cloud: Cloud is the secion in the clouds.yaml secret below to use for auth/connectivity.
        :param 'ClusterDeprovisionSpecPlatformOpenstackCertificatesSecretRefArgs' certificates_secret_ref: CertificatesSecretRef refers to a secret that contains CA certificates necessary for communicating with the OpenStack.
        :param 'ClusterDeprovisionSpecPlatformOpenstackCredentialsSecretRefArgs' credentials_secret_ref: CredentialsSecretRef is the OpenStack account credentials to use for deprovisioning the cluster
        """
        pulumi.set(__self__, "cloud", cloud)
        if certificates_secret_ref is not None:
            pulumi.set(__self__, "certificates_secret_ref", certificates_secret_ref)
        if credentials_secret_ref is not None:
            pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)

    @property
    @pulumi.getter
    def cloud(self) -> str:
        """
        Cloud is the secion in the clouds.yaml secret below to use for auth/connectivity.
        """
        return pulumi.get(self, "cloud")

    @property
    @pulumi.getter(name="certificatesSecretRef")
    def certificates_secret_ref(self) -> Optional['outputs.ClusterDeprovisionSpecPlatformOpenstackCertificatesSecretRef']:
        """
        CertificatesSecretRef refers to a secret that contains CA certificates necessary for communicating with the OpenStack.
        """
        return pulumi.get(self, "certificates_secret_ref")

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> Optional['outputs.ClusterDeprovisionSpecPlatformOpenstackCredentialsSecretRef']:
        """
        CredentialsSecretRef is the OpenStack account credentials to use for deprovisioning the cluster
        """
        return pulumi.get(self, "credentials_secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeprovisionSpecPlatformOpenstackCertificatesSecretRef(dict):
    """
    CertificatesSecretRef refers to a secret that contains CA certificates necessary for communicating with the OpenStack.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CertificatesSecretRef refers to a secret that contains CA certificates necessary for communicating with the OpenStack.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeprovisionSpecPlatformOpenstackCredentialsSecretRef(dict):
    """
    CredentialsSecretRef is the OpenStack account credentials to use for deprovisioning the cluster
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CredentialsSecretRef is the OpenStack account credentials to use for deprovisioning the cluster
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeprovisionSpecPlatformOvirt(dict):
    """
    Ovirt contains oVirt-specific deprovision settings
    """
    def __init__(__self__, *,
                 certificates_secret_ref: 'outputs.ClusterDeprovisionSpecPlatformOvirtCertificatesSecretRef',
                 cluster_id: str,
                 credentials_secret_ref: 'outputs.ClusterDeprovisionSpecPlatformOvirtCredentialsSecretRef'):
        """
        Ovirt contains oVirt-specific deprovision settings
        :param 'ClusterDeprovisionSpecPlatformOvirtCertificatesSecretRefArgs' certificates_secret_ref: CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with the oVirt.
        :param str cluster_id: The oVirt cluster ID
        :param 'ClusterDeprovisionSpecPlatformOvirtCredentialsSecretRefArgs' credentials_secret_ref: CredentialsSecretRef is the oVirt account credentials to use for deprovisioning the cluster secret fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
        """
        pulumi.set(__self__, "certificates_secret_ref", certificates_secret_ref)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)

    @property
    @pulumi.getter(name="certificatesSecretRef")
    def certificates_secret_ref(self) -> 'outputs.ClusterDeprovisionSpecPlatformOvirtCertificatesSecretRef':
        """
        CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with the oVirt.
        """
        return pulumi.get(self, "certificates_secret_ref")

    @property
    @pulumi.getter(name="clusterID")
    def cluster_id(self) -> str:
        """
        The oVirt cluster ID
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> 'outputs.ClusterDeprovisionSpecPlatformOvirtCredentialsSecretRef':
        """
        CredentialsSecretRef is the oVirt account credentials to use for deprovisioning the cluster secret fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
        """
        return pulumi.get(self, "credentials_secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeprovisionSpecPlatformOvirtCertificatesSecretRef(dict):
    """
    CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with the oVirt.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with the oVirt.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeprovisionSpecPlatformOvirtCredentialsSecretRef(dict):
    """
    CredentialsSecretRef is the oVirt account credentials to use for deprovisioning the cluster secret fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CredentialsSecretRef is the oVirt account credentials to use for deprovisioning the cluster secret fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeprovisionSpecPlatformVsphere(dict):
    """
    VSphere contains VMWare vSphere-specific deprovision settings
    """
    def __init__(__self__, *,
                 certificates_secret_ref: 'outputs.ClusterDeprovisionSpecPlatformVsphereCertificatesSecretRef',
                 credentials_secret_ref: 'outputs.ClusterDeprovisionSpecPlatformVsphereCredentialsSecretRef',
                 v_center: str):
        """
        VSphere contains VMWare vSphere-specific deprovision settings
        :param 'ClusterDeprovisionSpecPlatformVsphereCertificatesSecretRefArgs' certificates_secret_ref: CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
        :param 'ClusterDeprovisionSpecPlatformVsphereCredentialsSecretRefArgs' credentials_secret_ref: CredentialsSecretRef is the vSphere account credentials to use for deprovisioning the cluster
        :param str v_center: VCenter is the vSphere vCenter hostname.
        """
        pulumi.set(__self__, "certificates_secret_ref", certificates_secret_ref)
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        pulumi.set(__self__, "v_center", v_center)

    @property
    @pulumi.getter(name="certificatesSecretRef")
    def certificates_secret_ref(self) -> 'outputs.ClusterDeprovisionSpecPlatformVsphereCertificatesSecretRef':
        """
        CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
        """
        return pulumi.get(self, "certificates_secret_ref")

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> 'outputs.ClusterDeprovisionSpecPlatformVsphereCredentialsSecretRef':
        """
        CredentialsSecretRef is the vSphere account credentials to use for deprovisioning the cluster
        """
        return pulumi.get(self, "credentials_secret_ref")

    @property
    @pulumi.getter(name="vCenter")
    def v_center(self) -> str:
        """
        VCenter is the vSphere vCenter hostname.
        """
        return pulumi.get(self, "v_center")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeprovisionSpecPlatformVsphereCertificatesSecretRef(dict):
    """
    CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeprovisionSpecPlatformVsphereCredentialsSecretRef(dict):
    """
    CredentialsSecretRef is the vSphere account credentials to use for deprovisioning the cluster
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CredentialsSecretRef is the vSphere account credentials to use for deprovisioning the cluster
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeprovisionStatus(dict):
    """
    ClusterDeprovisionStatus defines the observed state of ClusterDeprovision
    """
    def __init__(__self__, *,
                 completed: Optional[bool] = None,
                 conditions: Optional[Sequence['outputs.ClusterDeprovisionStatusConditions']] = None):
        """
        ClusterDeprovisionStatus defines the observed state of ClusterDeprovision
        :param bool completed: Completed is true when the uninstall has completed successfully
        :param Sequence['ClusterDeprovisionStatusConditionsArgs'] conditions: Conditions includes more detailed status for the cluster deprovision
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def completed(self) -> Optional[bool]:
        """
        Completed is true when the uninstall has completed successfully
        """
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ClusterDeprovisionStatusConditions']]:
        """
        Conditions includes more detailed status for the cluster deprovision
        """
        return pulumi.get(self, "conditions")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterDeprovisionStatusConditions(dict):
    """
    ClusterDeprovisionCondition contains details for the current condition of a ClusterDeprovision
    """
    def __init__(__self__, *,
                 status: str,
                 type: str,
                 last_probe_time: Optional[str] = None,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        ClusterDeprovisionCondition contains details for the current condition of a ClusterDeprovision
        :param str status: Status is the status of the condition.
        :param str type: Type is the type of the condition.
        :param str last_probe_time: LastProbeTime is the last time we probed the condition.
        :param str last_transition_time: LastTransitionTime is the last time the condition transitioned from one status to another.
        :param str message: Message is a human-readable message indicating details about last transition.
        :param str reason: Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_probe_time is not None:
            pulumi.set(__self__, "last_probe_time", last_probe_time)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status is the status of the condition.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type is the type of the condition.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="lastProbeTime")
    def last_probe_time(self) -> Optional[str]:
        """
        LastProbeTime is the last time we probed the condition.
        """
        return pulumi.get(self, "last_probe_time")

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        """
        LastTransitionTime is the last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message is a human-readable message indicating details about last transition.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterImageSetSpec(dict):
    """
    ClusterImageSetSpec defines the desired state of ClusterImageSet
    """
    def __init__(__self__, *,
                 release_image: str):
        """
        ClusterImageSetSpec defines the desired state of ClusterImageSet
        :param str release_image: ReleaseImage is the image that contains the payload to use when installing a cluster.
        """
        pulumi.set(__self__, "release_image", release_image)

    @property
    @pulumi.getter(name="releaseImage")
    def release_image(self) -> str:
        """
        ReleaseImage is the image that contains the payload to use when installing a cluster.
        """
        return pulumi.get(self, "release_image")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPoolSpec(dict):
    """
    ClusterPoolSpec defines the desired state of the ClusterPool.
    """
    def __init__(__self__, *,
                 base_domain: str,
                 image_set_ref: 'outputs.ClusterPoolSpecImageSetRef',
                 platform: 'outputs.ClusterPoolSpecPlatform',
                 size: int,
                 hibernate_after: Optional[str] = None,
                 install_config_secret_template_ref: Optional['outputs.ClusterPoolSpecInstallConfigSecretTemplateRef'] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 max_concurrent: Optional[int] = None,
                 max_size: Optional[int] = None,
                 pull_secret_ref: Optional['outputs.ClusterPoolSpecPullSecretRef'] = None,
                 skip_machine_pools: Optional[bool] = None):
        """
        ClusterPoolSpec defines the desired state of the ClusterPool.
        :param str base_domain: BaseDomain is the base domain to use for all clusters created in this pool.
        :param 'ClusterPoolSpecImageSetRefArgs' image_set_ref: ImageSetRef is a reference to a ClusterImageSet. The release image specified in the ClusterImageSet will be used by clusters created for this cluster pool.
        :param 'ClusterPoolSpecPlatformArgs' platform: Platform encompasses the desired platform for the cluster.
        :param int size: Size is the default number of clusters that we should keep provisioned and waiting for use.
        :param str hibernate_after: HibernateAfter will be applied to new ClusterDeployments created for the pool. HibernateAfter will transition clusters in the clusterpool to hibernating power state after it has been running for the given duration. The time that a cluster has been running is the time since the cluster was installed or the time since the cluster last came out of hibernation.
        :param 'ClusterPoolSpecInstallConfigSecretTemplateRefArgs' install_config_secret_template_ref: InstallConfigSecretTemplateRef is a secret with the key install-config.yaml consisting of the content of the install-config.yaml to be used as a template for all clusters in this pool. Cluster specific settings (name, basedomain) will be injected dynamically when the ClusterDeployment install-config Secret is generated.
        :param Mapping[str, str] labels: Labels to be applied to new ClusterDeployments created for the pool. ClusterDeployments that have already been claimed will not be affected when this value is modified.
        :param int max_concurrent: MaxConcurrent is the maximum number of clusters that will be provisioned or deprovisioned at an time. By default there is no limit.
        :param int max_size: MaxSize is the maximum number of clusters that will be provisioned including clusters that have been claimed and ones waiting to be used. By default there is no limit.
        :param 'ClusterPoolSpecPullSecretRefArgs' pull_secret_ref: PullSecretRef is the reference to the secret to use when pulling images.
        :param bool skip_machine_pools: SkipMachinePools allows creating clusterpools where the machinepools are not managed by hive after cluster creation
        """
        pulumi.set(__self__, "base_domain", base_domain)
        pulumi.set(__self__, "image_set_ref", image_set_ref)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "size", size)
        if hibernate_after is not None:
            pulumi.set(__self__, "hibernate_after", hibernate_after)
        if install_config_secret_template_ref is not None:
            pulumi.set(__self__, "install_config_secret_template_ref", install_config_secret_template_ref)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if max_concurrent is not None:
            pulumi.set(__self__, "max_concurrent", max_concurrent)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if pull_secret_ref is not None:
            pulumi.set(__self__, "pull_secret_ref", pull_secret_ref)
        if skip_machine_pools is not None:
            pulumi.set(__self__, "skip_machine_pools", skip_machine_pools)

    @property
    @pulumi.getter(name="baseDomain")
    def base_domain(self) -> str:
        """
        BaseDomain is the base domain to use for all clusters created in this pool.
        """
        return pulumi.get(self, "base_domain")

    @property
    @pulumi.getter(name="imageSetRef")
    def image_set_ref(self) -> 'outputs.ClusterPoolSpecImageSetRef':
        """
        ImageSetRef is a reference to a ClusterImageSet. The release image specified in the ClusterImageSet will be used by clusters created for this cluster pool.
        """
        return pulumi.get(self, "image_set_ref")

    @property
    @pulumi.getter
    def platform(self) -> 'outputs.ClusterPoolSpecPlatform':
        """
        Platform encompasses the desired platform for the cluster.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Size is the default number of clusters that we should keep provisioned and waiting for use.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="hibernateAfter")
    def hibernate_after(self) -> Optional[str]:
        """
        HibernateAfter will be applied to new ClusterDeployments created for the pool. HibernateAfter will transition clusters in the clusterpool to hibernating power state after it has been running for the given duration. The time that a cluster has been running is the time since the cluster was installed or the time since the cluster last came out of hibernation.
        """
        return pulumi.get(self, "hibernate_after")

    @property
    @pulumi.getter(name="installConfigSecretTemplateRef")
    def install_config_secret_template_ref(self) -> Optional['outputs.ClusterPoolSpecInstallConfigSecretTemplateRef']:
        """
        InstallConfigSecretTemplateRef is a secret with the key install-config.yaml consisting of the content of the install-config.yaml to be used as a template for all clusters in this pool. Cluster specific settings (name, basedomain) will be injected dynamically when the ClusterDeployment install-config Secret is generated.
        """
        return pulumi.get(self, "install_config_secret_template_ref")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Labels to be applied to new ClusterDeployments created for the pool. ClusterDeployments that have already been claimed will not be affected when this value is modified.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="maxConcurrent")
    def max_concurrent(self) -> Optional[int]:
        """
        MaxConcurrent is the maximum number of clusters that will be provisioned or deprovisioned at an time. By default there is no limit.
        """
        return pulumi.get(self, "max_concurrent")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[int]:
        """
        MaxSize is the maximum number of clusters that will be provisioned including clusters that have been claimed and ones waiting to be used. By default there is no limit.
        """
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="pullSecretRef")
    def pull_secret_ref(self) -> Optional['outputs.ClusterPoolSpecPullSecretRef']:
        """
        PullSecretRef is the reference to the secret to use when pulling images.
        """
        return pulumi.get(self, "pull_secret_ref")

    @property
    @pulumi.getter(name="skipMachinePools")
    def skip_machine_pools(self) -> Optional[bool]:
        """
        SkipMachinePools allows creating clusterpools where the machinepools are not managed by hive after cluster creation
        """
        return pulumi.get(self, "skip_machine_pools")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPoolSpecImageSetRef(dict):
    """
    ImageSetRef is a reference to a ClusterImageSet. The release image specified in the ClusterImageSet will be used by clusters created for this cluster pool.
    """
    def __init__(__self__, *,
                 name: str):
        """
        ImageSetRef is a reference to a ClusterImageSet. The release image specified in the ClusterImageSet will be used by clusters created for this cluster pool.
        :param str name: Name is the name of the ClusterImageSet that this refers to
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the ClusterImageSet that this refers to
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPoolSpecInstallConfigSecretTemplateRef(dict):
    """
    InstallConfigSecretTemplateRef is a secret with the key install-config.yaml consisting of the content of the install-config.yaml to be used as a template for all clusters in this pool. Cluster specific settings (name, basedomain) will be injected dynamically when the ClusterDeployment install-config Secret is generated.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        InstallConfigSecretTemplateRef is a secret with the key install-config.yaml consisting of the content of the install-config.yaml to be used as a template for all clusters in this pool. Cluster specific settings (name, basedomain) will be injected dynamically when the ClusterDeployment install-config Secret is generated.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPoolSpecPlatform(dict):
    """
    Platform encompasses the desired platform for the cluster.
    """
    def __init__(__self__, *,
                 aws: Optional['outputs.ClusterPoolSpecPlatformAws'] = None,
                 azure: Optional['outputs.ClusterPoolSpecPlatformAzure'] = None,
                 baremetal: Optional['outputs.ClusterPoolSpecPlatformBaremetal'] = None,
                 gcp: Optional['outputs.ClusterPoolSpecPlatformGcp'] = None,
                 openstack: Optional['outputs.ClusterPoolSpecPlatformOpenstack'] = None,
                 ovirt: Optional['outputs.ClusterPoolSpecPlatformOvirt'] = None,
                 vsphere: Optional['outputs.ClusterPoolSpecPlatformVsphere'] = None):
        """
        Platform encompasses the desired platform for the cluster.
        :param 'ClusterPoolSpecPlatformAwsArgs' aws: AWS is the configuration used when installing on AWS.
        :param 'ClusterPoolSpecPlatformAzureArgs' azure: Azure is the configuration used when installing on Azure.
        :param 'ClusterPoolSpecPlatformBaremetalArgs' baremetal: BareMetal is the configuration used when installing on bare metal.
        :param 'ClusterPoolSpecPlatformGcpArgs' gcp: GCP is the configuration used when installing on Google Cloud Platform.
        :param 'ClusterPoolSpecPlatformOpenstackArgs' openstack: OpenStack is the configuration used when installing on OpenStack
        :param 'ClusterPoolSpecPlatformOvirtArgs' ovirt: Ovirt is the configuration used when installing on oVirt
        :param 'ClusterPoolSpecPlatformVsphereArgs' vsphere: VSphere is the configuration used when installing on vSphere
        """
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if baremetal is not None:
            pulumi.set(__self__, "baremetal", baremetal)
        if gcp is not None:
            pulumi.set(__self__, "gcp", gcp)
        if openstack is not None:
            pulumi.set(__self__, "openstack", openstack)
        if ovirt is not None:
            pulumi.set(__self__, "ovirt", ovirt)
        if vsphere is not None:
            pulumi.set(__self__, "vsphere", vsphere)

    @property
    @pulumi.getter
    def aws(self) -> Optional['outputs.ClusterPoolSpecPlatformAws']:
        """
        AWS is the configuration used when installing on AWS.
        """
        return pulumi.get(self, "aws")

    @property
    @pulumi.getter
    def azure(self) -> Optional['outputs.ClusterPoolSpecPlatformAzure']:
        """
        Azure is the configuration used when installing on Azure.
        """
        return pulumi.get(self, "azure")

    @property
    @pulumi.getter
    def baremetal(self) -> Optional['outputs.ClusterPoolSpecPlatformBaremetal']:
        """
        BareMetal is the configuration used when installing on bare metal.
        """
        return pulumi.get(self, "baremetal")

    @property
    @pulumi.getter
    def gcp(self) -> Optional['outputs.ClusterPoolSpecPlatformGcp']:
        """
        GCP is the configuration used when installing on Google Cloud Platform.
        """
        return pulumi.get(self, "gcp")

    @property
    @pulumi.getter
    def openstack(self) -> Optional['outputs.ClusterPoolSpecPlatformOpenstack']:
        """
        OpenStack is the configuration used when installing on OpenStack
        """
        return pulumi.get(self, "openstack")

    @property
    @pulumi.getter
    def ovirt(self) -> Optional['outputs.ClusterPoolSpecPlatformOvirt']:
        """
        Ovirt is the configuration used when installing on oVirt
        """
        return pulumi.get(self, "ovirt")

    @property
    @pulumi.getter
    def vsphere(self) -> Optional['outputs.ClusterPoolSpecPlatformVsphere']:
        """
        VSphere is the configuration used when installing on vSphere
        """
        return pulumi.get(self, "vsphere")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPoolSpecPlatformAws(dict):
    """
    AWS is the configuration used when installing on AWS.
    """
    def __init__(__self__, *,
                 credentials_secret_ref: 'outputs.ClusterPoolSpecPlatformAwsCredentialsSecretRef',
                 region: str,
                 user_tags: Optional[Mapping[str, str]] = None):
        """
        AWS is the configuration used when installing on AWS.
        :param 'ClusterPoolSpecPlatformAwsCredentialsSecretRefArgs' credentials_secret_ref: CredentialsSecretRef refers to a secret that contains the AWS account access credentials.
        :param str region: Region specifies the AWS region where the cluster will be created.
        :param Mapping[str, str] user_tags: UserTags specifies additional tags for AWS resources created for the cluster.
        """
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        pulumi.set(__self__, "region", region)
        if user_tags is not None:
            pulumi.set(__self__, "user_tags", user_tags)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> 'outputs.ClusterPoolSpecPlatformAwsCredentialsSecretRef':
        """
        CredentialsSecretRef refers to a secret that contains the AWS account access credentials.
        """
        return pulumi.get(self, "credentials_secret_ref")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region specifies the AWS region where the cluster will be created.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="userTags")
    def user_tags(self) -> Optional[Mapping[str, str]]:
        """
        UserTags specifies additional tags for AWS resources created for the cluster.
        """
        return pulumi.get(self, "user_tags")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPoolSpecPlatformAwsCredentialsSecretRef(dict):
    """
    CredentialsSecretRef refers to a secret that contains the AWS account access credentials.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CredentialsSecretRef refers to a secret that contains the AWS account access credentials.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPoolSpecPlatformAzure(dict):
    """
    Azure is the configuration used when installing on Azure.
    """
    def __init__(__self__, *,
                 credentials_secret_ref: 'outputs.ClusterPoolSpecPlatformAzureCredentialsSecretRef',
                 region: str,
                 base_domain_resource_group_name: Optional[str] = None):
        """
        Azure is the configuration used when installing on Azure.
        :param 'ClusterPoolSpecPlatformAzureCredentialsSecretRefArgs' credentials_secret_ref: CredentialsSecretRef refers to a secret that contains the Azure account access credentials.
        :param str region: Region specifies the Azure region where the cluster will be created.
        :param str base_domain_resource_group_name: BaseDomainResourceGroupName specifies the resource group where the azure DNS zone for the base domain is found
        """
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        pulumi.set(__self__, "region", region)
        if base_domain_resource_group_name is not None:
            pulumi.set(__self__, "base_domain_resource_group_name", base_domain_resource_group_name)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> 'outputs.ClusterPoolSpecPlatformAzureCredentialsSecretRef':
        """
        CredentialsSecretRef refers to a secret that contains the Azure account access credentials.
        """
        return pulumi.get(self, "credentials_secret_ref")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region specifies the Azure region where the cluster will be created.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="baseDomainResourceGroupName")
    def base_domain_resource_group_name(self) -> Optional[str]:
        """
        BaseDomainResourceGroupName specifies the resource group where the azure DNS zone for the base domain is found
        """
        return pulumi.get(self, "base_domain_resource_group_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPoolSpecPlatformAzureCredentialsSecretRef(dict):
    """
    CredentialsSecretRef refers to a secret that contains the Azure account access credentials.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CredentialsSecretRef refers to a secret that contains the Azure account access credentials.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPoolSpecPlatformBaremetal(dict):
    """
    BareMetal is the configuration used when installing on bare metal.
    """
    def __init__(__self__, *,
                 libvirt_ssh_private_key_secret_ref: 'outputs.ClusterPoolSpecPlatformBaremetalLibvirtSSHPrivateKeySecretRef'):
        """
        BareMetal is the configuration used when installing on bare metal.
        :param 'ClusterPoolSpecPlatformBaremetalLibvirtSSHPrivateKeySecretRefArgs' libvirt_ssh_private_key_secret_ref: LibvirtSSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to the libvirt provisioning host. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
        """
        pulumi.set(__self__, "libvirt_ssh_private_key_secret_ref", libvirt_ssh_private_key_secret_ref)

    @property
    @pulumi.getter(name="libvirtSSHPrivateKeySecretRef")
    def libvirt_ssh_private_key_secret_ref(self) -> 'outputs.ClusterPoolSpecPlatformBaremetalLibvirtSSHPrivateKeySecretRef':
        """
        LibvirtSSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to the libvirt provisioning host. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
        """
        return pulumi.get(self, "libvirt_ssh_private_key_secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPoolSpecPlatformBaremetalLibvirtSSHPrivateKeySecretRef(dict):
    """
    LibvirtSSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to the libvirt provisioning host. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        LibvirtSSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to the libvirt provisioning host. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPoolSpecPlatformGcp(dict):
    """
    GCP is the configuration used when installing on Google Cloud Platform.
    """
    def __init__(__self__, *,
                 credentials_secret_ref: 'outputs.ClusterPoolSpecPlatformGcpCredentialsSecretRef',
                 region: str):
        """
        GCP is the configuration used when installing on Google Cloud Platform.
        :param 'ClusterPoolSpecPlatformGcpCredentialsSecretRefArgs' credentials_secret_ref: CredentialsSecretRef refers to a secret that contains the GCP account access credentials.
        :param str region: Region specifies the GCP region where the cluster will be created.
        """
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> 'outputs.ClusterPoolSpecPlatformGcpCredentialsSecretRef':
        """
        CredentialsSecretRef refers to a secret that contains the GCP account access credentials.
        """
        return pulumi.get(self, "credentials_secret_ref")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region specifies the GCP region where the cluster will be created.
        """
        return pulumi.get(self, "region")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPoolSpecPlatformGcpCredentialsSecretRef(dict):
    """
    CredentialsSecretRef refers to a secret that contains the GCP account access credentials.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CredentialsSecretRef refers to a secret that contains the GCP account access credentials.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPoolSpecPlatformOpenstack(dict):
    """
    OpenStack is the configuration used when installing on OpenStack
    """
    def __init__(__self__, *,
                 cloud: str,
                 credentials_secret_ref: 'outputs.ClusterPoolSpecPlatformOpenstackCredentialsSecretRef',
                 certificates_secret_ref: Optional['outputs.ClusterPoolSpecPlatformOpenstackCertificatesSecretRef'] = None,
                 trunk_support: Optional[bool] = None):
        """
        OpenStack is the configuration used when installing on OpenStack
        :param str cloud: Cloud will be used to indicate the OS_CLOUD value to use the right section from the clouds.yaml in the CredentialsSecretRef.
        :param 'ClusterPoolSpecPlatformOpenstackCredentialsSecretRefArgs' credentials_secret_ref: CredentialsSecretRef refers to a secret that contains the OpenStack account access credentials.
        :param 'ClusterPoolSpecPlatformOpenstackCertificatesSecretRefArgs' certificates_secret_ref: CertificatesSecretRef refers to a secret that contains CA certificates necessary for communicating with the OpenStack. There is additional configuration required for the OpenShift cluster to trust the certificates provided in this secret. The "clouds.yaml" file included in the credentialsSecretRef Secret must also include a reference to the certificate bundle file for the OpenShift cluster being created to trust the OpenStack endpoints. The "clouds.yaml" file must set the "cacert" field to either "/etc/openstack-ca/<key name containing the trust bundle in credentialsSecretRef Secret>" or "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem". 
                For example, \"\"\"clouds.yaml clouds:   shiftstack:     auth: ...     cacert: "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem" \"\"\"
        :param bool trunk_support: TrunkSupport indicates whether or not to use trunk ports in your OpenShift cluster.
        """
        pulumi.set(__self__, "cloud", cloud)
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        if certificates_secret_ref is not None:
            pulumi.set(__self__, "certificates_secret_ref", certificates_secret_ref)
        if trunk_support is not None:
            pulumi.set(__self__, "trunk_support", trunk_support)

    @property
    @pulumi.getter
    def cloud(self) -> str:
        """
        Cloud will be used to indicate the OS_CLOUD value to use the right section from the clouds.yaml in the CredentialsSecretRef.
        """
        return pulumi.get(self, "cloud")

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> 'outputs.ClusterPoolSpecPlatformOpenstackCredentialsSecretRef':
        """
        CredentialsSecretRef refers to a secret that contains the OpenStack account access credentials.
        """
        return pulumi.get(self, "credentials_secret_ref")

    @property
    @pulumi.getter(name="certificatesSecretRef")
    def certificates_secret_ref(self) -> Optional['outputs.ClusterPoolSpecPlatformOpenstackCertificatesSecretRef']:
        """
        CertificatesSecretRef refers to a secret that contains CA certificates necessary for communicating with the OpenStack. There is additional configuration required for the OpenShift cluster to trust the certificates provided in this secret. The "clouds.yaml" file included in the credentialsSecretRef Secret must also include a reference to the certificate bundle file for the OpenShift cluster being created to trust the OpenStack endpoints. The "clouds.yaml" file must set the "cacert" field to either "/etc/openstack-ca/<key name containing the trust bundle in credentialsSecretRef Secret>" or "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem". 
         For example, \"\"\"clouds.yaml clouds:   shiftstack:     auth: ...     cacert: "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem" \"\"\"
        """
        return pulumi.get(self, "certificates_secret_ref")

    @property
    @pulumi.getter(name="trunkSupport")
    def trunk_support(self) -> Optional[bool]:
        """
        TrunkSupport indicates whether or not to use trunk ports in your OpenShift cluster.
        """
        return pulumi.get(self, "trunk_support")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPoolSpecPlatformOpenstackCertificatesSecretRef(dict):
    """
    CertificatesSecretRef refers to a secret that contains CA certificates necessary for communicating with the OpenStack. There is additional configuration required for the OpenShift cluster to trust the certificates provided in this secret. The "clouds.yaml" file included in the credentialsSecretRef Secret must also include a reference to the certificate bundle file for the OpenShift cluster being created to trust the OpenStack endpoints. The "clouds.yaml" file must set the "cacert" field to either "/etc/openstack-ca/<key name containing the trust bundle in credentialsSecretRef Secret>" or "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem". 
     For example, \"\"\"clouds.yaml clouds:   shiftstack:     auth: ...     cacert: "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem" \"\"\"
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CertificatesSecretRef refers to a secret that contains CA certificates necessary for communicating with the OpenStack. There is additional configuration required for the OpenShift cluster to trust the certificates provided in this secret. The "clouds.yaml" file included in the credentialsSecretRef Secret must also include a reference to the certificate bundle file for the OpenShift cluster being created to trust the OpenStack endpoints. The "clouds.yaml" file must set the "cacert" field to either "/etc/openstack-ca/<key name containing the trust bundle in credentialsSecretRef Secret>" or "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem". 
         For example, \"\"\"clouds.yaml clouds:   shiftstack:     auth: ...     cacert: "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem" \"\"\"
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPoolSpecPlatformOpenstackCredentialsSecretRef(dict):
    """
    CredentialsSecretRef refers to a secret that contains the OpenStack account access credentials.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CredentialsSecretRef refers to a secret that contains the OpenStack account access credentials.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPoolSpecPlatformOvirt(dict):
    """
    Ovirt is the configuration used when installing on oVirt
    """
    def __init__(__self__, *,
                 certificates_secret_ref: 'outputs.ClusterPoolSpecPlatformOvirtCertificatesSecretRef',
                 credentials_secret_ref: 'outputs.ClusterPoolSpecPlatformOvirtCredentialsSecretRef',
                 ovirt_cluster_id: str,
                 storage_domain_id: str,
                 ovirt_network_name: Optional[str] = None):
        """
        Ovirt is the configuration used when installing on oVirt
        :param 'ClusterPoolSpecPlatformOvirtCertificatesSecretRefArgs' certificates_secret_ref: CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with oVirt.
        :param 'ClusterPoolSpecPlatformOvirtCredentialsSecretRefArgs' credentials_secret_ref: CredentialsSecretRef refers to a secret that contains the oVirt account access credentials with fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
        :param str ovirt_cluster_id: The target cluster under which all VMs will run
        :param str storage_domain_id: The target storage domain under which all VM disk would be created.
        :param str ovirt_network_name: The target network of all the network interfaces of the nodes. Omitting defaults to ovirtmgmt network which is a default network for evert ovirt cluster.
        """
        pulumi.set(__self__, "certificates_secret_ref", certificates_secret_ref)
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        pulumi.set(__self__, "ovirt_cluster_id", ovirt_cluster_id)
        pulumi.set(__self__, "storage_domain_id", storage_domain_id)
        if ovirt_network_name is not None:
            pulumi.set(__self__, "ovirt_network_name", ovirt_network_name)

    @property
    @pulumi.getter(name="certificatesSecretRef")
    def certificates_secret_ref(self) -> 'outputs.ClusterPoolSpecPlatformOvirtCertificatesSecretRef':
        """
        CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with oVirt.
        """
        return pulumi.get(self, "certificates_secret_ref")

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> 'outputs.ClusterPoolSpecPlatformOvirtCredentialsSecretRef':
        """
        CredentialsSecretRef refers to a secret that contains the oVirt account access credentials with fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
        """
        return pulumi.get(self, "credentials_secret_ref")

    @property
    @pulumi.getter
    def ovirt_cluster_id(self) -> str:
        """
        The target cluster under which all VMs will run
        """
        return pulumi.get(self, "ovirt_cluster_id")

    @property
    @pulumi.getter
    def storage_domain_id(self) -> str:
        """
        The target storage domain under which all VM disk would be created.
        """
        return pulumi.get(self, "storage_domain_id")

    @property
    @pulumi.getter
    def ovirt_network_name(self) -> Optional[str]:
        """
        The target network of all the network interfaces of the nodes. Omitting defaults to ovirtmgmt network which is a default network for evert ovirt cluster.
        """
        return pulumi.get(self, "ovirt_network_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPoolSpecPlatformOvirtCertificatesSecretRef(dict):
    """
    CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with oVirt.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with oVirt.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPoolSpecPlatformOvirtCredentialsSecretRef(dict):
    """
    CredentialsSecretRef refers to a secret that contains the oVirt account access credentials with fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CredentialsSecretRef refers to a secret that contains the oVirt account access credentials with fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPoolSpecPlatformVsphere(dict):
    """
    VSphere is the configuration used when installing on vSphere
    """
    def __init__(__self__, *,
                 certificates_secret_ref: 'outputs.ClusterPoolSpecPlatformVsphereCertificatesSecretRef',
                 credentials_secret_ref: 'outputs.ClusterPoolSpecPlatformVsphereCredentialsSecretRef',
                 datacenter: str,
                 default_datastore: str,
                 v_center: str,
                 cluster: Optional[str] = None,
                 folder: Optional[str] = None,
                 network: Optional[str] = None):
        """
        VSphere is the configuration used when installing on vSphere
        :param 'ClusterPoolSpecPlatformVsphereCertificatesSecretRefArgs' certificates_secret_ref: CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
        :param 'ClusterPoolSpecPlatformVsphereCredentialsSecretRefArgs' credentials_secret_ref: CredentialsSecretRef refers to a secret that contains the vSphere account access credentials: GOVC_USERNAME, GOVC_PASSWORD fields.
        :param str datacenter: Datacenter is the name of the datacenter to use in the vCenter.
        :param str default_datastore: DefaultDatastore is the default datastore to use for provisioning volumes.
        :param str v_center: VCenter is the domain name or IP address of the vCenter.
        :param str cluster: Cluster is the name of the cluster virtual machines will be cloned into.
        :param str folder: Folder is the name of the folder that will be used and/or created for virtual machines.
        :param str network: Network specifies the name of the network to be used by the cluster.
        """
        pulumi.set(__self__, "certificates_secret_ref", certificates_secret_ref)
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        pulumi.set(__self__, "datacenter", datacenter)
        pulumi.set(__self__, "default_datastore", default_datastore)
        pulumi.set(__self__, "v_center", v_center)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if network is not None:
            pulumi.set(__self__, "network", network)

    @property
    @pulumi.getter(name="certificatesSecretRef")
    def certificates_secret_ref(self) -> 'outputs.ClusterPoolSpecPlatformVsphereCertificatesSecretRef':
        """
        CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
        """
        return pulumi.get(self, "certificates_secret_ref")

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> 'outputs.ClusterPoolSpecPlatformVsphereCredentialsSecretRef':
        """
        CredentialsSecretRef refers to a secret that contains the vSphere account access credentials: GOVC_USERNAME, GOVC_PASSWORD fields.
        """
        return pulumi.get(self, "credentials_secret_ref")

    @property
    @pulumi.getter
    def datacenter(self) -> str:
        """
        Datacenter is the name of the datacenter to use in the vCenter.
        """
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter(name="defaultDatastore")
    def default_datastore(self) -> str:
        """
        DefaultDatastore is the default datastore to use for provisioning volumes.
        """
        return pulumi.get(self, "default_datastore")

    @property
    @pulumi.getter(name="vCenter")
    def v_center(self) -> str:
        """
        VCenter is the domain name or IP address of the vCenter.
        """
        return pulumi.get(self, "v_center")

    @property
    @pulumi.getter
    def cluster(self) -> Optional[str]:
        """
        Cluster is the name of the cluster virtual machines will be cloned into.
        """
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter
    def folder(self) -> Optional[str]:
        """
        Folder is the name of the folder that will be used and/or created for virtual machines.
        """
        return pulumi.get(self, "folder")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        """
        Network specifies the name of the network to be used by the cluster.
        """
        return pulumi.get(self, "network")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPoolSpecPlatformVsphereCertificatesSecretRef(dict):
    """
    CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPoolSpecPlatformVsphereCredentialsSecretRef(dict):
    """
    CredentialsSecretRef refers to a secret that contains the vSphere account access credentials: GOVC_USERNAME, GOVC_PASSWORD fields.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CredentialsSecretRef refers to a secret that contains the vSphere account access credentials: GOVC_USERNAME, GOVC_PASSWORD fields.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPoolSpecPullSecretRef(dict):
    """
    PullSecretRef is the reference to the secret to use when pulling images.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        PullSecretRef is the reference to the secret to use when pulling images.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPoolStatus(dict):
    """
    ClusterPoolStatus defines the observed state of ClusterPool
    """
    def __init__(__self__, *,
                 ready: int,
                 size: int,
                 conditions: Optional[Sequence['outputs.ClusterPoolStatusConditions']] = None):
        """
        ClusterPoolStatus defines the observed state of ClusterPool
        :param int ready: Ready is the number of unclaimed clusters that have been installed and are ready to be claimed.
        :param int size: Size is the number of unclaimed clusters that have been created for the pool.
        :param Sequence['ClusterPoolStatusConditionsArgs'] conditions: Conditions includes more detailed status for the cluster pool
        """
        pulumi.set(__self__, "ready", ready)
        pulumi.set(__self__, "size", size)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def ready(self) -> int:
        """
        Ready is the number of unclaimed clusters that have been installed and are ready to be claimed.
        """
        return pulumi.get(self, "ready")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Size is the number of unclaimed clusters that have been created for the pool.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ClusterPoolStatusConditions']]:
        """
        Conditions includes more detailed status for the cluster pool
        """
        return pulumi.get(self, "conditions")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterPoolStatusConditions(dict):
    """
    ClusterPoolCondition contains details for the current condition of a cluster pool
    """
    def __init__(__self__, *,
                 status: str,
                 type: str,
                 last_probe_time: Optional[str] = None,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        ClusterPoolCondition contains details for the current condition of a cluster pool
        :param str status: Status is the status of the condition.
        :param str type: Type is the type of the condition.
        :param str last_probe_time: LastProbeTime is the last time we probed the condition.
        :param str last_transition_time: LastTransitionTime is the last time the condition transitioned from one status to another.
        :param str message: Message is a human-readable message indicating details about last transition.
        :param str reason: Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_probe_time is not None:
            pulumi.set(__self__, "last_probe_time", last_probe_time)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status is the status of the condition.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type is the type of the condition.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="lastProbeTime")
    def last_probe_time(self) -> Optional[str]:
        """
        LastProbeTime is the last time we probed the condition.
        """
        return pulumi.get(self, "last_probe_time")

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        """
        LastTransitionTime is the last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message is a human-readable message indicating details about last transition.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpec(dict):
    """
    ClusterProvisionSpec defines the results of provisioning a cluster.
    """
    def __init__(__self__, *,
                 attempt: int,
                 cluster_deployment_ref: 'outputs.ClusterProvisionSpecClusterDeploymentRef',
                 pod_spec: 'outputs.ClusterProvisionSpecPodSpec',
                 stage: str,
                 admin_kubeconfig_secret_ref: Optional['outputs.ClusterProvisionSpecAdminKubeconfigSecretRef'] = None,
                 admin_password_secret_ref: Optional['outputs.ClusterProvisionSpecAdminPasswordSecretRef'] = None,
                 cluster_id: Optional[str] = None,
                 infra_id: Optional[str] = None,
                 install_log: Optional[str] = None,
                 metadata: Optional[Mapping[str, Any]] = None,
                 prev_cluster_id: Optional[str] = None,
                 prev_infra_id: Optional[str] = None):
        """
        ClusterProvisionSpec defines the results of provisioning a cluster.
        :param int attempt: Attempt is which attempt number of the cluster deployment that this ClusterProvision is
        :param 'ClusterProvisionSpecClusterDeploymentRefArgs' cluster_deployment_ref: ClusterDeploymentRef references the cluster deployment provisioned.
        :param 'ClusterProvisionSpecPodSpecArgs' pod_spec: PodSpec is the spec to use for the installer pod.
        :param str stage: Stage is the stage of provisioning that the cluster deployment has reached.
        :param 'ClusterProvisionSpecAdminKubeconfigSecretRefArgs' admin_kubeconfig_secret_ref: AdminKubeconfigSecretRef references the secret containing the admin kubeconfig for this cluster.
        :param 'ClusterProvisionSpecAdminPasswordSecretRefArgs' admin_password_secret_ref: AdminPasswordSecretRef references the secret containing the admin username/password which can be used to login to this cluster.
        :param str cluster_id: ClusterID is a globally unique identifier for this cluster generated during installation. Used for reporting metrics among other places.
        :param str infra_id: InfraID is an identifier for this cluster generated during installation and used for tagging/naming resources in cloud providers.
        :param str install_log: InstallLog is the log from the installer.
        :param Mapping[str, Any] metadata: Metadata is the metadata.json generated by the installer, providing metadata information about the cluster created.
        :param str prev_cluster_id: PrevClusterID is the cluster ID of the previous failed provision attempt.
        :param str prev_infra_id: PrevInfraID is the infra ID of the previous failed provision attempt.
        """
        pulumi.set(__self__, "attempt", attempt)
        pulumi.set(__self__, "cluster_deployment_ref", cluster_deployment_ref)
        pulumi.set(__self__, "pod_spec", pod_spec)
        pulumi.set(__self__, "stage", stage)
        if admin_kubeconfig_secret_ref is not None:
            pulumi.set(__self__, "admin_kubeconfig_secret_ref", admin_kubeconfig_secret_ref)
        if admin_password_secret_ref is not None:
            pulumi.set(__self__, "admin_password_secret_ref", admin_password_secret_ref)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if infra_id is not None:
            pulumi.set(__self__, "infra_id", infra_id)
        if install_log is not None:
            pulumi.set(__self__, "install_log", install_log)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if prev_cluster_id is not None:
            pulumi.set(__self__, "prev_cluster_id", prev_cluster_id)
        if prev_infra_id is not None:
            pulumi.set(__self__, "prev_infra_id", prev_infra_id)

    @property
    @pulumi.getter
    def attempt(self) -> int:
        """
        Attempt is which attempt number of the cluster deployment that this ClusterProvision is
        """
        return pulumi.get(self, "attempt")

    @property
    @pulumi.getter(name="clusterDeploymentRef")
    def cluster_deployment_ref(self) -> 'outputs.ClusterProvisionSpecClusterDeploymentRef':
        """
        ClusterDeploymentRef references the cluster deployment provisioned.
        """
        return pulumi.get(self, "cluster_deployment_ref")

    @property
    @pulumi.getter(name="podSpec")
    def pod_spec(self) -> 'outputs.ClusterProvisionSpecPodSpec':
        """
        PodSpec is the spec to use for the installer pod.
        """
        return pulumi.get(self, "pod_spec")

    @property
    @pulumi.getter
    def stage(self) -> str:
        """
        Stage is the stage of provisioning that the cluster deployment has reached.
        """
        return pulumi.get(self, "stage")

    @property
    @pulumi.getter(name="adminKubeconfigSecretRef")
    def admin_kubeconfig_secret_ref(self) -> Optional['outputs.ClusterProvisionSpecAdminKubeconfigSecretRef']:
        """
        AdminKubeconfigSecretRef references the secret containing the admin kubeconfig for this cluster.
        """
        return pulumi.get(self, "admin_kubeconfig_secret_ref")

    @property
    @pulumi.getter(name="adminPasswordSecretRef")
    def admin_password_secret_ref(self) -> Optional['outputs.ClusterProvisionSpecAdminPasswordSecretRef']:
        """
        AdminPasswordSecretRef references the secret containing the admin username/password which can be used to login to this cluster.
        """
        return pulumi.get(self, "admin_password_secret_ref")

    @property
    @pulumi.getter(name="clusterID")
    def cluster_id(self) -> Optional[str]:
        """
        ClusterID is a globally unique identifier for this cluster generated during installation. Used for reporting metrics among other places.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="infraID")
    def infra_id(self) -> Optional[str]:
        """
        InfraID is an identifier for this cluster generated during installation and used for tagging/naming resources in cloud providers.
        """
        return pulumi.get(self, "infra_id")

    @property
    @pulumi.getter(name="installLog")
    def install_log(self) -> Optional[str]:
        """
        InstallLog is the log from the installer.
        """
        return pulumi.get(self, "install_log")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, Any]]:
        """
        Metadata is the metadata.json generated by the installer, providing metadata information about the cluster created.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="prevClusterID")
    def prev_cluster_id(self) -> Optional[str]:
        """
        PrevClusterID is the cluster ID of the previous failed provision attempt.
        """
        return pulumi.get(self, "prev_cluster_id")

    @property
    @pulumi.getter(name="prevInfraID")
    def prev_infra_id(self) -> Optional[str]:
        """
        PrevInfraID is the infra ID of the previous failed provision attempt.
        """
        return pulumi.get(self, "prev_infra_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecAdminKubeconfigSecretRef(dict):
    """
    AdminKubeconfigSecretRef references the secret containing the admin kubeconfig for this cluster.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        AdminKubeconfigSecretRef references the secret containing the admin kubeconfig for this cluster.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecAdminPasswordSecretRef(dict):
    """
    AdminPasswordSecretRef references the secret containing the admin username/password which can be used to login to this cluster.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        AdminPasswordSecretRef references the secret containing the admin username/password which can be used to login to this cluster.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecClusterDeploymentRef(dict):
    """
    ClusterDeploymentRef references the cluster deployment provisioned.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        ClusterDeploymentRef references the cluster deployment provisioned.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpec(dict):
    """
    PodSpec is the spec to use for the installer pod.
    """
    def __init__(__self__, *,
                 containers: Sequence['outputs.ClusterProvisionSpecPodSpecContainers'],
                 active_deadline_seconds: Optional[int] = None,
                 affinity: Optional['outputs.ClusterProvisionSpecPodSpecAffinity'] = None,
                 automount_service_account_token: Optional[bool] = None,
                 dns_config: Optional['outputs.ClusterProvisionSpecPodSpecDnsConfig'] = None,
                 dns_policy: Optional[str] = None,
                 enable_service_links: Optional[bool] = None,
                 ephemeral_containers: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecEphemeralContainers']] = None,
                 host_aliases: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecHostAliases']] = None,
                 host_ipc: Optional[bool] = None,
                 host_network: Optional[bool] = None,
                 host_pid: Optional[bool] = None,
                 hostname: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecImagePullSecrets']] = None,
                 init_containers: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecInitContainers']] = None,
                 node_name: Optional[str] = None,
                 node_selector: Optional[Mapping[str, str]] = None,
                 overhead: Optional[Mapping[str, str]] = None,
                 preemption_policy: Optional[str] = None,
                 priority: Optional[int] = None,
                 priority_class_name: Optional[str] = None,
                 readiness_gates: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecReadinessGates']] = None,
                 restart_policy: Optional[str] = None,
                 runtime_class_name: Optional[str] = None,
                 scheduler_name: Optional[str] = None,
                 security_context: Optional['outputs.ClusterProvisionSpecPodSpecSecurityContext'] = None,
                 service_account: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 set_hostname_as_fqdn: Optional[bool] = None,
                 share_process_namespace: Optional[bool] = None,
                 subdomain: Optional[str] = None,
                 termination_grace_period_seconds: Optional[int] = None,
                 tolerations: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecTolerations']] = None,
                 topology_spread_constraints: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecTopologySpreadConstraints']] = None,
                 volumes: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecVolumes']] = None):
        """
        PodSpec is the spec to use for the installer pod.
        :param Sequence['ClusterProvisionSpecPodSpecContainersArgs'] containers: List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
        :param int active_deadline_seconds: Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
        :param 'ClusterProvisionSpecPodSpecAffinityArgs' affinity: If specified, the pod's scheduling constraints
        :param bool automount_service_account_token: AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
        :param 'ClusterProvisionSpecPodSpecDnsConfigArgs' dns_config: Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
        :param str dns_policy: Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
        :param bool enable_service_links: EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
        :param Sequence['ClusterProvisionSpecPodSpecEphemeralContainersArgs'] ephemeral_containers: List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is alpha-level and is only honored by servers that enable the EphemeralContainers feature.
        :param Sequence['ClusterProvisionSpecPodSpecHostAliasesArgs'] host_aliases: HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
        :param bool host_ipc: Use the host's ipc namespace. Optional: Default to false.
        :param bool host_network: Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
        :param bool host_pid: Use the host's pid namespace. Optional: Default to false.
        :param str hostname: Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
        :param Sequence['ClusterProvisionSpecPodSpecImagePullSecretsArgs'] image_pull_secrets: ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
        :param Sequence['ClusterProvisionSpecPodSpecInitContainersArgs'] init_containers: List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
        :param str node_name: NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
        :param Mapping[str, str] node_selector: NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        :param Mapping[str, str] overhead: Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.16, and is only honored by servers that enable the PodOverhead feature.
        :param str preemption_policy: PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is beta-level, gated by the NonPreemptingPriority feature-gate.
        :param int priority: The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
        :param str priority_class_name: If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
        :param Sequence['ClusterProvisionSpecPodSpecReadinessGatesArgs'] readiness_gates: If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
        :param str restart_policy: Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
        :param str runtime_class_name: RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is a beta feature as of Kubernetes v1.14.
        :param str scheduler_name: If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
        :param 'ClusterProvisionSpecPodSpecSecurityContextArgs' security_context: SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
        :param str service_account: DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
        :param str service_account_name: ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
        :param bool set_hostname_as_fqdn: If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
        :param bool share_process_namespace: Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
        :param str subdomain: If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
        :param int termination_grace_period_seconds: Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
        :param Sequence['ClusterProvisionSpecPodSpecTolerationsArgs'] tolerations: If specified, the pod's tolerations.
        :param Sequence['ClusterProvisionSpecPodSpecTopologySpreadConstraintsArgs'] topology_spread_constraints: TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
        :param Sequence['ClusterProvisionSpecPodSpecVolumesArgs'] volumes: List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
        """
        pulumi.set(__self__, "containers", containers)
        if active_deadline_seconds is not None:
            pulumi.set(__self__, "active_deadline_seconds", active_deadline_seconds)
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if automount_service_account_token is not None:
            pulumi.set(__self__, "automount_service_account_token", automount_service_account_token)
        if dns_config is not None:
            pulumi.set(__self__, "dns_config", dns_config)
        if dns_policy is not None:
            pulumi.set(__self__, "dns_policy", dns_policy)
        if enable_service_links is not None:
            pulumi.set(__self__, "enable_service_links", enable_service_links)
        if ephemeral_containers is not None:
            pulumi.set(__self__, "ephemeral_containers", ephemeral_containers)
        if host_aliases is not None:
            pulumi.set(__self__, "host_aliases", host_aliases)
        if host_ipc is not None:
            pulumi.set(__self__, "host_ipc", host_ipc)
        if host_network is not None:
            pulumi.set(__self__, "host_network", host_network)
        if host_pid is not None:
            pulumi.set(__self__, "host_pid", host_pid)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if init_containers is not None:
            pulumi.set(__self__, "init_containers", init_containers)
        if node_name is not None:
            pulumi.set(__self__, "node_name", node_name)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if overhead is not None:
            pulumi.set(__self__, "overhead", overhead)
        if preemption_policy is not None:
            pulumi.set(__self__, "preemption_policy", preemption_policy)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if readiness_gates is not None:
            pulumi.set(__self__, "readiness_gates", readiness_gates)
        if restart_policy is not None:
            pulumi.set(__self__, "restart_policy", restart_policy)
        if runtime_class_name is not None:
            pulumi.set(__self__, "runtime_class_name", runtime_class_name)
        if scheduler_name is not None:
            pulumi.set(__self__, "scheduler_name", scheduler_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if set_hostname_as_fqdn is not None:
            pulumi.set(__self__, "set_hostname_as_fqdn", set_hostname_as_fqdn)
        if share_process_namespace is not None:
            pulumi.set(__self__, "share_process_namespace", share_process_namespace)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)
        if topology_spread_constraints is not None:
            pulumi.set(__self__, "topology_spread_constraints", topology_spread_constraints)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.ClusterProvisionSpecPodSpecContainers']:
        """
        List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
        """
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="activeDeadlineSeconds")
    def active_deadline_seconds(self) -> Optional[int]:
        """
        Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
        """
        return pulumi.get(self, "active_deadline_seconds")

    @property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.ClusterProvisionSpecPodSpecAffinity']:
        """
        If specified, the pod's scheduling constraints
        """
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter(name="automountServiceAccountToken")
    def automount_service_account_token(self) -> Optional[bool]:
        """
        AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
        """
        return pulumi.get(self, "automount_service_account_token")

    @property
    @pulumi.getter(name="dnsConfig")
    def dns_config(self) -> Optional['outputs.ClusterProvisionSpecPodSpecDnsConfig']:
        """
        Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
        """
        return pulumi.get(self, "dns_config")

    @property
    @pulumi.getter(name="dnsPolicy")
    def dns_policy(self) -> Optional[str]:
        """
        Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
        """
        return pulumi.get(self, "dns_policy")

    @property
    @pulumi.getter(name="enableServiceLinks")
    def enable_service_links(self) -> Optional[bool]:
        """
        EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
        """
        return pulumi.get(self, "enable_service_links")

    @property
    @pulumi.getter(name="ephemeralContainers")
    def ephemeral_containers(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecEphemeralContainers']]:
        """
        List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is alpha-level and is only honored by servers that enable the EphemeralContainers feature.
        """
        return pulumi.get(self, "ephemeral_containers")

    @property
    @pulumi.getter(name="hostAliases")
    def host_aliases(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecHostAliases']]:
        """
        HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
        """
        return pulumi.get(self, "host_aliases")

    @property
    @pulumi.getter(name="hostIPC")
    def host_ipc(self) -> Optional[bool]:
        """
        Use the host's ipc namespace. Optional: Default to false.
        """
        return pulumi.get(self, "host_ipc")

    @property
    @pulumi.getter(name="hostNetwork")
    def host_network(self) -> Optional[bool]:
        """
        Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
        """
        return pulumi.get(self, "host_network")

    @property
    @pulumi.getter(name="hostPID")
    def host_pid(self) -> Optional[bool]:
        """
        Use the host's pid namespace. Optional: Default to false.
        """
        return pulumi.get(self, "host_pid")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        """
        Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecImagePullSecrets']]:
        """
        ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
        """
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="initContainers")
    def init_containers(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecInitContainers']]:
        """
        List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
        """
        return pulumi.get(self, "init_containers")

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> Optional[str]:
        """
        NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
        """
        return pulumi.get(self, "node_name")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, str]]:
        """
        NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter
    def overhead(self) -> Optional[Mapping[str, str]]:
        """
        Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.16, and is only honored by servers that enable the PodOverhead feature.
        """
        return pulumi.get(self, "overhead")

    @property
    @pulumi.getter(name="preemptionPolicy")
    def preemption_policy(self) -> Optional[str]:
        """
        PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is beta-level, gated by the NonPreemptingPriority feature-gate.
        """
        return pulumi.get(self, "preemption_policy")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        """
        If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
        """
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter(name="readinessGates")
    def readiness_gates(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecReadinessGates']]:
        """
        If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
        """
        return pulumi.get(self, "readiness_gates")

    @property
    @pulumi.getter(name="restartPolicy")
    def restart_policy(self) -> Optional[str]:
        """
        Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
        """
        return pulumi.get(self, "restart_policy")

    @property
    @pulumi.getter(name="runtimeClassName")
    def runtime_class_name(self) -> Optional[str]:
        """
        RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is a beta feature as of Kubernetes v1.14.
        """
        return pulumi.get(self, "runtime_class_name")

    @property
    @pulumi.getter(name="schedulerName")
    def scheduler_name(self) -> Optional[str]:
        """
        If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
        """
        return pulumi.get(self, "scheduler_name")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.ClusterProvisionSpecPodSpecSecurityContext']:
        """
        SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
        """
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[str]:
        """
        DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
        """
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter(name="setHostnameAsFQDN")
    def set_hostname_as_fqdn(self) -> Optional[bool]:
        """
        If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
        """
        return pulumi.get(self, "set_hostname_as_fqdn")

    @property
    @pulumi.getter(name="shareProcessNamespace")
    def share_process_namespace(self) -> Optional[bool]:
        """
        Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
        """
        return pulumi.get(self, "share_process_namespace")

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[str]:
        """
        If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
        """
        return pulumi.get(self, "subdomain")

    @property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[int]:
        """
        Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
        """
        return pulumi.get(self, "termination_grace_period_seconds")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecTolerations']]:
        """
        If specified, the pod's tolerations.
        """
        return pulumi.get(self, "tolerations")

    @property
    @pulumi.getter(name="topologySpreadConstraints")
    def topology_spread_constraints(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecTopologySpreadConstraints']]:
        """
        TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
        """
        return pulumi.get(self, "topology_spread_constraints")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecVolumes']]:
        """
        List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
        """
        return pulumi.get(self, "volumes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecAffinity(dict):
    """
    If specified, the pod's scheduling constraints
    """
    def __init__(__self__, *,
                 node_affinity: Optional['outputs.ClusterProvisionSpecPodSpecAffinityNodeAffinity'] = None,
                 pod_affinity: Optional['outputs.ClusterProvisionSpecPodSpecAffinityPodAffinity'] = None,
                 pod_anti_affinity: Optional['outputs.ClusterProvisionSpecPodSpecAffinityPodAntiAffinity'] = None):
        """
        If specified, the pod's scheduling constraints
        :param 'ClusterProvisionSpecPodSpecAffinityNodeAffinityArgs' node_affinity: Describes node affinity scheduling rules for the pod.
        :param 'ClusterProvisionSpecPodSpecAffinityPodAffinityArgs' pod_affinity: Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param 'ClusterProvisionSpecPodSpecAffinityPodAntiAffinityArgs' pod_anti_affinity: Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        """
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> Optional['outputs.ClusterProvisionSpecPodSpecAffinityNodeAffinity']:
        """
        Describes node affinity scheduling rules for the pod.
        """
        return pulumi.get(self, "node_affinity")

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> Optional['outputs.ClusterProvisionSpecPodSpecAffinityPodAffinity']:
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        """
        return pulumi.get(self, "pod_affinity")

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.ClusterProvisionSpecPodSpecAffinityPodAntiAffinity']:
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        """
        return pulumi.get(self, "pod_anti_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecAffinityNodeAffinity(dict):
    """
    Describes node affinity scheduling rules for the pod.
    """
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional['outputs.ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution'] = None):
        """
        Describes node affinity scheduling rules for the pod.
        :param Sequence['ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs'] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
        :param 'ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs' required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional['outputs.ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution']:
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    """
    An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
    """
    def __init__(__self__, *,
                 preference: 'outputs.ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
                 weight: int):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        :param 'ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs' preference: A node selector term, associated with the corresponding weight.
        :param int weight: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(self) -> 'outputs.ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference':
        """
        A node selector term, associated with the corresponding weight.
        """
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference(dict):
    """
    A node selector term, associated with the corresponding weight.
    """
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']] = None):
        """
        A node selector term, associated with the corresponding weight.
        :param Sequence['ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs'] match_expressions: A list of node selector requirements by node's labels.
        :param Sequence['ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs'] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions(dict):
    """
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields(dict):
    """
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    """
    If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
    """
    def __init__(__self__, *,
                 node_selector_terms: Sequence['outputs.ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']):
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
        :param Sequence['ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs'] node_selector_terms: Required. A list of node selector terms. The terms are ORed.
        """
        pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> Sequence['outputs.ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']:
        """
        Required. A list of node selector terms. The terms are ORed.
        """
        return pulumi.get(self, "node_selector_terms")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms(dict):
    """
    A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
    """
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']] = None):
        """
        A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        :param Sequence['ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs'] match_expressions: A list of node selector requirements by node's labels.
        :param Sequence['ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs'] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions(dict):
    """
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields(dict):
    """
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecAffinityPodAffinity(dict):
    """
    Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
    """
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param Sequence['ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs'] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        :param Sequence['ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs'] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    """
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
    """
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param 'ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs' pod_affinity_term: Required. A pod affinity term, associated with the corresponding weight.
        :param int weight: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    """
    Required. A pod affinity term, associated with the corresponding weight.
    """
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param 'ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs' label_selector: A label query over a set of resources, in this case pods.
        :param Sequence[str] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    """
    A label query over a set of resources, in this case pods.
    """
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param Sequence['ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    """
    Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
    """
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        """
        Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param 'ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs' label_selector: A label query over a set of resources, in this case pods.
        :param Sequence[str] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    """
    A label query over a set of resources, in this case pods.
    """
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param Sequence['ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecAffinityPodAntiAffinity(dict):
    """
    Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
    """
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        :param Sequence['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs'] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        :param Sequence['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs'] required_during_scheduling_ignored_during_execution: If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        """
        If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    """
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
    """
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param 'ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs' pod_affinity_term: Required. A pod affinity term, associated with the corresponding weight.
        :param int weight: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    """
    Required. A pod affinity term, associated with the corresponding weight.
    """
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param 'ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs' label_selector: A label query over a set of resources, in this case pods.
        :param Sequence[str] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    """
    A label query over a set of resources, in this case pods.
    """
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param Sequence['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    """
    Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
    """
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        """
        Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param 'ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs' label_selector: A label query over a set of resources, in this case pods.
        :param Sequence[str] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    """
    A label query over a set of resources, in this case pods.
    """
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param Sequence['ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainers(dict):
    """
    A single application container that you want to run within a pod.
    """
    def __init__(__self__, *,
                 name: str,
                 args: Optional[Sequence[str]] = None,
                 command: Optional[Sequence[str]] = None,
                 env: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecContainersEnv']] = None,
                 env_from: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecContainersEnvFrom']] = None,
                 image: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 lifecycle: Optional['outputs.ClusterProvisionSpecPodSpecContainersLifecycle'] = None,
                 liveness_probe: Optional['outputs.ClusterProvisionSpecPodSpecContainersLivenessProbe'] = None,
                 ports: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecContainersPorts']] = None,
                 readiness_probe: Optional['outputs.ClusterProvisionSpecPodSpecContainersReadinessProbe'] = None,
                 resources: Optional['outputs.ClusterProvisionSpecPodSpecContainersResources'] = None,
                 security_context: Optional['outputs.ClusterProvisionSpecPodSpecContainersSecurityContext'] = None,
                 startup_probe: Optional['outputs.ClusterProvisionSpecPodSpecContainersStartupProbe'] = None,
                 stdin: Optional[bool] = None,
                 stdin_once: Optional[bool] = None,
                 termination_message_path: Optional[str] = None,
                 termination_message_policy: Optional[str] = None,
                 tty: Optional[bool] = None,
                 volume_devices: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecContainersVolumeDevices']] = None,
                 volume_mounts: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecContainersVolumeMounts']] = None,
                 working_dir: Optional[str] = None):
        """
        A single application container that you want to run within a pod.
        :param str name: Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
        :param Sequence[str] args: Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        :param Sequence[str] command: Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        :param Sequence['ClusterProvisionSpecPodSpecContainersEnvArgs'] env: List of environment variables to set in the container. Cannot be updated.
        :param Sequence['ClusterProvisionSpecPodSpecContainersEnvFromArgs'] env_from: List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        :param str image: Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
        :param str image_pull_policy: Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
        :param 'ClusterProvisionSpecPodSpecContainersLifecycleArgs' lifecycle: Actions that the management system should take in response to container lifecycle events. Cannot be updated.
        :param 'ClusterProvisionSpecPodSpecContainersLivenessProbeArgs' liveness_probe: Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param Sequence['ClusterProvisionSpecPodSpecContainersPortsArgs'] ports: List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
        :param 'ClusterProvisionSpecPodSpecContainersReadinessProbeArgs' readiness_probe: Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param 'ClusterProvisionSpecPodSpecContainersResourcesArgs' resources: Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param 'ClusterProvisionSpecPodSpecContainersSecurityContextArgs' security_context: Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        :param 'ClusterProvisionSpecPodSpecContainersStartupProbeArgs' startup_probe: StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param bool stdin: Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
        :param bool stdin_once: Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
        :param str termination_message_path: Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
        :param str termination_message_policy: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        :param bool tty: Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
        :param Sequence['ClusterProvisionSpecPodSpecContainersVolumeDevicesArgs'] volume_devices: volumeDevices is the list of block devices to be used by the container.
        :param Sequence['ClusterProvisionSpecPodSpecContainersVolumeMountsArgs'] volume_mounts: Pod volumes to mount into the container's filesystem. Cannot be updated.
        :param str working_dir: Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        """
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if env_from is not None:
            pulumi.set(__self__, "env_from", env_from)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if stdin_once is not None:
            pulumi.set(__self__, "stdin_once", stdin_once)
        if termination_message_path is not None:
            pulumi.set(__self__, "termination_message_path", termination_message_path)
        if termination_message_policy is not None:
            pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if volume_devices is not None:
            pulumi.set(__self__, "volume_devices", volume_devices)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        """
        Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        """
        Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecContainersEnv']]:
        """
        List of environment variables to set in the container. Cannot be updated.
        """
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="envFrom")
    def env_from(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecContainersEnvFrom']]:
        """
        List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        """
        return pulumi.get(self, "env_from")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        """
        Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        """
        Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
        """
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersLifecycle']:
        """
        Actions that the management system should take in response to container lifecycle events. Cannot be updated.
        """
        return pulumi.get(self, "lifecycle")

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersLivenessProbe']:
        """
        Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "liveness_probe")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecContainersPorts']]:
        """
        List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersReadinessProbe']:
        """
        Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "readiness_probe")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersResources']:
        """
        Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersSecurityContext']:
        """
        Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        """
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersStartupProbe']:
        """
        StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "startup_probe")

    @property
    @pulumi.getter
    def stdin(self) -> Optional[bool]:
        """
        Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
        """
        return pulumi.get(self, "stdin")

    @property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> Optional[bool]:
        """
        Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
        """
        return pulumi.get(self, "stdin_once")

    @property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> Optional[str]:
        """
        Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
        """
        return pulumi.get(self, "termination_message_path")

    @property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> Optional[str]:
        """
        Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        """
        return pulumi.get(self, "termination_message_policy")

    @property
    @pulumi.getter
    def tty(self) -> Optional[bool]:
        """
        Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
        """
        return pulumi.get(self, "tty")

    @property
    @pulumi.getter(name="volumeDevices")
    def volume_devices(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecContainersVolumeDevices']]:
        """
        volumeDevices is the list of block devices to be used by the container.
        """
        return pulumi.get(self, "volume_devices")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecContainersVolumeMounts']]:
        """
        Pod volumes to mount into the container's filesystem. Cannot be updated.
        """
        return pulumi.get(self, "volume_mounts")

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[str]:
        """
        Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        """
        return pulumi.get(self, "working_dir")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersEnv(dict):
    """
    EnvVar represents an environment variable present in a Container.
    """
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.ClusterProvisionSpecPodSpecContainersEnvValueFrom'] = None):
        """
        EnvVar represents an environment variable present in a Container.
        :param str name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param str value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param 'ClusterProvisionSpecPodSpecContainersEnvValueFromArgs' value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the environment variable. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersEnvValueFrom']:
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersEnvFrom(dict):
    """
    EnvFromSource represents the source of a set of ConfigMaps
    """
    def __init__(__self__, *,
                 config_map_ref: Optional['outputs.ClusterProvisionSpecPodSpecContainersEnvFromConfigMapRef'] = None,
                 prefix: Optional[str] = None,
                 secret_ref: Optional['outputs.ClusterProvisionSpecPodSpecContainersEnvFromSecretRef'] = None):
        """
        EnvFromSource represents the source of a set of ConfigMaps
        :param 'ClusterProvisionSpecPodSpecContainersEnvFromConfigMapRefArgs' config_map_ref: The ConfigMap to select from
        :param str prefix: An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        :param 'ClusterProvisionSpecPodSpecContainersEnvFromSecretRefArgs' secret_ref: The Secret to select from
        """
        if config_map_ref is not None:
            pulumi.set(__self__, "config_map_ref", config_map_ref)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersEnvFromConfigMapRef']:
        """
        The ConfigMap to select from
        """
        return pulumi.get(self, "config_map_ref")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersEnvFromSecretRef']:
        """
        The Secret to select from
        """
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersEnvFromConfigMapRef(dict):
    """
    The ConfigMap to select from
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        """
        The ConfigMap to select from
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param bool optional: Specify whether the ConfigMap must be defined
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        """
        Specify whether the ConfigMap must be defined
        """
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersEnvFromSecretRef(dict):
    """
    The Secret to select from
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        """
        The Secret to select from
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param bool optional: Specify whether the Secret must be defined
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        """
        Specify whether the Secret must be defined
        """
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersEnvValueFrom(dict):
    """
    Source for the environment variable's value. Cannot be used if value is not empty.
    """
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.ClusterProvisionSpecPodSpecContainersEnvValueFromConfigMapKeyRef'] = None,
                 field_ref: Optional['outputs.ClusterProvisionSpecPodSpecContainersEnvValueFromFieldRef'] = None,
                 resource_field_ref: Optional['outputs.ClusterProvisionSpecPodSpecContainersEnvValueFromResourceFieldRef'] = None,
                 secret_key_ref: Optional['outputs.ClusterProvisionSpecPodSpecContainersEnvValueFromSecretKeyRef'] = None):
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        :param 'ClusterProvisionSpecPodSpecContainersEnvValueFromConfigMapKeyRefArgs' config_map_key_ref: Selects a key of a ConfigMap.
        :param 'ClusterProvisionSpecPodSpecContainersEnvValueFromFieldRefArgs' field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param 'ClusterProvisionSpecPodSpecContainersEnvValueFromResourceFieldRefArgs' resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param 'ClusterProvisionSpecPodSpecContainersEnvValueFromSecretKeyRefArgs' secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersEnvValueFromConfigMapKeyRef']:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersEnvValueFromFieldRef']:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        """
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersEnvValueFromResourceFieldRef']:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersEnvValueFromSecretKeyRef']:
        """
        Selects a key of a secret in the pod's namespace
        """
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersEnvValueFromConfigMapKeyRef(dict):
    """
    Selects a key of a ConfigMap.
    """
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        """
        Selects a key of a ConfigMap.
        :param str key: The key to select.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param bool optional: Specify whether the ConfigMap or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        """
        Specify whether the ConfigMap or its key must be defined
        """
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersEnvValueFromFieldRef(dict):
    """
    Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
    """
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param str field_path: Path of the field to select in the specified API version.
        :param str api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersEnvValueFromResourceFieldRef(dict):
    """
    Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
    """
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[str] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param str resource: Required: resource to select
        :param str container_name: Container name: required for volumes, optional for env vars
        :param str divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[str]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersEnvValueFromSecretKeyRef(dict):
    """
    Selects a key of a secret in the pod's namespace
    """
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        """
        Selects a key of a secret in the pod's namespace
        :param str key: The key of the secret to select from.  Must be a valid secret key.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param bool optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersLifecycle(dict):
    """
    Actions that the management system should take in response to container lifecycle events. Cannot be updated.
    """
    def __init__(__self__, *,
                 post_start: Optional['outputs.ClusterProvisionSpecPodSpecContainersLifecyclePostStart'] = None,
                 pre_stop: Optional['outputs.ClusterProvisionSpecPodSpecContainersLifecyclePreStop'] = None):
        """
        Actions that the management system should take in response to container lifecycle events. Cannot be updated.
        :param 'ClusterProvisionSpecPodSpecContainersLifecyclePostStartArgs' post_start: PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        :param 'ClusterProvisionSpecPodSpecContainersLifecyclePreStopArgs' pre_stop: PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersLifecyclePostStart']:
        """
        PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        return pulumi.get(self, "post_start")

    @property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersLifecyclePreStop']:
        """
        PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        return pulumi.get(self, "pre_stop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersLifecyclePostStart(dict):
    """
    PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
    """
    def __init__(__self__, *,
                 exec_: Optional['outputs.ClusterProvisionSpecPodSpecContainersLifecyclePostStartExec'] = None,
                 http_get: Optional['outputs.ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGet'] = None,
                 tcp_socket: Optional['outputs.ClusterProvisionSpecPodSpecContainersLifecyclePostStartTcpSocket'] = None):
        """
        PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        :param 'ClusterProvisionSpecPodSpecContainersLifecyclePostStartExecArgs' exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param 'ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetArgs' http_get: HTTPGet specifies the http request to perform.
        :param 'ClusterProvisionSpecPodSpecContainersLifecyclePostStartTcpSocketArgs' tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersLifecyclePostStartExec']:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGet']:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersLifecyclePostStartTcpSocket']:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersLifecyclePostStartExec(dict):
    """
    One and only one of the following should be specified. Exec specifies the action to take.
    """
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param Sequence[str] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGet(dict):
    """
    HTTPGet specifies the http request to perform.
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        """
        HTTPGet specifies the http request to perform.
        :param 'ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetPortArgs' port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param Sequence['ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs'] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param str path: Path to access on the HTTP server.
        :param str scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetPort':
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetHttpHeaders']]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetHttpHeaders(dict):
    """
    HTTPHeader describes a custom header to be used in HTTP probes
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param str name: The header field name
        :param str value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersLifecyclePostStartHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersLifecyclePostStartTcpSocket(dict):
    """
    TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecContainersLifecyclePostStartTcpSocketPort',
                 host: Optional[str] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param 'ClusterProvisionSpecPodSpecContainersLifecyclePostStartTcpSocketPortArgs' port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecContainersLifecyclePostStartTcpSocketPort':
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersLifecyclePostStartTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersLifecyclePreStop(dict):
    """
    PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
    """
    def __init__(__self__, *,
                 exec_: Optional['outputs.ClusterProvisionSpecPodSpecContainersLifecyclePreStopExec'] = None,
                 http_get: Optional['outputs.ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGet'] = None,
                 tcp_socket: Optional['outputs.ClusterProvisionSpecPodSpecContainersLifecyclePreStopTcpSocket'] = None):
        """
        PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        :param 'ClusterProvisionSpecPodSpecContainersLifecyclePreStopExecArgs' exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param 'ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetArgs' http_get: HTTPGet specifies the http request to perform.
        :param 'ClusterProvisionSpecPodSpecContainersLifecyclePreStopTcpSocketArgs' tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersLifecyclePreStopExec']:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGet']:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersLifecyclePreStopTcpSocket']:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersLifecyclePreStopExec(dict):
    """
    One and only one of the following should be specified. Exec specifies the action to take.
    """
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param Sequence[str] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGet(dict):
    """
    HTTPGet specifies the http request to perform.
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        """
        HTTPGet specifies the http request to perform.
        :param 'ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetPortArgs' port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param Sequence['ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs'] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param str path: Path to access on the HTTP server.
        :param str scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetPort':
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetHttpHeaders']]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetHttpHeaders(dict):
    """
    HTTPHeader describes a custom header to be used in HTTP probes
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param str name: The header field name
        :param str value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersLifecyclePreStopHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersLifecyclePreStopTcpSocket(dict):
    """
    TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecContainersLifecyclePreStopTcpSocketPort',
                 host: Optional[str] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param 'ClusterProvisionSpecPodSpecContainersLifecyclePreStopTcpSocketPortArgs' port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecContainersLifecyclePreStopTcpSocketPort':
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersLifecyclePreStopTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersLivenessProbe(dict):
    """
    Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """
    def __init__(__self__, *,
                 exec_: Optional['outputs.ClusterProvisionSpecPodSpecContainersLivenessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.ClusterProvisionSpecPodSpecContainersLivenessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        """
        Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param 'ClusterProvisionSpecPodSpecContainersLivenessProbeExecArgs' exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param int failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        :param 'ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetArgs' http_get: HTTPGet specifies the http request to perform.
        :param int initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param int period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        :param int success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        :param 'ClusterProvisionSpecPodSpecContainersLivenessProbeTcpSocketArgs' tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param int timeout_seconds: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersLivenessProbeExec']:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        """
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGet']:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        """
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        """
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        """
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersLivenessProbeTcpSocket']:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersLivenessProbeExec(dict):
    """
    One and only one of the following should be specified. Exec specifies the action to take.
    """
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param Sequence[str] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGet(dict):
    """
    HTTPGet specifies the http request to perform.
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        """
        HTTPGet specifies the http request to perform.
        :param 'ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetPortArgs' port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param Sequence['ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetHttpHeadersArgs'] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param str path: Path to access on the HTTP server.
        :param str scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetPort':
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetHttpHeaders']]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetHttpHeaders(dict):
    """
    HTTPHeader describes a custom header to be used in HTTP probes
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param str name: The header field name
        :param str value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersLivenessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersLivenessProbeTcpSocket(dict):
    """
    TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecContainersLivenessProbeTcpSocketPort',
                 host: Optional[str] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param 'ClusterProvisionSpecPodSpecContainersLivenessProbeTcpSocketPortArgs' port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecContainersLivenessProbeTcpSocketPort':
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersLivenessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersPorts(dict):
    """
    ContainerPort represents a network port in a single container.
    """
    def __init__(__self__, *,
                 container_port: int,
                 host_ip: Optional[str] = None,
                 host_port: Optional[int] = None,
                 name: Optional[str] = None,
                 protocol: Optional[str] = None):
        """
        ContainerPort represents a network port in a single container.
        :param int container_port: Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        :param str host_ip: What host IP to bind the external port to.
        :param int host_port: Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        :param str name: If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
        :param str protocol: Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
        """
        pulumi.set(__self__, "container_port", container_port)
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> int:
        """
        Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        """
        return pulumi.get(self, "container_port")

    @property
    @pulumi.getter(name="hostIP")
    def host_ip(self) -> Optional[str]:
        """
        What host IP to bind the external port to.
        """
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[int]:
        """
        Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        """
        return pulumi.get(self, "host_port")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
        """
        return pulumi.get(self, "protocol")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersReadinessProbe(dict):
    """
    Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """
    def __init__(__self__, *,
                 exec_: Optional['outputs.ClusterProvisionSpecPodSpecContainersReadinessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.ClusterProvisionSpecPodSpecContainersReadinessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        """
        Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param 'ClusterProvisionSpecPodSpecContainersReadinessProbeExecArgs' exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param int failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        :param 'ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetArgs' http_get: HTTPGet specifies the http request to perform.
        :param int initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param int period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        :param int success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        :param 'ClusterProvisionSpecPodSpecContainersReadinessProbeTcpSocketArgs' tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param int timeout_seconds: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersReadinessProbeExec']:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        """
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGet']:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        """
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        """
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        """
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersReadinessProbeTcpSocket']:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersReadinessProbeExec(dict):
    """
    One and only one of the following should be specified. Exec specifies the action to take.
    """
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param Sequence[str] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGet(dict):
    """
    HTTPGet specifies the http request to perform.
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        """
        HTTPGet specifies the http request to perform.
        :param 'ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetPortArgs' port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param Sequence['ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetHttpHeadersArgs'] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param str path: Path to access on the HTTP server.
        :param str scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetPort':
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetHttpHeaders']]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetHttpHeaders(dict):
    """
    HTTPHeader describes a custom header to be used in HTTP probes
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param str name: The header field name
        :param str value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersReadinessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersReadinessProbeTcpSocket(dict):
    """
    TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecContainersReadinessProbeTcpSocketPort',
                 host: Optional[str] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param 'ClusterProvisionSpecPodSpecContainersReadinessProbeTcpSocketPortArgs' port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecContainersReadinessProbeTcpSocketPort':
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersReadinessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersResources(dict):
    """
    Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    """
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, str]] = None,
                 requests: Optional[Mapping[str, str]] = None):
        """
        Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param Mapping[str, str] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param Mapping[str, str] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, str]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, str]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersSecurityContext(dict):
    """
    Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    """
    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[bool] = None,
                 capabilities: Optional['outputs.ClusterProvisionSpecPodSpecContainersSecurityContextCapabilities'] = None,
                 privileged: Optional[bool] = None,
                 proc_mount: Optional[str] = None,
                 read_only_root_filesystem: Optional[bool] = None,
                 run_as_group: Optional[int] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[int] = None,
                 se_linux_options: Optional['outputs.ClusterProvisionSpecPodSpecContainersSecurityContextSeLinuxOptions'] = None,
                 seccomp_profile: Optional['outputs.ClusterProvisionSpecPodSpecContainersSecurityContextSeccompProfile'] = None,
                 windows_options: Optional['outputs.ClusterProvisionSpecPodSpecContainersSecurityContextWindowsOptions'] = None):
        """
        Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        :param bool allow_privilege_escalation: AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
        :param 'ClusterProvisionSpecPodSpecContainersSecurityContextCapabilitiesArgs' capabilities: The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        :param bool privileged: Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
        :param str proc_mount: procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
        :param bool read_only_root_filesystem: Whether this container has a read-only root filesystem. Default is false.
        :param int run_as_group: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param bool run_as_non_root: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param int run_as_user: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param 'ClusterProvisionSpecPodSpecContainersSecurityContextSeLinuxOptionsArgs' se_linux_options: The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param 'ClusterProvisionSpecPodSpecContainersSecurityContextSeccompProfileArgs' seccomp_profile: The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
        :param 'ClusterProvisionSpecPodSpecContainersSecurityContextWindowsOptionsArgs' windows_options: The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if proc_mount is not None:
            pulumi.set(__self__, "proc_mount", proc_mount)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if seccomp_profile is not None:
            pulumi.set(__self__, "seccomp_profile", seccomp_profile)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[bool]:
        """
        AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
        """
        return pulumi.get(self, "allow_privilege_escalation")

    @property
    @pulumi.getter
    def capabilities(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersSecurityContextCapabilities']:
        """
        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def privileged(self) -> Optional[bool]:
        """
        Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
        """
        return pulumi.get(self, "privileged")

    @property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> Optional[str]:
        """
        procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
        """
        return pulumi.get(self, "proc_mount")

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[bool]:
        """
        Whether this container has a read-only root filesystem. Default is false.
        """
        return pulumi.get(self, "read_only_root_filesystem")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        """
        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        """
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        """
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersSecurityContextSeLinuxOptions']:
        """
        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="seccompProfile")
    def seccomp_profile(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersSecurityContextSeccompProfile']:
        """
        The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
        """
        return pulumi.get(self, "seccomp_profile")

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersSecurityContextWindowsOptions']:
        """
        The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "windows_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersSecurityContextCapabilities(dict):
    """
    The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
    """
    def __init__(__self__, *,
                 add: Optional[Sequence[str]] = None,
                 drop: Optional[Sequence[str]] = None):
        """
        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        :param Sequence[str] add: Added capabilities
        :param Sequence[str] drop: Removed capabilities
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence[str]]:
        """
        Added capabilities
        """
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def drop(self) -> Optional[Sequence[str]]:
        """
        Removed capabilities
        """
        return pulumi.get(self, "drop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersSecurityContextSeLinuxOptions(dict):
    """
    The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    """
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 role: Optional[str] = None,
                 type: Optional[str] = None,
                 user: Optional[str] = None):
        """
        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param str level: Level is SELinux level label that applies to the container.
        :param str role: Role is a SELinux role label that applies to the container.
        :param str type: Type is a SELinux type label that applies to the container.
        :param str user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersSecurityContextSeccompProfile(dict):
    """
    The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
    """
    def __init__(__self__, *,
                 type: str,
                 localhost_profile: Optional[str] = None):
        """
        The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
        :param str type: type indicates which kind of seccomp profile will be applied. Valid options are: 
                Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
        :param str localhost_profile: localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
        """
        pulumi.set(__self__, "type", type)
        if localhost_profile is not None:
            pulumi.set(__self__, "localhost_profile", localhost_profile)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type indicates which kind of seccomp profile will be applied. Valid options are: 
         Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="localhostProfile")
    def localhost_profile(self) -> Optional[str]:
        """
        localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
        """
        return pulumi.get(self, "localhost_profile")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersSecurityContextWindowsOptions(dict):
    """
    The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    """
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[str] = None,
                 gmsa_credential_spec_name: Optional[str] = None,
                 run_as_user_name: Optional[str] = None):
        """
        The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param str gmsa_credential_spec: GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
        :param str gmsa_credential_spec_name: GMSACredentialSpecName is the name of the GMSA credential spec to use.
        :param str run_as_user_name: The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[str]:
        """
        GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
        """
        return pulumi.get(self, "gmsa_credential_spec")

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[str]:
        """
        GMSACredentialSpecName is the name of the GMSA credential spec to use.
        """
        return pulumi.get(self, "gmsa_credential_spec_name")

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[str]:
        """
        The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersStartupProbe(dict):
    """
    StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """
    def __init__(__self__, *,
                 exec_: Optional['outputs.ClusterProvisionSpecPodSpecContainersStartupProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.ClusterProvisionSpecPodSpecContainersStartupProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.ClusterProvisionSpecPodSpecContainersStartupProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        """
        StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param 'ClusterProvisionSpecPodSpecContainersStartupProbeExecArgs' exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param int failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        :param 'ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetArgs' http_get: HTTPGet specifies the http request to perform.
        :param int initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param int period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        :param int success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        :param 'ClusterProvisionSpecPodSpecContainersStartupProbeTcpSocketArgs' tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param int timeout_seconds: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersStartupProbeExec']:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        """
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersStartupProbeHttpGet']:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        """
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        """
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        """
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.ClusterProvisionSpecPodSpecContainersStartupProbeTcpSocket']:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersStartupProbeExec(dict):
    """
    One and only one of the following should be specified. Exec specifies the action to take.
    """
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param Sequence[str] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersStartupProbeHttpGet(dict):
    """
    HTTPGet specifies the http request to perform.
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        """
        HTTPGet specifies the http request to perform.
        :param 'ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetPortArgs' port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param Sequence['ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetHttpHeadersArgs'] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param str path: Path to access on the HTTP server.
        :param str scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetPort':
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetHttpHeaders']]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetHttpHeaders(dict):
    """
    HTTPHeader describes a custom header to be used in HTTP probes
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param str name: The header field name
        :param str value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersStartupProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersStartupProbeTcpSocket(dict):
    """
    TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecContainersStartupProbeTcpSocketPort',
                 host: Optional[str] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param 'ClusterProvisionSpecPodSpecContainersStartupProbeTcpSocketPortArgs' port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecContainersStartupProbeTcpSocketPort':
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersStartupProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersVolumeDevices(dict):
    """
    volumeDevice describes a mapping of a raw block device within a container.
    """
    def __init__(__self__, *,
                 device_path: str,
                 name: str):
        """
        volumeDevice describes a mapping of a raw block device within a container.
        :param str device_path: devicePath is the path inside of the container that the device will be mapped to.
        :param str name: name must match the name of a persistentVolumeClaim in the pod
        """
        pulumi.set(__self__, "device_path", device_path)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="devicePath")
    def device_path(self) -> str:
        """
        devicePath is the path inside of the container that the device will be mapped to.
        """
        return pulumi.get(self, "device_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name must match the name of a persistentVolumeClaim in the pod
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecContainersVolumeMounts(dict):
    """
    VolumeMount describes a mounting of a Volume within a container.
    """
    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        """
        VolumeMount describes a mounting of a Volume within a container.
        :param str mount_path: Path within the container at which the volume should be mounted.  Must not contain ':'.
        :param str name: This must match the Name of a Volume.
        :param str mount_propagation: mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
        :param bool read_only: Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        :param str sub_path: Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        :param str sub_path_expr: Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
        """
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        """
        Path within the container at which the volume should be mounted.  Must not contain ':'.
        """
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        This must match the Name of a Volume.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        """
        mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
        """
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        """
        Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        """
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        """
        Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
        """
        return pulumi.get(self, "sub_path_expr")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecDnsConfig(dict):
    """
    Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
    """
    def __init__(__self__, *,
                 nameservers: Optional[Sequence[str]] = None,
                 options: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecDnsConfigOptions']] = None,
                 searches: Optional[Sequence[str]] = None):
        """
        Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
        :param Sequence[str] nameservers: A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
        :param Sequence['ClusterProvisionSpecPodSpecDnsConfigOptionsArgs'] options: A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
        :param Sequence[str] searches: A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
        """
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if searches is not None:
            pulumi.set(__self__, "searches", searches)

    @property
    @pulumi.getter
    def nameservers(self) -> Optional[Sequence[str]]:
        """
        A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
        """
        return pulumi.get(self, "nameservers")

    @property
    @pulumi.getter
    def options(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecDnsConfigOptions']]:
        """
        A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def searches(self) -> Optional[Sequence[str]]:
        """
        A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
        """
        return pulumi.get(self, "searches")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecDnsConfigOptions(dict):
    """
    PodDNSConfigOption defines DNS resolver options of a pod.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        PodDNSConfigOption defines DNS resolver options of a pod.
        :param str name: Required.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Required.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainers(dict):
    """
    An EphemeralContainer is a container that may be added temporarily to an existing pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a pod is removed or restarted. If an ephemeral container causes a pod to exceed its resource allocation, the pod may be evicted. Ephemeral containers may not be added by directly updating the pod spec. They must be added via the pod's ephemeralcontainers subresource, and they will appear in the pod spec once added. This is an alpha feature enabled by the EphemeralContainers feature flag.
    """
    def __init__(__self__, *,
                 name: str,
                 args: Optional[Sequence[str]] = None,
                 command: Optional[Sequence[str]] = None,
                 env: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecEphemeralContainersEnv']] = None,
                 env_from: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecEphemeralContainersEnvFrom']] = None,
                 image: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 lifecycle: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecycle'] = None,
                 liveness_probe: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbe'] = None,
                 ports: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecEphemeralContainersPorts']] = None,
                 readiness_probe: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbe'] = None,
                 resources: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersResources'] = None,
                 security_context: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersSecurityContext'] = None,
                 startup_probe: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersStartupProbe'] = None,
                 stdin: Optional[bool] = None,
                 stdin_once: Optional[bool] = None,
                 target_container_name: Optional[str] = None,
                 termination_message_path: Optional[str] = None,
                 termination_message_policy: Optional[str] = None,
                 tty: Optional[bool] = None,
                 volume_devices: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecEphemeralContainersVolumeDevices']] = None,
                 volume_mounts: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecEphemeralContainersVolumeMounts']] = None,
                 working_dir: Optional[str] = None):
        """
        An EphemeralContainer is a container that may be added temporarily to an existing pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a pod is removed or restarted. If an ephemeral container causes a pod to exceed its resource allocation, the pod may be evicted. Ephemeral containers may not be added by directly updating the pod spec. They must be added via the pod's ephemeralcontainers subresource, and they will appear in the pod spec once added. This is an alpha feature enabled by the EphemeralContainers feature flag.
        :param str name: Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
        :param Sequence[str] args: Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        :param Sequence[str] command: Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        :param Sequence['ClusterProvisionSpecPodSpecEphemeralContainersEnvArgs'] env: List of environment variables to set in the container. Cannot be updated.
        :param Sequence['ClusterProvisionSpecPodSpecEphemeralContainersEnvFromArgs'] env_from: List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        :param str image: Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images
        :param str image_pull_policy: Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersLifecycleArgs' lifecycle: Lifecycle is not allowed for ephemeral containers.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeArgs' liveness_probe: Probes are not allowed for ephemeral containers.
        :param Sequence['ClusterProvisionSpecPodSpecEphemeralContainersPortsArgs'] ports: Ports are not allowed for ephemeral containers.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeArgs' readiness_probe: Probes are not allowed for ephemeral containers.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersResourcesArgs' resources: Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextArgs' security_context: SecurityContext is not allowed for ephemeral containers.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeArgs' startup_probe: Probes are not allowed for ephemeral containers.
        :param bool stdin: Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
        :param bool stdin_once: Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
        :param str target_container_name: If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container is run in whatever namespaces are shared for the pod. Note that the container runtime must support this feature.
        :param str termination_message_path: Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
        :param str termination_message_policy: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        :param bool tty: Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
        :param Sequence['ClusterProvisionSpecPodSpecEphemeralContainersVolumeDevicesArgs'] volume_devices: volumeDevices is the list of block devices to be used by the container.
        :param Sequence['ClusterProvisionSpecPodSpecEphemeralContainersVolumeMountsArgs'] volume_mounts: Pod volumes to mount into the container's filesystem. Cannot be updated.
        :param str working_dir: Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        """
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if env_from is not None:
            pulumi.set(__self__, "env_from", env_from)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if stdin_once is not None:
            pulumi.set(__self__, "stdin_once", stdin_once)
        if target_container_name is not None:
            pulumi.set(__self__, "target_container_name", target_container_name)
        if termination_message_path is not None:
            pulumi.set(__self__, "termination_message_path", termination_message_path)
        if termination_message_policy is not None:
            pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if volume_devices is not None:
            pulumi.set(__self__, "volume_devices", volume_devices)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        """
        Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        """
        Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecEphemeralContainersEnv']]:
        """
        List of environment variables to set in the container. Cannot be updated.
        """
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="envFrom")
    def env_from(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecEphemeralContainersEnvFrom']]:
        """
        List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        """
        return pulumi.get(self, "env_from")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        """
        Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        """
        Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
        """
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecycle']:
        """
        Lifecycle is not allowed for ephemeral containers.
        """
        return pulumi.get(self, "lifecycle")

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbe']:
        """
        Probes are not allowed for ephemeral containers.
        """
        return pulumi.get(self, "liveness_probe")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecEphemeralContainersPorts']]:
        """
        Ports are not allowed for ephemeral containers.
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbe']:
        """
        Probes are not allowed for ephemeral containers.
        """
        return pulumi.get(self, "readiness_probe")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersResources']:
        """
        Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersSecurityContext']:
        """
        SecurityContext is not allowed for ephemeral containers.
        """
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersStartupProbe']:
        """
        Probes are not allowed for ephemeral containers.
        """
        return pulumi.get(self, "startup_probe")

    @property
    @pulumi.getter
    def stdin(self) -> Optional[bool]:
        """
        Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
        """
        return pulumi.get(self, "stdin")

    @property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> Optional[bool]:
        """
        Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
        """
        return pulumi.get(self, "stdin_once")

    @property
    @pulumi.getter(name="targetContainerName")
    def target_container_name(self) -> Optional[str]:
        """
        If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container is run in whatever namespaces are shared for the pod. Note that the container runtime must support this feature.
        """
        return pulumi.get(self, "target_container_name")

    @property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> Optional[str]:
        """
        Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
        """
        return pulumi.get(self, "termination_message_path")

    @property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> Optional[str]:
        """
        Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        """
        return pulumi.get(self, "termination_message_policy")

    @property
    @pulumi.getter
    def tty(self) -> Optional[bool]:
        """
        Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
        """
        return pulumi.get(self, "tty")

    @property
    @pulumi.getter(name="volumeDevices")
    def volume_devices(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecEphemeralContainersVolumeDevices']]:
        """
        volumeDevices is the list of block devices to be used by the container.
        """
        return pulumi.get(self, "volume_devices")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecEphemeralContainersVolumeMounts']]:
        """
        Pod volumes to mount into the container's filesystem. Cannot be updated.
        """
        return pulumi.get(self, "volume_mounts")

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[str]:
        """
        Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        """
        return pulumi.get(self, "working_dir")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersEnv(dict):
    """
    EnvVar represents an environment variable present in a Container.
    """
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFrom'] = None):
        """
        EnvVar represents an environment variable present in a Container.
        :param str name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param str value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromArgs' value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the environment variable. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFrom']:
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersEnvFrom(dict):
    """
    EnvFromSource represents the source of a set of ConfigMaps
    """
    def __init__(__self__, *,
                 config_map_ref: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersEnvFromConfigMapRef'] = None,
                 prefix: Optional[str] = None,
                 secret_ref: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersEnvFromSecretRef'] = None):
        """
        EnvFromSource represents the source of a set of ConfigMaps
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersEnvFromConfigMapRefArgs' config_map_ref: The ConfigMap to select from
        :param str prefix: An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersEnvFromSecretRefArgs' secret_ref: The Secret to select from
        """
        if config_map_ref is not None:
            pulumi.set(__self__, "config_map_ref", config_map_ref)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersEnvFromConfigMapRef']:
        """
        The ConfigMap to select from
        """
        return pulumi.get(self, "config_map_ref")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersEnvFromSecretRef']:
        """
        The Secret to select from
        """
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersEnvFromConfigMapRef(dict):
    """
    The ConfigMap to select from
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        """
        The ConfigMap to select from
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param bool optional: Specify whether the ConfigMap must be defined
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        """
        Specify whether the ConfigMap must be defined
        """
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersEnvFromSecretRef(dict):
    """
    The Secret to select from
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        """
        The Secret to select from
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param bool optional: Specify whether the Secret must be defined
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        """
        Specify whether the Secret must be defined
        """
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFrom(dict):
    """
    Source for the environment variable's value. Cannot be used if value is not empty.
    """
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromConfigMapKeyRef'] = None,
                 field_ref: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromFieldRef'] = None,
                 resource_field_ref: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRef'] = None,
                 secret_key_ref: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromSecretKeyRef'] = None):
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromConfigMapKeyRefArgs' config_map_key_ref: Selects a key of a ConfigMap.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromFieldRefArgs' field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRefArgs' resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromSecretKeyRefArgs' secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromConfigMapKeyRef']:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromFieldRef']:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        """
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRef']:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromSecretKeyRef']:
        """
        Selects a key of a secret in the pod's namespace
        """
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromConfigMapKeyRef(dict):
    """
    Selects a key of a ConfigMap.
    """
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        """
        Selects a key of a ConfigMap.
        :param str key: The key to select.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param bool optional: Specify whether the ConfigMap or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        """
        Specify whether the ConfigMap or its key must be defined
        """
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromFieldRef(dict):
    """
    Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
    """
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param str field_path: Path of the field to select in the specified API version.
        :param str api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRef(dict):
    """
    Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
    """
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[str] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param str resource: Required: resource to select
        :param str container_name: Container name: required for volumes, optional for env vars
        :param str divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[str]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersEnvValueFromSecretKeyRef(dict):
    """
    Selects a key of a secret in the pod's namespace
    """
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        """
        Selects a key of a secret in the pod's namespace
        :param str key: The key of the secret to select from.  Must be a valid secret key.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param bool optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecycle(dict):
    """
    Lifecycle is not allowed for ephemeral containers.
    """
    def __init__(__self__, *,
                 post_start: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStart'] = None,
                 pre_stop: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStop'] = None):
        """
        Lifecycle is not allowed for ephemeral containers.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartArgs' post_start: PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopArgs' pre_stop: PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStart']:
        """
        PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        return pulumi.get(self, "post_start")

    @property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStop']:
        """
        PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        return pulumi.get(self, "pre_stop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStart(dict):
    """
    PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
    """
    def __init__(__self__, *,
                 exec_: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartExec'] = None,
                 http_get: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGet'] = None,
                 tcp_socket: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocket'] = None):
        """
        PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartExecArgs' exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetArgs' http_get: HTTPGet specifies the http request to perform.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocketArgs' tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartExec']:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGet']:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocket']:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartExec(dict):
    """
    One and only one of the following should be specified. Exec specifies the action to take.
    """
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param Sequence[str] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGet(dict):
    """
    HTTPGet specifies the http request to perform.
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        """
        HTTPGet specifies the http request to perform.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetPortArgs' port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param Sequence['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersArgs'] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param str path: Path to access on the HTTP server.
        :param str scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetPort':
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders']]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders(dict):
    """
    HTTPHeader describes a custom header to be used in HTTP probes
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param str name: The header field name
        :param str value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocket(dict):
    """
    TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocketPort',
                 host: Optional[str] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocketPortArgs' port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocketPort':
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStop(dict):
    """
    PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
    """
    def __init__(__self__, *,
                 exec_: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopExec'] = None,
                 http_get: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGet'] = None,
                 tcp_socket: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocket'] = None):
        """
        PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopExecArgs' exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetArgs' http_get: HTTPGet specifies the http request to perform.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocketArgs' tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopExec']:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGet']:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocket']:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopExec(dict):
    """
    One and only one of the following should be specified. Exec specifies the action to take.
    """
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param Sequence[str] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGet(dict):
    """
    HTTPGet specifies the http request to perform.
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        """
        HTTPGet specifies the http request to perform.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetPortArgs' port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param Sequence['ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersArgs'] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param str path: Path to access on the HTTP server.
        :param str scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetPort':
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders']]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders(dict):
    """
    HTTPHeader describes a custom header to be used in HTTP probes
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param str name: The header field name
        :param str value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocket(dict):
    """
    TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocketPort',
                 host: Optional[str] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocketPortArgs' port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocketPort':
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbe(dict):
    """
    Probes are not allowed for ephemeral containers.
    """
    def __init__(__self__, *,
                 exec_: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        """
        Probes are not allowed for ephemeral containers.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeExecArgs' exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param int failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetArgs' http_get: HTTPGet specifies the http request to perform.
        :param int initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param int period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        :param int success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeTcpSocketArgs' tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param int timeout_seconds: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeExec']:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        """
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGet']:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        """
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        """
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        """
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeTcpSocket']:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeExec(dict):
    """
    One and only one of the following should be specified. Exec specifies the action to take.
    """
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param Sequence[str] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGet(dict):
    """
    HTTPGet specifies the http request to perform.
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        """
        HTTPGet specifies the http request to perform.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetPortArgs' port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param Sequence['ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersArgs'] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param str path: Path to access on the HTTP server.
        :param str scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetPort':
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders']]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders(dict):
    """
    HTTPHeader describes a custom header to be used in HTTP probes
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param str name: The header field name
        :param str value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeTcpSocket(dict):
    """
    TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeTcpSocketPort',
                 host: Optional[str] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeTcpSocketPortArgs' port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeTcpSocketPort':
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersLivenessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersPorts(dict):
    """
    ContainerPort represents a network port in a single container.
    """
    def __init__(__self__, *,
                 container_port: int,
                 host_ip: Optional[str] = None,
                 host_port: Optional[int] = None,
                 name: Optional[str] = None,
                 protocol: Optional[str] = None):
        """
        ContainerPort represents a network port in a single container.
        :param int container_port: Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        :param str host_ip: What host IP to bind the external port to.
        :param int host_port: Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        :param str name: If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
        :param str protocol: Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
        """
        pulumi.set(__self__, "container_port", container_port)
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> int:
        """
        Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        """
        return pulumi.get(self, "container_port")

    @property
    @pulumi.getter(name="hostIP")
    def host_ip(self) -> Optional[str]:
        """
        What host IP to bind the external port to.
        """
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[int]:
        """
        Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        """
        return pulumi.get(self, "host_port")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
        """
        return pulumi.get(self, "protocol")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbe(dict):
    """
    Probes are not allowed for ephemeral containers.
    """
    def __init__(__self__, *,
                 exec_: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        """
        Probes are not allowed for ephemeral containers.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeExecArgs' exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param int failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetArgs' http_get: HTTPGet specifies the http request to perform.
        :param int initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param int period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        :param int success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeTcpSocketArgs' tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param int timeout_seconds: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeExec']:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        """
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGet']:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        """
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        """
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        """
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeTcpSocket']:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeExec(dict):
    """
    One and only one of the following should be specified. Exec specifies the action to take.
    """
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param Sequence[str] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGet(dict):
    """
    HTTPGet specifies the http request to perform.
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        """
        HTTPGet specifies the http request to perform.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetPortArgs' port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param Sequence['ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersArgs'] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param str path: Path to access on the HTTP server.
        :param str scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetPort':
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders']]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders(dict):
    """
    HTTPHeader describes a custom header to be used in HTTP probes
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param str name: The header field name
        :param str value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeTcpSocket(dict):
    """
    TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeTcpSocketPort',
                 host: Optional[str] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeTcpSocketPortArgs' port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeTcpSocketPort':
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersReadinessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersResources(dict):
    """
    Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
    """
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, str]] = None,
                 requests: Optional[Mapping[str, str]] = None):
        """
        Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
        :param Mapping[str, str] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param Mapping[str, str] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, str]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, str]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersSecurityContext(dict):
    """
    SecurityContext is not allowed for ephemeral containers.
    """
    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[bool] = None,
                 capabilities: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextCapabilities'] = None,
                 privileged: Optional[bool] = None,
                 proc_mount: Optional[str] = None,
                 read_only_root_filesystem: Optional[bool] = None,
                 run_as_group: Optional[int] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[int] = None,
                 se_linux_options: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextSeLinuxOptions'] = None,
                 seccomp_profile: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextSeccompProfile'] = None,
                 windows_options: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextWindowsOptions'] = None):
        """
        SecurityContext is not allowed for ephemeral containers.
        :param bool allow_privilege_escalation: AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextCapabilitiesArgs' capabilities: The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        :param bool privileged: Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
        :param str proc_mount: procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
        :param bool read_only_root_filesystem: Whether this container has a read-only root filesystem. Default is false.
        :param int run_as_group: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param bool run_as_non_root: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param int run_as_user: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextSeLinuxOptionsArgs' se_linux_options: The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextSeccompProfileArgs' seccomp_profile: The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextWindowsOptionsArgs' windows_options: The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if proc_mount is not None:
            pulumi.set(__self__, "proc_mount", proc_mount)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if seccomp_profile is not None:
            pulumi.set(__self__, "seccomp_profile", seccomp_profile)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[bool]:
        """
        AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
        """
        return pulumi.get(self, "allow_privilege_escalation")

    @property
    @pulumi.getter
    def capabilities(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextCapabilities']:
        """
        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def privileged(self) -> Optional[bool]:
        """
        Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
        """
        return pulumi.get(self, "privileged")

    @property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> Optional[str]:
        """
        procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
        """
        return pulumi.get(self, "proc_mount")

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[bool]:
        """
        Whether this container has a read-only root filesystem. Default is false.
        """
        return pulumi.get(self, "read_only_root_filesystem")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        """
        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        """
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        """
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextSeLinuxOptions']:
        """
        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="seccompProfile")
    def seccomp_profile(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextSeccompProfile']:
        """
        The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
        """
        return pulumi.get(self, "seccomp_profile")

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextWindowsOptions']:
        """
        The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "windows_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextCapabilities(dict):
    """
    The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
    """
    def __init__(__self__, *,
                 add: Optional[Sequence[str]] = None,
                 drop: Optional[Sequence[str]] = None):
        """
        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        :param Sequence[str] add: Added capabilities
        :param Sequence[str] drop: Removed capabilities
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence[str]]:
        """
        Added capabilities
        """
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def drop(self) -> Optional[Sequence[str]]:
        """
        Removed capabilities
        """
        return pulumi.get(self, "drop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextSeLinuxOptions(dict):
    """
    The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    """
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 role: Optional[str] = None,
                 type: Optional[str] = None,
                 user: Optional[str] = None):
        """
        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param str level: Level is SELinux level label that applies to the container.
        :param str role: Role is a SELinux role label that applies to the container.
        :param str type: Type is a SELinux type label that applies to the container.
        :param str user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextSeccompProfile(dict):
    """
    The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
    """
    def __init__(__self__, *,
                 type: str,
                 localhost_profile: Optional[str] = None):
        """
        The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
        :param str type: type indicates which kind of seccomp profile will be applied. Valid options are: 
                Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
        :param str localhost_profile: localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
        """
        pulumi.set(__self__, "type", type)
        if localhost_profile is not None:
            pulumi.set(__self__, "localhost_profile", localhost_profile)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type indicates which kind of seccomp profile will be applied. Valid options are: 
         Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="localhostProfile")
    def localhost_profile(self) -> Optional[str]:
        """
        localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
        """
        return pulumi.get(self, "localhost_profile")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersSecurityContextWindowsOptions(dict):
    """
    The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    """
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[str] = None,
                 gmsa_credential_spec_name: Optional[str] = None,
                 run_as_user_name: Optional[str] = None):
        """
        The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param str gmsa_credential_spec: GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
        :param str gmsa_credential_spec_name: GMSACredentialSpecName is the name of the GMSA credential spec to use.
        :param str run_as_user_name: The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[str]:
        """
        GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
        """
        return pulumi.get(self, "gmsa_credential_spec")

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[str]:
        """
        GMSACredentialSpecName is the name of the GMSA credential spec to use.
        """
        return pulumi.get(self, "gmsa_credential_spec_name")

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[str]:
        """
        The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersStartupProbe(dict):
    """
    Probes are not allowed for ephemeral containers.
    """
    def __init__(__self__, *,
                 exec_: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        """
        Probes are not allowed for ephemeral containers.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeExecArgs' exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param int failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetArgs' http_get: HTTPGet specifies the http request to perform.
        :param int initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param int period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        :param int success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeTcpSocketArgs' tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param int timeout_seconds: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeExec']:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        """
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGet']:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        """
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        """
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        """
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeTcpSocket']:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeExec(dict):
    """
    One and only one of the following should be specified. Exec specifies the action to take.
    """
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param Sequence[str] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGet(dict):
    """
    HTTPGet specifies the http request to perform.
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        """
        HTTPGet specifies the http request to perform.
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetPortArgs' port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param Sequence['ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetHttpHeadersArgs'] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param str path: Path to access on the HTTP server.
        :param str scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetPort':
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetHttpHeaders']]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetHttpHeaders(dict):
    """
    HTTPHeader describes a custom header to be used in HTTP probes
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param str name: The header field name
        :param str value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeTcpSocket(dict):
    """
    TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeTcpSocketPort',
                 host: Optional[str] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param 'ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeTcpSocketPortArgs' port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeTcpSocketPort':
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersStartupProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersVolumeDevices(dict):
    """
    volumeDevice describes a mapping of a raw block device within a container.
    """
    def __init__(__self__, *,
                 device_path: str,
                 name: str):
        """
        volumeDevice describes a mapping of a raw block device within a container.
        :param str device_path: devicePath is the path inside of the container that the device will be mapped to.
        :param str name: name must match the name of a persistentVolumeClaim in the pod
        """
        pulumi.set(__self__, "device_path", device_path)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="devicePath")
    def device_path(self) -> str:
        """
        devicePath is the path inside of the container that the device will be mapped to.
        """
        return pulumi.get(self, "device_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name must match the name of a persistentVolumeClaim in the pod
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecEphemeralContainersVolumeMounts(dict):
    """
    VolumeMount describes a mounting of a Volume within a container.
    """
    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        """
        VolumeMount describes a mounting of a Volume within a container.
        :param str mount_path: Path within the container at which the volume should be mounted.  Must not contain ':'.
        :param str name: This must match the Name of a Volume.
        :param str mount_propagation: mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
        :param bool read_only: Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        :param str sub_path: Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        :param str sub_path_expr: Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
        """
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        """
        Path within the container at which the volume should be mounted.  Must not contain ':'.
        """
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        This must match the Name of a Volume.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        """
        mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
        """
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        """
        Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        """
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        """
        Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
        """
        return pulumi.get(self, "sub_path_expr")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecHostAliases(dict):
    """
    HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
    """
    def __init__(__self__, *,
                 hostnames: Optional[Sequence[str]] = None,
                 ip: Optional[str] = None):
        """
        HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
        :param Sequence[str] hostnames: Hostnames for the above IP address.
        :param str ip: IP address of the host file entry.
        """
        if hostnames is not None:
            pulumi.set(__self__, "hostnames", hostnames)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def hostnames(self) -> Optional[Sequence[str]]:
        """
        Hostnames for the above IP address.
        """
        return pulumi.get(self, "hostnames")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        IP address of the host file entry.
        """
        return pulumi.get(self, "ip")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecImagePullSecrets(dict):
    """
    LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainers(dict):
    """
    A single application container that you want to run within a pod.
    """
    def __init__(__self__, *,
                 name: str,
                 args: Optional[Sequence[str]] = None,
                 command: Optional[Sequence[str]] = None,
                 env: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecInitContainersEnv']] = None,
                 env_from: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecInitContainersEnvFrom']] = None,
                 image: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 lifecycle: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersLifecycle'] = None,
                 liveness_probe: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersLivenessProbe'] = None,
                 ports: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecInitContainersPorts']] = None,
                 readiness_probe: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersReadinessProbe'] = None,
                 resources: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersResources'] = None,
                 security_context: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersSecurityContext'] = None,
                 startup_probe: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersStartupProbe'] = None,
                 stdin: Optional[bool] = None,
                 stdin_once: Optional[bool] = None,
                 termination_message_path: Optional[str] = None,
                 termination_message_policy: Optional[str] = None,
                 tty: Optional[bool] = None,
                 volume_devices: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecInitContainersVolumeDevices']] = None,
                 volume_mounts: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecInitContainersVolumeMounts']] = None,
                 working_dir: Optional[str] = None):
        """
        A single application container that you want to run within a pod.
        :param str name: Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
        :param Sequence[str] args: Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        :param Sequence[str] command: Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        :param Sequence['ClusterProvisionSpecPodSpecInitContainersEnvArgs'] env: List of environment variables to set in the container. Cannot be updated.
        :param Sequence['ClusterProvisionSpecPodSpecInitContainersEnvFromArgs'] env_from: List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        :param str image: Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
        :param str image_pull_policy: Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
        :param 'ClusterProvisionSpecPodSpecInitContainersLifecycleArgs' lifecycle: Actions that the management system should take in response to container lifecycle events. Cannot be updated.
        :param 'ClusterProvisionSpecPodSpecInitContainersLivenessProbeArgs' liveness_probe: Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param Sequence['ClusterProvisionSpecPodSpecInitContainersPortsArgs'] ports: List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
        :param 'ClusterProvisionSpecPodSpecInitContainersReadinessProbeArgs' readiness_probe: Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param 'ClusterProvisionSpecPodSpecInitContainersResourcesArgs' resources: Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param 'ClusterProvisionSpecPodSpecInitContainersSecurityContextArgs' security_context: Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        :param 'ClusterProvisionSpecPodSpecInitContainersStartupProbeArgs' startup_probe: StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param bool stdin: Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
        :param bool stdin_once: Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
        :param str termination_message_path: Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
        :param str termination_message_policy: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        :param bool tty: Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
        :param Sequence['ClusterProvisionSpecPodSpecInitContainersVolumeDevicesArgs'] volume_devices: volumeDevices is the list of block devices to be used by the container.
        :param Sequence['ClusterProvisionSpecPodSpecInitContainersVolumeMountsArgs'] volume_mounts: Pod volumes to mount into the container's filesystem. Cannot be updated.
        :param str working_dir: Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        """
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if env_from is not None:
            pulumi.set(__self__, "env_from", env_from)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if stdin_once is not None:
            pulumi.set(__self__, "stdin_once", stdin_once)
        if termination_message_path is not None:
            pulumi.set(__self__, "termination_message_path", termination_message_path)
        if termination_message_policy is not None:
            pulumi.set(__self__, "termination_message_policy", termination_message_policy)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if volume_devices is not None:
            pulumi.set(__self__, "volume_devices", volume_devices)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        """
        Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        """
        Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def env(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecInitContainersEnv']]:
        """
        List of environment variables to set in the container. Cannot be updated.
        """
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="envFrom")
    def env_from(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecInitContainersEnvFrom']]:
        """
        List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        """
        return pulumi.get(self, "env_from")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        """
        Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        """
        Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
        """
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersLifecycle']:
        """
        Actions that the management system should take in response to container lifecycle events. Cannot be updated.
        """
        return pulumi.get(self, "lifecycle")

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersLivenessProbe']:
        """
        Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "liveness_probe")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecInitContainersPorts']]:
        """
        List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersReadinessProbe']:
        """
        Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "readiness_probe")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersResources']:
        """
        Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersSecurityContext']:
        """
        Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        """
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersStartupProbe']:
        """
        StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "startup_probe")

    @property
    @pulumi.getter
    def stdin(self) -> Optional[bool]:
        """
        Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
        """
        return pulumi.get(self, "stdin")

    @property
    @pulumi.getter(name="stdinOnce")
    def stdin_once(self) -> Optional[bool]:
        """
        Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
        """
        return pulumi.get(self, "stdin_once")

    @property
    @pulumi.getter(name="terminationMessagePath")
    def termination_message_path(self) -> Optional[str]:
        """
        Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
        """
        return pulumi.get(self, "termination_message_path")

    @property
    @pulumi.getter(name="terminationMessagePolicy")
    def termination_message_policy(self) -> Optional[str]:
        """
        Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        """
        return pulumi.get(self, "termination_message_policy")

    @property
    @pulumi.getter
    def tty(self) -> Optional[bool]:
        """
        Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
        """
        return pulumi.get(self, "tty")

    @property
    @pulumi.getter(name="volumeDevices")
    def volume_devices(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecInitContainersVolumeDevices']]:
        """
        volumeDevices is the list of block devices to be used by the container.
        """
        return pulumi.get(self, "volume_devices")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecInitContainersVolumeMounts']]:
        """
        Pod volumes to mount into the container's filesystem. Cannot be updated.
        """
        return pulumi.get(self, "volume_mounts")

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[str]:
        """
        Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        """
        return pulumi.get(self, "working_dir")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersEnv(dict):
    """
    EnvVar represents an environment variable present in a Container.
    """
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersEnvValueFrom'] = None):
        """
        EnvVar represents an environment variable present in a Container.
        :param str name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param str value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param 'ClusterProvisionSpecPodSpecInitContainersEnvValueFromArgs' value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the environment variable. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersEnvValueFrom']:
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersEnvFrom(dict):
    """
    EnvFromSource represents the source of a set of ConfigMaps
    """
    def __init__(__self__, *,
                 config_map_ref: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersEnvFromConfigMapRef'] = None,
                 prefix: Optional[str] = None,
                 secret_ref: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersEnvFromSecretRef'] = None):
        """
        EnvFromSource represents the source of a set of ConfigMaps
        :param 'ClusterProvisionSpecPodSpecInitContainersEnvFromConfigMapRefArgs' config_map_ref: The ConfigMap to select from
        :param str prefix: An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        :param 'ClusterProvisionSpecPodSpecInitContainersEnvFromSecretRefArgs' secret_ref: The Secret to select from
        """
        if config_map_ref is not None:
            pulumi.set(__self__, "config_map_ref", config_map_ref)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="configMapRef")
    def config_map_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersEnvFromConfigMapRef']:
        """
        The ConfigMap to select from
        """
        return pulumi.get(self, "config_map_ref")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersEnvFromSecretRef']:
        """
        The Secret to select from
        """
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersEnvFromConfigMapRef(dict):
    """
    The ConfigMap to select from
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        """
        The ConfigMap to select from
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param bool optional: Specify whether the ConfigMap must be defined
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        """
        Specify whether the ConfigMap must be defined
        """
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersEnvFromSecretRef(dict):
    """
    The Secret to select from
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        """
        The Secret to select from
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param bool optional: Specify whether the Secret must be defined
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        """
        Specify whether the Secret must be defined
        """
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersEnvValueFrom(dict):
    """
    Source for the environment variable's value. Cannot be used if value is not empty.
    """
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersEnvValueFromConfigMapKeyRef'] = None,
                 field_ref: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersEnvValueFromFieldRef'] = None,
                 resource_field_ref: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersEnvValueFromResourceFieldRef'] = None,
                 secret_key_ref: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersEnvValueFromSecretKeyRef'] = None):
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        :param 'ClusterProvisionSpecPodSpecInitContainersEnvValueFromConfigMapKeyRefArgs' config_map_key_ref: Selects a key of a ConfigMap.
        :param 'ClusterProvisionSpecPodSpecInitContainersEnvValueFromFieldRefArgs' field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param 'ClusterProvisionSpecPodSpecInitContainersEnvValueFromResourceFieldRefArgs' resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param 'ClusterProvisionSpecPodSpecInitContainersEnvValueFromSecretKeyRefArgs' secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersEnvValueFromConfigMapKeyRef']:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersEnvValueFromFieldRef']:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        """
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersEnvValueFromResourceFieldRef']:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersEnvValueFromSecretKeyRef']:
        """
        Selects a key of a secret in the pod's namespace
        """
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersEnvValueFromConfigMapKeyRef(dict):
    """
    Selects a key of a ConfigMap.
    """
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        """
        Selects a key of a ConfigMap.
        :param str key: The key to select.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param bool optional: Specify whether the ConfigMap or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        """
        Specify whether the ConfigMap or its key must be defined
        """
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersEnvValueFromFieldRef(dict):
    """
    Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
    """
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param str field_path: Path of the field to select in the specified API version.
        :param str api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersEnvValueFromResourceFieldRef(dict):
    """
    Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
    """
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[str] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param str resource: Required: resource to select
        :param str container_name: Container name: required for volumes, optional for env vars
        :param str divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[str]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersEnvValueFromSecretKeyRef(dict):
    """
    Selects a key of a secret in the pod's namespace
    """
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        """
        Selects a key of a secret in the pod's namespace
        :param str key: The key of the secret to select from.  Must be a valid secret key.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param bool optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersLifecycle(dict):
    """
    Actions that the management system should take in response to container lifecycle events. Cannot be updated.
    """
    def __init__(__self__, *,
                 post_start: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePostStart'] = None,
                 pre_stop: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePreStop'] = None):
        """
        Actions that the management system should take in response to container lifecycle events. Cannot be updated.
        :param 'ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartArgs' post_start: PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        :param 'ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopArgs' pre_stop: PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePostStart']:
        """
        PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        return pulumi.get(self, "post_start")

    @property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePreStop']:
        """
        PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        return pulumi.get(self, "pre_stop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePostStart(dict):
    """
    PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
    """
    def __init__(__self__, *,
                 exec_: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartExec'] = None,
                 http_get: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGet'] = None,
                 tcp_socket: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartTcpSocket'] = None):
        """
        PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        :param 'ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartExecArgs' exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param 'ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetArgs' http_get: HTTPGet specifies the http request to perform.
        :param 'ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartTcpSocketArgs' tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartExec']:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGet']:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartTcpSocket']:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartExec(dict):
    """
    One and only one of the following should be specified. Exec specifies the action to take.
    """
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param Sequence[str] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGet(dict):
    """
    HTTPGet specifies the http request to perform.
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        """
        HTTPGet specifies the http request to perform.
        :param 'ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetPortArgs' port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param Sequence['ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs'] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param str path: Path to access on the HTTP server.
        :param str scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetPort':
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetHttpHeaders']]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetHttpHeaders(dict):
    """
    HTTPHeader describes a custom header to be used in HTTP probes
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param str name: The header field name
        :param str value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartTcpSocket(dict):
    """
    TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartTcpSocketPort',
                 host: Optional[str] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param 'ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartTcpSocketPortArgs' port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartTcpSocketPort':
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePostStartTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePreStop(dict):
    """
    PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
    """
    def __init__(__self__, *,
                 exec_: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopExec'] = None,
                 http_get: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGet'] = None,
                 tcp_socket: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopTcpSocket'] = None):
        """
        PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        :param 'ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopExecArgs' exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param 'ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetArgs' http_get: HTTPGet specifies the http request to perform.
        :param 'ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopTcpSocketArgs' tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopExec']:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGet']:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopTcpSocket']:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopExec(dict):
    """
    One and only one of the following should be specified. Exec specifies the action to take.
    """
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param Sequence[str] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGet(dict):
    """
    HTTPGet specifies the http request to perform.
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        """
        HTTPGet specifies the http request to perform.
        :param 'ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetPortArgs' port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param Sequence['ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs'] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param str path: Path to access on the HTTP server.
        :param str scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetPort':
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetHttpHeaders']]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetHttpHeaders(dict):
    """
    HTTPHeader describes a custom header to be used in HTTP probes
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param str name: The header field name
        :param str value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopTcpSocket(dict):
    """
    TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopTcpSocketPort',
                 host: Optional[str] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param 'ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopTcpSocketPortArgs' port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopTcpSocketPort':
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersLifecyclePreStopTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersLivenessProbe(dict):
    """
    Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """
    def __init__(__self__, *,
                 exec_: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersLivenessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersLivenessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        """
        Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param 'ClusterProvisionSpecPodSpecInitContainersLivenessProbeExecArgs' exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param int failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        :param 'ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetArgs' http_get: HTTPGet specifies the http request to perform.
        :param int initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param int period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        :param int success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        :param 'ClusterProvisionSpecPodSpecInitContainersLivenessProbeTcpSocketArgs' tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param int timeout_seconds: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersLivenessProbeExec']:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        """
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGet']:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        """
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        """
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        """
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersLivenessProbeTcpSocket']:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersLivenessProbeExec(dict):
    """
    One and only one of the following should be specified. Exec specifies the action to take.
    """
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param Sequence[str] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGet(dict):
    """
    HTTPGet specifies the http request to perform.
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        """
        HTTPGet specifies the http request to perform.
        :param 'ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetPortArgs' port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param Sequence['ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs'] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param str path: Path to access on the HTTP server.
        :param str scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetPort':
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetHttpHeaders']]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetHttpHeaders(dict):
    """
    HTTPHeader describes a custom header to be used in HTTP probes
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param str name: The header field name
        :param str value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersLivenessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersLivenessProbeTcpSocket(dict):
    """
    TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecInitContainersLivenessProbeTcpSocketPort',
                 host: Optional[str] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param 'ClusterProvisionSpecPodSpecInitContainersLivenessProbeTcpSocketPortArgs' port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecInitContainersLivenessProbeTcpSocketPort':
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersLivenessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersPorts(dict):
    """
    ContainerPort represents a network port in a single container.
    """
    def __init__(__self__, *,
                 container_port: int,
                 host_ip: Optional[str] = None,
                 host_port: Optional[int] = None,
                 name: Optional[str] = None,
                 protocol: Optional[str] = None):
        """
        ContainerPort represents a network port in a single container.
        :param int container_port: Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        :param str host_ip: What host IP to bind the external port to.
        :param int host_port: Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        :param str name: If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
        :param str protocol: Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
        """
        pulumi.set(__self__, "container_port", container_port)
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> int:
        """
        Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        """
        return pulumi.get(self, "container_port")

    @property
    @pulumi.getter(name="hostIP")
    def host_ip(self) -> Optional[str]:
        """
        What host IP to bind the external port to.
        """
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[int]:
        """
        Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        """
        return pulumi.get(self, "host_port")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
        """
        return pulumi.get(self, "protocol")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersReadinessProbe(dict):
    """
    Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """
    def __init__(__self__, *,
                 exec_: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersReadinessProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersReadinessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        """
        Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param 'ClusterProvisionSpecPodSpecInitContainersReadinessProbeExecArgs' exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param int failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        :param 'ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetArgs' http_get: HTTPGet specifies the http request to perform.
        :param int initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param int period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        :param int success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        :param 'ClusterProvisionSpecPodSpecInitContainersReadinessProbeTcpSocketArgs' tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param int timeout_seconds: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersReadinessProbeExec']:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        """
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGet']:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        """
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        """
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        """
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersReadinessProbeTcpSocket']:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersReadinessProbeExec(dict):
    """
    One and only one of the following should be specified. Exec specifies the action to take.
    """
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param Sequence[str] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGet(dict):
    """
    HTTPGet specifies the http request to perform.
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        """
        HTTPGet specifies the http request to perform.
        :param 'ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetPortArgs' port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param Sequence['ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs'] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param str path: Path to access on the HTTP server.
        :param str scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetPort':
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetHttpHeaders']]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetHttpHeaders(dict):
    """
    HTTPHeader describes a custom header to be used in HTTP probes
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param str name: The header field name
        :param str value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersReadinessProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersReadinessProbeTcpSocket(dict):
    """
    TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecInitContainersReadinessProbeTcpSocketPort',
                 host: Optional[str] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param 'ClusterProvisionSpecPodSpecInitContainersReadinessProbeTcpSocketPortArgs' port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecInitContainersReadinessProbeTcpSocketPort':
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersReadinessProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersResources(dict):
    """
    Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    """
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, str]] = None,
                 requests: Optional[Mapping[str, str]] = None):
        """
        Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param Mapping[str, str] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param Mapping[str, str] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, str]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, str]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersSecurityContext(dict):
    """
    Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    """
    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[bool] = None,
                 capabilities: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersSecurityContextCapabilities'] = None,
                 privileged: Optional[bool] = None,
                 proc_mount: Optional[str] = None,
                 read_only_root_filesystem: Optional[bool] = None,
                 run_as_group: Optional[int] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[int] = None,
                 se_linux_options: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersSecurityContextSeLinuxOptions'] = None,
                 seccomp_profile: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersSecurityContextSeccompProfile'] = None,
                 windows_options: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersSecurityContextWindowsOptions'] = None):
        """
        Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        :param bool allow_privilege_escalation: AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
        :param 'ClusterProvisionSpecPodSpecInitContainersSecurityContextCapabilitiesArgs' capabilities: The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        :param bool privileged: Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
        :param str proc_mount: procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
        :param bool read_only_root_filesystem: Whether this container has a read-only root filesystem. Default is false.
        :param int run_as_group: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param bool run_as_non_root: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param int run_as_user: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param 'ClusterProvisionSpecPodSpecInitContainersSecurityContextSeLinuxOptionsArgs' se_linux_options: The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param 'ClusterProvisionSpecPodSpecInitContainersSecurityContextSeccompProfileArgs' seccomp_profile: The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
        :param 'ClusterProvisionSpecPodSpecInitContainersSecurityContextWindowsOptionsArgs' windows_options: The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if proc_mount is not None:
            pulumi.set(__self__, "proc_mount", proc_mount)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if seccomp_profile is not None:
            pulumi.set(__self__, "seccomp_profile", seccomp_profile)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[bool]:
        """
        AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
        """
        return pulumi.get(self, "allow_privilege_escalation")

    @property
    @pulumi.getter
    def capabilities(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersSecurityContextCapabilities']:
        """
        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def privileged(self) -> Optional[bool]:
        """
        Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
        """
        return pulumi.get(self, "privileged")

    @property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> Optional[str]:
        """
        procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
        """
        return pulumi.get(self, "proc_mount")

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[bool]:
        """
        Whether this container has a read-only root filesystem. Default is false.
        """
        return pulumi.get(self, "read_only_root_filesystem")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        """
        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        """
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        """
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersSecurityContextSeLinuxOptions']:
        """
        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="seccompProfile")
    def seccomp_profile(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersSecurityContextSeccompProfile']:
        """
        The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
        """
        return pulumi.get(self, "seccomp_profile")

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersSecurityContextWindowsOptions']:
        """
        The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "windows_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersSecurityContextCapabilities(dict):
    """
    The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
    """
    def __init__(__self__, *,
                 add: Optional[Sequence[str]] = None,
                 drop: Optional[Sequence[str]] = None):
        """
        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        :param Sequence[str] add: Added capabilities
        :param Sequence[str] drop: Removed capabilities
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence[str]]:
        """
        Added capabilities
        """
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def drop(self) -> Optional[Sequence[str]]:
        """
        Removed capabilities
        """
        return pulumi.get(self, "drop")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersSecurityContextSeLinuxOptions(dict):
    """
    The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    """
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 role: Optional[str] = None,
                 type: Optional[str] = None,
                 user: Optional[str] = None):
        """
        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param str level: Level is SELinux level label that applies to the container.
        :param str role: Role is a SELinux role label that applies to the container.
        :param str type: Type is a SELinux type label that applies to the container.
        :param str user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersSecurityContextSeccompProfile(dict):
    """
    The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
    """
    def __init__(__self__, *,
                 type: str,
                 localhost_profile: Optional[str] = None):
        """
        The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
        :param str type: type indicates which kind of seccomp profile will be applied. Valid options are: 
                Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
        :param str localhost_profile: localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
        """
        pulumi.set(__self__, "type", type)
        if localhost_profile is not None:
            pulumi.set(__self__, "localhost_profile", localhost_profile)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type indicates which kind of seccomp profile will be applied. Valid options are: 
         Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="localhostProfile")
    def localhost_profile(self) -> Optional[str]:
        """
        localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
        """
        return pulumi.get(self, "localhost_profile")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersSecurityContextWindowsOptions(dict):
    """
    The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    """
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[str] = None,
                 gmsa_credential_spec_name: Optional[str] = None,
                 run_as_user_name: Optional[str] = None):
        """
        The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param str gmsa_credential_spec: GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
        :param str gmsa_credential_spec_name: GMSACredentialSpecName is the name of the GMSA credential spec to use.
        :param str run_as_user_name: The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[str]:
        """
        GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
        """
        return pulumi.get(self, "gmsa_credential_spec")

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[str]:
        """
        GMSACredentialSpecName is the name of the GMSA credential spec to use.
        """
        return pulumi.get(self, "gmsa_credential_spec_name")

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[str]:
        """
        The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersStartupProbe(dict):
    """
    StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """
    def __init__(__self__, *,
                 exec_: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersStartupProbeExec'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket: Optional['outputs.ClusterProvisionSpecPodSpecInitContainersStartupProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        """
        StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param 'ClusterProvisionSpecPodSpecInitContainersStartupProbeExecArgs' exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param int failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        :param 'ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetArgs' http_get: HTTPGet specifies the http request to perform.
        :param int initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param int period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        :param int success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        :param 'ClusterProvisionSpecPodSpecInitContainersStartupProbeTcpSocketArgs' tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param int timeout_seconds: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersStartupProbeExec']:
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        """
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        """
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGet']:
        """
        HTTPGet specifies the http request to perform.
        """
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        """
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        """
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        """
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        """
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.ClusterProvisionSpecPodSpecInitContainersStartupProbeTcpSocket']:
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        """
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersStartupProbeExec(dict):
    """
    One and only one of the following should be specified. Exec specifies the action to take.
    """
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        """
        One and only one of the following should be specified. Exec specifies the action to take.
        :param Sequence[str] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        """
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "command")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGet(dict):
    """
    HTTPGet specifies the http request to perform.
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetPort',
                 host: Optional[str] = None,
                 http_headers: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetHttpHeaders']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        """
        HTTPGet specifies the http request to perform.
        :param 'ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetPortArgs' port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param Sequence['ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetHttpHeadersArgs'] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param str path: Path to access on the HTTP server.
        :param str scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetPort':
        """
        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetHttpHeaders']]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        """
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        """
        Scheme to use for connecting to the host. Defaults to HTTP.
        """
        return pulumi.get(self, "scheme")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetHttpHeaders(dict):
    """
    HTTPHeader describes a custom header to be used in HTTP probes
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param str name: The header field name
        :param str value: The header field value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The header field name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersStartupProbeHttpGetPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersStartupProbeTcpSocket(dict):
    """
    TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
    """
    def __init__(__self__, *,
                 port: 'outputs.ClusterProvisionSpecPodSpecInitContainersStartupProbeTcpSocketPort',
                 host: Optional[str] = None):
        """
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
        :param 'ClusterProvisionSpecPodSpecInitContainersStartupProbeTcpSocketPortArgs' port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param str host: Optional: Host name to connect to, defaults to the pod IP.
        """
        pulumi.set(__self__, "port", port)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def port(self) -> 'outputs.ClusterProvisionSpecPodSpecInitContainersStartupProbeTcpSocketPort':
        """
        Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Optional: Host name to connect to, defaults to the pod IP.
        """
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersStartupProbeTcpSocketPort(dict):
    def __init__(__self__):
        pass

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersVolumeDevices(dict):
    """
    volumeDevice describes a mapping of a raw block device within a container.
    """
    def __init__(__self__, *,
                 device_path: str,
                 name: str):
        """
        volumeDevice describes a mapping of a raw block device within a container.
        :param str device_path: devicePath is the path inside of the container that the device will be mapped to.
        :param str name: name must match the name of a persistentVolumeClaim in the pod
        """
        pulumi.set(__self__, "device_path", device_path)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="devicePath")
    def device_path(self) -> str:
        """
        devicePath is the path inside of the container that the device will be mapped to.
        """
        return pulumi.get(self, "device_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name must match the name of a persistentVolumeClaim in the pod
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecInitContainersVolumeMounts(dict):
    """
    VolumeMount describes a mounting of a Volume within a container.
    """
    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        """
        VolumeMount describes a mounting of a Volume within a container.
        :param str mount_path: Path within the container at which the volume should be mounted.  Must not contain ':'.
        :param str name: This must match the Name of a Volume.
        :param str mount_propagation: mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
        :param bool read_only: Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        :param str sub_path: Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        :param str sub_path_expr: Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
        """
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        """
        Path within the container at which the volume should be mounted.  Must not contain ':'.
        """
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        This must match the Name of a Volume.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        """
        mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
        """
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        """
        Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        """
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        """
        Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
        """
        return pulumi.get(self, "sub_path_expr")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecReadinessGates(dict):
    """
    PodReadinessGate contains the reference to a pod condition
    """
    def __init__(__self__, *,
                 condition_type: str):
        """
        PodReadinessGate contains the reference to a pod condition
        :param str condition_type: ConditionType refers to a condition in the pod's condition list with matching type.
        """
        pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> str:
        """
        ConditionType refers to a condition in the pod's condition list with matching type.
        """
        return pulumi.get(self, "condition_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecSecurityContext(dict):
    """
    SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
    """
    def __init__(__self__, *,
                 fs_group: Optional[int] = None,
                 fs_group_change_policy: Optional[str] = None,
                 run_as_group: Optional[int] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[int] = None,
                 se_linux_options: Optional['outputs.ClusterProvisionSpecPodSpecSecurityContextSeLinuxOptions'] = None,
                 seccomp_profile: Optional['outputs.ClusterProvisionSpecPodSpecSecurityContextSeccompProfile'] = None,
                 supplemental_groups: Optional[Sequence[int]] = None,
                 sysctls: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecSecurityContextSysctls']] = None,
                 windows_options: Optional['outputs.ClusterProvisionSpecPodSpecSecurityContextWindowsOptions'] = None):
        """
        SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
        :param int fs_group: A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 
                1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- 
                If unset, the Kubelet will not modify the ownership and permissions of any volume.
        :param str fs_group_change_policy: fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified defaults to "Always".
        :param int run_as_group: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        :param bool run_as_non_root: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param int run_as_user: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        :param 'ClusterProvisionSpecPodSpecSecurityContextSeLinuxOptionsArgs' se_linux_options: The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        :param 'ClusterProvisionSpecPodSpecSecurityContextSeccompProfileArgs' seccomp_profile: The seccomp options to use by the containers in this pod.
        :param Sequence[int] supplemental_groups: A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.
        :param Sequence['ClusterProvisionSpecPodSpecSecurityContextSysctlsArgs'] sysctls: Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.
        :param 'ClusterProvisionSpecPodSpecSecurityContextWindowsOptionsArgs' windows_options: The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if fs_group_change_policy is not None:
            pulumi.set(__self__, "fs_group_change_policy", fs_group_change_policy)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if seccomp_profile is not None:
            pulumi.set(__self__, "seccomp_profile", seccomp_profile)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[int]:
        """
        A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 
         1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- 
         If unset, the Kubelet will not modify the ownership and permissions of any volume.
        """
        return pulumi.get(self, "fs_group")

    @property
    @pulumi.getter(name="fsGroupChangePolicy")
    def fs_group_change_policy(self) -> Optional[str]:
        """
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified defaults to "Always".
        """
        return pulumi.get(self, "fs_group_change_policy")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        """
        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        """
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        """
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        """
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        """
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional['outputs.ClusterProvisionSpecPodSpecSecurityContextSeLinuxOptions']:
        """
        The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        """
        return pulumi.get(self, "se_linux_options")

    @property
    @pulumi.getter(name="seccompProfile")
    def seccomp_profile(self) -> Optional['outputs.ClusterProvisionSpecPodSpecSecurityContextSeccompProfile']:
        """
        The seccomp options to use by the containers in this pod.
        """
        return pulumi.get(self, "seccomp_profile")

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(self) -> Optional[Sequence[int]]:
        """
        A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.
        """
        return pulumi.get(self, "supplemental_groups")

    @property
    @pulumi.getter
    def sysctls(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecSecurityContextSysctls']]:
        """
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.
        """
        return pulumi.get(self, "sysctls")

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional['outputs.ClusterProvisionSpecPodSpecSecurityContextWindowsOptions']:
        """
        The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "windows_options")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecSecurityContextSeLinuxOptions(dict):
    """
    The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
    """
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 role: Optional[str] = None,
                 type: Optional[str] = None,
                 user: Optional[str] = None):
        """
        The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        :param str level: Level is SELinux level label that applies to the container.
        :param str role: Role is a SELinux role label that applies to the container.
        :param str type: Type is a SELinux type label that applies to the container.
        :param str user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecSecurityContextSeccompProfile(dict):
    """
    The seccomp options to use by the containers in this pod.
    """
    def __init__(__self__, *,
                 type: str,
                 localhost_profile: Optional[str] = None):
        """
        The seccomp options to use by the containers in this pod.
        :param str type: type indicates which kind of seccomp profile will be applied. Valid options are: 
                Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
        :param str localhost_profile: localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
        """
        pulumi.set(__self__, "type", type)
        if localhost_profile is not None:
            pulumi.set(__self__, "localhost_profile", localhost_profile)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type indicates which kind of seccomp profile will be applied. Valid options are: 
         Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="localhostProfile")
    def localhost_profile(self) -> Optional[str]:
        """
        localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
        """
        return pulumi.get(self, "localhost_profile")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecSecurityContextSysctls(dict):
    """
    Sysctl defines a kernel parameter to be set
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        Sysctl defines a kernel parameter to be set
        :param str name: Name of a property to set
        :param str value: Value of a property to set
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of a property to set
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of a property to set
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecSecurityContextWindowsOptions(dict):
    """
    The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    """
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[str] = None,
                 gmsa_credential_spec_name: Optional[str] = None,
                 run_as_user_name: Optional[str] = None):
        """
        The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param str gmsa_credential_spec: GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
        :param str gmsa_credential_spec_name: GMSACredentialSpecName is the name of the GMSA credential spec to use.
        :param str run_as_user_name: The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[str]:
        """
        GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
        """
        return pulumi.get(self, "gmsa_credential_spec")

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[str]:
        """
        GMSACredentialSpecName is the name of the GMSA credential spec to use.
        """
        return pulumi.get(self, "gmsa_credential_spec_name")

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[str]:
        """
        The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecTolerations(dict):
    """
    The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
    """
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        """
        The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
        :param str effect: Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        :param str key: Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        :param str operator: Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
        :param int toleration_seconds: TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
        :param str value: Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        """
        Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        """
        TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
        """
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecTopologySpreadConstraints(dict):
    """
    TopologySpreadConstraint specifies how to spread matching pods among the given topology.
    """
    def __init__(__self__, *,
                 max_skew: int,
                 topology_key: str,
                 when_unsatisfiable: str,
                 label_selector: Optional['outputs.ClusterProvisionSpecPodSpecTopologySpreadConstraintsLabelSelector'] = None):
        """
        TopologySpreadConstraint specifies how to spread matching pods among the given topology.
        :param int max_skew: MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
        :param str topology_key: TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It's a required field.
        :param str when_unsatisfiable: WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,   but giving higher precedence to topologies that would help reduce the   skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assigment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
        :param 'ClusterProvisionSpecPodSpecTopologySpreadConstraintsLabelSelectorArgs' label_selector: LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
        """
        pulumi.set(__self__, "max_skew", max_skew)
        pulumi.set(__self__, "topology_key", topology_key)
        pulumi.set(__self__, "when_unsatisfiable", when_unsatisfiable)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)

    @property
    @pulumi.getter(name="maxSkew")
    def max_skew(self) -> int:
        """
        MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
        """
        return pulumi.get(self, "max_skew")

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        """
        TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It's a required field.
        """
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="whenUnsatisfiable")
    def when_unsatisfiable(self) -> str:
        """
        WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,   but giving higher precedence to topologies that would help reduce the   skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assigment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
        """
        return pulumi.get(self, "when_unsatisfiable")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.ClusterProvisionSpecPodSpecTopologySpreadConstraintsLabelSelector']:
        """
        LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
        """
        return pulumi.get(self, "label_selector")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecTopologySpreadConstraintsLabelSelector(dict):
    """
    LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
    """
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecTopologySpreadConstraintsLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
        :param Sequence['ClusterProvisionSpecPodSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecTopologySpreadConstraintsLabelSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecTopologySpreadConstraintsLabelSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumes(dict):
    """
    Volume represents a named volume in a pod that may be accessed by any container in the pod.
    """
    def __init__(__self__, *,
                 name: str,
                 aws_elastic_block_store: Optional['outputs.ClusterProvisionSpecPodSpecVolumesAwsElasticBlockStore'] = None,
                 azure_disk: Optional['outputs.ClusterProvisionSpecPodSpecVolumesAzureDisk'] = None,
                 azure_file: Optional['outputs.ClusterProvisionSpecPodSpecVolumesAzureFile'] = None,
                 cephfs: Optional['outputs.ClusterProvisionSpecPodSpecVolumesCephfs'] = None,
                 cinder: Optional['outputs.ClusterProvisionSpecPodSpecVolumesCinder'] = None,
                 config_map: Optional['outputs.ClusterProvisionSpecPodSpecVolumesConfigMap'] = None,
                 csi: Optional['outputs.ClusterProvisionSpecPodSpecVolumesCsi'] = None,
                 downward_api: Optional['outputs.ClusterProvisionSpecPodSpecVolumesDownwardAPI'] = None,
                 empty_dir: Optional['outputs.ClusterProvisionSpecPodSpecVolumesEmptyDir'] = None,
                 ephemeral: Optional['outputs.ClusterProvisionSpecPodSpecVolumesEphemeral'] = None,
                 fc: Optional['outputs.ClusterProvisionSpecPodSpecVolumesFc'] = None,
                 flex_volume: Optional['outputs.ClusterProvisionSpecPodSpecVolumesFlexVolume'] = None,
                 flocker: Optional['outputs.ClusterProvisionSpecPodSpecVolumesFlocker'] = None,
                 gce_persistent_disk: Optional['outputs.ClusterProvisionSpecPodSpecVolumesGcePersistentDisk'] = None,
                 git_repo: Optional['outputs.ClusterProvisionSpecPodSpecVolumesGitRepo'] = None,
                 glusterfs: Optional['outputs.ClusterProvisionSpecPodSpecVolumesGlusterfs'] = None,
                 host_path: Optional['outputs.ClusterProvisionSpecPodSpecVolumesHostPath'] = None,
                 iscsi: Optional['outputs.ClusterProvisionSpecPodSpecVolumesIscsi'] = None,
                 nfs: Optional['outputs.ClusterProvisionSpecPodSpecVolumesNfs'] = None,
                 persistent_volume_claim: Optional['outputs.ClusterProvisionSpecPodSpecVolumesPersistentVolumeClaim'] = None,
                 photon_persistent_disk: Optional['outputs.ClusterProvisionSpecPodSpecVolumesPhotonPersistentDisk'] = None,
                 portworx_volume: Optional['outputs.ClusterProvisionSpecPodSpecVolumesPortworxVolume'] = None,
                 projected: Optional['outputs.ClusterProvisionSpecPodSpecVolumesProjected'] = None,
                 quobyte: Optional['outputs.ClusterProvisionSpecPodSpecVolumesQuobyte'] = None,
                 rbd: Optional['outputs.ClusterProvisionSpecPodSpecVolumesRbd'] = None,
                 scale_io: Optional['outputs.ClusterProvisionSpecPodSpecVolumesScaleIO'] = None,
                 secret: Optional['outputs.ClusterProvisionSpecPodSpecVolumesSecret'] = None,
                 storageos: Optional['outputs.ClusterProvisionSpecPodSpecVolumesStorageos'] = None,
                 vsphere_volume: Optional['outputs.ClusterProvisionSpecPodSpecVolumesVsphereVolume'] = None):
        """
        Volume represents a named volume in a pod that may be accessed by any container in the pod.
        :param str name: Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param 'ClusterProvisionSpecPodSpecVolumesAwsElasticBlockStoreArgs' aws_elastic_block_store: AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        :param 'ClusterProvisionSpecPodSpecVolumesAzureDiskArgs' azure_disk: AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
        :param 'ClusterProvisionSpecPodSpecVolumesAzureFileArgs' azure_file: AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
        :param 'ClusterProvisionSpecPodSpecVolumesCephfsArgs' cephfs: CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
        :param 'ClusterProvisionSpecPodSpecVolumesCinderArgs' cinder: Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param 'ClusterProvisionSpecPodSpecVolumesConfigMapArgs' config_map: ConfigMap represents a configMap that should populate this volume
        :param 'ClusterProvisionSpecPodSpecVolumesCsiArgs' csi: CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
        :param 'ClusterProvisionSpecPodSpecVolumesDownwardAPIArgs' downward_api: DownwardAPI represents downward API about the pod that should populate this volume
        :param 'ClusterProvisionSpecPodSpecVolumesEmptyDirArgs' empty_dir: EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        :param 'ClusterProvisionSpecPodSpecVolumesEphemeralArgs' ephemeral: Ephemeral represents a volume that is handled by a cluster storage driver (Alpha feature). The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
                Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity    tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through    a PersistentVolumeClaim (see EphemeralVolumeSource for more    information on the connection between this volume type    and PersistentVolumeClaim). 
                Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
                Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
                A pod can use both types of ephemeral volumes and persistent volumes at the same time.
        :param 'ClusterProvisionSpecPodSpecVolumesFcArgs' fc: FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        :param 'ClusterProvisionSpecPodSpecVolumesFlexVolumeArgs' flex_volume: FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
        :param 'ClusterProvisionSpecPodSpecVolumesFlockerArgs' flocker: Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
        :param 'ClusterProvisionSpecPodSpecVolumesGcePersistentDiskArgs' gce_persistent_disk: GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param 'ClusterProvisionSpecPodSpecVolumesGitRepoArgs' git_repo: GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
        :param 'ClusterProvisionSpecPodSpecVolumesGlusterfsArgs' glusterfs: Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
        :param 'ClusterProvisionSpecPodSpecVolumesHostPathArgs' host_path: HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
        :param 'ClusterProvisionSpecPodSpecVolumesIscsiArgs' iscsi: ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
        :param 'ClusterProvisionSpecPodSpecVolumesNfsArgs' nfs: NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param 'ClusterProvisionSpecPodSpecVolumesPersistentVolumeClaimArgs' persistent_volume_claim: PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        :param 'ClusterProvisionSpecPodSpecVolumesPhotonPersistentDiskArgs' photon_persistent_disk: PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
        :param 'ClusterProvisionSpecPodSpecVolumesPortworxVolumeArgs' portworx_volume: PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
        :param 'ClusterProvisionSpecPodSpecVolumesProjectedArgs' projected: Items for all in one resources secrets, configmaps, and downward API
        :param 'ClusterProvisionSpecPodSpecVolumesQuobyteArgs' quobyte: Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        :param 'ClusterProvisionSpecPodSpecVolumesRbdArgs' rbd: RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
        :param 'ClusterProvisionSpecPodSpecVolumesScaleIOArgs' scale_io: ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
        :param 'ClusterProvisionSpecPodSpecVolumesSecretArgs' secret: Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        :param 'ClusterProvisionSpecPodSpecVolumesStorageosArgs' storageos: StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
        :param 'ClusterProvisionSpecPodSpecVolumesVsphereVolumeArgs' vsphere_volume: VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
        """
        pulumi.set(__self__, "name", name)
        if aws_elastic_block_store is not None:
            pulumi.set(__self__, "aws_elastic_block_store", aws_elastic_block_store)
        if azure_disk is not None:
            pulumi.set(__self__, "azure_disk", azure_disk)
        if azure_file is not None:
            pulumi.set(__self__, "azure_file", azure_file)
        if cephfs is not None:
            pulumi.set(__self__, "cephfs", cephfs)
        if cinder is not None:
            pulumi.set(__self__, "cinder", cinder)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if csi is not None:
            pulumi.set(__self__, "csi", csi)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if empty_dir is not None:
            pulumi.set(__self__, "empty_dir", empty_dir)
        if ephemeral is not None:
            pulumi.set(__self__, "ephemeral", ephemeral)
        if fc is not None:
            pulumi.set(__self__, "fc", fc)
        if flex_volume is not None:
            pulumi.set(__self__, "flex_volume", flex_volume)
        if flocker is not None:
            pulumi.set(__self__, "flocker", flocker)
        if gce_persistent_disk is not None:
            pulumi.set(__self__, "gce_persistent_disk", gce_persistent_disk)
        if git_repo is not None:
            pulumi.set(__self__, "git_repo", git_repo)
        if glusterfs is not None:
            pulumi.set(__self__, "glusterfs", glusterfs)
        if host_path is not None:
            pulumi.set(__self__, "host_path", host_path)
        if iscsi is not None:
            pulumi.set(__self__, "iscsi", iscsi)
        if nfs is not None:
            pulumi.set(__self__, "nfs", nfs)
        if persistent_volume_claim is not None:
            pulumi.set(__self__, "persistent_volume_claim", persistent_volume_claim)
        if photon_persistent_disk is not None:
            pulumi.set(__self__, "photon_persistent_disk", photon_persistent_disk)
        if portworx_volume is not None:
            pulumi.set(__self__, "portworx_volume", portworx_volume)
        if projected is not None:
            pulumi.set(__self__, "projected", projected)
        if quobyte is not None:
            pulumi.set(__self__, "quobyte", quobyte)
        if rbd is not None:
            pulumi.set(__self__, "rbd", rbd)
        if scale_io is not None:
            pulumi.set(__self__, "scale_io", scale_io)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if storageos is not None:
            pulumi.set(__self__, "storageos", storageos)
        if vsphere_volume is not None:
            pulumi.set(__self__, "vsphere_volume", vsphere_volume)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="awsElasticBlockStore")
    def aws_elastic_block_store(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesAwsElasticBlockStore']:
        """
        AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        return pulumi.get(self, "aws_elastic_block_store")

    @property
    @pulumi.getter(name="azureDisk")
    def azure_disk(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesAzureDisk']:
        """
        AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
        """
        return pulumi.get(self, "azure_disk")

    @property
    @pulumi.getter(name="azureFile")
    def azure_file(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesAzureFile']:
        """
        AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
        """
        return pulumi.get(self, "azure_file")

    @property
    @pulumi.getter
    def cephfs(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesCephfs']:
        """
        CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
        """
        return pulumi.get(self, "cephfs")

    @property
    @pulumi.getter
    def cinder(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesCinder']:
        """
        Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "cinder")

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesConfigMap']:
        """
        ConfigMap represents a configMap that should populate this volume
        """
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter
    def csi(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesCsi']:
        """
        CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
        """
        return pulumi.get(self, "csi")

    @property
    @pulumi.getter(name="downwardAPI")
    def downward_api(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesDownwardAPI']:
        """
        DownwardAPI represents downward API about the pod that should populate this volume
        """
        return pulumi.get(self, "downward_api")

    @property
    @pulumi.getter(name="emptyDir")
    def empty_dir(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesEmptyDir']:
        """
        EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        """
        return pulumi.get(self, "empty_dir")

    @property
    @pulumi.getter
    def ephemeral(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesEphemeral']:
        """
        Ephemeral represents a volume that is handled by a cluster storage driver (Alpha feature). The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
         Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity    tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through    a PersistentVolumeClaim (see EphemeralVolumeSource for more    information on the connection between this volume type    and PersistentVolumeClaim). 
         Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
         Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
         A pod can use both types of ephemeral volumes and persistent volumes at the same time.
        """
        return pulumi.get(self, "ephemeral")

    @property
    @pulumi.getter
    def fc(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesFc']:
        """
        FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        """
        return pulumi.get(self, "fc")

    @property
    @pulumi.getter(name="flexVolume")
    def flex_volume(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesFlexVolume']:
        """
        FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
        """
        return pulumi.get(self, "flex_volume")

    @property
    @pulumi.getter
    def flocker(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesFlocker']:
        """
        Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
        """
        return pulumi.get(self, "flocker")

    @property
    @pulumi.getter(name="gcePersistentDisk")
    def gce_persistent_disk(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesGcePersistentDisk']:
        """
        GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "gce_persistent_disk")

    @property
    @pulumi.getter(name="gitRepo")
    def git_repo(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesGitRepo']:
        """
        GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
        """
        return pulumi.get(self, "git_repo")

    @property
    @pulumi.getter
    def glusterfs(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesGlusterfs']:
        """
        Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
        """
        return pulumi.get(self, "glusterfs")

    @property
    @pulumi.getter(name="hostPath")
    def host_path(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesHostPath']:
        """
        HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
        """
        return pulumi.get(self, "host_path")

    @property
    @pulumi.getter
    def iscsi(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesIscsi']:
        """
        ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
        """
        return pulumi.get(self, "iscsi")

    @property
    @pulumi.getter
    def nfs(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesNfs']:
        """
        NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "nfs")

    @property
    @pulumi.getter(name="persistentVolumeClaim")
    def persistent_volume_claim(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesPersistentVolumeClaim']:
        """
        PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        """
        return pulumi.get(self, "persistent_volume_claim")

    @property
    @pulumi.getter(name="photonPersistentDisk")
    def photon_persistent_disk(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesPhotonPersistentDisk']:
        """
        PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
        """
        return pulumi.get(self, "photon_persistent_disk")

    @property
    @pulumi.getter(name="portworxVolume")
    def portworx_volume(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesPortworxVolume']:
        """
        PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
        """
        return pulumi.get(self, "portworx_volume")

    @property
    @pulumi.getter
    def projected(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesProjected']:
        """
        Items for all in one resources secrets, configmaps, and downward API
        """
        return pulumi.get(self, "projected")

    @property
    @pulumi.getter
    def quobyte(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesQuobyte']:
        """
        Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        """
        return pulumi.get(self, "quobyte")

    @property
    @pulumi.getter
    def rbd(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesRbd']:
        """
        RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
        """
        return pulumi.get(self, "rbd")

    @property
    @pulumi.getter(name="scaleIO")
    def scale_io(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesScaleIO']:
        """
        ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
        """
        return pulumi.get(self, "scale_io")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesSecret']:
        """
        Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def storageos(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesStorageos']:
        """
        StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
        """
        return pulumi.get(self, "storageos")

    @property
    @pulumi.getter(name="vsphereVolume")
    def vsphere_volume(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesVsphereVolume']:
        """
        VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
        """
        return pulumi.get(self, "vsphere_volume")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesAwsElasticBlockStore(dict):
    """
    AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    """
    def __init__(__self__, *,
                 volume_id: str,
                 fs_type: Optional[str] = None,
                 partition: Optional[int] = None,
                 read_only: Optional[bool] = None):
        """
        AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        :param str volume_id: Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        :param str fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
        :param int partition: The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
        :param bool read_only: Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> str:
        """
        Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
        """
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def partition(self) -> Optional[int]:
        """
        The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
        """
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesAzureDisk(dict):
    """
    AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
    """
    def __init__(__self__, *,
                 disk_name: str,
                 disk_uri: str,
                 caching_mode: Optional[str] = None,
                 fs_type: Optional[str] = None,
                 kind: Optional[str] = None,
                 read_only: Optional[bool] = None):
        """
        AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
        :param str disk_name: The Name of the data disk in the blob storage
        :param str disk_uri: The URI the data disk in the blob storage
        :param str caching_mode: Host Caching mode: None, Read Only, Read Write.
        :param str fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        :param str kind: Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
        :param bool read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        pulumi.set(__self__, "disk_name", disk_name)
        pulumi.set(__self__, "disk_uri", disk_uri)
        if caching_mode is not None:
            pulumi.set(__self__, "caching_mode", caching_mode)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> str:
        """
        The Name of the data disk in the blob storage
        """
        return pulumi.get(self, "disk_name")

    @property
    @pulumi.getter(name="diskURI")
    def disk_uri(self) -> str:
        """
        The URI the data disk in the blob storage
        """
        return pulumi.get(self, "disk_uri")

    @property
    @pulumi.getter(name="cachingMode")
    def caching_mode(self) -> Optional[str]:
        """
        Host Caching mode: None, Read Only, Read Write.
        """
        return pulumi.get(self, "caching_mode")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesAzureFile(dict):
    """
    AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
    """
    def __init__(__self__, *,
                 secret_name: str,
                 share_name: str,
                 read_only: Optional[bool] = None):
        """
        AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
        :param str secret_name: the name of secret that contains Azure Storage Account Name and Key
        :param str share_name: Share Name
        :param bool read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "share_name", share_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        the name of secret that contains Azure Storage Account Name and Key
        """
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="shareName")
    def share_name(self) -> str:
        """
        Share Name
        """
        return pulumi.get(self, "share_name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesCephfs(dict):
    """
    CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
    """
    def __init__(__self__, *,
                 monitors: Sequence[str],
                 path: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_file: Optional[str] = None,
                 secret_ref: Optional['outputs.ClusterProvisionSpecPodSpecVolumesCephfsSecretRef'] = None,
                 user: Optional[str] = None):
        """
        CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
        :param Sequence[str] monitors: Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param str path: Optional: Used as the mounted root, rather than the full Ceph tree, default is /
        :param bool read_only: Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param str secret_file: Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param 'ClusterProvisionSpecPodSpecVolumesCephfsSecretRefArgs' secret_ref: Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param str user: Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        pulumi.set(__self__, "monitors", monitors)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_file is not None:
            pulumi.set(__self__, "secret_file", secret_file)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def monitors(self) -> Sequence[str]:
        """
        Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "monitors")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Optional: Used as the mounted root, rather than the full Ceph tree, default is /
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretFile")
    def secret_file(self) -> Optional[str]:
        """
        Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "secret_file")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesCephfsSecretRef']:
        """
        Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesCephfsSecretRef(dict):
    """
    Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesCinder(dict):
    """
    Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    """
    def __init__(__self__, *,
                 volume_id: str,
                 fs_type: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.ClusterProvisionSpecPodSpecVolumesCinderSecretRef'] = None):
        """
        Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param str volume_id: volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param str fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param bool read_only: Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param 'ClusterProvisionSpecPodSpecVolumesCinderSecretRefArgs' secret_ref: Optional: points to a secret object containing parameters used to connect to OpenStack.
        """
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> str:
        """
        volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesCinderSecretRef']:
        """
        Optional: points to a secret object containing parameters used to connect to OpenStack.
        """
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesCinderSecretRef(dict):
    """
    Optional: points to a secret object containing parameters used to connect to OpenStack.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        Optional: points to a secret object containing parameters used to connect to OpenStack.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesConfigMap(dict):
    """
    ConfigMap represents a configMap that should populate this volume
    """
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecVolumesConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        """
        ConfigMap represents a configMap that should populate this volume
        :param int default_mode: Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param Sequence['ClusterProvisionSpecPodSpecVolumesConfigMapItemsArgs'] items: If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param bool optional: Specify whether the ConfigMap or its keys must be defined
        """
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        """
        Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecVolumesConfigMapItems']]:
        """
        If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        """
        Specify whether the ConfigMap or its keys must be defined
        """
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesConfigMapItems(dict):
    """
    Maps a string key to a path within a volume.
    """
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        """
        Maps a string key to a path within a volume.
        :param str key: The key to project.
        :param str path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        :param int mode: Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        """
        Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesCsi(dict):
    """
    CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
    """
    def __init__(__self__, *,
                 driver: str,
                 fs_type: Optional[str] = None,
                 node_publish_secret_ref: Optional['outputs.ClusterProvisionSpecPodSpecVolumesCsiNodePublishSecretRef'] = None,
                 read_only: Optional[bool] = None,
                 volume_attributes: Optional[Mapping[str, str]] = None):
        """
        CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
        :param str driver: Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
        :param str fs_type: Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
        :param 'ClusterProvisionSpecPodSpecVolumesCsiNodePublishSecretRefArgs' node_publish_secret_ref: NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
        :param bool read_only: Specifies a read-only configuration for the volume. Defaults to false (read/write).
        :param Mapping[str, str] volume_attributes: VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
        """
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if node_publish_secret_ref is not None:
            pulumi.set(__self__, "node_publish_secret_ref", node_publish_secret_ref)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if volume_attributes is not None:
            pulumi.set(__self__, "volume_attributes", volume_attributes)

    @property
    @pulumi.getter
    def driver(self) -> str:
        """
        Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
        """
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        """
        Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
        """
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="nodePublishSecretRef")
    def node_publish_secret_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesCsiNodePublishSecretRef']:
        """
        NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
        """
        return pulumi.get(self, "node_publish_secret_ref")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        Specifies a read-only configuration for the volume. Defaults to false (read/write).
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="volumeAttributes")
    def volume_attributes(self) -> Optional[Mapping[str, str]]:
        """
        VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
        """
        return pulumi.get(self, "volume_attributes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesCsiNodePublishSecretRef(dict):
    """
    NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesDownwardAPI(dict):
    """
    DownwardAPI represents downward API about the pod that should populate this volume
    """
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecVolumesDownwardAPIItems']] = None):
        """
        DownwardAPI represents downward API about the pod that should populate this volume
        :param int default_mode: Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param Sequence['ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsArgs'] items: Items is a list of downward API volume file
        """
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        """
        Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecVolumesDownwardAPIItems']]:
        """
        Items is a list of downward API volume file
        """
        return pulumi.get(self, "items")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesDownwardAPIItems(dict):
    """
    DownwardAPIVolumeFile represents information to create the file containing the pod field
    """
    def __init__(__self__, *,
                 path: str,
                 field_ref: Optional['outputs.ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsFieldRef'] = None,
                 mode: Optional[int] = None,
                 resource_field_ref: Optional['outputs.ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsResourceFieldRef'] = None):
        """
        DownwardAPIVolumeFile represents information to create the file containing the pod field
        :param str path: Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        :param 'ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsFieldRefArgs' field_ref: Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        :param int mode: Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param 'ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsResourceFieldRefArgs' resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsFieldRef']:
        """
        Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        """
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        """
        Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsResourceFieldRef']:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsFieldRef(dict):
    """
    Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
    """
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        """
        Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        :param str field_path: Path of the field to select in the specified API version.
        :param str api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesDownwardAPIItemsResourceFieldRef(dict):
    """
    Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
    """
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[str] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        :param str resource: Required: resource to select
        :param str container_name: Container name: required for volumes, optional for env vars
        :param str divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[str]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesEmptyDir(dict):
    """
    EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
    """
    def __init__(__self__, *,
                 medium: Optional[str] = None,
                 size_limit: Optional[str] = None):
        """
        EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        :param str medium: What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        :param str size_limit: Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
        """
        if medium is not None:
            pulumi.set(__self__, "medium", medium)
        if size_limit is not None:
            pulumi.set(__self__, "size_limit", size_limit)

    @property
    @pulumi.getter
    def medium(self) -> Optional[str]:
        """
        What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        """
        return pulumi.get(self, "medium")

    @property
    @pulumi.getter(name="sizeLimit")
    def size_limit(self) -> Optional[str]:
        """
        Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
        """
        return pulumi.get(self, "size_limit")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesEphemeral(dict):
    """
    Ephemeral represents a volume that is handled by a cluster storage driver (Alpha feature). The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
     Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity    tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through    a PersistentVolumeClaim (see EphemeralVolumeSource for more    information on the connection between this volume type    and PersistentVolumeClaim). 
     Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
     Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
     A pod can use both types of ephemeral volumes and persistent volumes at the same time.
    """
    def __init__(__self__, *,
                 read_only: Optional[bool] = None,
                 volume_claim_template: Optional['outputs.ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplate'] = None):
        """
        Ephemeral represents a volume that is handled by a cluster storage driver (Alpha feature). The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
         Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity    tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through    a PersistentVolumeClaim (see EphemeralVolumeSource for more    information on the connection between this volume type    and PersistentVolumeClaim). 
         Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
         Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
         A pod can use both types of ephemeral volumes and persistent volumes at the same time.
        :param bool read_only: Specifies a read-only configuration for the volume. Defaults to false (read/write).
        :param 'ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateArgs' volume_claim_template: Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
                An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
                This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
                Required, must not be nil.
        """
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if volume_claim_template is not None:
            pulumi.set(__self__, "volume_claim_template", volume_claim_template)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        Specifies a read-only configuration for the volume. Defaults to false (read/write).
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="volumeClaimTemplate")
    def volume_claim_template(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplate']:
        """
        Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
         An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
         This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
         Required, must not be nil.
        """
        return pulumi.get(self, "volume_claim_template")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplate(dict):
    """
    Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
     An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
     This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
     Required, must not be nil.
    """
    def __init__(__self__, *,
                 spec: 'outputs.ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpec',
                 metadata: Optional[Mapping[str, Any]] = None):
        """
        Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
         An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
         This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
         Required, must not be nil.
        :param 'ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecArgs' spec: The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
        :param Mapping[str, Any] metadata: May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
        """
        pulumi.set(__self__, "spec", spec)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def spec(self) -> 'outputs.ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpec':
        """
        The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
        """
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, Any]]:
        """
        May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
        """
        return pulumi.get(self, "metadata")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpec(dict):
    """
    The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
    """
    def __init__(__self__, *,
                 access_modes: Optional[Sequence[str]] = None,
                 data_source: Optional['outputs.ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource'] = None,
                 resources: Optional['outputs.ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResources'] = None,
                 selector: Optional['outputs.ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelector'] = None,
                 storage_class_name: Optional[str] = None,
                 volume_mode: Optional[str] = None,
                 volume_name: Optional[str] = None):
        """
        The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
        :param Sequence[str] access_modes: AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        :param 'ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs' data_source: This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
        :param 'ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs' resources: Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        :param 'ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs' selector: A label query over volumes to consider for binding.
        :param str storage_class_name: Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
        :param str volume_mode: volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
        :param str volume_name: VolumeName is the binding reference to the PersistentVolume backing this claim.
        """
        if access_modes is not None:
            pulumi.set(__self__, "access_modes", access_modes)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)
        if volume_mode is not None:
            pulumi.set(__self__, "volume_mode", volume_mode)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter(name="accessModes")
    def access_modes(self) -> Optional[Sequence[str]]:
        """
        AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        """
        return pulumi.get(self, "access_modes")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource']:
        """
        This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
        """
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResources']:
        """
        Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def selector(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelector']:
        """
        A label query over volumes to consider for binding.
        """
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[str]:
        """
        Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
        """
        return pulumi.get(self, "storage_class_name")

    @property
    @pulumi.getter(name="volumeMode")
    def volume_mode(self) -> Optional[str]:
        """
        volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
        """
        return pulumi.get(self, "volume_mode")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[str]:
        """
        VolumeName is the binding reference to the PersistentVolume backing this claim.
        """
        return pulumi.get(self, "volume_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource(dict):
    """
    This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
    """
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 api_group: Optional[str] = None):
        """
        This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
        :param str kind: Kind is the type of resource being referenced
        :param str name: Name is the name of resource being referenced
        :param str api_group: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if api_group is not None:
            pulumi.set(__self__, "api_group", api_group)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind is the type of resource being referenced
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of resource being referenced
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="apiGroup")
    def api_group(self) -> Optional[str]:
        """
        APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
        """
        return pulumi.get(self, "api_group")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResources(dict):
    """
    Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
    """
    def __init__(__self__, *,
                 limits: Optional[Mapping[str, str]] = None,
                 requests: Optional[Mapping[str, str]] = None):
        """
        Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        :param Mapping[str, str] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param Mapping[str, str] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[Mapping[str, str]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Mapping[str, str]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelector(dict):
    """
    A label query over volumes to consider for binding.
    """
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        A label query over volumes to consider for binding.
        :param Sequence['ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesFc(dict):
    """
    FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
    """
    def __init__(__self__, *,
                 fs_type: Optional[str] = None,
                 lun: Optional[int] = None,
                 read_only: Optional[bool] = None,
                 target_wwns: Optional[Sequence[str]] = None,
                 wwids: Optional[Sequence[str]] = None):
        """
        FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        :param str fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
        :param int lun: Optional: FC target lun number
        :param bool read_only: Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param Sequence[str] target_wwns: Optional: FC target worldwide names (WWNs)
        :param Sequence[str] wwids: Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
        """
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if lun is not None:
            pulumi.set(__self__, "lun", lun)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if target_wwns is not None:
            pulumi.set(__self__, "target_wwns", target_wwns)
        if wwids is not None:
            pulumi.set(__self__, "wwids", wwids)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
        """
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def lun(self) -> Optional[int]:
        """
        Optional: FC target lun number
        """
        return pulumi.get(self, "lun")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="targetWWNs")
    def target_wwns(self) -> Optional[Sequence[str]]:
        """
        Optional: FC target worldwide names (WWNs)
        """
        return pulumi.get(self, "target_wwns")

    @property
    @pulumi.getter
    def wwids(self) -> Optional[Sequence[str]]:
        """
        Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
        """
        return pulumi.get(self, "wwids")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesFlexVolume(dict):
    """
    FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
    """
    def __init__(__self__, *,
                 driver: str,
                 fs_type: Optional[str] = None,
                 options: Optional[Mapping[str, str]] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.ClusterProvisionSpecPodSpecVolumesFlexVolumeSecretRef'] = None):
        """
        FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
        :param str driver: Driver is the name of the driver to use for this volume.
        :param str fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
        :param Mapping[str, str] options: Optional: Extra command options if any.
        :param bool read_only: Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param 'ClusterProvisionSpecPodSpecVolumesFlexVolumeSecretRefArgs' secret_ref: Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
        """
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def driver(self) -> str:
        """
        Driver is the name of the driver to use for this volume.
        """
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
        """
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def options(self) -> Optional[Mapping[str, str]]:
        """
        Optional: Extra command options if any.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesFlexVolumeSecretRef']:
        """
        Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
        """
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesFlexVolumeSecretRef(dict):
    """
    Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesFlocker(dict):
    """
    Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
    """
    def __init__(__self__, *,
                 dataset_name: Optional[str] = None,
                 dataset_uuid: Optional[str] = None):
        """
        Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
        :param str dataset_name: Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
        :param str dataset_uuid: UUID of the dataset. This is unique identifier of a Flocker dataset
        """
        if dataset_name is not None:
            pulumi.set(__self__, "dataset_name", dataset_name)
        if dataset_uuid is not None:
            pulumi.set(__self__, "dataset_uuid", dataset_uuid)

    @property
    @pulumi.getter(name="datasetName")
    def dataset_name(self) -> Optional[str]:
        """
        Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
        """
        return pulumi.get(self, "dataset_name")

    @property
    @pulumi.getter(name="datasetUUID")
    def dataset_uuid(self) -> Optional[str]:
        """
        UUID of the dataset. This is unique identifier of a Flocker dataset
        """
        return pulumi.get(self, "dataset_uuid")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesGcePersistentDisk(dict):
    """
    GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    """
    def __init__(__self__, *,
                 pd_name: str,
                 fs_type: Optional[str] = None,
                 partition: Optional[int] = None,
                 read_only: Optional[bool] = None):
        """
        GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param str pd_name: Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param str fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
        :param int partition: The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param bool read_only: ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        pulumi.set(__self__, "pd_name", pd_name)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="pdName")
    def pd_name(self) -> str:
        """
        Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "pd_name")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
        """
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def partition(self) -> Optional[int]:
        """
        The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesGitRepo(dict):
    """
    GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
    """
    def __init__(__self__, *,
                 repository: str,
                 directory: Optional[str] = None,
                 revision: Optional[str] = None):
        """
        GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
        :param str repository: Repository URL
        :param str directory: Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
        :param str revision: Commit hash for the specified revision.
        """
        pulumi.set(__self__, "repository", repository)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)

    @property
    @pulumi.getter
    def repository(self) -> str:
        """
        Repository URL
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter
    def directory(self) -> Optional[str]:
        """
        Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def revision(self) -> Optional[str]:
        """
        Commit hash for the specified revision.
        """
        return pulumi.get(self, "revision")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesGlusterfs(dict):
    """
    Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
    """
    def __init__(__self__, *,
                 endpoints: str,
                 path: str,
                 read_only: Optional[bool] = None):
        """
        Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
        :param str endpoints: EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        :param str path: Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        :param bool read_only: ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def endpoints(self) -> str:
        """
        EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesHostPath(dict):
    """
    HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
    """
    def __init__(__self__, *,
                 path: str,
                 type: Optional[str] = None):
        """
        HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
        :param str path: Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        :param str type: Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        """
        pulumi.set(__self__, "path", path)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesIscsi(dict):
    """
    ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
    """
    def __init__(__self__, *,
                 iqn: str,
                 lun: int,
                 target_portal: str,
                 chap_auth_discovery: Optional[bool] = None,
                 chap_auth_session: Optional[bool] = None,
                 fs_type: Optional[str] = None,
                 initiator_name: Optional[str] = None,
                 iscsi_interface: Optional[str] = None,
                 portals: Optional[Sequence[str]] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.ClusterProvisionSpecPodSpecVolumesIscsiSecretRef'] = None):
        """
        ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
        :param str iqn: Target iSCSI Qualified Name.
        :param int lun: iSCSI Target Lun number.
        :param str target_portal: iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        :param bool chap_auth_discovery: whether support iSCSI Discovery CHAP authentication
        :param bool chap_auth_session: whether support iSCSI Session CHAP authentication
        :param str fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
        :param str initiator_name: Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
        :param str iscsi_interface: iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
        :param Sequence[str] portals: iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        :param bool read_only: ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
        :param 'ClusterProvisionSpecPodSpecVolumesIscsiSecretRefArgs' secret_ref: CHAP Secret for iSCSI target and initiator authentication
        """
        pulumi.set(__self__, "iqn", iqn)
        pulumi.set(__self__, "lun", lun)
        pulumi.set(__self__, "target_portal", target_portal)
        if chap_auth_discovery is not None:
            pulumi.set(__self__, "chap_auth_discovery", chap_auth_discovery)
        if chap_auth_session is not None:
            pulumi.set(__self__, "chap_auth_session", chap_auth_session)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if initiator_name is not None:
            pulumi.set(__self__, "initiator_name", initiator_name)
        if iscsi_interface is not None:
            pulumi.set(__self__, "iscsi_interface", iscsi_interface)
        if portals is not None:
            pulumi.set(__self__, "portals", portals)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def iqn(self) -> str:
        """
        Target iSCSI Qualified Name.
        """
        return pulumi.get(self, "iqn")

    @property
    @pulumi.getter
    def lun(self) -> int:
        """
        iSCSI Target Lun number.
        """
        return pulumi.get(self, "lun")

    @property
    @pulumi.getter(name="targetPortal")
    def target_portal(self) -> str:
        """
        iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        """
        return pulumi.get(self, "target_portal")

    @property
    @pulumi.getter(name="chapAuthDiscovery")
    def chap_auth_discovery(self) -> Optional[bool]:
        """
        whether support iSCSI Discovery CHAP authentication
        """
        return pulumi.get(self, "chap_auth_discovery")

    @property
    @pulumi.getter(name="chapAuthSession")
    def chap_auth_session(self) -> Optional[bool]:
        """
        whether support iSCSI Session CHAP authentication
        """
        return pulumi.get(self, "chap_auth_session")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
        """
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="initiatorName")
    def initiator_name(self) -> Optional[str]:
        """
        Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
        """
        return pulumi.get(self, "initiator_name")

    @property
    @pulumi.getter(name="iscsiInterface")
    def iscsi_interface(self) -> Optional[str]:
        """
        iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
        """
        return pulumi.get(self, "iscsi_interface")

    @property
    @pulumi.getter
    def portals(self) -> Optional[Sequence[str]]:
        """
        iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        """
        return pulumi.get(self, "portals")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesIscsiSecretRef']:
        """
        CHAP Secret for iSCSI target and initiator authentication
        """
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesIscsiSecretRef(dict):
    """
    CHAP Secret for iSCSI target and initiator authentication
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CHAP Secret for iSCSI target and initiator authentication
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesNfs(dict):
    """
    NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    """
    def __init__(__self__, *,
                 path: str,
                 server: str,
                 read_only: Optional[bool] = None):
        """
        NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param str path: Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param str server: Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param bool read_only: ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "server", server)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesPersistentVolumeClaim(dict):
    """
    PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    """
    def __init__(__self__, *,
                 claim_name: str,
                 read_only: Optional[bool] = None):
        """
        PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        :param str claim_name: ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        :param bool read_only: Will force the ReadOnly setting in VolumeMounts. Default false.
        """
        pulumi.set(__self__, "claim_name", claim_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="claimName")
    def claim_name(self) -> str:
        """
        ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        """
        return pulumi.get(self, "claim_name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        Will force the ReadOnly setting in VolumeMounts. Default false.
        """
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesPhotonPersistentDisk(dict):
    """
    PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
    """
    def __init__(__self__, *,
                 pd_id: str,
                 fs_type: Optional[str] = None):
        """
        PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
        :param str pd_id: ID that identifies Photon Controller persistent disk
        :param str fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        pulumi.set(__self__, "pd_id", pd_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)

    @property
    @pulumi.getter(name="pdID")
    def pd_id(self) -> str:
        """
        ID that identifies Photon Controller persistent disk
        """
        return pulumi.get(self, "pd_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesPortworxVolume(dict):
    """
    PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
    """
    def __init__(__self__, *,
                 volume_id: str,
                 fs_type: Optional[str] = None,
                 read_only: Optional[bool] = None):
        """
        PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
        :param str volume_id: VolumeID uniquely identifies a Portworx volume
        :param str fs_type: FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
        :param bool read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> str:
        """
        VolumeID uniquely identifies a Portworx volume
        """
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        """
        FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesProjected(dict):
    """
    Items for all in one resources secrets, configmaps, and downward API
    """
    def __init__(__self__, *,
                 sources: Sequence['outputs.ClusterProvisionSpecPodSpecVolumesProjectedSources'],
                 default_mode: Optional[int] = None):
        """
        Items for all in one resources secrets, configmaps, and downward API
        :param Sequence['ClusterProvisionSpecPodSpecVolumesProjectedSourcesArgs'] sources: list of volume projections
        :param int default_mode: Mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        pulumi.set(__self__, "sources", sources)
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)

    @property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.ClusterProvisionSpecPodSpecVolumesProjectedSources']:
        """
        list of volume projections
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        """
        Mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "default_mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesProjectedSources(dict):
    """
    Projection that may be projected along with other supported volume types
    """
    def __init__(__self__, *,
                 config_map: Optional['outputs.ClusterProvisionSpecPodSpecVolumesProjectedSourcesConfigMap'] = None,
                 downward_api: Optional['outputs.ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPI'] = None,
                 secret: Optional['outputs.ClusterProvisionSpecPodSpecVolumesProjectedSourcesSecret'] = None,
                 service_account_token: Optional['outputs.ClusterProvisionSpecPodSpecVolumesProjectedSourcesServiceAccountToken'] = None):
        """
        Projection that may be projected along with other supported volume types
        :param 'ClusterProvisionSpecPodSpecVolumesProjectedSourcesConfigMapArgs' config_map: information about the configMap data to project
        :param 'ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIArgs' downward_api: information about the downwardAPI data to project
        :param 'ClusterProvisionSpecPodSpecVolumesProjectedSourcesSecretArgs' secret: information about the secret data to project
        :param 'ClusterProvisionSpecPodSpecVolumesProjectedSourcesServiceAccountTokenArgs' service_account_token: information about the serviceAccountToken data to project
        """
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if service_account_token is not None:
            pulumi.set(__self__, "service_account_token", service_account_token)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesProjectedSourcesConfigMap']:
        """
        information about the configMap data to project
        """
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter(name="downwardAPI")
    def downward_api(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPI']:
        """
        information about the downwardAPI data to project
        """
        return pulumi.get(self, "downward_api")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesProjectedSourcesSecret']:
        """
        information about the secret data to project
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="serviceAccountToken")
    def service_account_token(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesProjectedSourcesServiceAccountToken']:
        """
        information about the serviceAccountToken data to project
        """
        return pulumi.get(self, "service_account_token")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesProjectedSourcesConfigMap(dict):
    """
    information about the configMap data to project
    """
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecVolumesProjectedSourcesConfigMapItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        """
        information about the configMap data to project
        :param Sequence['ClusterProvisionSpecPodSpecVolumesProjectedSourcesConfigMapItemsArgs'] items: If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param bool optional: Specify whether the ConfigMap or its keys must be defined
        """
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecVolumesProjectedSourcesConfigMapItems']]:
        """
        If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        """
        Specify whether the ConfigMap or its keys must be defined
        """
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesProjectedSourcesConfigMapItems(dict):
    """
    Maps a string key to a path within a volume.
    """
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        """
        Maps a string key to a path within a volume.
        :param str key: The key to project.
        :param str path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        :param int mode: Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        """
        Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPI(dict):
    """
    information about the downwardAPI data to project
    """
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItems']] = None):
        """
        information about the downwardAPI data to project
        :param Sequence['ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsArgs'] items: Items is a list of DownwardAPIVolume file
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItems']]:
        """
        Items is a list of DownwardAPIVolume file
        """
        return pulumi.get(self, "items")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItems(dict):
    """
    DownwardAPIVolumeFile represents information to create the file containing the pod field
    """
    def __init__(__self__, *,
                 path: str,
                 field_ref: Optional['outputs.ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef'] = None,
                 mode: Optional[int] = None,
                 resource_field_ref: Optional['outputs.ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef'] = None):
        """
        DownwardAPIVolumeFile represents information to create the file containing the pod field
        :param str path: Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        :param 'ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs' field_ref: Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        :param int mode: Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param 'ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs' resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef']:
        """
        Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        """
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        """
        Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef']:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef(dict):
    """
    Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
    """
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        """
        Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        :param str field_path: Path of the field to select in the specified API version.
        :param str api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef(dict):
    """
    Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
    """
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[str] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        :param str resource: Required: resource to select
        :param str container_name: Container name: required for volumes, optional for env vars
        :param str divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[str]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesProjectedSourcesSecret(dict):
    """
    information about the secret data to project
    """
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecVolumesProjectedSourcesSecretItems']] = None,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        """
        information about the secret data to project
        :param Sequence['ClusterProvisionSpecPodSpecVolumesProjectedSourcesSecretItemsArgs'] items: If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param bool optional: Specify whether the Secret or its key must be defined
        """
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecVolumesProjectedSourcesSecretItems']]:
        """
        If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesProjectedSourcesSecretItems(dict):
    """
    Maps a string key to a path within a volume.
    """
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        """
        Maps a string key to a path within a volume.
        :param str key: The key to project.
        :param str path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        :param int mode: Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        """
        Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesProjectedSourcesServiceAccountToken(dict):
    """
    information about the serviceAccountToken data to project
    """
    def __init__(__self__, *,
                 path: str,
                 audience: Optional[str] = None,
                 expiration_seconds: Optional[int] = None):
        """
        information about the serviceAccountToken data to project
        :param str path: Path is the path relative to the mount point of the file to project the token into.
        :param str audience: Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
        :param int expiration_seconds: ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
        """
        pulumi.set(__self__, "path", path)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if expiration_seconds is not None:
            pulumi.set(__self__, "expiration_seconds", expiration_seconds)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path is the path relative to the mount point of the file to project the token into.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def audience(self) -> Optional[str]:
        """
        Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
        """
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter(name="expirationSeconds")
    def expiration_seconds(self) -> Optional[int]:
        """
        ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
        """
        return pulumi.get(self, "expiration_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesQuobyte(dict):
    """
    Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
    """
    def __init__(__self__, *,
                 registry: str,
                 volume: str,
                 group: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 tenant: Optional[str] = None,
                 user: Optional[str] = None):
        """
        Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        :param str registry: Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
        :param str volume: Volume is a string that references an already created Quobyte volume by name.
        :param str group: Group to map volume access to Default is no group
        :param bool read_only: ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
        :param str tenant: Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
        :param str user: User to map volume access to Defaults to serivceaccount user
        """
        pulumi.set(__self__, "registry", registry)
        pulumi.set(__self__, "volume", volume)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if tenant is not None:
            pulumi.set(__self__, "tenant", tenant)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def registry(self) -> str:
        """
        Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
        """
        return pulumi.get(self, "registry")

    @property
    @pulumi.getter
    def volume(self) -> str:
        """
        Volume is a string that references an already created Quobyte volume by name.
        """
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Group to map volume access to Default is no group
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def tenant(self) -> Optional[str]:
        """
        Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
        """
        return pulumi.get(self, "tenant")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        User to map volume access to Defaults to serivceaccount user
        """
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesRbd(dict):
    """
    RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
    """
    def __init__(__self__, *,
                 image: str,
                 monitors: Sequence[str],
                 fs_type: Optional[str] = None,
                 keyring: Optional[str] = None,
                 pool: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.ClusterProvisionSpecPodSpecVolumesRbdSecretRef'] = None,
                 user: Optional[str] = None):
        """
        RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
        :param str image: The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param Sequence[str] monitors: A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param str fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
        :param str keyring: Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param str pool: The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param bool read_only: ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param 'ClusterProvisionSpecPodSpecVolumesRbdSecretRefArgs' secret_ref: SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param str user: The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "monitors", monitors)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if keyring is not None:
            pulumi.set(__self__, "keyring", keyring)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def image(self) -> str:
        """
        The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def monitors(self) -> Sequence[str]:
        """
        A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "monitors")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
        """
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def keyring(self) -> Optional[str]:
        """
        Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "keyring")

    @property
    @pulumi.getter
    def pool(self) -> Optional[str]:
        """
        The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "pool")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesRbdSecretRef']:
        """
        SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "user")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesRbdSecretRef(dict):
    """
    SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesScaleIO(dict):
    """
    ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
    """
    def __init__(__self__, *,
                 gateway: str,
                 secret_ref: 'outputs.ClusterProvisionSpecPodSpecVolumesScaleIOSecretRef',
                 system: str,
                 fs_type: Optional[str] = None,
                 protection_domain: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 ssl_enabled: Optional[bool] = None,
                 storage_mode: Optional[str] = None,
                 storage_pool: Optional[str] = None,
                 volume_name: Optional[str] = None):
        """
        ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
        :param str gateway: The host address of the ScaleIO API Gateway.
        :param 'ClusterProvisionSpecPodSpecVolumesScaleIOSecretRefArgs' secret_ref: SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
        :param str system: The name of the storage system as configured in ScaleIO.
        :param str fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
        :param str protection_domain: The name of the ScaleIO Protection Domain for the configured storage.
        :param bool read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param bool ssl_enabled: Flag to enable/disable SSL communication with Gateway, default false
        :param str storage_mode: Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
        :param str storage_pool: The ScaleIO Storage Pool associated with the protection domain.
        :param str volume_name: The name of a volume already created in the ScaleIO system that is associated with this volume source.
        """
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "secret_ref", secret_ref)
        pulumi.set(__self__, "system", system)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if protection_domain is not None:
            pulumi.set(__self__, "protection_domain", protection_domain)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if ssl_enabled is not None:
            pulumi.set(__self__, "ssl_enabled", ssl_enabled)
        if storage_mode is not None:
            pulumi.set(__self__, "storage_mode", storage_mode)
        if storage_pool is not None:
            pulumi.set(__self__, "storage_pool", storage_pool)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter
    def gateway(self) -> str:
        """
        The host address of the ScaleIO API Gateway.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> 'outputs.ClusterProvisionSpecPodSpecVolumesScaleIOSecretRef':
        """
        SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
        """
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def system(self) -> str:
        """
        The name of the storage system as configured in ScaleIO.
        """
        return pulumi.get(self, "system")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
        """
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="protectionDomain")
    def protection_domain(self) -> Optional[str]:
        """
        The name of the ScaleIO Protection Domain for the configured storage.
        """
        return pulumi.get(self, "protection_domain")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="sslEnabled")
    def ssl_enabled(self) -> Optional[bool]:
        """
        Flag to enable/disable SSL communication with Gateway, default false
        """
        return pulumi.get(self, "ssl_enabled")

    @property
    @pulumi.getter(name="storageMode")
    def storage_mode(self) -> Optional[str]:
        """
        Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
        """
        return pulumi.get(self, "storage_mode")

    @property
    @pulumi.getter(name="storagePool")
    def storage_pool(self) -> Optional[str]:
        """
        The ScaleIO Storage Pool associated with the protection domain.
        """
        return pulumi.get(self, "storage_pool")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[str]:
        """
        The name of a volume already created in the ScaleIO system that is associated with this volume source.
        """
        return pulumi.get(self, "volume_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesScaleIOSecretRef(dict):
    """
    SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesSecret(dict):
    """
    Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
    """
    def __init__(__self__, *,
                 default_mode: Optional[int] = None,
                 items: Optional[Sequence['outputs.ClusterProvisionSpecPodSpecVolumesSecretItems']] = None,
                 optional: Optional[bool] = None,
                 secret_name: Optional[str] = None):
        """
        Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        :param int default_mode: Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param Sequence['ClusterProvisionSpecPodSpecVolumesSecretItemsArgs'] items: If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param bool optional: Specify whether the Secret or its keys must be defined
        :param str secret_name: Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        """
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[int]:
        """
        Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "default_mode")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ClusterProvisionSpecPodSpecVolumesSecretItems']]:
        """
        If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        """
        Specify whether the Secret or its keys must be defined
        """
        return pulumi.get(self, "optional")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        """
        Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        """
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesSecretItems(dict):
    """
    Maps a string key to a path within a volume.
    """
    def __init__(__self__, *,
                 key: str,
                 path: str,
                 mode: Optional[int] = None):
        """
        Maps a string key to a path within a volume.
        :param str key: The key to project.
        :param str path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        :param int mode: Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def mode(self) -> Optional[int]:
        """
        Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesStorageos(dict):
    """
    StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
    """
    def __init__(__self__, *,
                 fs_type: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 secret_ref: Optional['outputs.ClusterProvisionSpecPodSpecVolumesStorageosSecretRef'] = None,
                 volume_name: Optional[str] = None,
                 volume_namespace: Optional[str] = None):
        """
        StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
        :param str fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        :param bool read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param 'ClusterProvisionSpecPodSpecVolumesStorageosSecretRefArgs' secret_ref: SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
        :param str volume_name: VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
        :param str volume_namespace: VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
        """
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)
        if volume_namespace is not None:
            pulumi.set(__self__, "volume_namespace", volume_namespace)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional['outputs.ClusterProvisionSpecPodSpecVolumesStorageosSecretRef']:
        """
        SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
        """
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[str]:
        """
        VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
        """
        return pulumi.get(self, "volume_name")

    @property
    @pulumi.getter(name="volumeNamespace")
    def volume_namespace(self) -> Optional[str]:
        """
        VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
        """
        return pulumi.get(self, "volume_namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesStorageosSecretRef(dict):
    """
    SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionSpecPodSpecVolumesVsphereVolume(dict):
    """
    VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
    """
    def __init__(__self__, *,
                 volume_path: str,
                 fs_type: Optional[str] = None,
                 storage_policy_id: Optional[str] = None,
                 storage_policy_name: Optional[str] = None):
        """
        VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
        :param str volume_path: Path that identifies vSphere volume vmdk
        :param str fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        :param str storage_policy_id: Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
        :param str storage_policy_name: Storage Policy Based Management (SPBM) profile name.
        """
        pulumi.set(__self__, "volume_path", volume_path)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if storage_policy_id is not None:
            pulumi.set(__self__, "storage_policy_id", storage_policy_id)
        if storage_policy_name is not None:
            pulumi.set(__self__, "storage_policy_name", storage_policy_name)

    @property
    @pulumi.getter(name="volumePath")
    def volume_path(self) -> str:
        """
        Path that identifies vSphere volume vmdk
        """
        return pulumi.get(self, "volume_path")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter(name="storagePolicyID")
    def storage_policy_id(self) -> Optional[str]:
        """
        Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
        """
        return pulumi.get(self, "storage_policy_id")

    @property
    @pulumi.getter(name="storagePolicyName")
    def storage_policy_name(self) -> Optional[str]:
        """
        Storage Policy Based Management (SPBM) profile name.
        """
        return pulumi.get(self, "storage_policy_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionStatus(dict):
    """
    ClusterProvisionStatus defines the observed state of ClusterProvision.
    """
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.ClusterProvisionStatusConditions']] = None,
                 job_ref: Optional['outputs.ClusterProvisionStatusJobRef'] = None):
        """
        ClusterProvisionStatus defines the observed state of ClusterProvision.
        :param Sequence['ClusterProvisionStatusConditionsArgs'] conditions: Conditions includes more detailed status for the cluster provision
        :param 'ClusterProvisionStatusJobRefArgs' job_ref: JobRef is the reference to the job performing the provision.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if job_ref is not None:
            pulumi.set(__self__, "job_ref", job_ref)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ClusterProvisionStatusConditions']]:
        """
        Conditions includes more detailed status for the cluster provision
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="jobRef")
    def job_ref(self) -> Optional['outputs.ClusterProvisionStatusJobRef']:
        """
        JobRef is the reference to the job performing the provision.
        """
        return pulumi.get(self, "job_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionStatusConditions(dict):
    """
    ClusterProvisionCondition contains details for the current condition of a cluster provision
    """
    def __init__(__self__, *,
                 status: str,
                 type: str,
                 last_probe_time: Optional[str] = None,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        ClusterProvisionCondition contains details for the current condition of a cluster provision
        :param str status: Status is the status of the condition.
        :param str type: Type is the type of the condition.
        :param str last_probe_time: LastProbeTime is the last time we probed the condition.
        :param str last_transition_time: LastTransitionTime is the last time the condition transitioned from one status to another.
        :param str message: Message is a human-readable message indicating details about last transition.
        :param str reason: Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_probe_time is not None:
            pulumi.set(__self__, "last_probe_time", last_probe_time)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status is the status of the condition.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type is the type of the condition.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="lastProbeTime")
    def last_probe_time(self) -> Optional[str]:
        """
        LastProbeTime is the last time we probed the condition.
        """
        return pulumi.get(self, "last_probe_time")

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        """
        LastTransitionTime is the last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message is a human-readable message indicating details about last transition.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterProvisionStatusJobRef(dict):
    """
    JobRef is the reference to the job performing the provision.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        JobRef is the reference to the job performing the provision.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterRelocateSpec(dict):
    """
    ClusterRelocateSpec defines the relocation of clusters from one Hive instance to another.
    """
    def __init__(__self__, *,
                 cluster_deployment_selector: 'outputs.ClusterRelocateSpecClusterDeploymentSelector',
                 kubeconfig_secret_ref: 'outputs.ClusterRelocateSpecKubeconfigSecretRef'):
        """
        ClusterRelocateSpec defines the relocation of clusters from one Hive instance to another.
        :param 'ClusterRelocateSpecClusterDeploymentSelectorArgs' cluster_deployment_selector: ClusterDeploymentSelector is a LabelSelector indicating which clusters will be relocated.
        :param 'ClusterRelocateSpecKubeconfigSecretRefArgs' kubeconfig_secret_ref: KubeconfigSecretRef is a reference to the secret containing the kubeconfig for the destination Hive instance. The kubeconfig must be in a data field where the key is "kubeconfig".
        """
        pulumi.set(__self__, "cluster_deployment_selector", cluster_deployment_selector)
        pulumi.set(__self__, "kubeconfig_secret_ref", kubeconfig_secret_ref)

    @property
    @pulumi.getter(name="clusterDeploymentSelector")
    def cluster_deployment_selector(self) -> 'outputs.ClusterRelocateSpecClusterDeploymentSelector':
        """
        ClusterDeploymentSelector is a LabelSelector indicating which clusters will be relocated.
        """
        return pulumi.get(self, "cluster_deployment_selector")

    @property
    @pulumi.getter(name="kubeconfigSecretRef")
    def kubeconfig_secret_ref(self) -> 'outputs.ClusterRelocateSpecKubeconfigSecretRef':
        """
        KubeconfigSecretRef is a reference to the secret containing the kubeconfig for the destination Hive instance. The kubeconfig must be in a data field where the key is "kubeconfig".
        """
        return pulumi.get(self, "kubeconfig_secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterRelocateSpecClusterDeploymentSelector(dict):
    """
    ClusterDeploymentSelector is a LabelSelector indicating which clusters will be relocated.
    """
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ClusterRelocateSpecClusterDeploymentSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        ClusterDeploymentSelector is a LabelSelector indicating which clusters will be relocated.
        :param Sequence['ClusterRelocateSpecClusterDeploymentSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ClusterRelocateSpecClusterDeploymentSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterRelocateSpecClusterDeploymentSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterRelocateSpecKubeconfigSecretRef(dict):
    """
    KubeconfigSecretRef is a reference to the secret containing the kubeconfig for the destination Hive instance. The kubeconfig must be in a data field where the key is "kubeconfig".
    """
    def __init__(__self__, *,
                 name: str,
                 namespace: str):
        """
        KubeconfigSecretRef is a reference to the secret containing the kubeconfig for the destination Hive instance. The kubeconfig must be in a data field where the key is "kubeconfig".
        :param str name: Name is the name of the secret.
        :param str namespace: Namespace is the namespace where the secret lives.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the secret.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace is the namespace where the secret lives.
        """
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterStateStatus(dict):
    """
    ClusterStateStatus defines the observed state of ClusterState
    """
    def __init__(__self__, *,
                 cluster_operators: Optional[Sequence['outputs.ClusterStateStatusClusterOperators']] = None,
                 last_updated: Optional[str] = None):
        """
        ClusterStateStatus defines the observed state of ClusterState
        :param Sequence['ClusterStateStatusClusterOperatorsArgs'] cluster_operators: ClusterOperators contains the state for every cluster operator in the target cluster
        :param str last_updated: LastUpdated is the last time that operator state was updated
        """
        if cluster_operators is not None:
            pulumi.set(__self__, "cluster_operators", cluster_operators)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)

    @property
    @pulumi.getter(name="clusterOperators")
    def cluster_operators(self) -> Optional[Sequence['outputs.ClusterStateStatusClusterOperators']]:
        """
        ClusterOperators contains the state for every cluster operator in the target cluster
        """
        return pulumi.get(self, "cluster_operators")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[str]:
        """
        LastUpdated is the last time that operator state was updated
        """
        return pulumi.get(self, "last_updated")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterStateStatusClusterOperators(dict):
    """
    ClusterOperatorState summarizes the status of a single cluster operator
    """
    def __init__(__self__, *,
                 name: str,
                 conditions: Optional[Sequence['outputs.ClusterStateStatusClusterOperatorsConditions']] = None):
        """
        ClusterOperatorState summarizes the status of a single cluster operator
        :param str name: Name is the name of the cluster operator
        :param Sequence['ClusterStateStatusClusterOperatorsConditionsArgs'] conditions: Conditions is the set of conditions in the status of the cluster operator on the target cluster
        """
        pulumi.set(__self__, "name", name)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the cluster operator
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ClusterStateStatusClusterOperatorsConditions']]:
        """
        Conditions is the set of conditions in the status of the cluster operator on the target cluster
        """
        return pulumi.get(self, "conditions")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterStateStatusClusterOperatorsConditions(dict):
    """
    ClusterOperatorStatusCondition represents the state of the operator's managed and monitored components.
    """
    def __init__(__self__, *,
                 last_transition_time: str,
                 status: str,
                 type: str,
                 message: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        ClusterOperatorStatusCondition represents the state of the operator's managed and monitored components.
        :param str last_transition_time: lastTransitionTime is the time of the last update to the current status property.
        :param str status: status of the condition, one of True, False, Unknown.
        :param str type: type specifies the aspect reported by this condition.
        :param str message: message provides additional information about the current condition. This is only to be consumed by humans.
        :param str reason: reason is the CamelCase reason for the condition's current status.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        """
        lastTransitionTime is the time of the last update to the current status property.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type specifies the aspect reported by this condition.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        message provides additional information about the current condition. This is only to be consumed by humans.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        reason is the CamelCase reason for the condition's current status.
        """
        return pulumi.get(self, "reason")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DNSZoneSpec(dict):
    """
    DNSZoneSpec defines the desired state of DNSZone
    """
    def __init__(__self__, *,
                 zone: str,
                 aws: Optional['outputs.DNSZoneSpecAws'] = None,
                 azure: Optional['outputs.DNSZoneSpecAzure'] = None,
                 gcp: Optional['outputs.DNSZoneSpecGcp'] = None,
                 link_to_parent_domain: Optional[bool] = None):
        """
        DNSZoneSpec defines the desired state of DNSZone
        :param str zone: Zone is the DNS zone to host
        :param 'DNSZoneSpecAwsArgs' aws: AWS specifies AWS-specific cloud configuration
        :param 'DNSZoneSpecAzureArgs' azure: Azure specifes Azure-specific cloud configuration
        :param 'DNSZoneSpecGcpArgs' gcp: GCP specifies GCP-specific cloud configuration
        :param bool link_to_parent_domain: LinkToParentDomain specifies whether DNS records should be automatically created to link this DNSZone with a parent domain.
        """
        pulumi.set(__self__, "zone", zone)
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if gcp is not None:
            pulumi.set(__self__, "gcp", gcp)
        if link_to_parent_domain is not None:
            pulumi.set(__self__, "link_to_parent_domain", link_to_parent_domain)

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        Zone is the DNS zone to host
        """
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter
    def aws(self) -> Optional['outputs.DNSZoneSpecAws']:
        """
        AWS specifies AWS-specific cloud configuration
        """
        return pulumi.get(self, "aws")

    @property
    @pulumi.getter
    def azure(self) -> Optional['outputs.DNSZoneSpecAzure']:
        """
        Azure specifes Azure-specific cloud configuration
        """
        return pulumi.get(self, "azure")

    @property
    @pulumi.getter
    def gcp(self) -> Optional['outputs.DNSZoneSpecGcp']:
        """
        GCP specifies GCP-specific cloud configuration
        """
        return pulumi.get(self, "gcp")

    @property
    @pulumi.getter(name="linkToParentDomain")
    def link_to_parent_domain(self) -> Optional[bool]:
        """
        LinkToParentDomain specifies whether DNS records should be automatically created to link this DNSZone with a parent domain.
        """
        return pulumi.get(self, "link_to_parent_domain")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DNSZoneSpecAws(dict):
    """
    AWS specifies AWS-specific cloud configuration
    """
    def __init__(__self__, *,
                 credentials_secret_ref: 'outputs.DNSZoneSpecAwsCredentialsSecretRef',
                 additional_tags: Optional[Sequence['outputs.DNSZoneSpecAwsAdditionalTags']] = None,
                 region: Optional[str] = None):
        """
        AWS specifies AWS-specific cloud configuration
        :param 'DNSZoneSpecAwsCredentialsSecretRefArgs' credentials_secret_ref: CredentialsSecretRef contains a reference to a secret that contains AWS credentials for CRUD operations
        :param Sequence['DNSZoneSpecAwsAdditionalTagsArgs'] additional_tags: AdditionalTags is a set of additional tags to set on the DNS hosted zone. In addition to these tags,the DNS Zone controller will set a hive.openhsift.io/hostedzone tag identifying the HostedZone record that it belongs to.
        :param str region: Region is the AWS region to use for route53 operations. This defaults to us-east-1. For AWS China, use cn-northwest-1.
        """
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        if additional_tags is not None:
            pulumi.set(__self__, "additional_tags", additional_tags)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> 'outputs.DNSZoneSpecAwsCredentialsSecretRef':
        """
        CredentialsSecretRef contains a reference to a secret that contains AWS credentials for CRUD operations
        """
        return pulumi.get(self, "credentials_secret_ref")

    @property
    @pulumi.getter(name="additionalTags")
    def additional_tags(self) -> Optional[Sequence['outputs.DNSZoneSpecAwsAdditionalTags']]:
        """
        AdditionalTags is a set of additional tags to set on the DNS hosted zone. In addition to these tags,the DNS Zone controller will set a hive.openhsift.io/hostedzone tag identifying the HostedZone record that it belongs to.
        """
        return pulumi.get(self, "additional_tags")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Region is the AWS region to use for route53 operations. This defaults to us-east-1. For AWS China, use cn-northwest-1.
        """
        return pulumi.get(self, "region")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DNSZoneSpecAwsAdditionalTags(dict):
    """
    AWSResourceTag represents a tag that is applied to an AWS cloud resource
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        AWSResourceTag represents a tag that is applied to an AWS cloud resource
        :param str key: Key is the key for the tag
        :param str value: Value is the value for the tag
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key is the key for the tag
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value is the value for the tag
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DNSZoneSpecAwsCredentialsSecretRef(dict):
    """
    CredentialsSecretRef contains a reference to a secret that contains AWS credentials for CRUD operations
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CredentialsSecretRef contains a reference to a secret that contains AWS credentials for CRUD operations
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DNSZoneSpecAzure(dict):
    """
    Azure specifes Azure-specific cloud configuration
    """
    def __init__(__self__, *,
                 credentials_secret_ref: 'outputs.DNSZoneSpecAzureCredentialsSecretRef',
                 resource_group_name: str):
        """
        Azure specifes Azure-specific cloud configuration
        :param 'DNSZoneSpecAzureCredentialsSecretRefArgs' credentials_secret_ref: CredentialsSecretRef references a secret that will be used to authenticate with Azure CloudDNS. It will need permission to create and manage CloudDNS Hosted Zones. Secret should have a key named 'osServicePrincipal.json'. The credentials must specify the project to use.
        :param str resource_group_name: ResourceGroupName specifies the Azure resource group in which the Hosted Zone should be created.
        """
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        pulumi.set(__self__, "resource_group_name", resource_group_name)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> 'outputs.DNSZoneSpecAzureCredentialsSecretRef':
        """
        CredentialsSecretRef references a secret that will be used to authenticate with Azure CloudDNS. It will need permission to create and manage CloudDNS Hosted Zones. Secret should have a key named 'osServicePrincipal.json'. The credentials must specify the project to use.
        """
        return pulumi.get(self, "credentials_secret_ref")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> str:
        """
        ResourceGroupName specifies the Azure resource group in which the Hosted Zone should be created.
        """
        return pulumi.get(self, "resource_group_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DNSZoneSpecAzureCredentialsSecretRef(dict):
    """
    CredentialsSecretRef references a secret that will be used to authenticate with Azure CloudDNS. It will need permission to create and manage CloudDNS Hosted Zones. Secret should have a key named 'osServicePrincipal.json'. The credentials must specify the project to use.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CredentialsSecretRef references a secret that will be used to authenticate with Azure CloudDNS. It will need permission to create and manage CloudDNS Hosted Zones. Secret should have a key named 'osServicePrincipal.json'. The credentials must specify the project to use.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DNSZoneSpecGcp(dict):
    """
    GCP specifies GCP-specific cloud configuration
    """
    def __init__(__self__, *,
                 credentials_secret_ref: 'outputs.DNSZoneSpecGcpCredentialsSecretRef'):
        """
        GCP specifies GCP-specific cloud configuration
        :param 'DNSZoneSpecGcpCredentialsSecretRefArgs' credentials_secret_ref: CredentialsSecretRef references a secret that will be used to authenticate with GCP CloudDNS. It will need permission to create and manage CloudDNS Hosted Zones. Secret should have a key named 'osServiceAccount.json'. The credentials must specify the project to use.
        """
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> 'outputs.DNSZoneSpecGcpCredentialsSecretRef':
        """
        CredentialsSecretRef references a secret that will be used to authenticate with GCP CloudDNS. It will need permission to create and manage CloudDNS Hosted Zones. Secret should have a key named 'osServiceAccount.json'. The credentials must specify the project to use.
        """
        return pulumi.get(self, "credentials_secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DNSZoneSpecGcpCredentialsSecretRef(dict):
    """
    CredentialsSecretRef references a secret that will be used to authenticate with GCP CloudDNS. It will need permission to create and manage CloudDNS Hosted Zones. Secret should have a key named 'osServiceAccount.json'. The credentials must specify the project to use.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CredentialsSecretRef references a secret that will be used to authenticate with GCP CloudDNS. It will need permission to create and manage CloudDNS Hosted Zones. Secret should have a key named 'osServiceAccount.json'. The credentials must specify the project to use.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DNSZoneStatus(dict):
    """
    DNSZoneStatus defines the observed state of DNSZone
    """
    def __init__(__self__, *,
                 aws: Optional['outputs.DNSZoneStatusAws'] = None,
                 azure: Optional[Mapping[str, Any]] = None,
                 conditions: Optional[Sequence['outputs.DNSZoneStatusConditions']] = None,
                 gcp: Optional['outputs.DNSZoneStatusGcp'] = None,
                 last_sync_generation: Optional[int] = None,
                 last_sync_timestamp: Optional[str] = None,
                 name_servers: Optional[Sequence[str]] = None):
        """
        DNSZoneStatus defines the observed state of DNSZone
        :param 'DNSZoneStatusAwsArgs' aws: AWSDNSZoneStatus contains status information specific to AWS
        :param Mapping[str, Any] azure: AzureDNSZoneStatus contains status information specific to Azure
        :param Sequence['DNSZoneStatusConditionsArgs'] conditions: Conditions includes more detailed status for the DNSZone
        :param 'DNSZoneStatusGcpArgs' gcp: GCPDNSZoneStatus contains status information specific to GCP
        :param int last_sync_generation: LastSyncGeneration is the generation of the zone resource that was last sync'd. This is used to know if the Object has changed and we should sync immediately.
        :param str last_sync_timestamp: LastSyncTimestamp is the time that the zone was last sync'd.
        :param Sequence[str] name_servers: NameServers is a list of nameservers for this DNS zone
        """
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if gcp is not None:
            pulumi.set(__self__, "gcp", gcp)
        if last_sync_generation is not None:
            pulumi.set(__self__, "last_sync_generation", last_sync_generation)
        if last_sync_timestamp is not None:
            pulumi.set(__self__, "last_sync_timestamp", last_sync_timestamp)
        if name_servers is not None:
            pulumi.set(__self__, "name_servers", name_servers)

    @property
    @pulumi.getter
    def aws(self) -> Optional['outputs.DNSZoneStatusAws']:
        """
        AWSDNSZoneStatus contains status information specific to AWS
        """
        return pulumi.get(self, "aws")

    @property
    @pulumi.getter
    def azure(self) -> Optional[Mapping[str, Any]]:
        """
        AzureDNSZoneStatus contains status information specific to Azure
        """
        return pulumi.get(self, "azure")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.DNSZoneStatusConditions']]:
        """
        Conditions includes more detailed status for the DNSZone
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def gcp(self) -> Optional['outputs.DNSZoneStatusGcp']:
        """
        GCPDNSZoneStatus contains status information specific to GCP
        """
        return pulumi.get(self, "gcp")

    @property
    @pulumi.getter(name="lastSyncGeneration")
    def last_sync_generation(self) -> Optional[int]:
        """
        LastSyncGeneration is the generation of the zone resource that was last sync'd. This is used to know if the Object has changed and we should sync immediately.
        """
        return pulumi.get(self, "last_sync_generation")

    @property
    @pulumi.getter(name="lastSyncTimestamp")
    def last_sync_timestamp(self) -> Optional[str]:
        """
        LastSyncTimestamp is the time that the zone was last sync'd.
        """
        return pulumi.get(self, "last_sync_timestamp")

    @property
    @pulumi.getter(name="nameServers")
    def name_servers(self) -> Optional[Sequence[str]]:
        """
        NameServers is a list of nameservers for this DNS zone
        """
        return pulumi.get(self, "name_servers")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DNSZoneStatusAws(dict):
    """
    AWSDNSZoneStatus contains status information specific to AWS
    """
    def __init__(__self__, *,
                 zone_id: Optional[str] = None):
        """
        AWSDNSZoneStatus contains status information specific to AWS
        :param str zone_id: ZoneID is the ID of the zone in AWS
        """
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="zoneID")
    def zone_id(self) -> Optional[str]:
        """
        ZoneID is the ID of the zone in AWS
        """
        return pulumi.get(self, "zone_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DNSZoneStatusConditions(dict):
    """
    DNSZoneCondition contains details for the current condition of a DNSZone
    """
    def __init__(__self__, *,
                 status: str,
                 type: str,
                 last_probe_time: Optional[str] = None,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        DNSZoneCondition contains details for the current condition of a DNSZone
        :param str status: Status is the status of the condition.
        :param str type: Type is the type of the condition.
        :param str last_probe_time: LastProbeTime is the last time we probed the condition.
        :param str last_transition_time: LastTransitionTime is the last time the condition transitioned from one status to another.
        :param str message: Message is a human-readable message indicating details about last transition.
        :param str reason: Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_probe_time is not None:
            pulumi.set(__self__, "last_probe_time", last_probe_time)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status is the status of the condition.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type is the type of the condition.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="lastProbeTime")
    def last_probe_time(self) -> Optional[str]:
        """
        LastProbeTime is the last time we probed the condition.
        """
        return pulumi.get(self, "last_probe_time")

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        """
        LastTransitionTime is the last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message is a human-readable message indicating details about last transition.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DNSZoneStatusGcp(dict):
    """
    GCPDNSZoneStatus contains status information specific to GCP
    """
    def __init__(__self__, *,
                 zone_name: Optional[str] = None):
        """
        GCPDNSZoneStatus contains status information specific to GCP
        :param str zone_name: ZoneName is the name of the zone in GCP Cloud DNS
        """
        if zone_name is not None:
            pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> Optional[str]:
        """
        ZoneName is the name of the zone in GCP Cloud DNS
        """
        return pulumi.get(self, "zone_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HiveConfigSpec(dict):
    """
    HiveConfigSpec defines the desired state of Hive
    """
    def __init__(__self__, *,
                 additional_certificate_authorities_secret_ref: Optional[Sequence['outputs.HiveConfigSpecAdditionalCertificateAuthoritiesSecretRef']] = None,
                 backup: Optional['outputs.HiveConfigSpecBackup'] = None,
                 controllers_config: Optional['outputs.HiveConfigSpecControllersConfig'] = None,
                 delete_protection: Optional[str] = None,
                 deprovisions_disabled: Optional[bool] = None,
                 disabled_controllers: Optional[Sequence[str]] = None,
                 failed_provision_config: Optional['outputs.HiveConfigSpecFailedProvisionConfig'] = None,
                 global_pull_secret_ref: Optional['outputs.HiveConfigSpecGlobalPullSecretRef'] = None,
                 log_level: Optional[str] = None,
                 maintenance_mode: Optional[bool] = None,
                 managed_domains: Optional[Sequence['outputs.HiveConfigSpecManagedDomains']] = None,
                 sync_set_reapply_interval: Optional[str] = None,
                 target_namespace: Optional[str] = None):
        """
        HiveConfigSpec defines the desired state of Hive
        :param Sequence['HiveConfigSpecAdditionalCertificateAuthoritiesSecretRefArgs'] additional_certificate_authorities_secret_ref: AdditionalCertificateAuthoritiesSecretRef is a list of references to secrets in the TargetNamespace that contain an additional Certificate Authority to use when communicating with target clusters. These certificate authorities will be used in addition to any self-signed CA generated by each cluster on installation.
        :param 'HiveConfigSpecBackupArgs' backup: Backup specifies configuration for backup integration. If absent, backup integration will be disabled.
        :param 'HiveConfigSpecControllersConfigArgs' controllers_config: ControllersConfig is used to configure different hive controllers
        :param str delete_protection: DeleteProtection can be set to "enabled" to turn on automatic delete protection for ClusterDeployments. When enabled, Hive will add the "hive.openshift.io/protected-delete" annotation to new ClusterDeployments. Once a ClusterDeployment has been installed, a user must remove the annotation from a ClusterDeployment prior to deleting it.
        :param bool deprovisions_disabled: DeprovisionsDisabled can be set to true to block deprovision jobs from running.
        :param Sequence[str] disabled_controllers: DisabledControllers allows selectively disabling Hive controllers by name. The name of an individual controller matches the name of the controller as seen in the Hive logging output.
        :param 'HiveConfigSpecFailedProvisionConfigArgs' failed_provision_config: FailedProvisionConfig is used to configure settings related to handling provision failures.
        :param 'HiveConfigSpecGlobalPullSecretRefArgs' global_pull_secret_ref: GlobalPullSecretRef is used to specify a pull secret that will be used globally by all of the cluster deployments. For each cluster deployment, the contents of GlobalPullSecret will be merged with the specific pull secret for a cluster deployment(if specified), with precedence given to the contents of the pull secret for the cluster deployment. The global pull secret is assumed to be in the TargetNamespace.
        :param str log_level: LogLevel is the level of logging to use for the Hive controllers. Acceptable levels, from coarsest to finest, are panic, fatal, error, warn, info, debug, and trace. The default level is info.
        :param bool maintenance_mode: MaintenanceMode can be set to true to disable the hive controllers in situations where we need to ensure nothing is running that will add or act upon finalizers on Hive types. This should rarely be needed. Sets replicas to 0 for the hive-controllers deployment to accomplish this.
        :param Sequence['HiveConfigSpecManagedDomainsArgs'] managed_domains: ManagedDomains is the list of DNS domains that are managed by the Hive cluster When specifying 'manageDNS: true' in a ClusterDeployment, the ClusterDeployment's baseDomain should be a direct child of one of these domains, otherwise the ClusterDeployment creation will result in a validation error.
        :param str sync_set_reapply_interval: SyncSetReapplyInterval is a string duration indicating how much time must pass before SyncSet resources will be reapplied. The default reapply interval is two hours.
        :param str target_namespace: TargetNamespace is the namespace where the core Hive components should be run. Defaults to "hive". Will be created if it does not already exist. All resource references in HiveConfig can be assumed to be in the TargetNamespace.
        """
        if additional_certificate_authorities_secret_ref is not None:
            pulumi.set(__self__, "additional_certificate_authorities_secret_ref", additional_certificate_authorities_secret_ref)
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if controllers_config is not None:
            pulumi.set(__self__, "controllers_config", controllers_config)
        if delete_protection is not None:
            pulumi.set(__self__, "delete_protection", delete_protection)
        if deprovisions_disabled is not None:
            pulumi.set(__self__, "deprovisions_disabled", deprovisions_disabled)
        if disabled_controllers is not None:
            pulumi.set(__self__, "disabled_controllers", disabled_controllers)
        if failed_provision_config is not None:
            pulumi.set(__self__, "failed_provision_config", failed_provision_config)
        if global_pull_secret_ref is not None:
            pulumi.set(__self__, "global_pull_secret_ref", global_pull_secret_ref)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if maintenance_mode is not None:
            pulumi.set(__self__, "maintenance_mode", maintenance_mode)
        if managed_domains is not None:
            pulumi.set(__self__, "managed_domains", managed_domains)
        if sync_set_reapply_interval is not None:
            pulumi.set(__self__, "sync_set_reapply_interval", sync_set_reapply_interval)
        if target_namespace is not None:
            pulumi.set(__self__, "target_namespace", target_namespace)

    @property
    @pulumi.getter(name="additionalCertificateAuthoritiesSecretRef")
    def additional_certificate_authorities_secret_ref(self) -> Optional[Sequence['outputs.HiveConfigSpecAdditionalCertificateAuthoritiesSecretRef']]:
        """
        AdditionalCertificateAuthoritiesSecretRef is a list of references to secrets in the TargetNamespace that contain an additional Certificate Authority to use when communicating with target clusters. These certificate authorities will be used in addition to any self-signed CA generated by each cluster on installation.
        """
        return pulumi.get(self, "additional_certificate_authorities_secret_ref")

    @property
    @pulumi.getter
    def backup(self) -> Optional['outputs.HiveConfigSpecBackup']:
        """
        Backup specifies configuration for backup integration. If absent, backup integration will be disabled.
        """
        return pulumi.get(self, "backup")

    @property
    @pulumi.getter(name="controllersConfig")
    def controllers_config(self) -> Optional['outputs.HiveConfigSpecControllersConfig']:
        """
        ControllersConfig is used to configure different hive controllers
        """
        return pulumi.get(self, "controllers_config")

    @property
    @pulumi.getter(name="deleteProtection")
    def delete_protection(self) -> Optional[str]:
        """
        DeleteProtection can be set to "enabled" to turn on automatic delete protection for ClusterDeployments. When enabled, Hive will add the "hive.openshift.io/protected-delete" annotation to new ClusterDeployments. Once a ClusterDeployment has been installed, a user must remove the annotation from a ClusterDeployment prior to deleting it.
        """
        return pulumi.get(self, "delete_protection")

    @property
    @pulumi.getter(name="deprovisionsDisabled")
    def deprovisions_disabled(self) -> Optional[bool]:
        """
        DeprovisionsDisabled can be set to true to block deprovision jobs from running.
        """
        return pulumi.get(self, "deprovisions_disabled")

    @property
    @pulumi.getter(name="disabledControllers")
    def disabled_controllers(self) -> Optional[Sequence[str]]:
        """
        DisabledControllers allows selectively disabling Hive controllers by name. The name of an individual controller matches the name of the controller as seen in the Hive logging output.
        """
        return pulumi.get(self, "disabled_controllers")

    @property
    @pulumi.getter(name="failedProvisionConfig")
    def failed_provision_config(self) -> Optional['outputs.HiveConfigSpecFailedProvisionConfig']:
        """
        FailedProvisionConfig is used to configure settings related to handling provision failures.
        """
        return pulumi.get(self, "failed_provision_config")

    @property
    @pulumi.getter(name="globalPullSecretRef")
    def global_pull_secret_ref(self) -> Optional['outputs.HiveConfigSpecGlobalPullSecretRef']:
        """
        GlobalPullSecretRef is used to specify a pull secret that will be used globally by all of the cluster deployments. For each cluster deployment, the contents of GlobalPullSecret will be merged with the specific pull secret for a cluster deployment(if specified), with precedence given to the contents of the pull secret for the cluster deployment. The global pull secret is assumed to be in the TargetNamespace.
        """
        return pulumi.get(self, "global_pull_secret_ref")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[str]:
        """
        LogLevel is the level of logging to use for the Hive controllers. Acceptable levels, from coarsest to finest, are panic, fatal, error, warn, info, debug, and trace. The default level is info.
        """
        return pulumi.get(self, "log_level")

    @property
    @pulumi.getter(name="maintenanceMode")
    def maintenance_mode(self) -> Optional[bool]:
        """
        MaintenanceMode can be set to true to disable the hive controllers in situations where we need to ensure nothing is running that will add or act upon finalizers on Hive types. This should rarely be needed. Sets replicas to 0 for the hive-controllers deployment to accomplish this.
        """
        return pulumi.get(self, "maintenance_mode")

    @property
    @pulumi.getter(name="managedDomains")
    def managed_domains(self) -> Optional[Sequence['outputs.HiveConfigSpecManagedDomains']]:
        """
        ManagedDomains is the list of DNS domains that are managed by the Hive cluster When specifying 'manageDNS: true' in a ClusterDeployment, the ClusterDeployment's baseDomain should be a direct child of one of these domains, otherwise the ClusterDeployment creation will result in a validation error.
        """
        return pulumi.get(self, "managed_domains")

    @property
    @pulumi.getter(name="syncSetReapplyInterval")
    def sync_set_reapply_interval(self) -> Optional[str]:
        """
        SyncSetReapplyInterval is a string duration indicating how much time must pass before SyncSet resources will be reapplied. The default reapply interval is two hours.
        """
        return pulumi.get(self, "sync_set_reapply_interval")

    @property
    @pulumi.getter(name="targetNamespace")
    def target_namespace(self) -> Optional[str]:
        """
        TargetNamespace is the namespace where the core Hive components should be run. Defaults to "hive". Will be created if it does not already exist. All resource references in HiveConfig can be assumed to be in the TargetNamespace.
        """
        return pulumi.get(self, "target_namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HiveConfigSpecAdditionalCertificateAuthoritiesSecretRef(dict):
    """
    LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HiveConfigSpecBackup(dict):
    """
    Backup specifies configuration for backup integration. If absent, backup integration will be disabled.
    """
    def __init__(__self__, *,
                 min_backup_period_seconds: Optional[int] = None,
                 velero: Optional['outputs.HiveConfigSpecBackupVelero'] = None):
        """
        Backup specifies configuration for backup integration. If absent, backup integration will be disabled.
        :param int min_backup_period_seconds: MinBackupPeriodSeconds specifies that a minimum of MinBackupPeriodSeconds will occur in between each backup. This is used to rate limit backups. This potentially batches together multiple changes into 1 backup. No backups will be lost as changes that happen during this interval are queued up and will result in a backup happening once the interval has been completed.
        :param 'HiveConfigSpecBackupVeleroArgs' velero: Velero specifies configuration for the Velero backup integration.
        """
        if min_backup_period_seconds is not None:
            pulumi.set(__self__, "min_backup_period_seconds", min_backup_period_seconds)
        if velero is not None:
            pulumi.set(__self__, "velero", velero)

    @property
    @pulumi.getter(name="minBackupPeriodSeconds")
    def min_backup_period_seconds(self) -> Optional[int]:
        """
        MinBackupPeriodSeconds specifies that a minimum of MinBackupPeriodSeconds will occur in between each backup. This is used to rate limit backups. This potentially batches together multiple changes into 1 backup. No backups will be lost as changes that happen during this interval are queued up and will result in a backup happening once the interval has been completed.
        """
        return pulumi.get(self, "min_backup_period_seconds")

    @property
    @pulumi.getter
    def velero(self) -> Optional['outputs.HiveConfigSpecBackupVelero']:
        """
        Velero specifies configuration for the Velero backup integration.
        """
        return pulumi.get(self, "velero")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HiveConfigSpecBackupVelero(dict):
    """
    Velero specifies configuration for the Velero backup integration.
    """
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 namespace: Optional[str] = None):
        """
        Velero specifies configuration for the Velero backup integration.
        :param bool enabled: Enabled dictates if Velero backup integration is enabled. If not specified, the default is disabled.
        :param str namespace: Namespace specifies in which namespace velero backup objects should be created. If not specified, the default is a namespace named "velero".
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enabled dictates if Velero backup integration is enabled. If not specified, the default is disabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace specifies in which namespace velero backup objects should be created. If not specified, the default is a namespace named "velero".
        """
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HiveConfigSpecControllersConfig(dict):
    """
    ControllersConfig is used to configure different hive controllers
    """
    def __init__(__self__, *,
                 controllers: Optional[Sequence['outputs.HiveConfigSpecControllersConfigControllers']] = None,
                 default: Optional['outputs.HiveConfigSpecControllersConfigDefault'] = None):
        """
        ControllersConfig is used to configure different hive controllers
        :param Sequence['HiveConfigSpecControllersConfigControllersArgs'] controllers: Controllers contains a list of configurations for different controllers
        :param 'HiveConfigSpecControllersConfigDefaultArgs' default: Default specifies default configuration for all the controllers, can be used to override following coded defaults default for concurrent reconciles is 5 default for client qps is 5 default for client burst is 10 default for queue qps is 10 default for queue burst is 100
        """
        if controllers is not None:
            pulumi.set(__self__, "controllers", controllers)
        if default is not None:
            pulumi.set(__self__, "default", default)

    @property
    @pulumi.getter
    def controllers(self) -> Optional[Sequence['outputs.HiveConfigSpecControllersConfigControllers']]:
        """
        Controllers contains a list of configurations for different controllers
        """
        return pulumi.get(self, "controllers")

    @property
    @pulumi.getter
    def default(self) -> Optional['outputs.HiveConfigSpecControllersConfigDefault']:
        """
        Default specifies default configuration for all the controllers, can be used to override following coded defaults default for concurrent reconciles is 5 default for client qps is 5 default for client burst is 10 default for queue qps is 10 default for queue burst is 100
        """
        return pulumi.get(self, "default")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HiveConfigSpecControllersConfigControllers(dict):
    """
    SpecificControllerConfig contains the configuration for a specific controller
    """
    def __init__(__self__, *,
                 config: 'outputs.HiveConfigSpecControllersConfigControllersConfig',
                 name: str):
        """
        SpecificControllerConfig contains the configuration for a specific controller
        :param 'HiveConfigSpecControllersConfigControllersConfigArgs' config: ControllerConfig contains the configuration for the controller specified by Name field
        :param str name: Name specifies the name of the controller
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def config(self) -> 'outputs.HiveConfigSpecControllersConfigControllersConfig':
        """
        ControllerConfig contains the configuration for the controller specified by Name field
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name specifies the name of the controller
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HiveConfigSpecControllersConfigControllersConfig(dict):
    """
    ControllerConfig contains the configuration for the controller specified by Name field
    """
    def __init__(__self__, *,
                 client_burst: Optional[int] = None,
                 client_qps: Optional[int] = None,
                 concurrent_reconciles: Optional[int] = None,
                 queue_burst: Optional[int] = None,
                 queue_qps: Optional[int] = None,
                 replicas: Optional[int] = None):
        """
        ControllerConfig contains the configuration for the controller specified by Name field
        :param int client_burst: ClientBurst specifies client rate limiter burst for a controller
        :param int client_qps: ClientQPS specifies client rate limiter QPS for a controller
        :param int concurrent_reconciles: ConcurrentReconciles specifies number of concurrent reconciles for a controller
        :param int queue_burst: QueueBurst specifies workqueue rate limiter burst for a controller
        :param int queue_qps: QueueQPS specifies workqueue rate limiter QPS for a controller
        :param int replicas: Replicas specifies the number of replicas the specific controller pod should use. This is ONLY for controllers that have been split out into their own pods. This is ignored for all others.
        """
        if client_burst is not None:
            pulumi.set(__self__, "client_burst", client_burst)
        if client_qps is not None:
            pulumi.set(__self__, "client_qps", client_qps)
        if concurrent_reconciles is not None:
            pulumi.set(__self__, "concurrent_reconciles", concurrent_reconciles)
        if queue_burst is not None:
            pulumi.set(__self__, "queue_burst", queue_burst)
        if queue_qps is not None:
            pulumi.set(__self__, "queue_qps", queue_qps)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter(name="clientBurst")
    def client_burst(self) -> Optional[int]:
        """
        ClientBurst specifies client rate limiter burst for a controller
        """
        return pulumi.get(self, "client_burst")

    @property
    @pulumi.getter(name="clientQPS")
    def client_qps(self) -> Optional[int]:
        """
        ClientQPS specifies client rate limiter QPS for a controller
        """
        return pulumi.get(self, "client_qps")

    @property
    @pulumi.getter(name="concurrentReconciles")
    def concurrent_reconciles(self) -> Optional[int]:
        """
        ConcurrentReconciles specifies number of concurrent reconciles for a controller
        """
        return pulumi.get(self, "concurrent_reconciles")

    @property
    @pulumi.getter(name="queueBurst")
    def queue_burst(self) -> Optional[int]:
        """
        QueueBurst specifies workqueue rate limiter burst for a controller
        """
        return pulumi.get(self, "queue_burst")

    @property
    @pulumi.getter(name="queueQPS")
    def queue_qps(self) -> Optional[int]:
        """
        QueueQPS specifies workqueue rate limiter QPS for a controller
        """
        return pulumi.get(self, "queue_qps")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        """
        Replicas specifies the number of replicas the specific controller pod should use. This is ONLY for controllers that have been split out into their own pods. This is ignored for all others.
        """
        return pulumi.get(self, "replicas")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HiveConfigSpecControllersConfigDefault(dict):
    """
    Default specifies default configuration for all the controllers, can be used to override following coded defaults default for concurrent reconciles is 5 default for client qps is 5 default for client burst is 10 default for queue qps is 10 default for queue burst is 100
    """
    def __init__(__self__, *,
                 client_burst: Optional[int] = None,
                 client_qps: Optional[int] = None,
                 concurrent_reconciles: Optional[int] = None,
                 queue_burst: Optional[int] = None,
                 queue_qps: Optional[int] = None,
                 replicas: Optional[int] = None):
        """
        Default specifies default configuration for all the controllers, can be used to override following coded defaults default for concurrent reconciles is 5 default for client qps is 5 default for client burst is 10 default for queue qps is 10 default for queue burst is 100
        :param int client_burst: ClientBurst specifies client rate limiter burst for a controller
        :param int client_qps: ClientQPS specifies client rate limiter QPS for a controller
        :param int concurrent_reconciles: ConcurrentReconciles specifies number of concurrent reconciles for a controller
        :param int queue_burst: QueueBurst specifies workqueue rate limiter burst for a controller
        :param int queue_qps: QueueQPS specifies workqueue rate limiter QPS for a controller
        :param int replicas: Replicas specifies the number of replicas the specific controller pod should use. This is ONLY for controllers that have been split out into their own pods. This is ignored for all others.
        """
        if client_burst is not None:
            pulumi.set(__self__, "client_burst", client_burst)
        if client_qps is not None:
            pulumi.set(__self__, "client_qps", client_qps)
        if concurrent_reconciles is not None:
            pulumi.set(__self__, "concurrent_reconciles", concurrent_reconciles)
        if queue_burst is not None:
            pulumi.set(__self__, "queue_burst", queue_burst)
        if queue_qps is not None:
            pulumi.set(__self__, "queue_qps", queue_qps)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter(name="clientBurst")
    def client_burst(self) -> Optional[int]:
        """
        ClientBurst specifies client rate limiter burst for a controller
        """
        return pulumi.get(self, "client_burst")

    @property
    @pulumi.getter(name="clientQPS")
    def client_qps(self) -> Optional[int]:
        """
        ClientQPS specifies client rate limiter QPS for a controller
        """
        return pulumi.get(self, "client_qps")

    @property
    @pulumi.getter(name="concurrentReconciles")
    def concurrent_reconciles(self) -> Optional[int]:
        """
        ConcurrentReconciles specifies number of concurrent reconciles for a controller
        """
        return pulumi.get(self, "concurrent_reconciles")

    @property
    @pulumi.getter(name="queueBurst")
    def queue_burst(self) -> Optional[int]:
        """
        QueueBurst specifies workqueue rate limiter burst for a controller
        """
        return pulumi.get(self, "queue_burst")

    @property
    @pulumi.getter(name="queueQPS")
    def queue_qps(self) -> Optional[int]:
        """
        QueueQPS specifies workqueue rate limiter QPS for a controller
        """
        return pulumi.get(self, "queue_qps")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        """
        Replicas specifies the number of replicas the specific controller pod should use. This is ONLY for controllers that have been split out into their own pods. This is ignored for all others.
        """
        return pulumi.get(self, "replicas")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HiveConfigSpecFailedProvisionConfig(dict):
    """
    FailedProvisionConfig is used to configure settings related to handling provision failures.
    """
    def __init__(__self__, *,
                 aws: Optional['outputs.HiveConfigSpecFailedProvisionConfigAws'] = None,
                 skip_gather_logs: Optional[bool] = None):
        """
        FailedProvisionConfig is used to configure settings related to handling provision failures.
        :param 'HiveConfigSpecFailedProvisionConfigAwsArgs' aws: FailedProvisionAWSConfig contains AWS-specific info to upload log files.
        :param bool skip_gather_logs: DEPRECATED: This flag is no longer respected and will be removed in the future.
        """
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if skip_gather_logs is not None:
            pulumi.set(__self__, "skip_gather_logs", skip_gather_logs)

    @property
    @pulumi.getter
    def aws(self) -> Optional['outputs.HiveConfigSpecFailedProvisionConfigAws']:
        """
        FailedProvisionAWSConfig contains AWS-specific info to upload log files.
        """
        return pulumi.get(self, "aws")

    @property
    @pulumi.getter(name="skipGatherLogs")
    def skip_gather_logs(self) -> Optional[bool]:
        """
        DEPRECATED: This flag is no longer respected and will be removed in the future.
        """
        return pulumi.get(self, "skip_gather_logs")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HiveConfigSpecFailedProvisionConfigAws(dict):
    """
    FailedProvisionAWSConfig contains AWS-specific info to upload log files.
    """
    def __init__(__self__, *,
                 credentials_secret_ref: 'outputs.HiveConfigSpecFailedProvisionConfigAwsCredentialsSecretRef',
                 bucket: Optional[str] = None,
                 region: Optional[str] = None,
                 service_endpoint: Optional[str] = None):
        """
        FailedProvisionAWSConfig contains AWS-specific info to upload log files.
        :param 'HiveConfigSpecFailedProvisionConfigAwsCredentialsSecretRefArgs' credentials_secret_ref: CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with AWS S3. It will need permission to upload logs to S3. Secret should have keys named aws_access_key_id and aws_secret_access_key that contain the AWS credentials. Example Secret:   data:     aws_access_key_id: minio     aws_secret_access_key: minio123
        :param str bucket: Bucket is the S3 bucket to store the logs in.
        :param str region: Region is the AWS region to use for S3 operations. This defaults to us-east-1. For AWS China, use cn-northwest-1.
        :param str service_endpoint: ServiceEndpoint is the url to connect to an S3 compatible provider.
        """
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_endpoint is not None:
            pulumi.set(__self__, "service_endpoint", service_endpoint)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> 'outputs.HiveConfigSpecFailedProvisionConfigAwsCredentialsSecretRef':
        """
        CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with AWS S3. It will need permission to upload logs to S3. Secret should have keys named aws_access_key_id and aws_secret_access_key that contain the AWS credentials. Example Secret:   data:     aws_access_key_id: minio     aws_secret_access_key: minio123
        """
        return pulumi.get(self, "credentials_secret_ref")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        Bucket is the S3 bucket to store the logs in.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Region is the AWS region to use for S3 operations. This defaults to us-east-1. For AWS China, use cn-northwest-1.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceEndpoint")
    def service_endpoint(self) -> Optional[str]:
        """
        ServiceEndpoint is the url to connect to an S3 compatible provider.
        """
        return pulumi.get(self, "service_endpoint")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HiveConfigSpecFailedProvisionConfigAwsCredentialsSecretRef(dict):
    """
    CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with AWS S3. It will need permission to upload logs to S3. Secret should have keys named aws_access_key_id and aws_secret_access_key that contain the AWS credentials. Example Secret:   data:     aws_access_key_id: minio     aws_secret_access_key: minio123
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with AWS S3. It will need permission to upload logs to S3. Secret should have keys named aws_access_key_id and aws_secret_access_key that contain the AWS credentials. Example Secret:   data:     aws_access_key_id: minio     aws_secret_access_key: minio123
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HiveConfigSpecGlobalPullSecretRef(dict):
    """
    GlobalPullSecretRef is used to specify a pull secret that will be used globally by all of the cluster deployments. For each cluster deployment, the contents of GlobalPullSecret will be merged with the specific pull secret for a cluster deployment(if specified), with precedence given to the contents of the pull secret for the cluster deployment. The global pull secret is assumed to be in the TargetNamespace.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        GlobalPullSecretRef is used to specify a pull secret that will be used globally by all of the cluster deployments. For each cluster deployment, the contents of GlobalPullSecret will be merged with the specific pull secret for a cluster deployment(if specified), with precedence given to the contents of the pull secret for the cluster deployment. The global pull secret is assumed to be in the TargetNamespace.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HiveConfigSpecManagedDomains(dict):
    """
    ManageDNSConfig contains the domain being managed, and the cloud-specific details for accessing/managing the domain.
    """
    def __init__(__self__, *,
                 domains: Sequence[str],
                 aws: Optional['outputs.HiveConfigSpecManagedDomainsAws'] = None,
                 azure: Optional['outputs.HiveConfigSpecManagedDomainsAzure'] = None,
                 gcp: Optional['outputs.HiveConfigSpecManagedDomainsGcp'] = None):
        """
        ManageDNSConfig contains the domain being managed, and the cloud-specific details for accessing/managing the domain.
        :param Sequence[str] domains: Domains is the list of domains that hive will be managing entries for with the provided credentials.
        :param 'HiveConfigSpecManagedDomainsAwsArgs' aws: AWS contains AWS-specific settings for external DNS
        :param 'HiveConfigSpecManagedDomainsAzureArgs' azure: Azure contains Azure-specific settings for external DNS
        :param 'HiveConfigSpecManagedDomainsGcpArgs' gcp: GCP contains GCP-specific settings for external DNS
        """
        pulumi.set(__self__, "domains", domains)
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if gcp is not None:
            pulumi.set(__self__, "gcp", gcp)

    @property
    @pulumi.getter
    def domains(self) -> Sequence[str]:
        """
        Domains is the list of domains that hive will be managing entries for with the provided credentials.
        """
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter
    def aws(self) -> Optional['outputs.HiveConfigSpecManagedDomainsAws']:
        """
        AWS contains AWS-specific settings for external DNS
        """
        return pulumi.get(self, "aws")

    @property
    @pulumi.getter
    def azure(self) -> Optional['outputs.HiveConfigSpecManagedDomainsAzure']:
        """
        Azure contains Azure-specific settings for external DNS
        """
        return pulumi.get(self, "azure")

    @property
    @pulumi.getter
    def gcp(self) -> Optional['outputs.HiveConfigSpecManagedDomainsGcp']:
        """
        GCP contains GCP-specific settings for external DNS
        """
        return pulumi.get(self, "gcp")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HiveConfigSpecManagedDomainsAws(dict):
    """
    AWS contains AWS-specific settings for external DNS
    """
    def __init__(__self__, *,
                 credentials_secret_ref: 'outputs.HiveConfigSpecManagedDomainsAwsCredentialsSecretRef',
                 region: Optional[str] = None):
        """
        AWS contains AWS-specific settings for external DNS
        :param 'HiveConfigSpecManagedDomainsAwsCredentialsSecretRefArgs' credentials_secret_ref: CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with AWS Route53. It will need permission to manage entries for the domain listed in the parent ManageDNSConfig object. Secret should have AWS keys named 'aws_access_key_id' and 'aws_secret_access_key'.
        :param str region: Region is the AWS region to use for route53 operations. This defaults to us-east-1. For AWS China, use cn-northwest-1.
        """
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> 'outputs.HiveConfigSpecManagedDomainsAwsCredentialsSecretRef':
        """
        CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with AWS Route53. It will need permission to manage entries for the domain listed in the parent ManageDNSConfig object. Secret should have AWS keys named 'aws_access_key_id' and 'aws_secret_access_key'.
        """
        return pulumi.get(self, "credentials_secret_ref")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Region is the AWS region to use for route53 operations. This defaults to us-east-1. For AWS China, use cn-northwest-1.
        """
        return pulumi.get(self, "region")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HiveConfigSpecManagedDomainsAwsCredentialsSecretRef(dict):
    """
    CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with AWS Route53. It will need permission to manage entries for the domain listed in the parent ManageDNSConfig object. Secret should have AWS keys named 'aws_access_key_id' and 'aws_secret_access_key'.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with AWS Route53. It will need permission to manage entries for the domain listed in the parent ManageDNSConfig object. Secret should have AWS keys named 'aws_access_key_id' and 'aws_secret_access_key'.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HiveConfigSpecManagedDomainsAzure(dict):
    """
    Azure contains Azure-specific settings for external DNS
    """
    def __init__(__self__, *,
                 credentials_secret_ref: 'outputs.HiveConfigSpecManagedDomainsAzureCredentialsSecretRef',
                 resource_group_name: str):
        """
        Azure contains Azure-specific settings for external DNS
        :param 'HiveConfigSpecManagedDomainsAzureCredentialsSecretRefArgs' credentials_secret_ref: CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with Azure DNS. It wil need permission to manage entries in each of the managed domains listed in the parent ManageDNSConfig object. Secret should have a key named 'osServicePrincipal.json'
        :param str resource_group_name: ResourceGroupName specifies the Azure resource group containing the DNS zones for the domains being managed.
        """
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)
        pulumi.set(__self__, "resource_group_name", resource_group_name)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> 'outputs.HiveConfigSpecManagedDomainsAzureCredentialsSecretRef':
        """
        CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with Azure DNS. It wil need permission to manage entries in each of the managed domains listed in the parent ManageDNSConfig object. Secret should have a key named 'osServicePrincipal.json'
        """
        return pulumi.get(self, "credentials_secret_ref")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> str:
        """
        ResourceGroupName specifies the Azure resource group containing the DNS zones for the domains being managed.
        """
        return pulumi.get(self, "resource_group_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HiveConfigSpecManagedDomainsAzureCredentialsSecretRef(dict):
    """
    CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with Azure DNS. It wil need permission to manage entries in each of the managed domains listed in the parent ManageDNSConfig object. Secret should have a key named 'osServicePrincipal.json'
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with Azure DNS. It wil need permission to manage entries in each of the managed domains listed in the parent ManageDNSConfig object. Secret should have a key named 'osServicePrincipal.json'
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HiveConfigSpecManagedDomainsGcp(dict):
    """
    GCP contains GCP-specific settings for external DNS
    """
    def __init__(__self__, *,
                 credentials_secret_ref: 'outputs.HiveConfigSpecManagedDomainsGcpCredentialsSecretRef'):
        """
        GCP contains GCP-specific settings for external DNS
        :param 'HiveConfigSpecManagedDomainsGcpCredentialsSecretRefArgs' credentials_secret_ref: CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with GCP DNS. It will need permission to manage entries in each of the managed domains for this cluster. listed in the parent ManageDNSConfig object. Secret should have a key named 'osServiceAccount.json'. The credentials must specify the project to use.
        """
        pulumi.set(__self__, "credentials_secret_ref", credentials_secret_ref)

    @property
    @pulumi.getter(name="credentialsSecretRef")
    def credentials_secret_ref(self) -> 'outputs.HiveConfigSpecManagedDomainsGcpCredentialsSecretRef':
        """
        CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with GCP DNS. It will need permission to manage entries in each of the managed domains for this cluster. listed in the parent ManageDNSConfig object. Secret should have a key named 'osServiceAccount.json'. The credentials must specify the project to use.
        """
        return pulumi.get(self, "credentials_secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HiveConfigSpecManagedDomainsGcpCredentialsSecretRef(dict):
    """
    CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with GCP DNS. It will need permission to manage entries in each of the managed domains for this cluster. listed in the parent ManageDNSConfig object. Secret should have a key named 'osServiceAccount.json'. The credentials must specify the project to use.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        CredentialsSecretRef references a secret in the TargetNamespace that will be used to authenticate with GCP DNS. It will need permission to manage entries in each of the managed domains for this cluster. listed in the parent ManageDNSConfig object. Secret should have a key named 'osServiceAccount.json'. The credentials must specify the project to use.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HiveConfigStatus(dict):
    """
    HiveConfigStatus defines the observed state of Hive
    """
    def __init__(__self__, *,
                 aggregator_client_ca_hash: Optional[str] = None,
                 config_applied: Optional[bool] = None,
                 observed_generation: Optional[int] = None):
        """
        HiveConfigStatus defines the observed state of Hive
        :param str aggregator_client_ca_hash: AggregatorClientCAHash keeps an md5 hash of the aggregator client CA configmap data from the openshift-config-managed namespace. When the configmap changes, admission is redeployed.
        :param bool config_applied: ConfigApplied will be set by the hive operator to indicate whether or not the LastGenerationObserved was successfully reconciled.
        :param int observed_generation: ObservedGeneration will record the most recently processed HiveConfig object's generation.
        """
        if aggregator_client_ca_hash is not None:
            pulumi.set(__self__, "aggregator_client_ca_hash", aggregator_client_ca_hash)
        if config_applied is not None:
            pulumi.set(__self__, "config_applied", config_applied)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)

    @property
    @pulumi.getter(name="aggregatorClientCAHash")
    def aggregator_client_ca_hash(self) -> Optional[str]:
        """
        AggregatorClientCAHash keeps an md5 hash of the aggregator client CA configmap data from the openshift-config-managed namespace. When the configmap changes, admission is redeployed.
        """
        return pulumi.get(self, "aggregator_client_ca_hash")

    @property
    @pulumi.getter(name="configApplied")
    def config_applied(self) -> Optional[bool]:
        """
        ConfigApplied will be set by the hive operator to indicate whether or not the LastGenerationObserved was successfully reconciled.
        """
        return pulumi.get(self, "config_applied")

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[int]:
        """
        ObservedGeneration will record the most recently processed HiveConfig object's generation.
        """
        return pulumi.get(self, "observed_generation")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MachinePoolSpec(dict):
    """
    MachinePoolSpec defines the desired state of MachinePool
    """
    def __init__(__self__, *,
                 cluster_deployment_ref: 'outputs.MachinePoolSpecClusterDeploymentRef',
                 name: str,
                 platform: 'outputs.MachinePoolSpecPlatform',
                 autoscaling: Optional['outputs.MachinePoolSpecAutoscaling'] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 replicas: Optional[int] = None,
                 taints: Optional[Sequence['outputs.MachinePoolSpecTaints']] = None):
        """
        MachinePoolSpec defines the desired state of MachinePool
        :param 'MachinePoolSpecClusterDeploymentRefArgs' cluster_deployment_ref: ClusterDeploymentRef references the cluster deployment to which this machine pool belongs.
        :param str name: Name is the name of the machine pool.
        :param 'MachinePoolSpecPlatformArgs' platform: Platform is configuration for machine pool specific to the platform.
        :param 'MachinePoolSpecAutoscalingArgs' autoscaling: Autoscaling is the details for auto-scaling the machine pool. Replicas and autoscaling cannot be used together.
        :param Mapping[str, str] labels: Map of label string keys and values that will be applied to the created MachineSet's MachineSpec. This list will overwrite any modifications made to Node labels on an ongoing basis.
        :param int replicas: Replicas is the count of machines for this machine pool. Replicas and autoscaling cannot be used together. Default is 1, if autoscaling is not used.
        :param Sequence['MachinePoolSpecTaintsArgs'] taints: List of taints that will be applied to the created MachineSet's MachineSpec. This list will overwrite any modifications made to Node taints on an ongoing basis.
        """
        pulumi.set(__self__, "cluster_deployment_ref", cluster_deployment_ref)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "platform", platform)
        if autoscaling is not None:
            pulumi.set(__self__, "autoscaling", autoscaling)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @property
    @pulumi.getter(name="clusterDeploymentRef")
    def cluster_deployment_ref(self) -> 'outputs.MachinePoolSpecClusterDeploymentRef':
        """
        ClusterDeploymentRef references the cluster deployment to which this machine pool belongs.
        """
        return pulumi.get(self, "cluster_deployment_ref")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the machine pool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def platform(self) -> 'outputs.MachinePoolSpecPlatform':
        """
        Platform is configuration for machine pool specific to the platform.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter
    def autoscaling(self) -> Optional['outputs.MachinePoolSpecAutoscaling']:
        """
        Autoscaling is the details for auto-scaling the machine pool. Replicas and autoscaling cannot be used together.
        """
        return pulumi.get(self, "autoscaling")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of label string keys and values that will be applied to the created MachineSet's MachineSpec. This list will overwrite any modifications made to Node labels on an ongoing basis.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        """
        Replicas is the count of machines for this machine pool. Replicas and autoscaling cannot be used together. Default is 1, if autoscaling is not used.
        """
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter
    def taints(self) -> Optional[Sequence['outputs.MachinePoolSpecTaints']]:
        """
        List of taints that will be applied to the created MachineSet's MachineSpec. This list will overwrite any modifications made to Node taints on an ongoing basis.
        """
        return pulumi.get(self, "taints")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MachinePoolSpecAutoscaling(dict):
    """
    Autoscaling is the details for auto-scaling the machine pool. Replicas and autoscaling cannot be used together.
    """
    def __init__(__self__, *,
                 max_replicas: int,
                 min_replicas: int):
        """
        Autoscaling is the details for auto-scaling the machine pool. Replicas and autoscaling cannot be used together.
        :param int max_replicas: MaxReplicas is the maximum number of replicas for the machine pool.
        :param int min_replicas: MinReplicas is the minimum number of replicas for the machine pool.
        """
        pulumi.set(__self__, "max_replicas", max_replicas)
        pulumi.set(__self__, "min_replicas", min_replicas)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> int:
        """
        MaxReplicas is the maximum number of replicas for the machine pool.
        """
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> int:
        """
        MinReplicas is the minimum number of replicas for the machine pool.
        """
        return pulumi.get(self, "min_replicas")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MachinePoolSpecClusterDeploymentRef(dict):
    """
    ClusterDeploymentRef references the cluster deployment to which this machine pool belongs.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        ClusterDeploymentRef references the cluster deployment to which this machine pool belongs.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MachinePoolSpecPlatform(dict):
    """
    Platform is configuration for machine pool specific to the platform.
    """
    def __init__(__self__, *,
                 aws: Optional['outputs.MachinePoolSpecPlatformAws'] = None,
                 azure: Optional['outputs.MachinePoolSpecPlatformAzure'] = None,
                 gcp: Optional['outputs.MachinePoolSpecPlatformGcp'] = None,
                 openstack: Optional['outputs.MachinePoolSpecPlatformOpenstack'] = None,
                 ovirt: Optional['outputs.MachinePoolSpecPlatformOvirt'] = None,
                 vsphere: Optional['outputs.MachinePoolSpecPlatformVsphere'] = None):
        """
        Platform is configuration for machine pool specific to the platform.
        :param 'MachinePoolSpecPlatformAwsArgs' aws: AWS is the configuration used when installing on AWS.
        :param 'MachinePoolSpecPlatformAzureArgs' azure: Azure is the configuration used when installing on Azure.
        :param 'MachinePoolSpecPlatformGcpArgs' gcp: GCP is the configuration used when installing on GCP.
        :param 'MachinePoolSpecPlatformOpenstackArgs' openstack: OpenStack is the configuration used when installing on OpenStack.
        :param 'MachinePoolSpecPlatformOvirtArgs' ovirt: Ovirt is the configuration used when installing on oVirt.
        :param 'MachinePoolSpecPlatformVsphereArgs' vsphere: VSphere is the configuration used when installing on vSphere
        """
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if gcp is not None:
            pulumi.set(__self__, "gcp", gcp)
        if openstack is not None:
            pulumi.set(__self__, "openstack", openstack)
        if ovirt is not None:
            pulumi.set(__self__, "ovirt", ovirt)
        if vsphere is not None:
            pulumi.set(__self__, "vsphere", vsphere)

    @property
    @pulumi.getter
    def aws(self) -> Optional['outputs.MachinePoolSpecPlatformAws']:
        """
        AWS is the configuration used when installing on AWS.
        """
        return pulumi.get(self, "aws")

    @property
    @pulumi.getter
    def azure(self) -> Optional['outputs.MachinePoolSpecPlatformAzure']:
        """
        Azure is the configuration used when installing on Azure.
        """
        return pulumi.get(self, "azure")

    @property
    @pulumi.getter
    def gcp(self) -> Optional['outputs.MachinePoolSpecPlatformGcp']:
        """
        GCP is the configuration used when installing on GCP.
        """
        return pulumi.get(self, "gcp")

    @property
    @pulumi.getter
    def openstack(self) -> Optional['outputs.MachinePoolSpecPlatformOpenstack']:
        """
        OpenStack is the configuration used when installing on OpenStack.
        """
        return pulumi.get(self, "openstack")

    @property
    @pulumi.getter
    def ovirt(self) -> Optional['outputs.MachinePoolSpecPlatformOvirt']:
        """
        Ovirt is the configuration used when installing on oVirt.
        """
        return pulumi.get(self, "ovirt")

    @property
    @pulumi.getter
    def vsphere(self) -> Optional['outputs.MachinePoolSpecPlatformVsphere']:
        """
        VSphere is the configuration used when installing on vSphere
        """
        return pulumi.get(self, "vsphere")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MachinePoolSpecPlatformAws(dict):
    """
    AWS is the configuration used when installing on AWS.
    """
    def __init__(__self__, *,
                 root_volume: 'outputs.MachinePoolSpecPlatformAwsRootVolume',
                 type: str,
                 spot_market_options: Optional['outputs.MachinePoolSpecPlatformAwsSpotMarketOptions'] = None,
                 subnets: Optional[Sequence[str]] = None,
                 zones: Optional[Sequence[str]] = None):
        """
        AWS is the configuration used when installing on AWS.
        :param 'MachinePoolSpecPlatformAwsRootVolumeArgs' root_volume: EC2RootVolume defines the storage for ec2 instance.
        :param str type: InstanceType defines the ec2 instance type. eg. m4-large
        :param 'MachinePoolSpecPlatformAwsSpotMarketOptionsArgs' spot_market_options: SpotMarketOptions allows users to configure instances to be run using AWS Spot instances.
        :param Sequence[str] subnets: Subnets is the list of subnets to which to attach the machines. There must be exactly one subnet for each availability zone used.
        :param Sequence[str] zones: Zones is list of availability zones that can be used.
        """
        pulumi.set(__self__, "root_volume", root_volume)
        pulumi.set(__self__, "type", type)
        if spot_market_options is not None:
            pulumi.set(__self__, "spot_market_options", spot_market_options)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="rootVolume")
    def root_volume(self) -> 'outputs.MachinePoolSpecPlatformAwsRootVolume':
        """
        EC2RootVolume defines the storage for ec2 instance.
        """
        return pulumi.get(self, "root_volume")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        InstanceType defines the ec2 instance type. eg. m4-large
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="spotMarketOptions")
    def spot_market_options(self) -> Optional['outputs.MachinePoolSpecPlatformAwsSpotMarketOptions']:
        """
        SpotMarketOptions allows users to configure instances to be run using AWS Spot instances.
        """
        return pulumi.get(self, "spot_market_options")

    @property
    @pulumi.getter
    def subnets(self) -> Optional[Sequence[str]]:
        """
        Subnets is the list of subnets to which to attach the machines. There must be exactly one subnet for each availability zone used.
        """
        return pulumi.get(self, "subnets")

    @property
    @pulumi.getter
    def zones(self) -> Optional[Sequence[str]]:
        """
        Zones is list of availability zones that can be used.
        """
        return pulumi.get(self, "zones")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MachinePoolSpecPlatformAwsRootVolume(dict):
    """
    EC2RootVolume defines the storage for ec2 instance.
    """
    def __init__(__self__, *,
                 iops: int,
                 size: int,
                 type: str):
        """
        EC2RootVolume defines the storage for ec2 instance.
        :param int iops: IOPS defines the iops for the storage.
        :param int size: Size defines the size of the storage.
        :param str type: Type defines the type of the storage.
        """
        pulumi.set(__self__, "iops", iops)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def iops(self) -> int:
        """
        IOPS defines the iops for the storage.
        """
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Size defines the size of the storage.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type defines the type of the storage.
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MachinePoolSpecPlatformAwsSpotMarketOptions(dict):
    """
    SpotMarketOptions allows users to configure instances to be run using AWS Spot instances.
    """
    def __init__(__self__, *,
                 max_price: Optional[str] = None):
        """
        SpotMarketOptions allows users to configure instances to be run using AWS Spot instances.
        :param str max_price: The maximum price the user is willing to pay for their instances Default: On-Demand price
        """
        if max_price is not None:
            pulumi.set(__self__, "max_price", max_price)

    @property
    @pulumi.getter(name="maxPrice")
    def max_price(self) -> Optional[str]:
        """
        The maximum price the user is willing to pay for their instances Default: On-Demand price
        """
        return pulumi.get(self, "max_price")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MachinePoolSpecPlatformAzure(dict):
    """
    Azure is the configuration used when installing on Azure.
    """
    def __init__(__self__, *,
                 os_disk: 'outputs.MachinePoolSpecPlatformAzureOsDisk',
                 type: str,
                 zones: Optional[Sequence[str]] = None):
        """
        Azure is the configuration used when installing on Azure.
        :param 'MachinePoolSpecPlatformAzureOsDiskArgs' os_disk: OSDisk defines the storage for instance.
        :param str type: InstanceType defines the azure instance type. eg. Standard_DS_V2
        :param Sequence[str] zones: Zones is list of availability zones that can be used. eg. ["1", "2", "3"]
        """
        pulumi.set(__self__, "os_disk", os_disk)
        pulumi.set(__self__, "type", type)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="osDisk")
    def os_disk(self) -> 'outputs.MachinePoolSpecPlatformAzureOsDisk':
        """
        OSDisk defines the storage for instance.
        """
        return pulumi.get(self, "os_disk")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        InstanceType defines the azure instance type. eg. Standard_DS_V2
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def zones(self) -> Optional[Sequence[str]]:
        """
        Zones is list of availability zones that can be used. eg. ["1", "2", "3"]
        """
        return pulumi.get(self, "zones")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MachinePoolSpecPlatformAzureOsDisk(dict):
    """
    OSDisk defines the storage for instance.
    """
    def __init__(__self__, *,
                 disk_size_gb: int):
        """
        OSDisk defines the storage for instance.
        :param int disk_size_gb: DiskSizeGB defines the size of disk in GB.
        """
        pulumi.set(__self__, "disk_size_gb", disk_size_gb)

    @property
    @pulumi.getter(name="diskSizeGB")
    def disk_size_gb(self) -> int:
        """
        DiskSizeGB defines the size of disk in GB.
        """
        return pulumi.get(self, "disk_size_gb")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MachinePoolSpecPlatformGcp(dict):
    """
    GCP is the configuration used when installing on GCP.
    """
    def __init__(__self__, *,
                 type: str,
                 zones: Optional[Sequence[str]] = None):
        """
        GCP is the configuration used when installing on GCP.
        :param str type: InstanceType defines the GCP instance type. eg. n1-standard-4
        :param Sequence[str] zones: Zones is list of availability zones that can be used.
        """
        pulumi.set(__self__, "type", type)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        InstanceType defines the GCP instance type. eg. n1-standard-4
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def zones(self) -> Optional[Sequence[str]]:
        """
        Zones is list of availability zones that can be used.
        """
        return pulumi.get(self, "zones")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MachinePoolSpecPlatformOpenstack(dict):
    """
    OpenStack is the configuration used when installing on OpenStack.
    """
    def __init__(__self__, *,
                 flavor: str,
                 root_volume: Optional['outputs.MachinePoolSpecPlatformOpenstackRootVolume'] = None):
        """
        OpenStack is the configuration used when installing on OpenStack.
        :param str flavor: Flavor defines the OpenStack Nova flavor. eg. m1.large The json key here differs from the installer which uses both "computeFlavor" and type "type" depending on which type you're looking at, and the resulting field on the MachineSet is "flavor". We are opting to stay consistent with the end result.
        :param 'MachinePoolSpecPlatformOpenstackRootVolumeArgs' root_volume: RootVolume defines the root volume for instances in the machine pool. The instances use ephemeral disks if not set.
        """
        pulumi.set(__self__, "flavor", flavor)
        if root_volume is not None:
            pulumi.set(__self__, "root_volume", root_volume)

    @property
    @pulumi.getter
    def flavor(self) -> str:
        """
        Flavor defines the OpenStack Nova flavor. eg. m1.large The json key here differs from the installer which uses both "computeFlavor" and type "type" depending on which type you're looking at, and the resulting field on the MachineSet is "flavor". We are opting to stay consistent with the end result.
        """
        return pulumi.get(self, "flavor")

    @property
    @pulumi.getter(name="rootVolume")
    def root_volume(self) -> Optional['outputs.MachinePoolSpecPlatformOpenstackRootVolume']:
        """
        RootVolume defines the root volume for instances in the machine pool. The instances use ephemeral disks if not set.
        """
        return pulumi.get(self, "root_volume")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MachinePoolSpecPlatformOpenstackRootVolume(dict):
    """
    RootVolume defines the root volume for instances in the machine pool. The instances use ephemeral disks if not set.
    """
    def __init__(__self__, *,
                 size: int,
                 type: str):
        """
        RootVolume defines the root volume for instances in the machine pool. The instances use ephemeral disks if not set.
        :param int size: Size defines the size of the volume in gibibytes (GiB). Required
        :param str type: Type defines the type of the volume. Required
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Size defines the size of the volume in gibibytes (GiB). Required
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type defines the type of the volume. Required
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MachinePoolSpecPlatformOvirt(dict):
    """
    Ovirt is the configuration used when installing on oVirt.
    """
    def __init__(__self__, *,
                 cpu: Optional['outputs.MachinePoolSpecPlatformOvirtCpu'] = None,
                 memory_mb: Optional[int] = None,
                 os_disk: Optional['outputs.MachinePoolSpecPlatformOvirtOsDisk'] = None,
                 vm_type: Optional[str] = None):
        """
        Ovirt is the configuration used when installing on oVirt.
        :param 'MachinePoolSpecPlatformOvirtCpuArgs' cpu: CPU defines the VM CPU.
        :param int memory_mb: MemoryMB is the size of a VM's memory in MiBs.
        :param 'MachinePoolSpecPlatformOvirtOsDiskArgs' os_disk: OSDisk is the the root disk of the node.
        :param str vm_type: VMType defines the workload type of the VM.
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory_mb is not None:
            pulumi.set(__self__, "memory_mb", memory_mb)
        if os_disk is not None:
            pulumi.set(__self__, "os_disk", os_disk)
        if vm_type is not None:
            pulumi.set(__self__, "vm_type", vm_type)

    @property
    @pulumi.getter
    def cpu(self) -> Optional['outputs.MachinePoolSpecPlatformOvirtCpu']:
        """
        CPU defines the VM CPU.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="memoryMB")
    def memory_mb(self) -> Optional[int]:
        """
        MemoryMB is the size of a VM's memory in MiBs.
        """
        return pulumi.get(self, "memory_mb")

    @property
    @pulumi.getter(name="osDisk")
    def os_disk(self) -> Optional['outputs.MachinePoolSpecPlatformOvirtOsDisk']:
        """
        OSDisk is the the root disk of the node.
        """
        return pulumi.get(self, "os_disk")

    @property
    @pulumi.getter(name="vmType")
    def vm_type(self) -> Optional[str]:
        """
        VMType defines the workload type of the VM.
        """
        return pulumi.get(self, "vm_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MachinePoolSpecPlatformOvirtCpu(dict):
    """
    CPU defines the VM CPU.
    """
    def __init__(__self__, *,
                 cores: int,
                 sockets: int):
        """
        CPU defines the VM CPU.
        :param int cores: Cores is the number of cores per socket. Total CPUs is (Sockets * Cores)
        :param int sockets: Sockets is the number of sockets for a VM. Total CPUs is (Sockets * Cores)
        """
        pulumi.set(__self__, "cores", cores)
        pulumi.set(__self__, "sockets", sockets)

    @property
    @pulumi.getter
    def cores(self) -> int:
        """
        Cores is the number of cores per socket. Total CPUs is (Sockets * Cores)
        """
        return pulumi.get(self, "cores")

    @property
    @pulumi.getter
    def sockets(self) -> int:
        """
        Sockets is the number of sockets for a VM. Total CPUs is (Sockets * Cores)
        """
        return pulumi.get(self, "sockets")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MachinePoolSpecPlatformOvirtOsDisk(dict):
    """
    OSDisk is the the root disk of the node.
    """
    def __init__(__self__, *,
                 size_gb: int):
        """
        OSDisk is the the root disk of the node.
        :param int size_gb: SizeGB size of the bootable disk in GiB.
        """
        pulumi.set(__self__, "size_gb", size_gb)

    @property
    @pulumi.getter(name="sizeGB")
    def size_gb(self) -> int:
        """
        SizeGB size of the bootable disk in GiB.
        """
        return pulumi.get(self, "size_gb")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MachinePoolSpecPlatformVsphere(dict):
    """
    VSphere is the configuration used when installing on vSphere
    """
    def __init__(__self__, *,
                 cores_per_socket: int,
                 cpus: int,
                 memory_mb: int,
                 os_disk: 'outputs.MachinePoolSpecPlatformVsphereOsDisk'):
        """
        VSphere is the configuration used when installing on vSphere
        :param int cores_per_socket: NumCoresPerSocket is the number of cores per socket in a vm. The number of vCPUs on the vm will be NumCPUs/NumCoresPerSocket.
        :param int cpus: NumCPUs is the total number of virtual processor cores to assign a vm.
        :param int memory_mb: Memory is the size of a VM's memory in MB.
        :param 'MachinePoolSpecPlatformVsphereOsDiskArgs' os_disk: OSDisk defines the storage for instance.
        """
        pulumi.set(__self__, "cores_per_socket", cores_per_socket)
        pulumi.set(__self__, "cpus", cpus)
        pulumi.set(__self__, "memory_mb", memory_mb)
        pulumi.set(__self__, "os_disk", os_disk)

    @property
    @pulumi.getter(name="coresPerSocket")
    def cores_per_socket(self) -> int:
        """
        NumCoresPerSocket is the number of cores per socket in a vm. The number of vCPUs on the vm will be NumCPUs/NumCoresPerSocket.
        """
        return pulumi.get(self, "cores_per_socket")

    @property
    @pulumi.getter
    def cpus(self) -> int:
        """
        NumCPUs is the total number of virtual processor cores to assign a vm.
        """
        return pulumi.get(self, "cpus")

    @property
    @pulumi.getter(name="memoryMB")
    def memory_mb(self) -> int:
        """
        Memory is the size of a VM's memory in MB.
        """
        return pulumi.get(self, "memory_mb")

    @property
    @pulumi.getter(name="osDisk")
    def os_disk(self) -> 'outputs.MachinePoolSpecPlatformVsphereOsDisk':
        """
        OSDisk defines the storage for instance.
        """
        return pulumi.get(self, "os_disk")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MachinePoolSpecPlatformVsphereOsDisk(dict):
    """
    OSDisk defines the storage for instance.
    """
    def __init__(__self__, *,
                 disk_size_gb: int):
        """
        OSDisk defines the storage for instance.
        :param int disk_size_gb: DiskSizeGB defines the size of disk in GB.
        """
        pulumi.set(__self__, "disk_size_gb", disk_size_gb)

    @property
    @pulumi.getter(name="diskSizeGB")
    def disk_size_gb(self) -> int:
        """
        DiskSizeGB defines the size of disk in GB.
        """
        return pulumi.get(self, "disk_size_gb")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MachinePoolSpecTaints(dict):
    """
    The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
    """
    def __init__(__self__, *,
                 effect: str,
                 key: str,
                 time_added: Optional[str] = None,
                 value: Optional[str] = None):
        """
        The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
        :param str effect: Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
        :param str key: Required. The taint key to be applied to a node.
        :param str time_added: TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
        :param str value: The taint value corresponding to the taint key.
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        if time_added is not None:
            pulumi.set(__self__, "time_added", time_added)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> str:
        """
        Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Required. The taint key to be applied to a node.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="timeAdded")
    def time_added(self) -> Optional[str]:
        """
        TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
        """
        return pulumi.get(self, "time_added")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The taint value corresponding to the taint key.
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MachinePoolStatus(dict):
    """
    MachinePoolStatus defines the observed state of MachinePool
    """
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.MachinePoolStatusConditions']] = None,
                 machine_sets: Optional[Sequence['outputs.MachinePoolStatusMachineSets']] = None,
                 replicas: Optional[int] = None):
        """
        MachinePoolStatus defines the observed state of MachinePool
        :param Sequence['MachinePoolStatusConditionsArgs'] conditions: Conditions includes more detailed status for the cluster deployment
        :param Sequence['MachinePoolStatusMachineSetsArgs'] machine_sets: MachineSets is the status of the machine sets for the machine pool on the remote cluster.
        :param int replicas: Replicas is the current number of replicas for the machine pool.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if machine_sets is not None:
            pulumi.set(__self__, "machine_sets", machine_sets)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.MachinePoolStatusConditions']]:
        """
        Conditions includes more detailed status for the cluster deployment
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="machineSets")
    def machine_sets(self) -> Optional[Sequence['outputs.MachinePoolStatusMachineSets']]:
        """
        MachineSets is the status of the machine sets for the machine pool on the remote cluster.
        """
        return pulumi.get(self, "machine_sets")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        """
        Replicas is the current number of replicas for the machine pool.
        """
        return pulumi.get(self, "replicas")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MachinePoolStatusConditions(dict):
    """
    MachinePoolCondition contains details for the current condition of a machine pool
    """
    def __init__(__self__, *,
                 status: str,
                 type: str,
                 last_probe_time: Optional[str] = None,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        MachinePoolCondition contains details for the current condition of a machine pool
        :param str status: Status is the status of the condition.
        :param str type: Type is the type of the condition.
        :param str last_probe_time: LastProbeTime is the last time we probed the condition.
        :param str last_transition_time: LastTransitionTime is the last time the condition transitioned from one status to another.
        :param str message: Message is a human-readable message indicating details about last transition.
        :param str reason: Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_probe_time is not None:
            pulumi.set(__self__, "last_probe_time", last_probe_time)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status is the status of the condition.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type is the type of the condition.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="lastProbeTime")
    def last_probe_time(self) -> Optional[str]:
        """
        LastProbeTime is the last time we probed the condition.
        """
        return pulumi.get(self, "last_probe_time")

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        """
        LastTransitionTime is the last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message is a human-readable message indicating details about last transition.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        Reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MachinePoolStatusMachineSets(dict):
    """
    MachineSetStatus is the status of a machineset in the remote cluster.
    """
    def __init__(__self__, *,
                 max_replicas: int,
                 min_replicas: int,
                 name: str,
                 replicas: int):
        """
        MachineSetStatus is the status of a machineset in the remote cluster.
        :param int max_replicas: MaxReplicas is the maximum number of replicas for the machine set.
        :param int min_replicas: MinReplicas is the minimum number of replicas for the machine set.
        :param str name: Name is the name of the machine set.
        :param int replicas: Replicas is the current number of replicas for the machine set.
        """
        pulumi.set(__self__, "max_replicas", max_replicas)
        pulumi.set(__self__, "min_replicas", min_replicas)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> int:
        """
        MaxReplicas is the maximum number of replicas for the machine set.
        """
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> int:
        """
        MinReplicas is the minimum number of replicas for the machine set.
        """
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the machine set.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def replicas(self) -> int:
        """
        Replicas is the current number of replicas for the machine set.
        """
        return pulumi.get(self, "replicas")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpec(dict):
    """
    SelectorSyncIdentityProviderSpec defines the SyncIdentityProviderCommonSpec to sync to ClusterDeploymentSelector indicating which clusters the SelectorSyncIdentityProvider applies to in any namespace.
    """
    def __init__(__self__, *,
                 identity_providers: Sequence['outputs.SelectorSyncIdentityProviderSpecIdentityProviders'],
                 cluster_deployment_selector: Optional['outputs.SelectorSyncIdentityProviderSpecClusterDeploymentSelector'] = None):
        """
        SelectorSyncIdentityProviderSpec defines the SyncIdentityProviderCommonSpec to sync to ClusterDeploymentSelector indicating which clusters the SelectorSyncIdentityProvider applies to in any namespace.
        :param Sequence['SelectorSyncIdentityProviderSpecIdentityProvidersArgs'] identity_providers: IdentityProviders is an ordered list of ways for a user to identify themselves
        :param 'SelectorSyncIdentityProviderSpecClusterDeploymentSelectorArgs' cluster_deployment_selector: ClusterDeploymentSelector is a LabelSelector indicating which clusters the SelectorIdentityProvider applies to in any namespace.
        """
        pulumi.set(__self__, "identity_providers", identity_providers)
        if cluster_deployment_selector is not None:
            pulumi.set(__self__, "cluster_deployment_selector", cluster_deployment_selector)

    @property
    @pulumi.getter(name="identityProviders")
    def identity_providers(self) -> Sequence['outputs.SelectorSyncIdentityProviderSpecIdentityProviders']:
        """
        IdentityProviders is an ordered list of ways for a user to identify themselves
        """
        return pulumi.get(self, "identity_providers")

    @property
    @pulumi.getter(name="clusterDeploymentSelector")
    def cluster_deployment_selector(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecClusterDeploymentSelector']:
        """
        ClusterDeploymentSelector is a LabelSelector indicating which clusters the SelectorIdentityProvider applies to in any namespace.
        """
        return pulumi.get(self, "cluster_deployment_selector")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecClusterDeploymentSelector(dict):
    """
    ClusterDeploymentSelector is a LabelSelector indicating which clusters the SelectorIdentityProvider applies to in any namespace.
    """
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.SelectorSyncIdentityProviderSpecClusterDeploymentSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        ClusterDeploymentSelector is a LabelSelector indicating which clusters the SelectorIdentityProvider applies to in any namespace.
        :param Sequence['SelectorSyncIdentityProviderSpecClusterDeploymentSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.SelectorSyncIdentityProviderSpecClusterDeploymentSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecClusterDeploymentSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProviders(dict):
    """
    IdentityProvider provides identities for users authenticating using credentials
    """
    def __init__(__self__, *,
                 basic_auth: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuth'] = None,
                 github: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersGithub'] = None,
                 gitlab: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersGitlab'] = None,
                 google: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersGoogle'] = None,
                 htpasswd: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersHtpasswd'] = None,
                 keystone: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersKeystone'] = None,
                 ldap: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersLdap'] = None,
                 mapping_method: Optional[str] = None,
                 name: Optional[str] = None,
                 open_id: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersOpenID'] = None,
                 request_header: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersRequestHeader'] = None,
                 type: Optional[str] = None):
        """
        IdentityProvider provides identities for users authenticating using credentials
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthArgs' basic_auth: basicAuth contains configuration options for the BasicAuth IdP
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersGithubArgs' github: github enables user authentication using GitHub credentials
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersGitlabArgs' gitlab: gitlab enables user authentication using GitLab credentials
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersGoogleArgs' google: google enables user authentication using Google credentials
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersHtpasswdArgs' htpasswd: htpasswd enables user authentication using an HTPasswd file to validate credentials
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneArgs' keystone: keystone enables user authentication using keystone password credentials
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersLdapArgs' ldap: ldap enables user authentication using LDAP credentials
        :param str mapping_method: mappingMethod determines how identities from this provider are mapped to users Defaults to "claim"
        :param str name: name is used to qualify the identities returned by this provider. - It MUST be unique and not shared by any other identity provider used - It MUST be a valid path segment: name cannot equal "." or ".." or contain "/" or "%" or ":"   Ref: https://godoc.org/github.com/openshift/origin/pkg/user/apis/user/validation#ValidateIdentityProviderName
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDArgs' open_id: openID enables user authentication using OpenID credentials
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersRequestHeaderArgs' request_header: requestHeader enables user authentication using request header credentials
        :param str type: type identifies the identity provider type for this entry.
        """
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if google is not None:
            pulumi.set(__self__, "google", google)
        if htpasswd is not None:
            pulumi.set(__self__, "htpasswd", htpasswd)
        if keystone is not None:
            pulumi.set(__self__, "keystone", keystone)
        if ldap is not None:
            pulumi.set(__self__, "ldap", ldap)
        if mapping_method is not None:
            pulumi.set(__self__, "mapping_method", mapping_method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if open_id is not None:
            pulumi.set(__self__, "open_id", open_id)
        if request_header is not None:
            pulumi.set(__self__, "request_header", request_header)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuth']:
        """
        basicAuth contains configuration options for the BasicAuth IdP
        """
        return pulumi.get(self, "basic_auth")

    @property
    @pulumi.getter
    def github(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersGithub']:
        """
        github enables user authentication using GitHub credentials
        """
        return pulumi.get(self, "github")

    @property
    @pulumi.getter
    def gitlab(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersGitlab']:
        """
        gitlab enables user authentication using GitLab credentials
        """
        return pulumi.get(self, "gitlab")

    @property
    @pulumi.getter
    def google(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersGoogle']:
        """
        google enables user authentication using Google credentials
        """
        return pulumi.get(self, "google")

    @property
    @pulumi.getter
    def htpasswd(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersHtpasswd']:
        """
        htpasswd enables user authentication using an HTPasswd file to validate credentials
        """
        return pulumi.get(self, "htpasswd")

    @property
    @pulumi.getter
    def keystone(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersKeystone']:
        """
        keystone enables user authentication using keystone password credentials
        """
        return pulumi.get(self, "keystone")

    @property
    @pulumi.getter
    def ldap(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersLdap']:
        """
        ldap enables user authentication using LDAP credentials
        """
        return pulumi.get(self, "ldap")

    @property
    @pulumi.getter(name="mappingMethod")
    def mapping_method(self) -> Optional[str]:
        """
        mappingMethod determines how identities from this provider are mapped to users Defaults to "claim"
        """
        return pulumi.get(self, "mapping_method")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name is used to qualify the identities returned by this provider. - It MUST be unique and not shared by any other identity provider used - It MUST be a valid path segment: name cannot equal "." or ".." or contain "/" or "%" or ":"   Ref: https://godoc.org/github.com/openshift/origin/pkg/user/apis/user/validation#ValidateIdentityProviderName
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="openID")
    def open_id(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersOpenID']:
        """
        openID enables user authentication using OpenID credentials
        """
        return pulumi.get(self, "open_id")

    @property
    @pulumi.getter(name="requestHeader")
    def request_header(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersRequestHeader']:
        """
        requestHeader enables user authentication using request header credentials
        """
        return pulumi.get(self, "request_header")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type identifies the identity provider type for this entry.
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuth(dict):
    """
    basicAuth contains configuration options for the BasicAuth IdP
    """
    def __init__(__self__, *,
                 ca: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthCa'] = None,
                 tls_client_cert: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientCert'] = None,
                 tls_client_key: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientKey'] = None,
                 url: Optional[str] = None):
        """
        basicAuth contains configuration options for the BasicAuth IdP
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthCaArgs' ca: ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientCertArgs' tls_client_cert: tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientKeyArgs' tls_client_key: tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str url: url is the remote URL to connect to
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if tls_client_cert is not None:
            pulumi.set(__self__, "tls_client_cert", tls_client_cert)
        if tls_client_key is not None:
            pulumi.set(__self__, "tls_client_key", tls_client_key)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def ca(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthCa']:
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @property
    @pulumi.getter(name="tlsClientCert")
    def tls_client_cert(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientCert']:
        """
        tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "tls_client_cert")

    @property
    @pulumi.getter(name="tlsClientKey")
    def tls_client_key(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientKey']:
        """
        tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "tls_client_key")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        url is the remote URL to connect to
        """
        return pulumi.get(self, "url")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthCa(dict):
    """
    ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param str name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientCert(dict):
    """
    tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientKey(dict):
    """
    tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersGithub(dict):
    """
    github enables user authentication using GitHub credentials
    """
    def __init__(__self__, *,
                 ca: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersGithubCa'] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersGithubClientSecret'] = None,
                 hostname: Optional[str] = None,
                 organizations: Optional[Sequence[str]] = None,
                 teams: Optional[Sequence[str]] = None):
        """
        github enables user authentication using GitHub credentials
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersGithubCaArgs' ca: ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. This can only be configured when hostname is set to a non-empty value. The namespace for this config map is openshift-config.
        :param str client_id: clientID is the oauth client ID
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersGithubClientSecretArgs' client_secret: clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str hostname: hostname is the optional domain (e.g. "mycompany.com") for use with a hosted instance of GitHub Enterprise. It must match the GitHub Enterprise settings value configured at /setup/settings#hostname.
        :param Sequence[str] organizations: organizations optionally restricts which organizations are allowed to log in
        :param Sequence[str] teams: teams optionally restricts which teams are allowed to log in. Format is <org>/<team>.
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if organizations is not None:
            pulumi.set(__self__, "organizations", organizations)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)

    @property
    @pulumi.getter
    def ca(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersGithubCa']:
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. This can only be configured when hostname is set to a non-empty value. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[str]:
        """
        clientID is the oauth client ID
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersGithubClientSecret']:
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        """
        hostname is the optional domain (e.g. "mycompany.com") for use with a hosted instance of GitHub Enterprise. It must match the GitHub Enterprise settings value configured at /setup/settings#hostname.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def organizations(self) -> Optional[Sequence[str]]:
        """
        organizations optionally restricts which organizations are allowed to log in
        """
        return pulumi.get(self, "organizations")

    @property
    @pulumi.getter
    def teams(self) -> Optional[Sequence[str]]:
        """
        teams optionally restricts which teams are allowed to log in. Format is <org>/<team>.
        """
        return pulumi.get(self, "teams")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersGithubCa(dict):
    """
    ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. This can only be configured when hostname is set to a non-empty value. The namespace for this config map is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. This can only be configured when hostname is set to a non-empty value. The namespace for this config map is openshift-config.
        :param str name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersGithubClientSecret(dict):
    """
    clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersGitlab(dict):
    """
    gitlab enables user authentication using GitLab credentials
    """
    def __init__(__self__, *,
                 ca: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersGitlabCa'] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersGitlabClientSecret'] = None,
                 url: Optional[str] = None):
        """
        gitlab enables user authentication using GitLab credentials
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersGitlabCaArgs' ca: ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param str client_id: clientID is the oauth client ID
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersGitlabClientSecretArgs' client_secret: clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str url: url is the oauth server base URL
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def ca(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersGitlabCa']:
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[str]:
        """
        clientID is the oauth client ID
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersGitlabClientSecret']:
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        url is the oauth server base URL
        """
        return pulumi.get(self, "url")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersGitlabCa(dict):
    """
    ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param str name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersGitlabClientSecret(dict):
    """
    clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersGoogle(dict):
    """
    google enables user authentication using Google credentials
    """
    def __init__(__self__, *,
                 client_id: Optional[str] = None,
                 client_secret: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersGoogleClientSecret'] = None,
                 hosted_domain: Optional[str] = None):
        """
        google enables user authentication using Google credentials
        :param str client_id: clientID is the oauth client ID
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersGoogleClientSecretArgs' client_secret: clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str hosted_domain: hostedDomain is the optional Google App domain (e.g. "mycompany.com") to restrict logins to
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if hosted_domain is not None:
            pulumi.set(__self__, "hosted_domain", hosted_domain)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[str]:
        """
        clientID is the oauth client ID
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersGoogleClientSecret']:
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="hostedDomain")
    def hosted_domain(self) -> Optional[str]:
        """
        hostedDomain is the optional Google App domain (e.g. "mycompany.com") to restrict logins to
        """
        return pulumi.get(self, "hosted_domain")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersGoogleClientSecret(dict):
    """
    clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersHtpasswd(dict):
    """
    htpasswd enables user authentication using an HTPasswd file to validate credentials
    """
    def __init__(__self__, *,
                 file_data: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersHtpasswdFileData'] = None):
        """
        htpasswd enables user authentication using an HTPasswd file to validate credentials
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersHtpasswdFileDataArgs' file_data: fileData is a required reference to a secret by name containing the data to use as the htpasswd file. The key "htpasswd" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. If the specified htpasswd data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        if file_data is not None:
            pulumi.set(__self__, "file_data", file_data)

    @property
    @pulumi.getter(name="fileData")
    def file_data(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersHtpasswdFileData']:
        """
        fileData is a required reference to a secret by name containing the data to use as the htpasswd file. The key "htpasswd" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. If the specified htpasswd data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "file_data")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersHtpasswdFileData(dict):
    """
    fileData is a required reference to a secret by name containing the data to use as the htpasswd file. The key "htpasswd" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. If the specified htpasswd data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        fileData is a required reference to a secret by name containing the data to use as the htpasswd file. The key "htpasswd" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. If the specified htpasswd data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersKeystone(dict):
    """
    keystone enables user authentication using keystone password credentials
    """
    def __init__(__self__, *,
                 ca: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneCa'] = None,
                 domain_name: Optional[str] = None,
                 tls_client_cert: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientCert'] = None,
                 tls_client_key: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientKey'] = None,
                 url: Optional[str] = None):
        """
        keystone enables user authentication using keystone password credentials
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneCaArgs' ca: ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param str domain_name: domainName is required for keystone v3
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientCertArgs' tls_client_cert: tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientKeyArgs' tls_client_key: tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str url: url is the remote URL to connect to
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if tls_client_cert is not None:
            pulumi.set(__self__, "tls_client_cert", tls_client_cert)
        if tls_client_key is not None:
            pulumi.set(__self__, "tls_client_key", tls_client_key)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def ca(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneCa']:
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[str]:
        """
        domainName is required for keystone v3
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="tlsClientCert")
    def tls_client_cert(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientCert']:
        """
        tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "tls_client_cert")

    @property
    @pulumi.getter(name="tlsClientKey")
    def tls_client_key(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientKey']:
        """
        tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "tls_client_key")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        url is the remote URL to connect to
        """
        return pulumi.get(self, "url")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneCa(dict):
    """
    ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param str name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientCert(dict):
    """
    tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientKey(dict):
    """
    tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersLdap(dict):
    """
    ldap enables user authentication using LDAP credentials
    """
    def __init__(__self__, *,
                 attributes: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersLdapAttributes'] = None,
                 bind_dn: Optional[str] = None,
                 bind_password: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersLdapBindPassword'] = None,
                 ca: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersLdapCa'] = None,
                 insecure: Optional[bool] = None,
                 url: Optional[str] = None):
        """
        ldap enables user authentication using LDAP credentials
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersLdapAttributesArgs' attributes: attributes maps LDAP attributes to identities
        :param str bind_dn: bindDN is an optional DN to bind with during the search phase.
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersLdapBindPasswordArgs' bind_password: bindPassword is an optional reference to a secret by name containing a password to bind with during the search phase. The key "bindPassword" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersLdapCaArgs' ca: ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param bool insecure: insecure, if true, indicates the connection should not use TLS WARNING: Should not be set to `true` with the URL scheme "ldaps://" as "ldaps://" URLs always          attempt to connect using TLS, even when `insecure` is set to `true` When `true`, "ldap://" URLS connect insecurely. When `false`, "ldap://" URLs are upgraded to a TLS connection using StartTLS as specified in https://tools.ietf.org/html/rfc2830.
        :param str url: url is an RFC 2255 URL which specifies the LDAP search parameters to use. The syntax of the URL is: ldap://host:port/basedn?attribute?scope?filter
        """
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if bind_dn is not None:
            pulumi.set(__self__, "bind_dn", bind_dn)
        if bind_password is not None:
            pulumi.set(__self__, "bind_password", bind_password)
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def attributes(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersLdapAttributes']:
        """
        attributes maps LDAP attributes to identities
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="bindDN")
    def bind_dn(self) -> Optional[str]:
        """
        bindDN is an optional DN to bind with during the search phase.
        """
        return pulumi.get(self, "bind_dn")

    @property
    @pulumi.getter(name="bindPassword")
    def bind_password(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersLdapBindPassword']:
        """
        bindPassword is an optional reference to a secret by name containing a password to bind with during the search phase. The key "bindPassword" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "bind_password")

    @property
    @pulumi.getter
    def ca(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersLdapCa']:
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @property
    @pulumi.getter
    def insecure(self) -> Optional[bool]:
        """
        insecure, if true, indicates the connection should not use TLS WARNING: Should not be set to `true` with the URL scheme "ldaps://" as "ldaps://" URLs always          attempt to connect using TLS, even when `insecure` is set to `true` When `true`, "ldap://" URLS connect insecurely. When `false`, "ldap://" URLs are upgraded to a TLS connection using StartTLS as specified in https://tools.ietf.org/html/rfc2830.
        """
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        url is an RFC 2255 URL which specifies the LDAP search parameters to use. The syntax of the URL is: ldap://host:port/basedn?attribute?scope?filter
        """
        return pulumi.get(self, "url")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersLdapAttributes(dict):
    """
    attributes maps LDAP attributes to identities
    """
    def __init__(__self__, *,
                 email: Optional[Sequence[str]] = None,
                 id: Optional[Sequence[str]] = None,
                 name: Optional[Sequence[str]] = None,
                 preferred_username: Optional[Sequence[str]] = None):
        """
        attributes maps LDAP attributes to identities
        :param Sequence[str] email: email is the list of attributes whose values should be used as the email address. Optional. If unspecified, no email is set for the identity
        :param Sequence[str] id: id is the list of attributes whose values should be used as the user ID. Required. First non-empty attribute is used. At least one attribute is required. If none of the listed attribute have a value, authentication fails. LDAP standard identity attribute is "dn"
        :param Sequence[str] name: name is the list of attributes whose values should be used as the display name. Optional. If unspecified, no display name is set for the identity LDAP standard display name attribute is "cn"
        :param Sequence[str] preferred_username: preferredUsername is the list of attributes whose values should be used as the preferred username. LDAP standard login attribute is "uid"
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if preferred_username is not None:
            pulumi.set(__self__, "preferred_username", preferred_username)

    @property
    @pulumi.getter
    def email(self) -> Optional[Sequence[str]]:
        """
        email is the list of attributes whose values should be used as the email address. Optional. If unspecified, no email is set for the identity
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def id(self) -> Optional[Sequence[str]]:
        """
        id is the list of attributes whose values should be used as the user ID. Required. First non-empty attribute is used. At least one attribute is required. If none of the listed attribute have a value, authentication fails. LDAP standard identity attribute is "dn"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[Sequence[str]]:
        """
        name is the list of attributes whose values should be used as the display name. Optional. If unspecified, no display name is set for the identity LDAP standard display name attribute is "cn"
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="preferredUsername")
    def preferred_username(self) -> Optional[Sequence[str]]:
        """
        preferredUsername is the list of attributes whose values should be used as the preferred username. LDAP standard login attribute is "uid"
        """
        return pulumi.get(self, "preferred_username")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersLdapBindPassword(dict):
    """
    bindPassword is an optional reference to a secret by name containing a password to bind with during the search phase. The key "bindPassword" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        bindPassword is an optional reference to a secret by name containing a password to bind with during the search phase. The key "bindPassword" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersLdapCa(dict):
    """
    ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param str name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersOpenID(dict):
    """
    openID enables user authentication using OpenID credentials
    """
    def __init__(__self__, *,
                 ca: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDCa'] = None,
                 claims: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClaims'] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClientSecret'] = None,
                 extra_authorize_parameters: Optional[Mapping[str, str]] = None,
                 extra_scopes: Optional[Sequence[str]] = None,
                 issuer: Optional[str] = None):
        """
        openID enables user authentication using OpenID credentials
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDCaArgs' ca: ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClaimsArgs' claims: claims mappings
        :param str client_id: clientID is the oauth client ID
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClientSecretArgs' client_secret: clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param Mapping[str, str] extra_authorize_parameters: extraAuthorizeParameters are any custom parameters to add to the authorize request.
        :param Sequence[str] extra_scopes: extraScopes are any scopes to request in addition to the standard "openid" scope.
        :param str issuer: issuer is the URL that the OpenID Provider asserts as its Issuer Identifier. It must use the https scheme with no query or fragment component.
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if claims is not None:
            pulumi.set(__self__, "claims", claims)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if extra_authorize_parameters is not None:
            pulumi.set(__self__, "extra_authorize_parameters", extra_authorize_parameters)
        if extra_scopes is not None:
            pulumi.set(__self__, "extra_scopes", extra_scopes)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)

    @property
    @pulumi.getter
    def ca(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDCa']:
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @property
    @pulumi.getter
    def claims(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClaims']:
        """
        claims mappings
        """
        return pulumi.get(self, "claims")

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[str]:
        """
        clientID is the oauth client ID
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClientSecret']:
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="extraAuthorizeParameters")
    def extra_authorize_parameters(self) -> Optional[Mapping[str, str]]:
        """
        extraAuthorizeParameters are any custom parameters to add to the authorize request.
        """
        return pulumi.get(self, "extra_authorize_parameters")

    @property
    @pulumi.getter(name="extraScopes")
    def extra_scopes(self) -> Optional[Sequence[str]]:
        """
        extraScopes are any scopes to request in addition to the standard "openid" scope.
        """
        return pulumi.get(self, "extra_scopes")

    @property
    @pulumi.getter
    def issuer(self) -> Optional[str]:
        """
        issuer is the URL that the OpenID Provider asserts as its Issuer Identifier. It must use the https scheme with no query or fragment component.
        """
        return pulumi.get(self, "issuer")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDCa(dict):
    """
    ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param str name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClaims(dict):
    """
    claims mappings
    """
    def __init__(__self__, *,
                 email: Optional[Sequence[str]] = None,
                 name: Optional[Sequence[str]] = None,
                 preferred_username: Optional[Sequence[str]] = None):
        """
        claims mappings
        :param Sequence[str] email: email is the list of claims whose values should be used as the email address. Optional. If unspecified, no email is set for the identity
        :param Sequence[str] name: name is the list of claims whose values should be used as the display name. Optional. If unspecified, no display name is set for the identity
        :param Sequence[str] preferred_username: preferredUsername is the list of claims whose values should be used as the preferred username. If unspecified, the preferred username is determined from the value of the sub claim
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if preferred_username is not None:
            pulumi.set(__self__, "preferred_username", preferred_username)

    @property
    @pulumi.getter
    def email(self) -> Optional[Sequence[str]]:
        """
        email is the list of claims whose values should be used as the email address. Optional. If unspecified, no email is set for the identity
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def name(self) -> Optional[Sequence[str]]:
        """
        name is the list of claims whose values should be used as the display name. Optional. If unspecified, no display name is set for the identity
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="preferredUsername")
    def preferred_username(self) -> Optional[Sequence[str]]:
        """
        preferredUsername is the list of claims whose values should be used as the preferred username. If unspecified, the preferred username is determined from the value of the sub claim
        """
        return pulumi.get(self, "preferred_username")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersOpenIDClientSecret(dict):
    """
    clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersRequestHeader(dict):
    """
    requestHeader enables user authentication using request header credentials
    """
    def __init__(__self__, *,
                 ca: Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersRequestHeaderCa'] = None,
                 challenge_url: Optional[str] = None,
                 client_common_names: Optional[Sequence[str]] = None,
                 email_headers: Optional[Sequence[str]] = None,
                 headers: Optional[Sequence[str]] = None,
                 login_url: Optional[str] = None,
                 name_headers: Optional[Sequence[str]] = None,
                 preferred_username_headers: Optional[Sequence[str]] = None):
        """
        requestHeader enables user authentication using request header credentials
        :param 'SelectorSyncIdentityProviderSpecIdentityProvidersRequestHeaderCaArgs' ca: ca is a required reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. Specifically, it allows verification of incoming requests to prevent header spoofing. The key "ca.crt" is used to locate the data. If the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. The namespace for this config map is openshift-config.
        :param str challenge_url: challengeURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect WWW-Authenticate challenges will be redirected here. ${url} is replaced with the current URL, escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query} Required when challenge is set to true.
        :param Sequence[str] client_common_names: clientCommonNames is an optional list of common names to require a match from. If empty, any client certificate validated against the clientCA bundle is considered authoritative.
        :param Sequence[str] email_headers: emailHeaders is the set of headers to check for the email address
        :param Sequence[str] headers: headers is the set of headers to check for identity information
        :param str login_url: loginURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect interactive logins will be redirected here ${url} is replaced with the current URL, escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query} Required when login is set to true.
        :param Sequence[str] name_headers: nameHeaders is the set of headers to check for the display name
        :param Sequence[str] preferred_username_headers: preferredUsernameHeaders is the set of headers to check for the preferred username
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if challenge_url is not None:
            pulumi.set(__self__, "challenge_url", challenge_url)
        if client_common_names is not None:
            pulumi.set(__self__, "client_common_names", client_common_names)
        if email_headers is not None:
            pulumi.set(__self__, "email_headers", email_headers)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if login_url is not None:
            pulumi.set(__self__, "login_url", login_url)
        if name_headers is not None:
            pulumi.set(__self__, "name_headers", name_headers)
        if preferred_username_headers is not None:
            pulumi.set(__self__, "preferred_username_headers", preferred_username_headers)

    @property
    @pulumi.getter
    def ca(self) -> Optional['outputs.SelectorSyncIdentityProviderSpecIdentityProvidersRequestHeaderCa']:
        """
        ca is a required reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. Specifically, it allows verification of incoming requests to prevent header spoofing. The key "ca.crt" is used to locate the data. If the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @property
    @pulumi.getter(name="challengeURL")
    def challenge_url(self) -> Optional[str]:
        """
        challengeURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect WWW-Authenticate challenges will be redirected here. ${url} is replaced with the current URL, escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query} Required when challenge is set to true.
        """
        return pulumi.get(self, "challenge_url")

    @property
    @pulumi.getter(name="clientCommonNames")
    def client_common_names(self) -> Optional[Sequence[str]]:
        """
        clientCommonNames is an optional list of common names to require a match from. If empty, any client certificate validated against the clientCA bundle is considered authoritative.
        """
        return pulumi.get(self, "client_common_names")

    @property
    @pulumi.getter(name="emailHeaders")
    def email_headers(self) -> Optional[Sequence[str]]:
        """
        emailHeaders is the set of headers to check for the email address
        """
        return pulumi.get(self, "email_headers")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence[str]]:
        """
        headers is the set of headers to check for identity information
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="loginURL")
    def login_url(self) -> Optional[str]:
        """
        loginURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect interactive logins will be redirected here ${url} is replaced with the current URL, escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query} Required when login is set to true.
        """
        return pulumi.get(self, "login_url")

    @property
    @pulumi.getter(name="nameHeaders")
    def name_headers(self) -> Optional[Sequence[str]]:
        """
        nameHeaders is the set of headers to check for the display name
        """
        return pulumi.get(self, "name_headers")

    @property
    @pulumi.getter(name="preferredUsernameHeaders")
    def preferred_username_headers(self) -> Optional[Sequence[str]]:
        """
        preferredUsernameHeaders is the set of headers to check for the preferred username
        """
        return pulumi.get(self, "preferred_username_headers")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncIdentityProviderSpecIdentityProvidersRequestHeaderCa(dict):
    """
    ca is a required reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. Specifically, it allows verification of incoming requests to prevent header spoofing. The key "ca.crt" is used to locate the data. If the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. The namespace for this config map is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        ca is a required reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. Specifically, it allows verification of incoming requests to prevent header spoofing. The key "ca.crt" is used to locate the data. If the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. The namespace for this config map is openshift-config.
        :param str name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncSetSpec(dict):
    """
    SelectorSyncSetSpec defines the SyncSetCommonSpec resources and patches to sync along with a ClusterDeploymentSelector indicating which clusters the SelectorSyncSet applies to in any namespace.
    """
    def __init__(__self__, *,
                 apply_behavior: Optional[str] = None,
                 cluster_deployment_selector: Optional['outputs.SelectorSyncSetSpecClusterDeploymentSelector'] = None,
                 patches: Optional[Sequence['outputs.SelectorSyncSetSpecPatches']] = None,
                 resource_apply_mode: Optional[str] = None,
                 resources: Optional[Sequence[Mapping[str, Any]]] = None,
                 secret_mappings: Optional[Sequence['outputs.SelectorSyncSetSpecSecretMappings']] = None):
        """
        SelectorSyncSetSpec defines the SyncSetCommonSpec resources and patches to sync along with a ClusterDeploymentSelector indicating which clusters the SelectorSyncSet applies to in any namespace.
        :param str apply_behavior: ApplyBehavior indicates how resources in this syncset will be applied to the target cluster. The default value of "Apply" indicates that resources should be applied using the 'oc apply' command. If no value is set, "Apply" is assumed. A value of "CreateOnly" indicates that the resource will only be created if it does not already exist in the target cluster. Otherwise, it will be left alone. A value of "CreateOrUpdate" indicates that the resource will be created/updated without the use of the 'oc apply' command, allowing larger resources to be synced, but losing some functionality of the 'oc apply' command such as the ability to remove annotations, labels, and other map entries in general.
        :param 'SelectorSyncSetSpecClusterDeploymentSelectorArgs' cluster_deployment_selector: ClusterDeploymentSelector is a LabelSelector indicating which clusters the SelectorSyncSet applies to in any namespace.
        :param Sequence['SelectorSyncSetSpecPatchesArgs'] patches: Patches is the list of patches to apply.
        :param str resource_apply_mode: ResourceApplyMode indicates if the Resource apply mode is "Upsert" (default) or "Sync". ApplyMode "Upsert" indicates create and update. ApplyMode "Sync" indicates create, update and delete.
        :param Sequence[Mapping[str, Any]] resources: Resources is the list of objects to sync from RawExtension definitions.
        :param Sequence['SelectorSyncSetSpecSecretMappingsArgs'] secret_mappings: Secrets is the list of secrets to sync along with their respective destinations.
        """
        if apply_behavior is not None:
            pulumi.set(__self__, "apply_behavior", apply_behavior)
        if cluster_deployment_selector is not None:
            pulumi.set(__self__, "cluster_deployment_selector", cluster_deployment_selector)
        if patches is not None:
            pulumi.set(__self__, "patches", patches)
        if resource_apply_mode is not None:
            pulumi.set(__self__, "resource_apply_mode", resource_apply_mode)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if secret_mappings is not None:
            pulumi.set(__self__, "secret_mappings", secret_mappings)

    @property
    @pulumi.getter(name="applyBehavior")
    def apply_behavior(self) -> Optional[str]:
        """
        ApplyBehavior indicates how resources in this syncset will be applied to the target cluster. The default value of "Apply" indicates that resources should be applied using the 'oc apply' command. If no value is set, "Apply" is assumed. A value of "CreateOnly" indicates that the resource will only be created if it does not already exist in the target cluster. Otherwise, it will be left alone. A value of "CreateOrUpdate" indicates that the resource will be created/updated without the use of the 'oc apply' command, allowing larger resources to be synced, but losing some functionality of the 'oc apply' command such as the ability to remove annotations, labels, and other map entries in general.
        """
        return pulumi.get(self, "apply_behavior")

    @property
    @pulumi.getter(name="clusterDeploymentSelector")
    def cluster_deployment_selector(self) -> Optional['outputs.SelectorSyncSetSpecClusterDeploymentSelector']:
        """
        ClusterDeploymentSelector is a LabelSelector indicating which clusters the SelectorSyncSet applies to in any namespace.
        """
        return pulumi.get(self, "cluster_deployment_selector")

    @property
    @pulumi.getter
    def patches(self) -> Optional[Sequence['outputs.SelectorSyncSetSpecPatches']]:
        """
        Patches is the list of patches to apply.
        """
        return pulumi.get(self, "patches")

    @property
    @pulumi.getter(name="resourceApplyMode")
    def resource_apply_mode(self) -> Optional[str]:
        """
        ResourceApplyMode indicates if the Resource apply mode is "Upsert" (default) or "Sync". ApplyMode "Upsert" indicates create and update. ApplyMode "Sync" indicates create, update and delete.
        """
        return pulumi.get(self, "resource_apply_mode")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence[Mapping[str, Any]]]:
        """
        Resources is the list of objects to sync from RawExtension definitions.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="secretMappings")
    def secret_mappings(self) -> Optional[Sequence['outputs.SelectorSyncSetSpecSecretMappings']]:
        """
        Secrets is the list of secrets to sync along with their respective destinations.
        """
        return pulumi.get(self, "secret_mappings")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncSetSpecClusterDeploymentSelector(dict):
    """
    ClusterDeploymentSelector is a LabelSelector indicating which clusters the SelectorSyncSet applies to in any namespace.
    """
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.SelectorSyncSetSpecClusterDeploymentSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        ClusterDeploymentSelector is a LabelSelector indicating which clusters the SelectorSyncSet applies to in any namespace.
        :param Sequence['SelectorSyncSetSpecClusterDeploymentSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.SelectorSyncSetSpecClusterDeploymentSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncSetSpecClusterDeploymentSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncSetSpecPatches(dict):
    """
    SyncObjectPatch represents a patch to be applied to a specific object
    """
    def __init__(__self__, *,
                 api_version: str,
                 kind: str,
                 name: str,
                 patch: str,
                 namespace: Optional[str] = None,
                 patch_type: Optional[str] = None):
        """
        SyncObjectPatch represents a patch to be applied to a specific object
        :param str api_version: APIVersion is the Group and Version of the object to be patched.
        :param str kind: Kind is the Kind of the object to be patched.
        :param str name: Name is the name of the object to be patched.
        :param str patch: Patch is the patch to apply.
        :param str namespace: Namespace is the Namespace in which the object to patch exists. Defaults to the SyncSet's Namespace.
        :param str patch_type: PatchType indicates the PatchType as "strategic" (default), "json", or "merge".
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "patch", patch)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if patch_type is not None:
            pulumi.set(__self__, "patch_type", patch_type)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        APIVersion is the Group and Version of the object to be patched.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind is the Kind of the object to be patched.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the object to be patched.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def patch(self) -> str:
        """
        Patch is the patch to apply.
        """
        return pulumi.get(self, "patch")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the Namespace in which the object to patch exists. Defaults to the SyncSet's Namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="patchType")
    def patch_type(self) -> Optional[str]:
        """
        PatchType indicates the PatchType as "strategic" (default), "json", or "merge".
        """
        return pulumi.get(self, "patch_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncSetSpecSecretMappings(dict):
    """
    SecretMapping defines a source and destination for a secret to be synced by a SyncSet
    """
    def __init__(__self__, *,
                 source_ref: 'outputs.SelectorSyncSetSpecSecretMappingsSourceRef',
                 target_ref: 'outputs.SelectorSyncSetSpecSecretMappingsTargetRef'):
        """
        SecretMapping defines a source and destination for a secret to be synced by a SyncSet
        :param 'SelectorSyncSetSpecSecretMappingsSourceRefArgs' source_ref: SourceRef specifies the name and namespace of a secret on the management cluster
        :param 'SelectorSyncSetSpecSecretMappingsTargetRefArgs' target_ref: TargetRef specifies the target name and namespace of the secret on the target cluster
        """
        pulumi.set(__self__, "source_ref", source_ref)
        pulumi.set(__self__, "target_ref", target_ref)

    @property
    @pulumi.getter(name="sourceRef")
    def source_ref(self) -> 'outputs.SelectorSyncSetSpecSecretMappingsSourceRef':
        """
        SourceRef specifies the name and namespace of a secret on the management cluster
        """
        return pulumi.get(self, "source_ref")

    @property
    @pulumi.getter(name="targetRef")
    def target_ref(self) -> 'outputs.SelectorSyncSetSpecSecretMappingsTargetRef':
        """
        TargetRef specifies the target name and namespace of the secret on the target cluster
        """
        return pulumi.get(self, "target_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncSetSpecSecretMappingsSourceRef(dict):
    """
    SourceRef specifies the name and namespace of a secret on the management cluster
    """
    def __init__(__self__, *,
                 name: str,
                 namespace: Optional[str] = None):
        """
        SourceRef specifies the name and namespace of a secret on the management cluster
        :param str name: Name is the name of the secret
        :param str namespace: Namespace is the namespace where the secret lives. If not present for the source secret reference, it is assumed to be the same namespace as the syncset with the reference.
        """
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the secret
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the namespace where the secret lives. If not present for the source secret reference, it is assumed to be the same namespace as the syncset with the reference.
        """
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SelectorSyncSetSpecSecretMappingsTargetRef(dict):
    """
    TargetRef specifies the target name and namespace of the secret on the target cluster
    """
    def __init__(__self__, *,
                 name: str,
                 namespace: Optional[str] = None):
        """
        TargetRef specifies the target name and namespace of the secret on the target cluster
        :param str name: Name is the name of the secret
        :param str namespace: Namespace is the namespace where the secret lives. If not present for the source secret reference, it is assumed to be the same namespace as the syncset with the reference.
        """
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the secret
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the namespace where the secret lives. If not present for the source secret reference, it is assumed to be the same namespace as the syncset with the reference.
        """
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpec(dict):
    """
    SyncIdentityProviderSpec defines the SyncIdentityProviderCommonSpec identity providers to sync along with ClusterDeploymentRefs indicating which clusters the SyncIdentityProvider applies to in the SyncIdentityProvider's namespace.
    """
    def __init__(__self__, *,
                 cluster_deployment_refs: Sequence['outputs.SyncIdentityProviderSpecClusterDeploymentRefs'],
                 identity_providers: Sequence['outputs.SyncIdentityProviderSpecIdentityProviders']):
        """
        SyncIdentityProviderSpec defines the SyncIdentityProviderCommonSpec identity providers to sync along with ClusterDeploymentRefs indicating which clusters the SyncIdentityProvider applies to in the SyncIdentityProvider's namespace.
        :param Sequence['SyncIdentityProviderSpecClusterDeploymentRefsArgs'] cluster_deployment_refs: ClusterDeploymentRefs is the list of LocalObjectReference indicating which clusters the SyncSet applies to in the SyncSet's namespace.
        :param Sequence['SyncIdentityProviderSpecIdentityProvidersArgs'] identity_providers: IdentityProviders is an ordered list of ways for a user to identify themselves
        """
        pulumi.set(__self__, "cluster_deployment_refs", cluster_deployment_refs)
        pulumi.set(__self__, "identity_providers", identity_providers)

    @property
    @pulumi.getter(name="clusterDeploymentRefs")
    def cluster_deployment_refs(self) -> Sequence['outputs.SyncIdentityProviderSpecClusterDeploymentRefs']:
        """
        ClusterDeploymentRefs is the list of LocalObjectReference indicating which clusters the SyncSet applies to in the SyncSet's namespace.
        """
        return pulumi.get(self, "cluster_deployment_refs")

    @property
    @pulumi.getter(name="identityProviders")
    def identity_providers(self) -> Sequence['outputs.SyncIdentityProviderSpecIdentityProviders']:
        """
        IdentityProviders is an ordered list of ways for a user to identify themselves
        """
        return pulumi.get(self, "identity_providers")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecClusterDeploymentRefs(dict):
    """
    LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProviders(dict):
    """
    IdentityProvider provides identities for users authenticating using credentials
    """
    def __init__(__self__, *,
                 basic_auth: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersBasicAuth'] = None,
                 github: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersGithub'] = None,
                 gitlab: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersGitlab'] = None,
                 google: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersGoogle'] = None,
                 htpasswd: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersHtpasswd'] = None,
                 keystone: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersKeystone'] = None,
                 ldap: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersLdap'] = None,
                 mapping_method: Optional[str] = None,
                 name: Optional[str] = None,
                 open_id: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersOpenID'] = None,
                 request_header: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersRequestHeader'] = None,
                 type: Optional[str] = None):
        """
        IdentityProvider provides identities for users authenticating using credentials
        :param 'SyncIdentityProviderSpecIdentityProvidersBasicAuthArgs' basic_auth: basicAuth contains configuration options for the BasicAuth IdP
        :param 'SyncIdentityProviderSpecIdentityProvidersGithubArgs' github: github enables user authentication using GitHub credentials
        :param 'SyncIdentityProviderSpecIdentityProvidersGitlabArgs' gitlab: gitlab enables user authentication using GitLab credentials
        :param 'SyncIdentityProviderSpecIdentityProvidersGoogleArgs' google: google enables user authentication using Google credentials
        :param 'SyncIdentityProviderSpecIdentityProvidersHtpasswdArgs' htpasswd: htpasswd enables user authentication using an HTPasswd file to validate credentials
        :param 'SyncIdentityProviderSpecIdentityProvidersKeystoneArgs' keystone: keystone enables user authentication using keystone password credentials
        :param 'SyncIdentityProviderSpecIdentityProvidersLdapArgs' ldap: ldap enables user authentication using LDAP credentials
        :param str mapping_method: mappingMethod determines how identities from this provider are mapped to users Defaults to "claim"
        :param str name: name is used to qualify the identities returned by this provider. - It MUST be unique and not shared by any other identity provider used - It MUST be a valid path segment: name cannot equal "." or ".." or contain "/" or "%" or ":"   Ref: https://godoc.org/github.com/openshift/origin/pkg/user/apis/user/validation#ValidateIdentityProviderName
        :param 'SyncIdentityProviderSpecIdentityProvidersOpenIDArgs' open_id: openID enables user authentication using OpenID credentials
        :param 'SyncIdentityProviderSpecIdentityProvidersRequestHeaderArgs' request_header: requestHeader enables user authentication using request header credentials
        :param str type: type identifies the identity provider type for this entry.
        """
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab is not None:
            pulumi.set(__self__, "gitlab", gitlab)
        if google is not None:
            pulumi.set(__self__, "google", google)
        if htpasswd is not None:
            pulumi.set(__self__, "htpasswd", htpasswd)
        if keystone is not None:
            pulumi.set(__self__, "keystone", keystone)
        if ldap is not None:
            pulumi.set(__self__, "ldap", ldap)
        if mapping_method is not None:
            pulumi.set(__self__, "mapping_method", mapping_method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if open_id is not None:
            pulumi.set(__self__, "open_id", open_id)
        if request_header is not None:
            pulumi.set(__self__, "request_header", request_header)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersBasicAuth']:
        """
        basicAuth contains configuration options for the BasicAuth IdP
        """
        return pulumi.get(self, "basic_auth")

    @property
    @pulumi.getter
    def github(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersGithub']:
        """
        github enables user authentication using GitHub credentials
        """
        return pulumi.get(self, "github")

    @property
    @pulumi.getter
    def gitlab(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersGitlab']:
        """
        gitlab enables user authentication using GitLab credentials
        """
        return pulumi.get(self, "gitlab")

    @property
    @pulumi.getter
    def google(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersGoogle']:
        """
        google enables user authentication using Google credentials
        """
        return pulumi.get(self, "google")

    @property
    @pulumi.getter
    def htpasswd(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersHtpasswd']:
        """
        htpasswd enables user authentication using an HTPasswd file to validate credentials
        """
        return pulumi.get(self, "htpasswd")

    @property
    @pulumi.getter
    def keystone(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersKeystone']:
        """
        keystone enables user authentication using keystone password credentials
        """
        return pulumi.get(self, "keystone")

    @property
    @pulumi.getter
    def ldap(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersLdap']:
        """
        ldap enables user authentication using LDAP credentials
        """
        return pulumi.get(self, "ldap")

    @property
    @pulumi.getter(name="mappingMethod")
    def mapping_method(self) -> Optional[str]:
        """
        mappingMethod determines how identities from this provider are mapped to users Defaults to "claim"
        """
        return pulumi.get(self, "mapping_method")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name is used to qualify the identities returned by this provider. - It MUST be unique and not shared by any other identity provider used - It MUST be a valid path segment: name cannot equal "." or ".." or contain "/" or "%" or ":"   Ref: https://godoc.org/github.com/openshift/origin/pkg/user/apis/user/validation#ValidateIdentityProviderName
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="openID")
    def open_id(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersOpenID']:
        """
        openID enables user authentication using OpenID credentials
        """
        return pulumi.get(self, "open_id")

    @property
    @pulumi.getter(name="requestHeader")
    def request_header(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersRequestHeader']:
        """
        requestHeader enables user authentication using request header credentials
        """
        return pulumi.get(self, "request_header")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type identifies the identity provider type for this entry.
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersBasicAuth(dict):
    """
    basicAuth contains configuration options for the BasicAuth IdP
    """
    def __init__(__self__, *,
                 ca: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersBasicAuthCa'] = None,
                 tls_client_cert: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientCert'] = None,
                 tls_client_key: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientKey'] = None,
                 url: Optional[str] = None):
        """
        basicAuth contains configuration options for the BasicAuth IdP
        :param 'SyncIdentityProviderSpecIdentityProvidersBasicAuthCaArgs' ca: ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param 'SyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientCertArgs' tls_client_cert: tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param 'SyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientKeyArgs' tls_client_key: tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str url: url is the remote URL to connect to
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if tls_client_cert is not None:
            pulumi.set(__self__, "tls_client_cert", tls_client_cert)
        if tls_client_key is not None:
            pulumi.set(__self__, "tls_client_key", tls_client_key)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def ca(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersBasicAuthCa']:
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @property
    @pulumi.getter(name="tlsClientCert")
    def tls_client_cert(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientCert']:
        """
        tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "tls_client_cert")

    @property
    @pulumi.getter(name="tlsClientKey")
    def tls_client_key(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientKey']:
        """
        tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "tls_client_key")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        url is the remote URL to connect to
        """
        return pulumi.get(self, "url")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersBasicAuthCa(dict):
    """
    ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param str name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientCert(dict):
    """
    tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersBasicAuthTlsClientKey(dict):
    """
    tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersGithub(dict):
    """
    github enables user authentication using GitHub credentials
    """
    def __init__(__self__, *,
                 ca: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersGithubCa'] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersGithubClientSecret'] = None,
                 hostname: Optional[str] = None,
                 organizations: Optional[Sequence[str]] = None,
                 teams: Optional[Sequence[str]] = None):
        """
        github enables user authentication using GitHub credentials
        :param 'SyncIdentityProviderSpecIdentityProvidersGithubCaArgs' ca: ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. This can only be configured when hostname is set to a non-empty value. The namespace for this config map is openshift-config.
        :param str client_id: clientID is the oauth client ID
        :param 'SyncIdentityProviderSpecIdentityProvidersGithubClientSecretArgs' client_secret: clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str hostname: hostname is the optional domain (e.g. "mycompany.com") for use with a hosted instance of GitHub Enterprise. It must match the GitHub Enterprise settings value configured at /setup/settings#hostname.
        :param Sequence[str] organizations: organizations optionally restricts which organizations are allowed to log in
        :param Sequence[str] teams: teams optionally restricts which teams are allowed to log in. Format is <org>/<team>.
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if organizations is not None:
            pulumi.set(__self__, "organizations", organizations)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)

    @property
    @pulumi.getter
    def ca(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersGithubCa']:
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. This can only be configured when hostname is set to a non-empty value. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[str]:
        """
        clientID is the oauth client ID
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersGithubClientSecret']:
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        """
        hostname is the optional domain (e.g. "mycompany.com") for use with a hosted instance of GitHub Enterprise. It must match the GitHub Enterprise settings value configured at /setup/settings#hostname.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def organizations(self) -> Optional[Sequence[str]]:
        """
        organizations optionally restricts which organizations are allowed to log in
        """
        return pulumi.get(self, "organizations")

    @property
    @pulumi.getter
    def teams(self) -> Optional[Sequence[str]]:
        """
        teams optionally restricts which teams are allowed to log in. Format is <org>/<team>.
        """
        return pulumi.get(self, "teams")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersGithubCa(dict):
    """
    ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. This can only be configured when hostname is set to a non-empty value. The namespace for this config map is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. This can only be configured when hostname is set to a non-empty value. The namespace for this config map is openshift-config.
        :param str name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersGithubClientSecret(dict):
    """
    clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersGitlab(dict):
    """
    gitlab enables user authentication using GitLab credentials
    """
    def __init__(__self__, *,
                 ca: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersGitlabCa'] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersGitlabClientSecret'] = None,
                 url: Optional[str] = None):
        """
        gitlab enables user authentication using GitLab credentials
        :param 'SyncIdentityProviderSpecIdentityProvidersGitlabCaArgs' ca: ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param str client_id: clientID is the oauth client ID
        :param 'SyncIdentityProviderSpecIdentityProvidersGitlabClientSecretArgs' client_secret: clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str url: url is the oauth server base URL
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def ca(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersGitlabCa']:
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[str]:
        """
        clientID is the oauth client ID
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersGitlabClientSecret']:
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        url is the oauth server base URL
        """
        return pulumi.get(self, "url")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersGitlabCa(dict):
    """
    ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param str name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersGitlabClientSecret(dict):
    """
    clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersGoogle(dict):
    """
    google enables user authentication using Google credentials
    """
    def __init__(__self__, *,
                 client_id: Optional[str] = None,
                 client_secret: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersGoogleClientSecret'] = None,
                 hosted_domain: Optional[str] = None):
        """
        google enables user authentication using Google credentials
        :param str client_id: clientID is the oauth client ID
        :param 'SyncIdentityProviderSpecIdentityProvidersGoogleClientSecretArgs' client_secret: clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str hosted_domain: hostedDomain is the optional Google App domain (e.g. "mycompany.com") to restrict logins to
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if hosted_domain is not None:
            pulumi.set(__self__, "hosted_domain", hosted_domain)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[str]:
        """
        clientID is the oauth client ID
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersGoogleClientSecret']:
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="hostedDomain")
    def hosted_domain(self) -> Optional[str]:
        """
        hostedDomain is the optional Google App domain (e.g. "mycompany.com") to restrict logins to
        """
        return pulumi.get(self, "hosted_domain")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersGoogleClientSecret(dict):
    """
    clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersHtpasswd(dict):
    """
    htpasswd enables user authentication using an HTPasswd file to validate credentials
    """
    def __init__(__self__, *,
                 file_data: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersHtpasswdFileData'] = None):
        """
        htpasswd enables user authentication using an HTPasswd file to validate credentials
        :param 'SyncIdentityProviderSpecIdentityProvidersHtpasswdFileDataArgs' file_data: fileData is a required reference to a secret by name containing the data to use as the htpasswd file. The key "htpasswd" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. If the specified htpasswd data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        if file_data is not None:
            pulumi.set(__self__, "file_data", file_data)

    @property
    @pulumi.getter(name="fileData")
    def file_data(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersHtpasswdFileData']:
        """
        fileData is a required reference to a secret by name containing the data to use as the htpasswd file. The key "htpasswd" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. If the specified htpasswd data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "file_data")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersHtpasswdFileData(dict):
    """
    fileData is a required reference to a secret by name containing the data to use as the htpasswd file. The key "htpasswd" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. If the specified htpasswd data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        fileData is a required reference to a secret by name containing the data to use as the htpasswd file. The key "htpasswd" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. If the specified htpasswd data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersKeystone(dict):
    """
    keystone enables user authentication using keystone password credentials
    """
    def __init__(__self__, *,
                 ca: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersKeystoneCa'] = None,
                 domain_name: Optional[str] = None,
                 tls_client_cert: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientCert'] = None,
                 tls_client_key: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientKey'] = None,
                 url: Optional[str] = None):
        """
        keystone enables user authentication using keystone password credentials
        :param 'SyncIdentityProviderSpecIdentityProvidersKeystoneCaArgs' ca: ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param str domain_name: domainName is required for keystone v3
        :param 'SyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientCertArgs' tls_client_cert: tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param 'SyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientKeyArgs' tls_client_key: tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str url: url is the remote URL to connect to
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if tls_client_cert is not None:
            pulumi.set(__self__, "tls_client_cert", tls_client_cert)
        if tls_client_key is not None:
            pulumi.set(__self__, "tls_client_key", tls_client_key)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def ca(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersKeystoneCa']:
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[str]:
        """
        domainName is required for keystone v3
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="tlsClientCert")
    def tls_client_cert(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientCert']:
        """
        tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "tls_client_cert")

    @property
    @pulumi.getter(name="tlsClientKey")
    def tls_client_key(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientKey']:
        """
        tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "tls_client_key")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        url is the remote URL to connect to
        """
        return pulumi.get(self, "url")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersKeystoneCa(dict):
    """
    ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param str name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientCert(dict):
    """
    tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key "tls.crt" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersKeystoneTlsClientKey(dict):
    """
    tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key "tls.key" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersLdap(dict):
    """
    ldap enables user authentication using LDAP credentials
    """
    def __init__(__self__, *,
                 attributes: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersLdapAttributes'] = None,
                 bind_dn: Optional[str] = None,
                 bind_password: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersLdapBindPassword'] = None,
                 ca: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersLdapCa'] = None,
                 insecure: Optional[bool] = None,
                 url: Optional[str] = None):
        """
        ldap enables user authentication using LDAP credentials
        :param 'SyncIdentityProviderSpecIdentityProvidersLdapAttributesArgs' attributes: attributes maps LDAP attributes to identities
        :param str bind_dn: bindDN is an optional DN to bind with during the search phase.
        :param 'SyncIdentityProviderSpecIdentityProvidersLdapBindPasswordArgs' bind_password: bindPassword is an optional reference to a secret by name containing a password to bind with during the search phase. The key "bindPassword" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param 'SyncIdentityProviderSpecIdentityProvidersLdapCaArgs' ca: ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param bool insecure: insecure, if true, indicates the connection should not use TLS WARNING: Should not be set to `true` with the URL scheme "ldaps://" as "ldaps://" URLs always          attempt to connect using TLS, even when `insecure` is set to `true` When `true`, "ldap://" URLS connect insecurely. When `false`, "ldap://" URLs are upgraded to a TLS connection using StartTLS as specified in https://tools.ietf.org/html/rfc2830.
        :param str url: url is an RFC 2255 URL which specifies the LDAP search parameters to use. The syntax of the URL is: ldap://host:port/basedn?attribute?scope?filter
        """
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if bind_dn is not None:
            pulumi.set(__self__, "bind_dn", bind_dn)
        if bind_password is not None:
            pulumi.set(__self__, "bind_password", bind_password)
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def attributes(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersLdapAttributes']:
        """
        attributes maps LDAP attributes to identities
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="bindDN")
    def bind_dn(self) -> Optional[str]:
        """
        bindDN is an optional DN to bind with during the search phase.
        """
        return pulumi.get(self, "bind_dn")

    @property
    @pulumi.getter(name="bindPassword")
    def bind_password(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersLdapBindPassword']:
        """
        bindPassword is an optional reference to a secret by name containing a password to bind with during the search phase. The key "bindPassword" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "bind_password")

    @property
    @pulumi.getter
    def ca(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersLdapCa']:
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @property
    @pulumi.getter
    def insecure(self) -> Optional[bool]:
        """
        insecure, if true, indicates the connection should not use TLS WARNING: Should not be set to `true` with the URL scheme "ldaps://" as "ldaps://" URLs always          attempt to connect using TLS, even when `insecure` is set to `true` When `true`, "ldap://" URLS connect insecurely. When `false`, "ldap://" URLs are upgraded to a TLS connection using StartTLS as specified in https://tools.ietf.org/html/rfc2830.
        """
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        url is an RFC 2255 URL which specifies the LDAP search parameters to use. The syntax of the URL is: ldap://host:port/basedn?attribute?scope?filter
        """
        return pulumi.get(self, "url")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersLdapAttributes(dict):
    """
    attributes maps LDAP attributes to identities
    """
    def __init__(__self__, *,
                 email: Optional[Sequence[str]] = None,
                 id: Optional[Sequence[str]] = None,
                 name: Optional[Sequence[str]] = None,
                 preferred_username: Optional[Sequence[str]] = None):
        """
        attributes maps LDAP attributes to identities
        :param Sequence[str] email: email is the list of attributes whose values should be used as the email address. Optional. If unspecified, no email is set for the identity
        :param Sequence[str] id: id is the list of attributes whose values should be used as the user ID. Required. First non-empty attribute is used. At least one attribute is required. If none of the listed attribute have a value, authentication fails. LDAP standard identity attribute is "dn"
        :param Sequence[str] name: name is the list of attributes whose values should be used as the display name. Optional. If unspecified, no display name is set for the identity LDAP standard display name attribute is "cn"
        :param Sequence[str] preferred_username: preferredUsername is the list of attributes whose values should be used as the preferred username. LDAP standard login attribute is "uid"
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if preferred_username is not None:
            pulumi.set(__self__, "preferred_username", preferred_username)

    @property
    @pulumi.getter
    def email(self) -> Optional[Sequence[str]]:
        """
        email is the list of attributes whose values should be used as the email address. Optional. If unspecified, no email is set for the identity
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def id(self) -> Optional[Sequence[str]]:
        """
        id is the list of attributes whose values should be used as the user ID. Required. First non-empty attribute is used. At least one attribute is required. If none of the listed attribute have a value, authentication fails. LDAP standard identity attribute is "dn"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[Sequence[str]]:
        """
        name is the list of attributes whose values should be used as the display name. Optional. If unspecified, no display name is set for the identity LDAP standard display name attribute is "cn"
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="preferredUsername")
    def preferred_username(self) -> Optional[Sequence[str]]:
        """
        preferredUsername is the list of attributes whose values should be used as the preferred username. LDAP standard login attribute is "uid"
        """
        return pulumi.get(self, "preferred_username")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersLdapBindPassword(dict):
    """
    bindPassword is an optional reference to a secret by name containing a password to bind with during the search phase. The key "bindPassword" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        bindPassword is an optional reference to a secret by name containing a password to bind with during the search phase. The key "bindPassword" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersLdapCa(dict):
    """
    ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param str name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersOpenID(dict):
    """
    openID enables user authentication using OpenID credentials
    """
    def __init__(__self__, *,
                 ca: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersOpenIDCa'] = None,
                 claims: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersOpenIDClaims'] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersOpenIDClientSecret'] = None,
                 extra_authorize_parameters: Optional[Mapping[str, str]] = None,
                 extra_scopes: Optional[Sequence[str]] = None,
                 issuer: Optional[str] = None):
        """
        openID enables user authentication using OpenID credentials
        :param 'SyncIdentityProviderSpecIdentityProvidersOpenIDCaArgs' ca: ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param 'SyncIdentityProviderSpecIdentityProvidersOpenIDClaimsArgs' claims: claims mappings
        :param str client_id: clientID is the oauth client ID
        :param 'SyncIdentityProviderSpecIdentityProvidersOpenIDClientSecretArgs' client_secret: clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param Mapping[str, str] extra_authorize_parameters: extraAuthorizeParameters are any custom parameters to add to the authorize request.
        :param Sequence[str] extra_scopes: extraScopes are any scopes to request in addition to the standard "openid" scope.
        :param str issuer: issuer is the URL that the OpenID Provider asserts as its Issuer Identifier. It must use the https scheme with no query or fragment component.
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if claims is not None:
            pulumi.set(__self__, "claims", claims)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if extra_authorize_parameters is not None:
            pulumi.set(__self__, "extra_authorize_parameters", extra_authorize_parameters)
        if extra_scopes is not None:
            pulumi.set(__self__, "extra_scopes", extra_scopes)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)

    @property
    @pulumi.getter
    def ca(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersOpenIDCa']:
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @property
    @pulumi.getter
    def claims(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersOpenIDClaims']:
        """
        claims mappings
        """
        return pulumi.get(self, "claims")

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[str]:
        """
        clientID is the oauth client ID
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersOpenIDClientSecret']:
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="extraAuthorizeParameters")
    def extra_authorize_parameters(self) -> Optional[Mapping[str, str]]:
        """
        extraAuthorizeParameters are any custom parameters to add to the authorize request.
        """
        return pulumi.get(self, "extra_authorize_parameters")

    @property
    @pulumi.getter(name="extraScopes")
    def extra_scopes(self) -> Optional[Sequence[str]]:
        """
        extraScopes are any scopes to request in addition to the standard "openid" scope.
        """
        return pulumi.get(self, "extra_scopes")

    @property
    @pulumi.getter
    def issuer(self) -> Optional[str]:
        """
        issuer is the URL that the OpenID Provider asserts as its Issuer Identifier. It must use the https scheme with no query or fragment component.
        """
        return pulumi.get(self, "issuer")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersOpenIDCa(dict):
    """
    ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca.crt" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.
        :param str name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersOpenIDClaims(dict):
    """
    claims mappings
    """
    def __init__(__self__, *,
                 email: Optional[Sequence[str]] = None,
                 name: Optional[Sequence[str]] = None,
                 preferred_username: Optional[Sequence[str]] = None):
        """
        claims mappings
        :param Sequence[str] email: email is the list of claims whose values should be used as the email address. Optional. If unspecified, no email is set for the identity
        :param Sequence[str] name: name is the list of claims whose values should be used as the display name. Optional. If unspecified, no display name is set for the identity
        :param Sequence[str] preferred_username: preferredUsername is the list of claims whose values should be used as the preferred username. If unspecified, the preferred username is determined from the value of the sub claim
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if preferred_username is not None:
            pulumi.set(__self__, "preferred_username", preferred_username)

    @property
    @pulumi.getter
    def email(self) -> Optional[Sequence[str]]:
        """
        email is the list of claims whose values should be used as the email address. Optional. If unspecified, no email is set for the identity
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def name(self) -> Optional[Sequence[str]]:
        """
        name is the list of claims whose values should be used as the display name. Optional. If unspecified, no display name is set for the identity
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="preferredUsername")
    def preferred_username(self) -> Optional[Sequence[str]]:
        """
        preferredUsername is the list of claims whose values should be used as the preferred username. If unspecified, the preferred username is determined from the value of the sub claim
        """
        return pulumi.get(self, "preferred_username")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersOpenIDClientSecret(dict):
    """
    clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        clientSecret is a required reference to the secret by name containing the oauth client secret. The key "clientSecret" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.
        :param str name: name is the metadata.name of the referenced secret
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced secret
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersRequestHeader(dict):
    """
    requestHeader enables user authentication using request header credentials
    """
    def __init__(__self__, *,
                 ca: Optional['outputs.SyncIdentityProviderSpecIdentityProvidersRequestHeaderCa'] = None,
                 challenge_url: Optional[str] = None,
                 client_common_names: Optional[Sequence[str]] = None,
                 email_headers: Optional[Sequence[str]] = None,
                 headers: Optional[Sequence[str]] = None,
                 login_url: Optional[str] = None,
                 name_headers: Optional[Sequence[str]] = None,
                 preferred_username_headers: Optional[Sequence[str]] = None):
        """
        requestHeader enables user authentication using request header credentials
        :param 'SyncIdentityProviderSpecIdentityProvidersRequestHeaderCaArgs' ca: ca is a required reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. Specifically, it allows verification of incoming requests to prevent header spoofing. The key "ca.crt" is used to locate the data. If the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. The namespace for this config map is openshift-config.
        :param str challenge_url: challengeURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect WWW-Authenticate challenges will be redirected here. ${url} is replaced with the current URL, escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query} Required when challenge is set to true.
        :param Sequence[str] client_common_names: clientCommonNames is an optional list of common names to require a match from. If empty, any client certificate validated against the clientCA bundle is considered authoritative.
        :param Sequence[str] email_headers: emailHeaders is the set of headers to check for the email address
        :param Sequence[str] headers: headers is the set of headers to check for identity information
        :param str login_url: loginURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect interactive logins will be redirected here ${url} is replaced with the current URL, escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query} Required when login is set to true.
        :param Sequence[str] name_headers: nameHeaders is the set of headers to check for the display name
        :param Sequence[str] preferred_username_headers: preferredUsernameHeaders is the set of headers to check for the preferred username
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if challenge_url is not None:
            pulumi.set(__self__, "challenge_url", challenge_url)
        if client_common_names is not None:
            pulumi.set(__self__, "client_common_names", client_common_names)
        if email_headers is not None:
            pulumi.set(__self__, "email_headers", email_headers)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if login_url is not None:
            pulumi.set(__self__, "login_url", login_url)
        if name_headers is not None:
            pulumi.set(__self__, "name_headers", name_headers)
        if preferred_username_headers is not None:
            pulumi.set(__self__, "preferred_username_headers", preferred_username_headers)

    @property
    @pulumi.getter
    def ca(self) -> Optional['outputs.SyncIdentityProviderSpecIdentityProvidersRequestHeaderCa']:
        """
        ca is a required reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. Specifically, it allows verification of incoming requests to prevent header spoofing. The key "ca.crt" is used to locate the data. If the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. The namespace for this config map is openshift-config.
        """
        return pulumi.get(self, "ca")

    @property
    @pulumi.getter(name="challengeURL")
    def challenge_url(self) -> Optional[str]:
        """
        challengeURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect WWW-Authenticate challenges will be redirected here. ${url} is replaced with the current URL, escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query} Required when challenge is set to true.
        """
        return pulumi.get(self, "challenge_url")

    @property
    @pulumi.getter(name="clientCommonNames")
    def client_common_names(self) -> Optional[Sequence[str]]:
        """
        clientCommonNames is an optional list of common names to require a match from. If empty, any client certificate validated against the clientCA bundle is considered authoritative.
        """
        return pulumi.get(self, "client_common_names")

    @property
    @pulumi.getter(name="emailHeaders")
    def email_headers(self) -> Optional[Sequence[str]]:
        """
        emailHeaders is the set of headers to check for the email address
        """
        return pulumi.get(self, "email_headers")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence[str]]:
        """
        headers is the set of headers to check for identity information
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="loginURL")
    def login_url(self) -> Optional[str]:
        """
        loginURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect interactive logins will be redirected here ${url} is replaced with the current URL, escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query} Required when login is set to true.
        """
        return pulumi.get(self, "login_url")

    @property
    @pulumi.getter(name="nameHeaders")
    def name_headers(self) -> Optional[Sequence[str]]:
        """
        nameHeaders is the set of headers to check for the display name
        """
        return pulumi.get(self, "name_headers")

    @property
    @pulumi.getter(name="preferredUsernameHeaders")
    def preferred_username_headers(self) -> Optional[Sequence[str]]:
        """
        preferredUsernameHeaders is the set of headers to check for the preferred username
        """
        return pulumi.get(self, "preferred_username_headers")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncIdentityProviderSpecIdentityProvidersRequestHeaderCa(dict):
    """
    ca is a required reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. Specifically, it allows verification of incoming requests to prevent header spoofing. The key "ca.crt" is used to locate the data. If the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. The namespace for this config map is openshift-config.
    """
    def __init__(__self__, *,
                 name: str):
        """
        ca is a required reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. Specifically, it allows verification of incoming requests to prevent header spoofing. The key "ca.crt" is used to locate the data. If the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. The namespace for this config map is openshift-config.
        :param str name: name is the metadata.name of the referenced config map
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the metadata.name of the referenced config map
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncSetSpec(dict):
    """
    SyncSetSpec defines the SyncSetCommonSpec resources and patches to sync along with ClusterDeploymentRefs indicating which clusters the SyncSet applies to in the SyncSet's namespace.
    """
    def __init__(__self__, *,
                 cluster_deployment_refs: Sequence['outputs.SyncSetSpecClusterDeploymentRefs'],
                 apply_behavior: Optional[str] = None,
                 patches: Optional[Sequence['outputs.SyncSetSpecPatches']] = None,
                 resource_apply_mode: Optional[str] = None,
                 resources: Optional[Sequence[Mapping[str, Any]]] = None,
                 secret_mappings: Optional[Sequence['outputs.SyncSetSpecSecretMappings']] = None):
        """
        SyncSetSpec defines the SyncSetCommonSpec resources and patches to sync along with ClusterDeploymentRefs indicating which clusters the SyncSet applies to in the SyncSet's namespace.
        :param Sequence['SyncSetSpecClusterDeploymentRefsArgs'] cluster_deployment_refs: ClusterDeploymentRefs is the list of LocalObjectReference indicating which clusters the SyncSet applies to in the SyncSet's namespace.
        :param str apply_behavior: ApplyBehavior indicates how resources in this syncset will be applied to the target cluster. The default value of "Apply" indicates that resources should be applied using the 'oc apply' command. If no value is set, "Apply" is assumed. A value of "CreateOnly" indicates that the resource will only be created if it does not already exist in the target cluster. Otherwise, it will be left alone. A value of "CreateOrUpdate" indicates that the resource will be created/updated without the use of the 'oc apply' command, allowing larger resources to be synced, but losing some functionality of the 'oc apply' command such as the ability to remove annotations, labels, and other map entries in general.
        :param Sequence['SyncSetSpecPatchesArgs'] patches: Patches is the list of patches to apply.
        :param str resource_apply_mode: ResourceApplyMode indicates if the Resource apply mode is "Upsert" (default) or "Sync". ApplyMode "Upsert" indicates create and update. ApplyMode "Sync" indicates create, update and delete.
        :param Sequence[Mapping[str, Any]] resources: Resources is the list of objects to sync from RawExtension definitions.
        :param Sequence['SyncSetSpecSecretMappingsArgs'] secret_mappings: Secrets is the list of secrets to sync along with their respective destinations.
        """
        pulumi.set(__self__, "cluster_deployment_refs", cluster_deployment_refs)
        if apply_behavior is not None:
            pulumi.set(__self__, "apply_behavior", apply_behavior)
        if patches is not None:
            pulumi.set(__self__, "patches", patches)
        if resource_apply_mode is not None:
            pulumi.set(__self__, "resource_apply_mode", resource_apply_mode)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if secret_mappings is not None:
            pulumi.set(__self__, "secret_mappings", secret_mappings)

    @property
    @pulumi.getter(name="clusterDeploymentRefs")
    def cluster_deployment_refs(self) -> Sequence['outputs.SyncSetSpecClusterDeploymentRefs']:
        """
        ClusterDeploymentRefs is the list of LocalObjectReference indicating which clusters the SyncSet applies to in the SyncSet's namespace.
        """
        return pulumi.get(self, "cluster_deployment_refs")

    @property
    @pulumi.getter(name="applyBehavior")
    def apply_behavior(self) -> Optional[str]:
        """
        ApplyBehavior indicates how resources in this syncset will be applied to the target cluster. The default value of "Apply" indicates that resources should be applied using the 'oc apply' command. If no value is set, "Apply" is assumed. A value of "CreateOnly" indicates that the resource will only be created if it does not already exist in the target cluster. Otherwise, it will be left alone. A value of "CreateOrUpdate" indicates that the resource will be created/updated without the use of the 'oc apply' command, allowing larger resources to be synced, but losing some functionality of the 'oc apply' command such as the ability to remove annotations, labels, and other map entries in general.
        """
        return pulumi.get(self, "apply_behavior")

    @property
    @pulumi.getter
    def patches(self) -> Optional[Sequence['outputs.SyncSetSpecPatches']]:
        """
        Patches is the list of patches to apply.
        """
        return pulumi.get(self, "patches")

    @property
    @pulumi.getter(name="resourceApplyMode")
    def resource_apply_mode(self) -> Optional[str]:
        """
        ResourceApplyMode indicates if the Resource apply mode is "Upsert" (default) or "Sync". ApplyMode "Upsert" indicates create and update. ApplyMode "Sync" indicates create, update and delete.
        """
        return pulumi.get(self, "resource_apply_mode")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence[Mapping[str, Any]]]:
        """
        Resources is the list of objects to sync from RawExtension definitions.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="secretMappings")
    def secret_mappings(self) -> Optional[Sequence['outputs.SyncSetSpecSecretMappings']]:
        """
        Secrets is the list of secrets to sync along with their respective destinations.
        """
        return pulumi.get(self, "secret_mappings")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncSetSpecClusterDeploymentRefs(dict):
    """
    LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncSetSpecPatches(dict):
    """
    SyncObjectPatch represents a patch to be applied to a specific object
    """
    def __init__(__self__, *,
                 api_version: str,
                 kind: str,
                 name: str,
                 patch: str,
                 namespace: Optional[str] = None,
                 patch_type: Optional[str] = None):
        """
        SyncObjectPatch represents a patch to be applied to a specific object
        :param str api_version: APIVersion is the Group and Version of the object to be patched.
        :param str kind: Kind is the Kind of the object to be patched.
        :param str name: Name is the name of the object to be patched.
        :param str patch: Patch is the patch to apply.
        :param str namespace: Namespace is the Namespace in which the object to patch exists. Defaults to the SyncSet's Namespace.
        :param str patch_type: PatchType indicates the PatchType as "strategic" (default), "json", or "merge".
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "patch", patch)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if patch_type is not None:
            pulumi.set(__self__, "patch_type", patch_type)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        APIVersion is the Group and Version of the object to be patched.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind is the Kind of the object to be patched.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the object to be patched.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def patch(self) -> str:
        """
        Patch is the patch to apply.
        """
        return pulumi.get(self, "patch")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the Namespace in which the object to patch exists. Defaults to the SyncSet's Namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="patchType")
    def patch_type(self) -> Optional[str]:
        """
        PatchType indicates the PatchType as "strategic" (default), "json", or "merge".
        """
        return pulumi.get(self, "patch_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncSetSpecSecretMappings(dict):
    """
    SecretMapping defines a source and destination for a secret to be synced by a SyncSet
    """
    def __init__(__self__, *,
                 source_ref: 'outputs.SyncSetSpecSecretMappingsSourceRef',
                 target_ref: 'outputs.SyncSetSpecSecretMappingsTargetRef'):
        """
        SecretMapping defines a source and destination for a secret to be synced by a SyncSet
        :param 'SyncSetSpecSecretMappingsSourceRefArgs' source_ref: SourceRef specifies the name and namespace of a secret on the management cluster
        :param 'SyncSetSpecSecretMappingsTargetRefArgs' target_ref: TargetRef specifies the target name and namespace of the secret on the target cluster
        """
        pulumi.set(__self__, "source_ref", source_ref)
        pulumi.set(__self__, "target_ref", target_ref)

    @property
    @pulumi.getter(name="sourceRef")
    def source_ref(self) -> 'outputs.SyncSetSpecSecretMappingsSourceRef':
        """
        SourceRef specifies the name and namespace of a secret on the management cluster
        """
        return pulumi.get(self, "source_ref")

    @property
    @pulumi.getter(name="targetRef")
    def target_ref(self) -> 'outputs.SyncSetSpecSecretMappingsTargetRef':
        """
        TargetRef specifies the target name and namespace of the secret on the target cluster
        """
        return pulumi.get(self, "target_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncSetSpecSecretMappingsSourceRef(dict):
    """
    SourceRef specifies the name and namespace of a secret on the management cluster
    """
    def __init__(__self__, *,
                 name: str,
                 namespace: Optional[str] = None):
        """
        SourceRef specifies the name and namespace of a secret on the management cluster
        :param str name: Name is the name of the secret
        :param str namespace: Namespace is the namespace where the secret lives. If not present for the source secret reference, it is assumed to be the same namespace as the syncset with the reference.
        """
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the secret
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the namespace where the secret lives. If not present for the source secret reference, it is assumed to be the same namespace as the syncset with the reference.
        """
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SyncSetSpecSecretMappingsTargetRef(dict):
    """
    TargetRef specifies the target name and namespace of the secret on the target cluster
    """
    def __init__(__self__, *,
                 name: str,
                 namespace: Optional[str] = None):
        """
        TargetRef specifies the target name and namespace of the secret on the target cluster
        :param str name: Name is the name of the secret
        :param str namespace: Namespace is the namespace where the secret lives. If not present for the source secret reference, it is assumed to be the same namespace as the syncset with the reference.
        """
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the secret
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the namespace where the secret lives. If not present for the source secret reference, it is assumed to be the same namespace as the syncset with the reference.
        """
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



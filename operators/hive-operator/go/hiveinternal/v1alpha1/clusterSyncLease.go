// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ClusterSyncLease is a record of the last time that SyncSets and SelectorSyncSets were applied to a cluster.
type ClusterSyncLease struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// ClusterSyncLeaseSpec is the specification of a ClusterSyncLease.
	Spec ClusterSyncLeaseSpecPtrOutput `pulumi:"spec"`
}

// NewClusterSyncLease registers a new resource with the given unique name, arguments, and options.
func NewClusterSyncLease(ctx *pulumi.Context,
	name string, args *ClusterSyncLeaseArgs, opts ...pulumi.ResourceOption) (*ClusterSyncLease, error) {
	if args == nil {
		args = &ClusterSyncLeaseArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("hiveinternal.openshift.io/v1alpha1")
	args.Kind = pulumi.StringPtr("ClusterSyncLease")
	var resource ClusterSyncLease
	err := ctx.RegisterResource("kubernetes:hiveinternal.openshift.io/v1alpha1:ClusterSyncLease", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterSyncLease gets an existing ClusterSyncLease resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterSyncLease(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterSyncLeaseState, opts ...pulumi.ResourceOption) (*ClusterSyncLease, error) {
	var resource ClusterSyncLease
	err := ctx.ReadResource("kubernetes:hiveinternal.openshift.io/v1alpha1:ClusterSyncLease", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterSyncLease resources.
type clusterSyncLeaseState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ClusterSyncLeaseSpec is the specification of a ClusterSyncLease.
	Spec *ClusterSyncLeaseSpec `pulumi:"spec"`
}

type ClusterSyncLeaseState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// ClusterSyncLeaseSpec is the specification of a ClusterSyncLease.
	Spec ClusterSyncLeaseSpecPtrInput
}

func (ClusterSyncLeaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterSyncLeaseState)(nil)).Elem()
}

type clusterSyncLeaseArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ClusterSyncLeaseSpec is the specification of a ClusterSyncLease.
	Spec *ClusterSyncLeaseSpec `pulumi:"spec"`
}

// The set of arguments for constructing a ClusterSyncLease resource.
type ClusterSyncLeaseArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// ClusterSyncLeaseSpec is the specification of a ClusterSyncLease.
	Spec ClusterSyncLeaseSpecPtrInput
}

func (ClusterSyncLeaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterSyncLeaseArgs)(nil)).Elem()
}

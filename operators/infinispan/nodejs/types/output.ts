// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace infinispan {
    export namespace v1 {
        /**
         * InfinispanSpec defines the desired state of Infinispan
         */
        export interface InfinispanSpec {
            /**
             * Autoscale describe autoscaling configuration for the cluster
             */
            autoscale?: outputs.infinispan.v1.InfinispanSpecAutoscale;
            /**
             * InfinispanContainerSpec specify resource requirements per container
             */
            container?: outputs.infinispan.v1.InfinispanSpecContainer;
            /**
             * ExposeSpec describe how Infinispan will be exposed externally
             */
            expose?: outputs.infinispan.v1.InfinispanSpecExpose;
            image?: string;
            logging?: outputs.infinispan.v1.InfinispanSpecLogging;
            replicas: number;
            /**
             * InfinispanSecurity info for the user application connection
             */
            security?: outputs.infinispan.v1.InfinispanSpecSecurity;
            /**
             * InfinispanServiceSpec specify configuration for specific service
             */
            service?: outputs.infinispan.v1.InfinispanSpecService;
        }

        /**
         * Autoscale describe autoscaling configuration for the cluster
         */
        export interface InfinispanSpecAutoscale {
            maxMemUsagePercent: number;
            maxReplicas: number;
            minMemUsagePercent: number;
            minReplicas: number;
        }

        /**
         * InfinispanContainerSpec specify resource requirements per container
         */
        export interface InfinispanSpecContainer {
            cpu?: string;
            extraJvmOpts?: string;
            memory?: string;
        }

        /**
         * ExposeSpec describe how Infinispan will be exposed externally
         */
        export interface InfinispanSpecExpose {
            host?: string;
            nodePort?: number;
            /**
             * Type specifies different exposition methods for datagrid
             */
            type: string;
        }

        export interface InfinispanSpecLogging {
            categories?: {[key: string]: string};
        }

        /**
         * InfinispanSecurity info for the user application connection
         */
        export interface InfinispanSpecSecurity {
            /**
             * EndpointEncryption configuration
             */
            endpointEncryption?: outputs.infinispan.v1.InfinispanSpecSecurityEndpointEncryption;
            endpointSecretName?: string;
        }

        /**
         * EndpointEncryption configuration
         */
        export interface InfinispanSpecSecurityEndpointEncryption {
            certSecretName?: string;
            certServiceName?: string;
            type: string;
        }

        /**
         * InfinispanServiceSpec specify configuration for specific service
         */
        export interface InfinispanSpecService {
            /**
             * InfinispanServiceContainerSpec resource requirements specific for service
             */
            container?: outputs.infinispan.v1.InfinispanSpecServiceContainer;
            replicationFactor?: number;
            sites?: outputs.infinispan.v1.InfinispanSpecServiceSites;
            type: string;
        }

        /**
         * InfinispanServiceContainerSpec resource requirements specific for service
         */
        export interface InfinispanSpecServiceContainer {
            storage: string;
        }

        export interface InfinispanSpecServiceSites {
            local: outputs.infinispan.v1.InfinispanSpecServiceSitesLocal;
            locations?: outputs.infinispan.v1.InfinispanSpecServiceSitesLocations[];
        }

        export interface InfinispanSpecServiceSitesLocal {
            /**
             * ExposeSpec describe how Infinispan will be exposed externally
             */
            expose: outputs.infinispan.v1.InfinispanSpecServiceSitesLocalExpose;
            name: string;
        }

        /**
         * ExposeSpec describe how Infinispan will be exposed externally
         */
        export interface InfinispanSpecServiceSitesLocalExpose {
            host?: string;
            nodePort?: number;
            /**
             * Type specifies different exposition methods for datagrid
             */
            type: string;
        }

        export interface InfinispanSpecServiceSitesLocations {
            name: string;
            secretName: string;
            url: string;
        }

        /**
         * InfinispanStatus defines the observed state of Infinispan
         */
        export interface InfinispanStatus {
            /**
             * Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file
             */
            conditions?: outputs.infinispan.v1.InfinispanStatusConditions[];
            replicasWantedAtRestart?: number;
            /**
             * InfinispanSecurity info for the user application connection
             */
            security: outputs.infinispan.v1.InfinispanStatusSecurity;
            statefulSetName: string;
        }

        /**
         * InfinispanCondition define a condition of the cluster
         */
        export interface InfinispanStatusConditions {
            /**
             * Human-readable message indicating details about last transition.
             */
            message: string;
            /**
             * Status is the status of the condition.
             */
            status: string;
            /**
             * Type is the type of the condition.
             */
            type: string;
        }

        /**
         * InfinispanSecurity info for the user application connection
         */
        export interface InfinispanStatusSecurity {
            /**
             * EndpointEncryption configuration
             */
            endpointEncryption?: outputs.infinispan.v1.InfinispanStatusSecurityEndpointEncryption;
            endpointSecretName?: string;
        }

        /**
         * EndpointEncryption configuration
         */
        export interface InfinispanStatusSecurityEndpointEncryption {
            certSecretName?: string;
            certServiceName?: string;
            type: string;
        }
    }

    export namespace v2alpha1 {
        /**
         * CacheSpec defines the desired state of Cache
         */
        export interface CacheSpec {
            /**
             * Authentication info
             */
            adminAuth?: outputs.infinispan.v2alpha1.CacheSpecAdminAuth;
            /**
             * Name of the cluster where to create the cache
             */
            clusterName?: string;
            /**
             * Name of the cache to be created. If empty ObjectMeta.Name will be used
             */
            name?: string;
            /**
             * Cache template in XML format
             */
            template?: string;
            /**
             * Name of the template to be used to create this cache
             */
            templateName?: string;
        }

        /**
         * Authentication info
         */
        export interface CacheSpecAdminAuth {
            /**
             * Secret and key containing the admin password for authentication.
             */
            password?: outputs.infinispan.v2alpha1.CacheSpecAdminAuthPassword;
            /**
             * name of the secret containing both admin username and password
             */
            secretName?: string;
            /**
             * Secret and key containing the admin username for authentication.
             */
            username?: outputs.infinispan.v2alpha1.CacheSpecAdminAuthUsername;
        }

        /**
         * Secret and key containing the admin password for authentication.
         */
        export interface CacheSpecAdminAuthPassword {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Secret and key containing the admin username for authentication.
         */
        export interface CacheSpecAdminAuthUsername {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * CacheStatus defines the observed state of Cache
         */
        export interface CacheStatus {
            /**
             * Conditions list for this cache
             */
            conditions?: outputs.infinispan.v2alpha1.CacheStatusConditions[];
            /**
             * Service name that exposes the cache inside the cluster
             */
            serviceName?: string;
        }

        /**
         * CacheCondition define a condition of the cluster
         */
        export interface CacheStatusConditions {
            /**
             * Human-readable message indicating details about last transition.
             */
            message?: string;
            /**
             * Status is the status of the condition.
             */
            status: string;
            /**
             * Type is the type of the condition.
             */
            type: string;
        }
    }
}

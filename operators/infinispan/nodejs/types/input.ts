// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace infinispan {
    export namespace v1 {
        /**
         * InfinispanSpec defines the desired state of Infinispan
         */
        export interface InfinispanSpec {
            /**
             * Autoscale describe autoscaling configuration for the cluster
             */
            autoscale?: pulumi.Input<inputs.infinispan.v1.InfinispanSpecAutoscale>;
            /**
             * InfinispanContainerSpec specify resource requirements per container
             */
            container?: pulumi.Input<inputs.infinispan.v1.InfinispanSpecContainer>;
            /**
             * ExposeSpec describe how Infinispan will be exposed externally
             */
            expose?: pulumi.Input<inputs.infinispan.v1.InfinispanSpecExpose>;
            image?: pulumi.Input<string>;
            logging?: pulumi.Input<inputs.infinispan.v1.InfinispanSpecLogging>;
            replicas: pulumi.Input<number>;
            /**
             * InfinispanSecurity info for the user application connection
             */
            security?: pulumi.Input<inputs.infinispan.v1.InfinispanSpecSecurity>;
            /**
             * InfinispanServiceSpec specify configuration for specific service
             */
            service?: pulumi.Input<inputs.infinispan.v1.InfinispanSpecService>;
        }

        /**
         * Autoscale describe autoscaling configuration for the cluster
         */
        export interface InfinispanSpecAutoscale {
            maxMemUsagePercent: pulumi.Input<number>;
            maxReplicas: pulumi.Input<number>;
            minMemUsagePercent: pulumi.Input<number>;
            minReplicas: pulumi.Input<number>;
        }

        /**
         * InfinispanContainerSpec specify resource requirements per container
         */
        export interface InfinispanSpecContainer {
            cpu?: pulumi.Input<string>;
            extraJvmOpts?: pulumi.Input<string>;
            memory?: pulumi.Input<string>;
        }

        /**
         * ExposeSpec describe how Infinispan will be exposed externally
         */
        export interface InfinispanSpecExpose {
            host?: pulumi.Input<string>;
            nodePort?: pulumi.Input<number>;
            /**
             * Type specifies different exposition methods for datagrid
             */
            type: pulumi.Input<string>;
        }

        export interface InfinispanSpecLogging {
            categories?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * InfinispanSecurity info for the user application connection
         */
        export interface InfinispanSpecSecurity {
            /**
             * EndpointEncryption configuration
             */
            endpointEncryption?: pulumi.Input<inputs.infinispan.v1.InfinispanSpecSecurityEndpointEncryption>;
            endpointSecretName?: pulumi.Input<string>;
        }

        /**
         * EndpointEncryption configuration
         */
        export interface InfinispanSpecSecurityEndpointEncryption {
            certSecretName?: pulumi.Input<string>;
            certServiceName?: pulumi.Input<string>;
            type: pulumi.Input<string>;
        }

        /**
         * InfinispanServiceSpec specify configuration for specific service
         */
        export interface InfinispanSpecService {
            /**
             * InfinispanServiceContainerSpec resource requirements specific for service
             */
            container?: pulumi.Input<inputs.infinispan.v1.InfinispanSpecServiceContainer>;
            replicationFactor?: pulumi.Input<number>;
            sites?: pulumi.Input<inputs.infinispan.v1.InfinispanSpecServiceSites>;
            type: pulumi.Input<string>;
        }

        /**
         * InfinispanServiceContainerSpec resource requirements specific for service
         */
        export interface InfinispanSpecServiceContainer {
            storage: pulumi.Input<string>;
        }

        export interface InfinispanSpecServiceSites {
            local: pulumi.Input<inputs.infinispan.v1.InfinispanSpecServiceSitesLocal>;
            locations?: pulumi.Input<pulumi.Input<inputs.infinispan.v1.InfinispanSpecServiceSitesLocations>[]>;
        }

        export interface InfinispanSpecServiceSitesLocal {
            /**
             * ExposeSpec describe how Infinispan will be exposed externally
             */
            expose: pulumi.Input<inputs.infinispan.v1.InfinispanSpecServiceSitesLocalExpose>;
            name: pulumi.Input<string>;
        }

        /**
         * ExposeSpec describe how Infinispan will be exposed externally
         */
        export interface InfinispanSpecServiceSitesLocalExpose {
            host?: pulumi.Input<string>;
            nodePort?: pulumi.Input<number>;
            /**
             * Type specifies different exposition methods for datagrid
             */
            type: pulumi.Input<string>;
        }

        export interface InfinispanSpecServiceSitesLocations {
            name: pulumi.Input<string>;
            secretName: pulumi.Input<string>;
            url: pulumi.Input<string>;
        }

        /**
         * InfinispanStatus defines the observed state of Infinispan
         */
        export interface InfinispanStatus {
            /**
             * Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.infinispan.v1.InfinispanStatusConditions>[]>;
            replicasWantedAtRestart?: pulumi.Input<number>;
            /**
             * InfinispanSecurity info for the user application connection
             */
            security: pulumi.Input<inputs.infinispan.v1.InfinispanStatusSecurity>;
            statefulSetName: pulumi.Input<string>;
        }

        /**
         * InfinispanCondition define a condition of the cluster
         */
        export interface InfinispanStatusConditions {
            /**
             * Human-readable message indicating details about last transition.
             */
            message: pulumi.Input<string>;
            /**
             * Status is the status of the condition.
             */
            status: pulumi.Input<string>;
            /**
             * Type is the type of the condition.
             */
            type: pulumi.Input<string>;
        }

        /**
         * InfinispanSecurity info for the user application connection
         */
        export interface InfinispanStatusSecurity {
            /**
             * EndpointEncryption configuration
             */
            endpointEncryption?: pulumi.Input<inputs.infinispan.v1.InfinispanStatusSecurityEndpointEncryption>;
            endpointSecretName?: pulumi.Input<string>;
        }

        /**
         * EndpointEncryption configuration
         */
        export interface InfinispanStatusSecurityEndpointEncryption {
            certSecretName?: pulumi.Input<string>;
            certServiceName?: pulumi.Input<string>;
            type: pulumi.Input<string>;
        }
    }

    export namespace v2alpha1 {
        /**
         * CacheSpec defines the desired state of Cache
         */
        export interface CacheSpec {
            /**
             * Authentication info
             */
            adminAuth?: pulumi.Input<inputs.infinispan.v2alpha1.CacheSpecAdminAuth>;
            /**
             * Name of the cluster where to create the cache
             */
            clusterName?: pulumi.Input<string>;
            /**
             * Name of the cache to be created. If empty ObjectMeta.Name will be used
             */
            name?: pulumi.Input<string>;
            /**
             * Cache template in XML format
             */
            template?: pulumi.Input<string>;
            /**
             * Name of the template to be used to create this cache
             */
            templateName?: pulumi.Input<string>;
        }

        /**
         * Authentication info
         */
        export interface CacheSpecAdminAuth {
            /**
             * Secret and key containing the admin password for authentication.
             */
            password?: pulumi.Input<inputs.infinispan.v2alpha1.CacheSpecAdminAuthPassword>;
            /**
             * name of the secret containing both admin username and password
             */
            secretName?: pulumi.Input<string>;
            /**
             * Secret and key containing the admin username for authentication.
             */
            username?: pulumi.Input<inputs.infinispan.v2alpha1.CacheSpecAdminAuthUsername>;
        }

        /**
         * Secret and key containing the admin password for authentication.
         */
        export interface CacheSpecAdminAuthPassword {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret and key containing the admin username for authentication.
         */
        export interface CacheSpecAdminAuthUsername {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * CacheStatus defines the observed state of Cache
         */
        export interface CacheStatus {
            /**
             * Conditions list for this cache
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.infinispan.v2alpha1.CacheStatusConditions>[]>;
            /**
             * Service name that exposes the cache inside the cluster
             */
            serviceName?: pulumi.Input<string>;
        }

        /**
         * CacheCondition define a condition of the cluster
         */
        export interface CacheStatusConditions {
            /**
             * Human-readable message indicating details about last transition.
             */
            message?: pulumi.Input<string>;
            /**
             * Status is the status of the condition.
             */
            status: pulumi.Input<string>;
            /**
             * Type is the type of the condition.
             */
            type: pulumi.Input<string>;
        }
    }
}

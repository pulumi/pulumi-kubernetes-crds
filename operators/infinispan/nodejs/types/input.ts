// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace infinispan {
    export namespace v1 {
        /**
         * InfinispanSpec defines the desired state of Infinispan
         */
        export interface InfinispanSpec {
            /**
             * Affinity is a group of affinity scheduling rules.
             */
            affinity?: pulumi.Input<inputs.infinispan.v1.InfinispanSpecAffinity>;
            /**
             * Autoscale describe autoscaling configuration for the cluster
             */
            autoscale?: pulumi.Input<inputs.infinispan.v1.InfinispanSpecAutoscale>;
            /**
             * InfinispanContainerSpec specify resource requirements per container
             */
            container?: pulumi.Input<inputs.infinispan.v1.InfinispanSpecContainer>;
            /**
             * ExposeSpec describe how Infinispan will be exposed externally
             */
            expose?: pulumi.Input<inputs.infinispan.v1.InfinispanSpecExpose>;
            image?: pulumi.Input<string>;
            logging?: pulumi.Input<inputs.infinispan.v1.InfinispanSpecLogging>;
            replicas: pulumi.Input<number>;
            /**
             * InfinispanSecurity info for the user application connection
             */
            security?: pulumi.Input<inputs.infinispan.v1.InfinispanSpecSecurity>;
            /**
             * InfinispanServiceSpec specify configuration for specific service
             */
            service?: pulumi.Input<inputs.infinispan.v1.InfinispanSpecService>;
        }

        /**
         * Affinity is a group of affinity scheduling rules.
         */
        export interface InfinispanSpecAffinity {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.infinispan.v1.InfinispanSpecAffinityNodeAffinity>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.infinispan.v1.InfinispanSpecAffinityPodAffinity>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.infinispan.v1.InfinispanSpecAffinityPodAntiAffinity>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface InfinispanSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.infinispan.v1.InfinispanSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.infinispan.v1.InfinispanSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface InfinispanSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.infinispan.v1.InfinispanSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface InfinispanSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.infinispan.v1.InfinispanSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.infinispan.v1.InfinispanSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface InfinispanSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface InfinispanSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface InfinispanSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.infinispan.v1.InfinispanSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface InfinispanSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.infinispan.v1.InfinispanSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.infinispan.v1.InfinispanSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface InfinispanSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface InfinispanSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface InfinispanSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.infinispan.v1.InfinispanSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.infinispan.v1.InfinispanSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface InfinispanSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.infinispan.v1.InfinispanSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface InfinispanSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.infinispan.v1.InfinispanSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface InfinispanSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.infinispan.v1.InfinispanSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface InfinispanSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface InfinispanSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.infinispan.v1.InfinispanSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface InfinispanSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.infinispan.v1.InfinispanSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface InfinispanSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface InfinispanSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.infinispan.v1.InfinispanSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.infinispan.v1.InfinispanSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface InfinispanSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.infinispan.v1.InfinispanSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface InfinispanSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.infinispan.v1.InfinispanSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface InfinispanSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.infinispan.v1.InfinispanSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface InfinispanSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface InfinispanSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.infinispan.v1.InfinispanSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface InfinispanSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.infinispan.v1.InfinispanSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface InfinispanSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Autoscale describe autoscaling configuration for the cluster
         */
        export interface InfinispanSpecAutoscale {
            disabled?: pulumi.Input<boolean>;
            maxMemUsagePercent: pulumi.Input<number>;
            maxReplicas: pulumi.Input<number>;
            minMemUsagePercent: pulumi.Input<number>;
            minReplicas: pulumi.Input<number>;
        }

        /**
         * InfinispanContainerSpec specify resource requirements per container
         */
        export interface InfinispanSpecContainer {
            cpu?: pulumi.Input<string>;
            extraJvmOpts?: pulumi.Input<string>;
            memory?: pulumi.Input<string>;
        }

        /**
         * ExposeSpec describe how Infinispan will be exposed externally
         */
        export interface InfinispanSpecExpose {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            host?: pulumi.Input<string>;
            nodePort?: pulumi.Input<number>;
            /**
             * Type specifies different exposition methods for data grid
             */
            type: pulumi.Input<string>;
        }

        export interface InfinispanSpecLogging {
            categories?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * InfinispanSecurity info for the user application connection
         */
        export interface InfinispanSpecSecurity {
            /**
             * EndpointEncryption configuration
             */
            endpointEncryption?: pulumi.Input<inputs.infinispan.v1.InfinispanSpecSecurityEndpointEncryption>;
            endpointSecretName?: pulumi.Input<string>;
        }

        /**
         * EndpointEncryption configuration
         */
        export interface InfinispanSpecSecurityEndpointEncryption {
            certSecretName?: pulumi.Input<string>;
            certServiceName?: pulumi.Input<string>;
            /**
             * CertificateSourceType specifies all the possible sources for the encryption certificate
             */
            type?: pulumi.Input<string>;
        }

        /**
         * InfinispanServiceSpec specify configuration for specific service
         */
        export interface InfinispanSpecService {
            /**
             * InfinispanServiceContainerSpec resource requirements specific for service
             */
            container?: pulumi.Input<inputs.infinispan.v1.InfinispanSpecServiceContainer>;
            replicationFactor?: pulumi.Input<number>;
            sites?: pulumi.Input<inputs.infinispan.v1.InfinispanSpecServiceSites>;
            type: pulumi.Input<string>;
        }

        /**
         * InfinispanServiceContainerSpec resource requirements specific for service
         */
        export interface InfinispanSpecServiceContainer {
            ephemeralStorage?: pulumi.Input<boolean>;
            storage?: pulumi.Input<string>;
            storageClassName?: pulumi.Input<string>;
        }

        export interface InfinispanSpecServiceSites {
            local: pulumi.Input<inputs.infinispan.v1.InfinispanSpecServiceSitesLocal>;
            locations?: pulumi.Input<pulumi.Input<inputs.infinispan.v1.InfinispanSpecServiceSitesLocations>[]>;
        }

        export interface InfinispanSpecServiceSitesLocal {
            /**
             * ExposeSpec describe how Infinispan will be exposed externally
             */
            expose: pulumi.Input<inputs.infinispan.v1.InfinispanSpecServiceSitesLocalExpose>;
            name: pulumi.Input<string>;
        }

        /**
         * ExposeSpec describe how Infinispan will be exposed externally
         */
        export interface InfinispanSpecServiceSitesLocalExpose {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            host?: pulumi.Input<string>;
            nodePort?: pulumi.Input<number>;
            /**
             * Type specifies different exposition methods for data grid
             */
            type: pulumi.Input<string>;
        }

        export interface InfinispanSpecServiceSitesLocations {
            host?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            port?: pulumi.Input<number>;
            secretName?: pulumi.Input<string>;
            url?: pulumi.Input<string>;
        }

        /**
         * InfinispanStatus defines the observed state of Infinispan
         */
        export interface InfinispanStatus {
            conditions?: pulumi.Input<pulumi.Input<inputs.infinispan.v1.InfinispanStatusConditions>[]>;
            replicasWantedAtRestart?: pulumi.Input<number>;
            /**
             * InfinispanSecurity info for the user application connection
             */
            security: pulumi.Input<inputs.infinispan.v1.InfinispanStatusSecurity>;
            statefulSetName?: pulumi.Input<string>;
        }

        /**
         * InfinispanCondition define a condition of the cluster
         */
        export interface InfinispanStatusConditions {
            /**
             * Human-readable message indicating details about last transition.
             */
            message?: pulumi.Input<string>;
            /**
             * Status is the status of the condition.
             */
            status: pulumi.Input<string>;
            /**
             * Type is the type of the condition.
             */
            type: pulumi.Input<string>;
        }

        /**
         * InfinispanSecurity info for the user application connection
         */
        export interface InfinispanStatusSecurity {
            /**
             * EndpointEncryption configuration
             */
            endpointEncryption?: pulumi.Input<inputs.infinispan.v1.InfinispanStatusSecurityEndpointEncryption>;
            endpointSecretName?: pulumi.Input<string>;
        }

        /**
         * EndpointEncryption configuration
         */
        export interface InfinispanStatusSecurityEndpointEncryption {
            certSecretName?: pulumi.Input<string>;
            certServiceName?: pulumi.Input<string>;
            /**
             * CertificateSourceType specifies all the possible sources for the encryption certificate
             */
            type?: pulumi.Input<string>;
        }
    }

    export namespace v2alpha1 {
        /**
         * BackupSpec defines the desired state of Backup
         */
        export interface BackupSpec {
            cluster: pulumi.Input<string>;
            /**
             * InfinispanContainerSpec specify resource requirements per container
             */
            container?: pulumi.Input<inputs.infinispan.v2alpha1.BackupSpecContainer>;
            resources?: pulumi.Input<inputs.infinispan.v2alpha1.BackupSpecResources>;
            volume?: pulumi.Input<inputs.infinispan.v2alpha1.BackupSpecVolume>;
        }

        /**
         * InfinispanContainerSpec specify resource requirements per container
         */
        export interface BackupSpecContainer {
            cpu?: pulumi.Input<string>;
            extraJvmOpts?: pulumi.Input<string>;
            memory?: pulumi.Input<string>;
        }

        export interface BackupSpecResources {
            cacheConfigs?: pulumi.Input<pulumi.Input<string>[]>;
            caches?: pulumi.Input<pulumi.Input<string>[]>;
            counters?: pulumi.Input<pulumi.Input<string>[]>;
            protoSchemas?: pulumi.Input<pulumi.Input<string>[]>;
            scripts?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface BackupSpecVolume {
            storage?: pulumi.Input<string>;
            storageClassName?: pulumi.Input<string>;
        }

        /**
         * BackupStatus defines the observed state of Backup
         */
        export interface BackupStatus {
            /**
             * State indicates the current state of the backup operation
             */
            phase: pulumi.Input<string>;
            /**
             * The name of the created PersistentVolumeClaim used to store the backup
             */
            pvc?: pulumi.Input<string>;
            /**
             * Reason indicates the reason for any backup related failures.
             */
            reason?: pulumi.Input<string>;
        }

        /**
         * CacheSpec defines the desired state of Cache
         */
        export interface CacheSpec {
            /**
             * Authentication info
             */
            adminAuth?: pulumi.Input<inputs.infinispan.v2alpha1.CacheSpecAdminAuth>;
            /**
             * Name of the cluster where to create the cache
             */
            clusterName?: pulumi.Input<string>;
            /**
             * Name of the cache to be created. If empty ObjectMeta.Name will be used
             */
            name?: pulumi.Input<string>;
            /**
             * Cache template in XML format
             */
            template?: pulumi.Input<string>;
            /**
             * Name of the template to be used to create this cache
             */
            templateName?: pulumi.Input<string>;
        }

        /**
         * Authentication info
         */
        export interface CacheSpecAdminAuth {
            /**
             * Secret and key containing the admin password for authentication.
             */
            password?: pulumi.Input<inputs.infinispan.v2alpha1.CacheSpecAdminAuthPassword>;
            /**
             * name of the secret containing both admin username and password
             */
            secretName?: pulumi.Input<string>;
            /**
             * Secret and key containing the admin username for authentication.
             */
            username?: pulumi.Input<inputs.infinispan.v2alpha1.CacheSpecAdminAuthUsername>;
        }

        /**
         * Secret and key containing the admin password for authentication.
         */
        export interface CacheSpecAdminAuthPassword {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret and key containing the admin username for authentication.
         */
        export interface CacheSpecAdminAuthUsername {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * CacheStatus defines the observed state of Cache
         */
        export interface CacheStatus {
            /**
             * Conditions list for this cache
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.infinispan.v2alpha1.CacheStatusConditions>[]>;
            /**
             * Service name that exposes the cache inside the cluster
             */
            serviceName?: pulumi.Input<string>;
        }

        /**
         * CacheCondition define a condition of the cluster
         */
        export interface CacheStatusConditions {
            /**
             * Human-readable message indicating details about last transition.
             */
            message?: pulumi.Input<string>;
            /**
             * Status is the status of the condition.
             */
            status: pulumi.Input<string>;
            /**
             * Type is the type of the condition.
             */
            type: pulumi.Input<string>;
        }

        /**
         * BackupSpec defines the desired state of Backup
         */
        export interface RestoreSpec {
            backup: pulumi.Input<string>;
            cluster: pulumi.Input<string>;
            /**
             * InfinispanContainerSpec specify resource requirements per container
             */
            container?: pulumi.Input<inputs.infinispan.v2alpha1.RestoreSpecContainer>;
            resources?: pulumi.Input<inputs.infinispan.v2alpha1.RestoreSpecResources>;
        }

        /**
         * InfinispanContainerSpec specify resource requirements per container
         */
        export interface RestoreSpecContainer {
            cpu?: pulumi.Input<string>;
            extraJvmOpts?: pulumi.Input<string>;
            memory?: pulumi.Input<string>;
        }

        export interface RestoreSpecResources {
            cacheConfigs?: pulumi.Input<pulumi.Input<string>[]>;
            caches?: pulumi.Input<pulumi.Input<string>[]>;
            counters?: pulumi.Input<pulumi.Input<string>[]>;
            protoSchemas?: pulumi.Input<pulumi.Input<string>[]>;
            scripts?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * RestoreStatus defines the observed state of Restore
         */
        export interface RestoreStatus {
            /**
             * State indicates the current state of the restore operation
             */
            phase: pulumi.Input<string>;
            /**
             * Reason indicates the reason for any Restore related failures.
             */
            reason?: pulumi.Input<string>;
        }
    }
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Cache is the Schema for the caches API
type CacheType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// CacheSpec defines the desired state of Cache
	Spec *CacheSpec `pulumi:"spec"`
	// CacheStatus defines the observed state of Cache
	Status *CacheStatus `pulumi:"status"`
}

// CacheTypeInput is an input type that accepts CacheTypeArgs and CacheTypeOutput values.
// You can construct a concrete instance of `CacheTypeInput` via:
//
//          CacheTypeArgs{...}
type CacheTypeInput interface {
	pulumi.Input

	ToCacheTypeOutput() CacheTypeOutput
	ToCacheTypeOutputWithContext(context.Context) CacheTypeOutput
}

// Cache is the Schema for the caches API
type CacheTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// CacheSpec defines the desired state of Cache
	Spec CacheSpecPtrInput `pulumi:"spec"`
	// CacheStatus defines the observed state of Cache
	Status CacheStatusPtrInput `pulumi:"status"`
}

func (CacheTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheType)(nil)).Elem()
}

func (i CacheTypeArgs) ToCacheTypeOutput() CacheTypeOutput {
	return i.ToCacheTypeOutputWithContext(context.Background())
}

func (i CacheTypeArgs) ToCacheTypeOutputWithContext(ctx context.Context) CacheTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheTypeOutput)
}

// Cache is the Schema for the caches API
type CacheTypeOutput struct{ *pulumi.OutputState }

func (CacheTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheType)(nil)).Elem()
}

func (o CacheTypeOutput) ToCacheTypeOutput() CacheTypeOutput {
	return o
}

func (o CacheTypeOutput) ToCacheTypeOutputWithContext(ctx context.Context) CacheTypeOutput {
	return o
}

func (o CacheTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o CacheTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o CacheTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v CacheType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// CacheSpec defines the desired state of Cache
func (o CacheTypeOutput) Spec() CacheSpecPtrOutput {
	return o.ApplyT(func(v CacheType) *CacheSpec { return v.Spec }).(CacheSpecPtrOutput)
}

// CacheStatus defines the observed state of Cache
func (o CacheTypeOutput) Status() CacheStatusPtrOutput {
	return o.ApplyT(func(v CacheType) *CacheStatus { return v.Status }).(CacheStatusPtrOutput)
}

type CacheMetadata struct {
}

// CacheMetadataInput is an input type that accepts CacheMetadataArgs and CacheMetadataOutput values.
// You can construct a concrete instance of `CacheMetadataInput` via:
//
//          CacheMetadataArgs{...}
type CacheMetadataInput interface {
	pulumi.Input

	ToCacheMetadataOutput() CacheMetadataOutput
	ToCacheMetadataOutputWithContext(context.Context) CacheMetadataOutput
}

type CacheMetadataArgs struct {
}

func (CacheMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheMetadata)(nil)).Elem()
}

func (i CacheMetadataArgs) ToCacheMetadataOutput() CacheMetadataOutput {
	return i.ToCacheMetadataOutputWithContext(context.Background())
}

func (i CacheMetadataArgs) ToCacheMetadataOutputWithContext(ctx context.Context) CacheMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheMetadataOutput)
}

type CacheMetadataOutput struct{ *pulumi.OutputState }

func (CacheMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheMetadata)(nil)).Elem()
}

func (o CacheMetadataOutput) ToCacheMetadataOutput() CacheMetadataOutput {
	return o
}

func (o CacheMetadataOutput) ToCacheMetadataOutputWithContext(ctx context.Context) CacheMetadataOutput {
	return o
}

// CacheSpec defines the desired state of Cache
type CacheSpec struct {
	// Authentication info
	AdminAuth *CacheSpecAdminAuth `pulumi:"adminAuth"`
	// Name of the cluster where to create the cache
	ClusterName *string `pulumi:"clusterName"`
	// Name of the cache to be created. If empty ObjectMeta.Name will be used
	Name *string `pulumi:"name"`
	// Cache template in XML format
	Template *string `pulumi:"template"`
	// Name of the template to be used to create this cache
	TemplateName *string `pulumi:"templateName"`
}

// CacheSpecInput is an input type that accepts CacheSpecArgs and CacheSpecOutput values.
// You can construct a concrete instance of `CacheSpecInput` via:
//
//          CacheSpecArgs{...}
type CacheSpecInput interface {
	pulumi.Input

	ToCacheSpecOutput() CacheSpecOutput
	ToCacheSpecOutputWithContext(context.Context) CacheSpecOutput
}

// CacheSpec defines the desired state of Cache
type CacheSpecArgs struct {
	// Authentication info
	AdminAuth CacheSpecAdminAuthPtrInput `pulumi:"adminAuth"`
	// Name of the cluster where to create the cache
	ClusterName pulumi.StringPtrInput `pulumi:"clusterName"`
	// Name of the cache to be created. If empty ObjectMeta.Name will be used
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Cache template in XML format
	Template pulumi.StringPtrInput `pulumi:"template"`
	// Name of the template to be used to create this cache
	TemplateName pulumi.StringPtrInput `pulumi:"templateName"`
}

func (CacheSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheSpec)(nil)).Elem()
}

func (i CacheSpecArgs) ToCacheSpecOutput() CacheSpecOutput {
	return i.ToCacheSpecOutputWithContext(context.Background())
}

func (i CacheSpecArgs) ToCacheSpecOutputWithContext(ctx context.Context) CacheSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSpecOutput)
}

func (i CacheSpecArgs) ToCacheSpecPtrOutput() CacheSpecPtrOutput {
	return i.ToCacheSpecPtrOutputWithContext(context.Background())
}

func (i CacheSpecArgs) ToCacheSpecPtrOutputWithContext(ctx context.Context) CacheSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSpecOutput).ToCacheSpecPtrOutputWithContext(ctx)
}

// CacheSpecPtrInput is an input type that accepts CacheSpecArgs, CacheSpecPtr and CacheSpecPtrOutput values.
// You can construct a concrete instance of `CacheSpecPtrInput` via:
//
//          CacheSpecArgs{...}
//
//  or:
//
//          nil
type CacheSpecPtrInput interface {
	pulumi.Input

	ToCacheSpecPtrOutput() CacheSpecPtrOutput
	ToCacheSpecPtrOutputWithContext(context.Context) CacheSpecPtrOutput
}

type cacheSpecPtrType CacheSpecArgs

func CacheSpecPtr(v *CacheSpecArgs) CacheSpecPtrInput {
	return (*cacheSpecPtrType)(v)
}

func (*cacheSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheSpec)(nil)).Elem()
}

func (i *cacheSpecPtrType) ToCacheSpecPtrOutput() CacheSpecPtrOutput {
	return i.ToCacheSpecPtrOutputWithContext(context.Background())
}

func (i *cacheSpecPtrType) ToCacheSpecPtrOutputWithContext(ctx context.Context) CacheSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSpecPtrOutput)
}

// CacheSpec defines the desired state of Cache
type CacheSpecOutput struct{ *pulumi.OutputState }

func (CacheSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheSpec)(nil)).Elem()
}

func (o CacheSpecOutput) ToCacheSpecOutput() CacheSpecOutput {
	return o
}

func (o CacheSpecOutput) ToCacheSpecOutputWithContext(ctx context.Context) CacheSpecOutput {
	return o
}

func (o CacheSpecOutput) ToCacheSpecPtrOutput() CacheSpecPtrOutput {
	return o.ToCacheSpecPtrOutputWithContext(context.Background())
}

func (o CacheSpecOutput) ToCacheSpecPtrOutputWithContext(ctx context.Context) CacheSpecPtrOutput {
	return o.ApplyT(func(v CacheSpec) *CacheSpec {
		return &v
	}).(CacheSpecPtrOutput)
}

// Authentication info
func (o CacheSpecOutput) AdminAuth() CacheSpecAdminAuthPtrOutput {
	return o.ApplyT(func(v CacheSpec) *CacheSpecAdminAuth { return v.AdminAuth }).(CacheSpecAdminAuthPtrOutput)
}

// Name of the cluster where to create the cache
func (o CacheSpecOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheSpec) *string { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// Name of the cache to be created. If empty ObjectMeta.Name will be used
func (o CacheSpecOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheSpec) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Cache template in XML format
func (o CacheSpecOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheSpec) *string { return v.Template }).(pulumi.StringPtrOutput)
}

// Name of the template to be used to create this cache
func (o CacheSpecOutput) TemplateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheSpec) *string { return v.TemplateName }).(pulumi.StringPtrOutput)
}

type CacheSpecPtrOutput struct{ *pulumi.OutputState }

func (CacheSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheSpec)(nil)).Elem()
}

func (o CacheSpecPtrOutput) ToCacheSpecPtrOutput() CacheSpecPtrOutput {
	return o
}

func (o CacheSpecPtrOutput) ToCacheSpecPtrOutputWithContext(ctx context.Context) CacheSpecPtrOutput {
	return o
}

func (o CacheSpecPtrOutput) Elem() CacheSpecOutput {
	return o.ApplyT(func(v *CacheSpec) CacheSpec { return *v }).(CacheSpecOutput)
}

// Authentication info
func (o CacheSpecPtrOutput) AdminAuth() CacheSpecAdminAuthPtrOutput {
	return o.ApplyT(func(v *CacheSpec) *CacheSpecAdminAuth {
		if v == nil {
			return nil
		}
		return v.AdminAuth
	}).(CacheSpecAdminAuthPtrOutput)
}

// Name of the cluster where to create the cache
func (o CacheSpecPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheSpec) *string {
		if v == nil {
			return nil
		}
		return v.ClusterName
	}).(pulumi.StringPtrOutput)
}

// Name of the cache to be created. If empty ObjectMeta.Name will be used
func (o CacheSpecPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheSpec) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Cache template in XML format
func (o CacheSpecPtrOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheSpec) *string {
		if v == nil {
			return nil
		}
		return v.Template
	}).(pulumi.StringPtrOutput)
}

// Name of the template to be used to create this cache
func (o CacheSpecPtrOutput) TemplateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheSpec) *string {
		if v == nil {
			return nil
		}
		return v.TemplateName
	}).(pulumi.StringPtrOutput)
}

// Authentication info
type CacheSpecAdminAuth struct {
	// Secret and key containing the admin password for authentication.
	Password *CacheSpecAdminAuthPassword `pulumi:"password"`
	// name of the secret containing both admin username and password
	SecretName *string `pulumi:"secretName"`
	// Secret and key containing the admin username for authentication.
	Username *CacheSpecAdminAuthUsername `pulumi:"username"`
}

// CacheSpecAdminAuthInput is an input type that accepts CacheSpecAdminAuthArgs and CacheSpecAdminAuthOutput values.
// You can construct a concrete instance of `CacheSpecAdminAuthInput` via:
//
//          CacheSpecAdminAuthArgs{...}
type CacheSpecAdminAuthInput interface {
	pulumi.Input

	ToCacheSpecAdminAuthOutput() CacheSpecAdminAuthOutput
	ToCacheSpecAdminAuthOutputWithContext(context.Context) CacheSpecAdminAuthOutput
}

// Authentication info
type CacheSpecAdminAuthArgs struct {
	// Secret and key containing the admin password for authentication.
	Password CacheSpecAdminAuthPasswordPtrInput `pulumi:"password"`
	// name of the secret containing both admin username and password
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// Secret and key containing the admin username for authentication.
	Username CacheSpecAdminAuthUsernamePtrInput `pulumi:"username"`
}

func (CacheSpecAdminAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheSpecAdminAuth)(nil)).Elem()
}

func (i CacheSpecAdminAuthArgs) ToCacheSpecAdminAuthOutput() CacheSpecAdminAuthOutput {
	return i.ToCacheSpecAdminAuthOutputWithContext(context.Background())
}

func (i CacheSpecAdminAuthArgs) ToCacheSpecAdminAuthOutputWithContext(ctx context.Context) CacheSpecAdminAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSpecAdminAuthOutput)
}

func (i CacheSpecAdminAuthArgs) ToCacheSpecAdminAuthPtrOutput() CacheSpecAdminAuthPtrOutput {
	return i.ToCacheSpecAdminAuthPtrOutputWithContext(context.Background())
}

func (i CacheSpecAdminAuthArgs) ToCacheSpecAdminAuthPtrOutputWithContext(ctx context.Context) CacheSpecAdminAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSpecAdminAuthOutput).ToCacheSpecAdminAuthPtrOutputWithContext(ctx)
}

// CacheSpecAdminAuthPtrInput is an input type that accepts CacheSpecAdminAuthArgs, CacheSpecAdminAuthPtr and CacheSpecAdminAuthPtrOutput values.
// You can construct a concrete instance of `CacheSpecAdminAuthPtrInput` via:
//
//          CacheSpecAdminAuthArgs{...}
//
//  or:
//
//          nil
type CacheSpecAdminAuthPtrInput interface {
	pulumi.Input

	ToCacheSpecAdminAuthPtrOutput() CacheSpecAdminAuthPtrOutput
	ToCacheSpecAdminAuthPtrOutputWithContext(context.Context) CacheSpecAdminAuthPtrOutput
}

type cacheSpecAdminAuthPtrType CacheSpecAdminAuthArgs

func CacheSpecAdminAuthPtr(v *CacheSpecAdminAuthArgs) CacheSpecAdminAuthPtrInput {
	return (*cacheSpecAdminAuthPtrType)(v)
}

func (*cacheSpecAdminAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheSpecAdminAuth)(nil)).Elem()
}

func (i *cacheSpecAdminAuthPtrType) ToCacheSpecAdminAuthPtrOutput() CacheSpecAdminAuthPtrOutput {
	return i.ToCacheSpecAdminAuthPtrOutputWithContext(context.Background())
}

func (i *cacheSpecAdminAuthPtrType) ToCacheSpecAdminAuthPtrOutputWithContext(ctx context.Context) CacheSpecAdminAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSpecAdminAuthPtrOutput)
}

// Authentication info
type CacheSpecAdminAuthOutput struct{ *pulumi.OutputState }

func (CacheSpecAdminAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheSpecAdminAuth)(nil)).Elem()
}

func (o CacheSpecAdminAuthOutput) ToCacheSpecAdminAuthOutput() CacheSpecAdminAuthOutput {
	return o
}

func (o CacheSpecAdminAuthOutput) ToCacheSpecAdminAuthOutputWithContext(ctx context.Context) CacheSpecAdminAuthOutput {
	return o
}

func (o CacheSpecAdminAuthOutput) ToCacheSpecAdminAuthPtrOutput() CacheSpecAdminAuthPtrOutput {
	return o.ToCacheSpecAdminAuthPtrOutputWithContext(context.Background())
}

func (o CacheSpecAdminAuthOutput) ToCacheSpecAdminAuthPtrOutputWithContext(ctx context.Context) CacheSpecAdminAuthPtrOutput {
	return o.ApplyT(func(v CacheSpecAdminAuth) *CacheSpecAdminAuth {
		return &v
	}).(CacheSpecAdminAuthPtrOutput)
}

// Secret and key containing the admin password for authentication.
func (o CacheSpecAdminAuthOutput) Password() CacheSpecAdminAuthPasswordPtrOutput {
	return o.ApplyT(func(v CacheSpecAdminAuth) *CacheSpecAdminAuthPassword { return v.Password }).(CacheSpecAdminAuthPasswordPtrOutput)
}

// name of the secret containing both admin username and password
func (o CacheSpecAdminAuthOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheSpecAdminAuth) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// Secret and key containing the admin username for authentication.
func (o CacheSpecAdminAuthOutput) Username() CacheSpecAdminAuthUsernamePtrOutput {
	return o.ApplyT(func(v CacheSpecAdminAuth) *CacheSpecAdminAuthUsername { return v.Username }).(CacheSpecAdminAuthUsernamePtrOutput)
}

type CacheSpecAdminAuthPtrOutput struct{ *pulumi.OutputState }

func (CacheSpecAdminAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheSpecAdminAuth)(nil)).Elem()
}

func (o CacheSpecAdminAuthPtrOutput) ToCacheSpecAdminAuthPtrOutput() CacheSpecAdminAuthPtrOutput {
	return o
}

func (o CacheSpecAdminAuthPtrOutput) ToCacheSpecAdminAuthPtrOutputWithContext(ctx context.Context) CacheSpecAdminAuthPtrOutput {
	return o
}

func (o CacheSpecAdminAuthPtrOutput) Elem() CacheSpecAdminAuthOutput {
	return o.ApplyT(func(v *CacheSpecAdminAuth) CacheSpecAdminAuth { return *v }).(CacheSpecAdminAuthOutput)
}

// Secret and key containing the admin password for authentication.
func (o CacheSpecAdminAuthPtrOutput) Password() CacheSpecAdminAuthPasswordPtrOutput {
	return o.ApplyT(func(v *CacheSpecAdminAuth) *CacheSpecAdminAuthPassword {
		if v == nil {
			return nil
		}
		return v.Password
	}).(CacheSpecAdminAuthPasswordPtrOutput)
}

// name of the secret containing both admin username and password
func (o CacheSpecAdminAuthPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheSpecAdminAuth) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// Secret and key containing the admin username for authentication.
func (o CacheSpecAdminAuthPtrOutput) Username() CacheSpecAdminAuthUsernamePtrOutput {
	return o.ApplyT(func(v *CacheSpecAdminAuth) *CacheSpecAdminAuthUsername {
		if v == nil {
			return nil
		}
		return v.Username
	}).(CacheSpecAdminAuthUsernamePtrOutput)
}

// Secret and key containing the admin password for authentication.
type CacheSpecAdminAuthPassword struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CacheSpecAdminAuthPasswordInput is an input type that accepts CacheSpecAdminAuthPasswordArgs and CacheSpecAdminAuthPasswordOutput values.
// You can construct a concrete instance of `CacheSpecAdminAuthPasswordInput` via:
//
//          CacheSpecAdminAuthPasswordArgs{...}
type CacheSpecAdminAuthPasswordInput interface {
	pulumi.Input

	ToCacheSpecAdminAuthPasswordOutput() CacheSpecAdminAuthPasswordOutput
	ToCacheSpecAdminAuthPasswordOutputWithContext(context.Context) CacheSpecAdminAuthPasswordOutput
}

// Secret and key containing the admin password for authentication.
type CacheSpecAdminAuthPasswordArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CacheSpecAdminAuthPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheSpecAdminAuthPassword)(nil)).Elem()
}

func (i CacheSpecAdminAuthPasswordArgs) ToCacheSpecAdminAuthPasswordOutput() CacheSpecAdminAuthPasswordOutput {
	return i.ToCacheSpecAdminAuthPasswordOutputWithContext(context.Background())
}

func (i CacheSpecAdminAuthPasswordArgs) ToCacheSpecAdminAuthPasswordOutputWithContext(ctx context.Context) CacheSpecAdminAuthPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSpecAdminAuthPasswordOutput)
}

func (i CacheSpecAdminAuthPasswordArgs) ToCacheSpecAdminAuthPasswordPtrOutput() CacheSpecAdminAuthPasswordPtrOutput {
	return i.ToCacheSpecAdminAuthPasswordPtrOutputWithContext(context.Background())
}

func (i CacheSpecAdminAuthPasswordArgs) ToCacheSpecAdminAuthPasswordPtrOutputWithContext(ctx context.Context) CacheSpecAdminAuthPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSpecAdminAuthPasswordOutput).ToCacheSpecAdminAuthPasswordPtrOutputWithContext(ctx)
}

// CacheSpecAdminAuthPasswordPtrInput is an input type that accepts CacheSpecAdminAuthPasswordArgs, CacheSpecAdminAuthPasswordPtr and CacheSpecAdminAuthPasswordPtrOutput values.
// You can construct a concrete instance of `CacheSpecAdminAuthPasswordPtrInput` via:
//
//          CacheSpecAdminAuthPasswordArgs{...}
//
//  or:
//
//          nil
type CacheSpecAdminAuthPasswordPtrInput interface {
	pulumi.Input

	ToCacheSpecAdminAuthPasswordPtrOutput() CacheSpecAdminAuthPasswordPtrOutput
	ToCacheSpecAdminAuthPasswordPtrOutputWithContext(context.Context) CacheSpecAdminAuthPasswordPtrOutput
}

type cacheSpecAdminAuthPasswordPtrType CacheSpecAdminAuthPasswordArgs

func CacheSpecAdminAuthPasswordPtr(v *CacheSpecAdminAuthPasswordArgs) CacheSpecAdminAuthPasswordPtrInput {
	return (*cacheSpecAdminAuthPasswordPtrType)(v)
}

func (*cacheSpecAdminAuthPasswordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheSpecAdminAuthPassword)(nil)).Elem()
}

func (i *cacheSpecAdminAuthPasswordPtrType) ToCacheSpecAdminAuthPasswordPtrOutput() CacheSpecAdminAuthPasswordPtrOutput {
	return i.ToCacheSpecAdminAuthPasswordPtrOutputWithContext(context.Background())
}

func (i *cacheSpecAdminAuthPasswordPtrType) ToCacheSpecAdminAuthPasswordPtrOutputWithContext(ctx context.Context) CacheSpecAdminAuthPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSpecAdminAuthPasswordPtrOutput)
}

// Secret and key containing the admin password for authentication.
type CacheSpecAdminAuthPasswordOutput struct{ *pulumi.OutputState }

func (CacheSpecAdminAuthPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheSpecAdminAuthPassword)(nil)).Elem()
}

func (o CacheSpecAdminAuthPasswordOutput) ToCacheSpecAdminAuthPasswordOutput() CacheSpecAdminAuthPasswordOutput {
	return o
}

func (o CacheSpecAdminAuthPasswordOutput) ToCacheSpecAdminAuthPasswordOutputWithContext(ctx context.Context) CacheSpecAdminAuthPasswordOutput {
	return o
}

func (o CacheSpecAdminAuthPasswordOutput) ToCacheSpecAdminAuthPasswordPtrOutput() CacheSpecAdminAuthPasswordPtrOutput {
	return o.ToCacheSpecAdminAuthPasswordPtrOutputWithContext(context.Background())
}

func (o CacheSpecAdminAuthPasswordOutput) ToCacheSpecAdminAuthPasswordPtrOutputWithContext(ctx context.Context) CacheSpecAdminAuthPasswordPtrOutput {
	return o.ApplyT(func(v CacheSpecAdminAuthPassword) *CacheSpecAdminAuthPassword {
		return &v
	}).(CacheSpecAdminAuthPasswordPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CacheSpecAdminAuthPasswordOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CacheSpecAdminAuthPassword) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CacheSpecAdminAuthPasswordOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheSpecAdminAuthPassword) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CacheSpecAdminAuthPasswordOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheSpecAdminAuthPassword) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CacheSpecAdminAuthPasswordPtrOutput struct{ *pulumi.OutputState }

func (CacheSpecAdminAuthPasswordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheSpecAdminAuthPassword)(nil)).Elem()
}

func (o CacheSpecAdminAuthPasswordPtrOutput) ToCacheSpecAdminAuthPasswordPtrOutput() CacheSpecAdminAuthPasswordPtrOutput {
	return o
}

func (o CacheSpecAdminAuthPasswordPtrOutput) ToCacheSpecAdminAuthPasswordPtrOutputWithContext(ctx context.Context) CacheSpecAdminAuthPasswordPtrOutput {
	return o
}

func (o CacheSpecAdminAuthPasswordPtrOutput) Elem() CacheSpecAdminAuthPasswordOutput {
	return o.ApplyT(func(v *CacheSpecAdminAuthPassword) CacheSpecAdminAuthPassword { return *v }).(CacheSpecAdminAuthPasswordOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CacheSpecAdminAuthPasswordPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheSpecAdminAuthPassword) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CacheSpecAdminAuthPasswordPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheSpecAdminAuthPassword) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CacheSpecAdminAuthPasswordPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheSpecAdminAuthPassword) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Secret and key containing the admin username for authentication.
type CacheSpecAdminAuthUsername struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CacheSpecAdminAuthUsernameInput is an input type that accepts CacheSpecAdminAuthUsernameArgs and CacheSpecAdminAuthUsernameOutput values.
// You can construct a concrete instance of `CacheSpecAdminAuthUsernameInput` via:
//
//          CacheSpecAdminAuthUsernameArgs{...}
type CacheSpecAdminAuthUsernameInput interface {
	pulumi.Input

	ToCacheSpecAdminAuthUsernameOutput() CacheSpecAdminAuthUsernameOutput
	ToCacheSpecAdminAuthUsernameOutputWithContext(context.Context) CacheSpecAdminAuthUsernameOutput
}

// Secret and key containing the admin username for authentication.
type CacheSpecAdminAuthUsernameArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CacheSpecAdminAuthUsernameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheSpecAdminAuthUsername)(nil)).Elem()
}

func (i CacheSpecAdminAuthUsernameArgs) ToCacheSpecAdminAuthUsernameOutput() CacheSpecAdminAuthUsernameOutput {
	return i.ToCacheSpecAdminAuthUsernameOutputWithContext(context.Background())
}

func (i CacheSpecAdminAuthUsernameArgs) ToCacheSpecAdminAuthUsernameOutputWithContext(ctx context.Context) CacheSpecAdminAuthUsernameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSpecAdminAuthUsernameOutput)
}

func (i CacheSpecAdminAuthUsernameArgs) ToCacheSpecAdminAuthUsernamePtrOutput() CacheSpecAdminAuthUsernamePtrOutput {
	return i.ToCacheSpecAdminAuthUsernamePtrOutputWithContext(context.Background())
}

func (i CacheSpecAdminAuthUsernameArgs) ToCacheSpecAdminAuthUsernamePtrOutputWithContext(ctx context.Context) CacheSpecAdminAuthUsernamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSpecAdminAuthUsernameOutput).ToCacheSpecAdminAuthUsernamePtrOutputWithContext(ctx)
}

// CacheSpecAdminAuthUsernamePtrInput is an input type that accepts CacheSpecAdminAuthUsernameArgs, CacheSpecAdminAuthUsernamePtr and CacheSpecAdminAuthUsernamePtrOutput values.
// You can construct a concrete instance of `CacheSpecAdminAuthUsernamePtrInput` via:
//
//          CacheSpecAdminAuthUsernameArgs{...}
//
//  or:
//
//          nil
type CacheSpecAdminAuthUsernamePtrInput interface {
	pulumi.Input

	ToCacheSpecAdminAuthUsernamePtrOutput() CacheSpecAdminAuthUsernamePtrOutput
	ToCacheSpecAdminAuthUsernamePtrOutputWithContext(context.Context) CacheSpecAdminAuthUsernamePtrOutput
}

type cacheSpecAdminAuthUsernamePtrType CacheSpecAdminAuthUsernameArgs

func CacheSpecAdminAuthUsernamePtr(v *CacheSpecAdminAuthUsernameArgs) CacheSpecAdminAuthUsernamePtrInput {
	return (*cacheSpecAdminAuthUsernamePtrType)(v)
}

func (*cacheSpecAdminAuthUsernamePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheSpecAdminAuthUsername)(nil)).Elem()
}

func (i *cacheSpecAdminAuthUsernamePtrType) ToCacheSpecAdminAuthUsernamePtrOutput() CacheSpecAdminAuthUsernamePtrOutput {
	return i.ToCacheSpecAdminAuthUsernamePtrOutputWithContext(context.Background())
}

func (i *cacheSpecAdminAuthUsernamePtrType) ToCacheSpecAdminAuthUsernamePtrOutputWithContext(ctx context.Context) CacheSpecAdminAuthUsernamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSpecAdminAuthUsernamePtrOutput)
}

// Secret and key containing the admin username for authentication.
type CacheSpecAdminAuthUsernameOutput struct{ *pulumi.OutputState }

func (CacheSpecAdminAuthUsernameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheSpecAdminAuthUsername)(nil)).Elem()
}

func (o CacheSpecAdminAuthUsernameOutput) ToCacheSpecAdminAuthUsernameOutput() CacheSpecAdminAuthUsernameOutput {
	return o
}

func (o CacheSpecAdminAuthUsernameOutput) ToCacheSpecAdminAuthUsernameOutputWithContext(ctx context.Context) CacheSpecAdminAuthUsernameOutput {
	return o
}

func (o CacheSpecAdminAuthUsernameOutput) ToCacheSpecAdminAuthUsernamePtrOutput() CacheSpecAdminAuthUsernamePtrOutput {
	return o.ToCacheSpecAdminAuthUsernamePtrOutputWithContext(context.Background())
}

func (o CacheSpecAdminAuthUsernameOutput) ToCacheSpecAdminAuthUsernamePtrOutputWithContext(ctx context.Context) CacheSpecAdminAuthUsernamePtrOutput {
	return o.ApplyT(func(v CacheSpecAdminAuthUsername) *CacheSpecAdminAuthUsername {
		return &v
	}).(CacheSpecAdminAuthUsernamePtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CacheSpecAdminAuthUsernameOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CacheSpecAdminAuthUsername) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CacheSpecAdminAuthUsernameOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheSpecAdminAuthUsername) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CacheSpecAdminAuthUsernameOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheSpecAdminAuthUsername) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CacheSpecAdminAuthUsernamePtrOutput struct{ *pulumi.OutputState }

func (CacheSpecAdminAuthUsernamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheSpecAdminAuthUsername)(nil)).Elem()
}

func (o CacheSpecAdminAuthUsernamePtrOutput) ToCacheSpecAdminAuthUsernamePtrOutput() CacheSpecAdminAuthUsernamePtrOutput {
	return o
}

func (o CacheSpecAdminAuthUsernamePtrOutput) ToCacheSpecAdminAuthUsernamePtrOutputWithContext(ctx context.Context) CacheSpecAdminAuthUsernamePtrOutput {
	return o
}

func (o CacheSpecAdminAuthUsernamePtrOutput) Elem() CacheSpecAdminAuthUsernameOutput {
	return o.ApplyT(func(v *CacheSpecAdminAuthUsername) CacheSpecAdminAuthUsername { return *v }).(CacheSpecAdminAuthUsernameOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CacheSpecAdminAuthUsernamePtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheSpecAdminAuthUsername) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CacheSpecAdminAuthUsernamePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheSpecAdminAuthUsername) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CacheSpecAdminAuthUsernamePtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheSpecAdminAuthUsername) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// CacheStatus defines the observed state of Cache
type CacheStatus struct {
	// Conditions list for this cache
	Conditions []CacheStatusConditions `pulumi:"conditions"`
	// Service name that exposes the cache inside the cluster
	ServiceName *string `pulumi:"serviceName"`
}

// CacheStatusInput is an input type that accepts CacheStatusArgs and CacheStatusOutput values.
// You can construct a concrete instance of `CacheStatusInput` via:
//
//          CacheStatusArgs{...}
type CacheStatusInput interface {
	pulumi.Input

	ToCacheStatusOutput() CacheStatusOutput
	ToCacheStatusOutputWithContext(context.Context) CacheStatusOutput
}

// CacheStatus defines the observed state of Cache
type CacheStatusArgs struct {
	// Conditions list for this cache
	Conditions CacheStatusConditionsArrayInput `pulumi:"conditions"`
	// Service name that exposes the cache inside the cluster
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
}

func (CacheStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheStatus)(nil)).Elem()
}

func (i CacheStatusArgs) ToCacheStatusOutput() CacheStatusOutput {
	return i.ToCacheStatusOutputWithContext(context.Background())
}

func (i CacheStatusArgs) ToCacheStatusOutputWithContext(ctx context.Context) CacheStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheStatusOutput)
}

func (i CacheStatusArgs) ToCacheStatusPtrOutput() CacheStatusPtrOutput {
	return i.ToCacheStatusPtrOutputWithContext(context.Background())
}

func (i CacheStatusArgs) ToCacheStatusPtrOutputWithContext(ctx context.Context) CacheStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheStatusOutput).ToCacheStatusPtrOutputWithContext(ctx)
}

// CacheStatusPtrInput is an input type that accepts CacheStatusArgs, CacheStatusPtr and CacheStatusPtrOutput values.
// You can construct a concrete instance of `CacheStatusPtrInput` via:
//
//          CacheStatusArgs{...}
//
//  or:
//
//          nil
type CacheStatusPtrInput interface {
	pulumi.Input

	ToCacheStatusPtrOutput() CacheStatusPtrOutput
	ToCacheStatusPtrOutputWithContext(context.Context) CacheStatusPtrOutput
}

type cacheStatusPtrType CacheStatusArgs

func CacheStatusPtr(v *CacheStatusArgs) CacheStatusPtrInput {
	return (*cacheStatusPtrType)(v)
}

func (*cacheStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheStatus)(nil)).Elem()
}

func (i *cacheStatusPtrType) ToCacheStatusPtrOutput() CacheStatusPtrOutput {
	return i.ToCacheStatusPtrOutputWithContext(context.Background())
}

func (i *cacheStatusPtrType) ToCacheStatusPtrOutputWithContext(ctx context.Context) CacheStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheStatusPtrOutput)
}

// CacheStatus defines the observed state of Cache
type CacheStatusOutput struct{ *pulumi.OutputState }

func (CacheStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheStatus)(nil)).Elem()
}

func (o CacheStatusOutput) ToCacheStatusOutput() CacheStatusOutput {
	return o
}

func (o CacheStatusOutput) ToCacheStatusOutputWithContext(ctx context.Context) CacheStatusOutput {
	return o
}

func (o CacheStatusOutput) ToCacheStatusPtrOutput() CacheStatusPtrOutput {
	return o.ToCacheStatusPtrOutputWithContext(context.Background())
}

func (o CacheStatusOutput) ToCacheStatusPtrOutputWithContext(ctx context.Context) CacheStatusPtrOutput {
	return o.ApplyT(func(v CacheStatus) *CacheStatus {
		return &v
	}).(CacheStatusPtrOutput)
}

// Conditions list for this cache
func (o CacheStatusOutput) Conditions() CacheStatusConditionsArrayOutput {
	return o.ApplyT(func(v CacheStatus) []CacheStatusConditions { return v.Conditions }).(CacheStatusConditionsArrayOutput)
}

// Service name that exposes the cache inside the cluster
func (o CacheStatusOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheStatus) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type CacheStatusPtrOutput struct{ *pulumi.OutputState }

func (CacheStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheStatus)(nil)).Elem()
}

func (o CacheStatusPtrOutput) ToCacheStatusPtrOutput() CacheStatusPtrOutput {
	return o
}

func (o CacheStatusPtrOutput) ToCacheStatusPtrOutputWithContext(ctx context.Context) CacheStatusPtrOutput {
	return o
}

func (o CacheStatusPtrOutput) Elem() CacheStatusOutput {
	return o.ApplyT(func(v *CacheStatus) CacheStatus { return *v }).(CacheStatusOutput)
}

// Conditions list for this cache
func (o CacheStatusPtrOutput) Conditions() CacheStatusConditionsArrayOutput {
	return o.ApplyT(func(v *CacheStatus) []CacheStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(CacheStatusConditionsArrayOutput)
}

// Service name that exposes the cache inside the cluster
func (o CacheStatusPtrOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheStatus) *string {
		if v == nil {
			return nil
		}
		return v.ServiceName
	}).(pulumi.StringPtrOutput)
}

// CacheCondition define a condition of the cluster
type CacheStatusConditions struct {
	// Human-readable message indicating details about last transition.
	Message *string `pulumi:"message"`
	// Status is the status of the condition.
	Status string `pulumi:"status"`
	// Type is the type of the condition.
	Type string `pulumi:"type"`
}

// CacheStatusConditionsInput is an input type that accepts CacheStatusConditionsArgs and CacheStatusConditionsOutput values.
// You can construct a concrete instance of `CacheStatusConditionsInput` via:
//
//          CacheStatusConditionsArgs{...}
type CacheStatusConditionsInput interface {
	pulumi.Input

	ToCacheStatusConditionsOutput() CacheStatusConditionsOutput
	ToCacheStatusConditionsOutputWithContext(context.Context) CacheStatusConditionsOutput
}

// CacheCondition define a condition of the cluster
type CacheStatusConditionsArgs struct {
	// Human-readable message indicating details about last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Status is the status of the condition.
	Status pulumi.StringInput `pulumi:"status"`
	// Type is the type of the condition.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CacheStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheStatusConditions)(nil)).Elem()
}

func (i CacheStatusConditionsArgs) ToCacheStatusConditionsOutput() CacheStatusConditionsOutput {
	return i.ToCacheStatusConditionsOutputWithContext(context.Background())
}

func (i CacheStatusConditionsArgs) ToCacheStatusConditionsOutputWithContext(ctx context.Context) CacheStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheStatusConditionsOutput)
}

// CacheStatusConditionsArrayInput is an input type that accepts CacheStatusConditionsArray and CacheStatusConditionsArrayOutput values.
// You can construct a concrete instance of `CacheStatusConditionsArrayInput` via:
//
//          CacheStatusConditionsArray{ CacheStatusConditionsArgs{...} }
type CacheStatusConditionsArrayInput interface {
	pulumi.Input

	ToCacheStatusConditionsArrayOutput() CacheStatusConditionsArrayOutput
	ToCacheStatusConditionsArrayOutputWithContext(context.Context) CacheStatusConditionsArrayOutput
}

type CacheStatusConditionsArray []CacheStatusConditionsInput

func (CacheStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CacheStatusConditions)(nil)).Elem()
}

func (i CacheStatusConditionsArray) ToCacheStatusConditionsArrayOutput() CacheStatusConditionsArrayOutput {
	return i.ToCacheStatusConditionsArrayOutputWithContext(context.Background())
}

func (i CacheStatusConditionsArray) ToCacheStatusConditionsArrayOutputWithContext(ctx context.Context) CacheStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheStatusConditionsArrayOutput)
}

// CacheCondition define a condition of the cluster
type CacheStatusConditionsOutput struct{ *pulumi.OutputState }

func (CacheStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheStatusConditions)(nil)).Elem()
}

func (o CacheStatusConditionsOutput) ToCacheStatusConditionsOutput() CacheStatusConditionsOutput {
	return o
}

func (o CacheStatusConditionsOutput) ToCacheStatusConditionsOutputWithContext(ctx context.Context) CacheStatusConditionsOutput {
	return o
}

// Human-readable message indicating details about last transition.
func (o CacheStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Status is the status of the condition.
func (o CacheStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v CacheStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type is the type of the condition.
func (o CacheStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CacheStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type CacheStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (CacheStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CacheStatusConditions)(nil)).Elem()
}

func (o CacheStatusConditionsArrayOutput) ToCacheStatusConditionsArrayOutput() CacheStatusConditionsArrayOutput {
	return o
}

func (o CacheStatusConditionsArrayOutput) ToCacheStatusConditionsArrayOutputWithContext(ctx context.Context) CacheStatusConditionsArrayOutput {
	return o
}

func (o CacheStatusConditionsArrayOutput) Index(i pulumi.IntInput) CacheStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CacheStatusConditions {
		return vs[0].([]CacheStatusConditions)[vs[1].(int)]
	}).(CacheStatusConditionsOutput)
}

func init() {
	pulumi.RegisterOutputType(CacheTypeOutput{})
	pulumi.RegisterOutputType(CacheMetadataOutput{})
	pulumi.RegisterOutputType(CacheSpecOutput{})
	pulumi.RegisterOutputType(CacheSpecPtrOutput{})
	pulumi.RegisterOutputType(CacheSpecAdminAuthOutput{})
	pulumi.RegisterOutputType(CacheSpecAdminAuthPtrOutput{})
	pulumi.RegisterOutputType(CacheSpecAdminAuthPasswordOutput{})
	pulumi.RegisterOutputType(CacheSpecAdminAuthPasswordPtrOutput{})
	pulumi.RegisterOutputType(CacheSpecAdminAuthUsernameOutput{})
	pulumi.RegisterOutputType(CacheSpecAdminAuthUsernamePtrOutput{})
	pulumi.RegisterOutputType(CacheStatusOutput{})
	pulumi.RegisterOutputType(CacheStatusPtrOutput{})
	pulumi.RegisterOutputType(CacheStatusConditionsOutput{})
	pulumi.RegisterOutputType(CacheStatusConditionsArrayOutput{})
}

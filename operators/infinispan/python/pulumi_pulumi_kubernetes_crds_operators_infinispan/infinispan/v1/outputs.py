# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'InfinispanSpec',
    'InfinispanSpecAutoscale',
    'InfinispanSpecContainer',
    'InfinispanSpecExpose',
    'InfinispanSpecLogging',
    'InfinispanSpecSecurity',
    'InfinispanSpecSecurityEndpointEncryption',
    'InfinispanSpecService',
    'InfinispanSpecServiceContainer',
    'InfinispanSpecServiceSites',
    'InfinispanSpecServiceSitesLocal',
    'InfinispanSpecServiceSitesLocalExpose',
    'InfinispanSpecServiceSitesLocations',
    'InfinispanStatus',
    'InfinispanStatusConditions',
    'InfinispanStatusSecurity',
    'InfinispanStatusSecurityEndpointEncryption',
]

@pulumi.output_type
class InfinispanSpec(dict):
    """
    InfinispanSpec defines the desired state of Infinispan
    """
    def __init__(__self__, *,
                 replicas: int,
                 autoscale: Optional['outputs.InfinispanSpecAutoscale'] = None,
                 container: Optional['outputs.InfinispanSpecContainer'] = None,
                 expose: Optional['outputs.InfinispanSpecExpose'] = None,
                 image: Optional[str] = None,
                 logging: Optional['outputs.InfinispanSpecLogging'] = None,
                 security: Optional['outputs.InfinispanSpecSecurity'] = None,
                 service: Optional['outputs.InfinispanSpecService'] = None):
        """
        InfinispanSpec defines the desired state of Infinispan
        :param 'InfinispanSpecAutoscaleArgs' autoscale: Autoscale describe autoscaling configuration for the cluster
        :param 'InfinispanSpecContainerArgs' container: InfinispanContainerSpec specify resource requirements per container
        :param 'InfinispanSpecExposeArgs' expose: ExposeSpec describe how Infinispan will be exposed externally
        :param 'InfinispanSpecSecurityArgs' security: InfinispanSecurity info for the user application connection
        :param 'InfinispanSpecServiceArgs' service: InfinispanServiceSpec specify configuration for specific service
        """
        pulumi.set(__self__, "replicas", replicas)
        if autoscale is not None:
            pulumi.set(__self__, "autoscale", autoscale)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if expose is not None:
            pulumi.set(__self__, "expose", expose)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def replicas(self) -> int:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter
    def autoscale(self) -> Optional['outputs.InfinispanSpecAutoscale']:
        """
        Autoscale describe autoscaling configuration for the cluster
        """
        return pulumi.get(self, "autoscale")

    @property
    @pulumi.getter
    def container(self) -> Optional['outputs.InfinispanSpecContainer']:
        """
        InfinispanContainerSpec specify resource requirements per container
        """
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def expose(self) -> Optional['outputs.InfinispanSpecExpose']:
        """
        ExposeSpec describe how Infinispan will be exposed externally
        """
        return pulumi.get(self, "expose")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def logging(self) -> Optional['outputs.InfinispanSpecLogging']:
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter
    def security(self) -> Optional['outputs.InfinispanSpecSecurity']:
        """
        InfinispanSecurity info for the user application connection
        """
        return pulumi.get(self, "security")

    @property
    @pulumi.getter
    def service(self) -> Optional['outputs.InfinispanSpecService']:
        """
        InfinispanServiceSpec specify configuration for specific service
        """
        return pulumi.get(self, "service")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InfinispanSpecAutoscale(dict):
    """
    Autoscale describe autoscaling configuration for the cluster
    """
    def __init__(__self__, *,
                 max_mem_usage_percent: int,
                 max_replicas: int,
                 min_mem_usage_percent: int,
                 min_replicas: int):
        """
        Autoscale describe autoscaling configuration for the cluster
        """
        pulumi.set(__self__, "max_mem_usage_percent", max_mem_usage_percent)
        pulumi.set(__self__, "max_replicas", max_replicas)
        pulumi.set(__self__, "min_mem_usage_percent", min_mem_usage_percent)
        pulumi.set(__self__, "min_replicas", min_replicas)

    @property
    @pulumi.getter(name="maxMemUsagePercent")
    def max_mem_usage_percent(self) -> int:
        return pulumi.get(self, "max_mem_usage_percent")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> int:
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="minMemUsagePercent")
    def min_mem_usage_percent(self) -> int:
        return pulumi.get(self, "min_mem_usage_percent")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> int:
        return pulumi.get(self, "min_replicas")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InfinispanSpecContainer(dict):
    """
    InfinispanContainerSpec specify resource requirements per container
    """
    def __init__(__self__, *,
                 cpu: Optional[str] = None,
                 extra_jvm_opts: Optional[str] = None,
                 memory: Optional[str] = None):
        """
        InfinispanContainerSpec specify resource requirements per container
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if extra_jvm_opts is not None:
            pulumi.set(__self__, "extra_jvm_opts", extra_jvm_opts)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[str]:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="extraJvmOpts")
    def extra_jvm_opts(self) -> Optional[str]:
        return pulumi.get(self, "extra_jvm_opts")

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InfinispanSpecExpose(dict):
    """
    ExposeSpec describe how Infinispan will be exposed externally
    """
    def __init__(__self__, *,
                 type: str,
                 host: Optional[str] = None,
                 node_port: Optional[int] = None):
        """
        ExposeSpec describe how Infinispan will be exposed externally
        :param str type: Type specifies different exposition methods for datagrid
        """
        pulumi.set(__self__, "type", type)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type specifies different exposition methods for datagrid
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[int]:
        return pulumi.get(self, "node_port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InfinispanSpecLogging(dict):
    def __init__(__self__, *,
                 categories: Optional[Mapping[str, str]] = None):
        if categories is not None:
            pulumi.set(__self__, "categories", categories)

    @property
    @pulumi.getter
    def categories(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "categories")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InfinispanSpecSecurity(dict):
    """
    InfinispanSecurity info for the user application connection
    """
    def __init__(__self__, *,
                 endpoint_encryption: Optional['outputs.InfinispanSpecSecurityEndpointEncryption'] = None,
                 endpoint_secret_name: Optional[str] = None):
        """
        InfinispanSecurity info for the user application connection
        :param 'InfinispanSpecSecurityEndpointEncryptionArgs' endpoint_encryption: EndpointEncryption configuration
        """
        if endpoint_encryption is not None:
            pulumi.set(__self__, "endpoint_encryption", endpoint_encryption)
        if endpoint_secret_name is not None:
            pulumi.set(__self__, "endpoint_secret_name", endpoint_secret_name)

    @property
    @pulumi.getter(name="endpointEncryption")
    def endpoint_encryption(self) -> Optional['outputs.InfinispanSpecSecurityEndpointEncryption']:
        """
        EndpointEncryption configuration
        """
        return pulumi.get(self, "endpoint_encryption")

    @property
    @pulumi.getter(name="endpointSecretName")
    def endpoint_secret_name(self) -> Optional[str]:
        return pulumi.get(self, "endpoint_secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InfinispanSpecSecurityEndpointEncryption(dict):
    """
    EndpointEncryption configuration
    """
    def __init__(__self__, *,
                 type: str,
                 cert_secret_name: Optional[str] = None,
                 cert_service_name: Optional[str] = None):
        """
        EndpointEncryption configuration
        """
        pulumi.set(__self__, "type", type)
        if cert_secret_name is not None:
            pulumi.set(__self__, "cert_secret_name", cert_secret_name)
        if cert_service_name is not None:
            pulumi.set(__self__, "cert_service_name", cert_service_name)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="certSecretName")
    def cert_secret_name(self) -> Optional[str]:
        return pulumi.get(self, "cert_secret_name")

    @property
    @pulumi.getter(name="certServiceName")
    def cert_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cert_service_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InfinispanSpecService(dict):
    """
    InfinispanServiceSpec specify configuration for specific service
    """
    def __init__(__self__, *,
                 type: str,
                 container: Optional['outputs.InfinispanSpecServiceContainer'] = None,
                 replication_factor: Optional[int] = None,
                 sites: Optional['outputs.InfinispanSpecServiceSites'] = None):
        """
        InfinispanServiceSpec specify configuration for specific service
        :param 'InfinispanSpecServiceContainerArgs' container: InfinispanServiceContainerSpec resource requirements specific for service
        """
        pulumi.set(__self__, "type", type)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if replication_factor is not None:
            pulumi.set(__self__, "replication_factor", replication_factor)
        if sites is not None:
            pulumi.set(__self__, "sites", sites)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def container(self) -> Optional['outputs.InfinispanSpecServiceContainer']:
        """
        InfinispanServiceContainerSpec resource requirements specific for service
        """
        return pulumi.get(self, "container")

    @property
    @pulumi.getter(name="replicationFactor")
    def replication_factor(self) -> Optional[int]:
        return pulumi.get(self, "replication_factor")

    @property
    @pulumi.getter
    def sites(self) -> Optional['outputs.InfinispanSpecServiceSites']:
        return pulumi.get(self, "sites")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InfinispanSpecServiceContainer(dict):
    """
    InfinispanServiceContainerSpec resource requirements specific for service
    """
    def __init__(__self__, *,
                 storage: str):
        """
        InfinispanServiceContainerSpec resource requirements specific for service
        """
        pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InfinispanSpecServiceSites(dict):
    def __init__(__self__, *,
                 local: 'outputs.InfinispanSpecServiceSitesLocal',
                 locations: Optional[Sequence['outputs.InfinispanSpecServiceSitesLocations']] = None):
        pulumi.set(__self__, "local", local)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)

    @property
    @pulumi.getter
    def local(self) -> 'outputs.InfinispanSpecServiceSitesLocal':
        return pulumi.get(self, "local")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence['outputs.InfinispanSpecServiceSitesLocations']]:
        return pulumi.get(self, "locations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InfinispanSpecServiceSitesLocal(dict):
    def __init__(__self__, *,
                 expose: 'outputs.InfinispanSpecServiceSitesLocalExpose',
                 name: str):
        """
        :param 'InfinispanSpecServiceSitesLocalExposeArgs' expose: ExposeSpec describe how Infinispan will be exposed externally
        """
        pulumi.set(__self__, "expose", expose)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def expose(self) -> 'outputs.InfinispanSpecServiceSitesLocalExpose':
        """
        ExposeSpec describe how Infinispan will be exposed externally
        """
        return pulumi.get(self, "expose")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InfinispanSpecServiceSitesLocalExpose(dict):
    """
    ExposeSpec describe how Infinispan will be exposed externally
    """
    def __init__(__self__, *,
                 type: str,
                 host: Optional[str] = None,
                 node_port: Optional[int] = None):
        """
        ExposeSpec describe how Infinispan will be exposed externally
        :param str type: Type specifies different exposition methods for datagrid
        """
        pulumi.set(__self__, "type", type)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type specifies different exposition methods for datagrid
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[int]:
        return pulumi.get(self, "node_port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InfinispanSpecServiceSitesLocations(dict):
    def __init__(__self__, *,
                 name: str,
                 secret_name: str,
                 url: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InfinispanStatus(dict):
    """
    InfinispanStatus defines the observed state of Infinispan
    """
    def __init__(__self__, *,
                 security: 'outputs.InfinispanStatusSecurity',
                 stateful_set_name: str,
                 conditions: Optional[Sequence['outputs.InfinispanStatusConditions']] = None,
                 replicas_wanted_at_restart: Optional[int] = None):
        """
        InfinispanStatus defines the observed state of Infinispan
        :param 'InfinispanStatusSecurityArgs' security: InfinispanSecurity info for the user application connection
        :param Sequence['InfinispanStatusConditionsArgs'] conditions: Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "security", security)
        pulumi.set(__self__, "stateful_set_name", stateful_set_name)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if replicas_wanted_at_restart is not None:
            pulumi.set(__self__, "replicas_wanted_at_restart", replicas_wanted_at_restart)

    @property
    @pulumi.getter
    def security(self) -> 'outputs.InfinispanStatusSecurity':
        """
        InfinispanSecurity info for the user application connection
        """
        return pulumi.get(self, "security")

    @property
    @pulumi.getter(name="statefulSetName")
    def stateful_set_name(self) -> str:
        return pulumi.get(self, "stateful_set_name")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.InfinispanStatusConditions']]:
        """
        Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="replicasWantedAtRestart")
    def replicas_wanted_at_restart(self) -> Optional[int]:
        return pulumi.get(self, "replicas_wanted_at_restart")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InfinispanStatusConditions(dict):
    """
    InfinispanCondition define a condition of the cluster
    """
    def __init__(__self__, *,
                 message: str,
                 status: str,
                 type: str):
        """
        InfinispanCondition define a condition of the cluster
        :param str message: Human-readable message indicating details about last transition.
        :param str status: Status is the status of the condition.
        :param str type: Type is the type of the condition.
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Human-readable message indicating details about last transition.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status is the status of the condition.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type is the type of the condition.
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InfinispanStatusSecurity(dict):
    """
    InfinispanSecurity info for the user application connection
    """
    def __init__(__self__, *,
                 endpoint_encryption: Optional['outputs.InfinispanStatusSecurityEndpointEncryption'] = None,
                 endpoint_secret_name: Optional[str] = None):
        """
        InfinispanSecurity info for the user application connection
        :param 'InfinispanStatusSecurityEndpointEncryptionArgs' endpoint_encryption: EndpointEncryption configuration
        """
        if endpoint_encryption is not None:
            pulumi.set(__self__, "endpoint_encryption", endpoint_encryption)
        if endpoint_secret_name is not None:
            pulumi.set(__self__, "endpoint_secret_name", endpoint_secret_name)

    @property
    @pulumi.getter(name="endpointEncryption")
    def endpoint_encryption(self) -> Optional['outputs.InfinispanStatusSecurityEndpointEncryption']:
        """
        EndpointEncryption configuration
        """
        return pulumi.get(self, "endpoint_encryption")

    @property
    @pulumi.getter(name="endpointSecretName")
    def endpoint_secret_name(self) -> Optional[str]:
        return pulumi.get(self, "endpoint_secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InfinispanStatusSecurityEndpointEncryption(dict):
    """
    EndpointEncryption configuration
    """
    def __init__(__self__, *,
                 type: str,
                 cert_secret_name: Optional[str] = None,
                 cert_service_name: Optional[str] = None):
        """
        EndpointEncryption configuration
        """
        pulumi.set(__self__, "type", type)
        if cert_secret_name is not None:
            pulumi.set(__self__, "cert_secret_name", cert_secret_name)
        if cert_service_name is not None:
            pulumi.set(__self__, "cert_service_name", cert_service_name)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="certSecretName")
    def cert_secret_name(self) -> Optional[str]:
        return pulumi.get(self, "cert_secret_name")

    @property
    @pulumi.getter(name="certServiceName")
    def cert_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cert_service_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



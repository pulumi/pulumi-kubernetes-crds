# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'InfinispanSpecArgs',
    'InfinispanSpecAutoscaleArgs',
    'InfinispanSpecContainerArgs',
    'InfinispanSpecExposeArgs',
    'InfinispanSpecLoggingArgs',
    'InfinispanSpecSecurityArgs',
    'InfinispanSpecSecurityEndpointEncryptionArgs',
    'InfinispanSpecServiceArgs',
    'InfinispanSpecServiceContainerArgs',
    'InfinispanSpecServiceSitesArgs',
    'InfinispanSpecServiceSitesLocalArgs',
    'InfinispanSpecServiceSitesLocalExposeArgs',
    'InfinispanSpecServiceSitesLocationsArgs',
    'InfinispanStatusArgs',
    'InfinispanStatusConditionsArgs',
    'InfinispanStatusSecurityArgs',
    'InfinispanStatusSecurityEndpointEncryptionArgs',
]

@pulumi.input_type
class InfinispanSpecArgs:
    def __init__(__self__, *,
                 replicas: pulumi.Input[int],
                 autoscale: Optional[pulumi.Input['InfinispanSpecAutoscaleArgs']] = None,
                 container: Optional[pulumi.Input['InfinispanSpecContainerArgs']] = None,
                 expose: Optional[pulumi.Input['InfinispanSpecExposeArgs']] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 logging: Optional[pulumi.Input['InfinispanSpecLoggingArgs']] = None,
                 security: Optional[pulumi.Input['InfinispanSpecSecurityArgs']] = None,
                 service: Optional[pulumi.Input['InfinispanSpecServiceArgs']] = None):
        """
        InfinispanSpec defines the desired state of Infinispan
        :param pulumi.Input['InfinispanSpecAutoscaleArgs'] autoscale: Autoscale describe autoscaling configuration for the cluster
        :param pulumi.Input['InfinispanSpecContainerArgs'] container: InfinispanContainerSpec specify resource requirements per container
        :param pulumi.Input['InfinispanSpecExposeArgs'] expose: ExposeSpec describe how Infinispan will be exposed externally
        :param pulumi.Input['InfinispanSpecSecurityArgs'] security: InfinispanSecurity info for the user application connection
        :param pulumi.Input['InfinispanSpecServiceArgs'] service: InfinispanServiceSpec specify configuration for specific service
        """
        pulumi.set(__self__, "replicas", replicas)
        if autoscale is not None:
            pulumi.set(__self__, "autoscale", autoscale)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if expose is not None:
            pulumi.set(__self__, "expose", expose)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def replicas(self) -> pulumi.Input[int]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: pulumi.Input[int]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def autoscale(self) -> Optional[pulumi.Input['InfinispanSpecAutoscaleArgs']]:
        """
        Autoscale describe autoscaling configuration for the cluster
        """
        return pulumi.get(self, "autoscale")

    @autoscale.setter
    def autoscale(self, value: Optional[pulumi.Input['InfinispanSpecAutoscaleArgs']]):
        pulumi.set(self, "autoscale", value)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input['InfinispanSpecContainerArgs']]:
        """
        InfinispanContainerSpec specify resource requirements per container
        """
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input['InfinispanSpecContainerArgs']]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def expose(self) -> Optional[pulumi.Input['InfinispanSpecExposeArgs']]:
        """
        ExposeSpec describe how Infinispan will be exposed externally
        """
        return pulumi.get(self, "expose")

    @expose.setter
    def expose(self, value: Optional[pulumi.Input['InfinispanSpecExposeArgs']]):
        pulumi.set(self, "expose", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input['InfinispanSpecLoggingArgs']]:
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input['InfinispanSpecLoggingArgs']]):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input['InfinispanSpecSecurityArgs']]:
        """
        InfinispanSecurity info for the user application connection
        """
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input['InfinispanSpecSecurityArgs']]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['InfinispanSpecServiceArgs']]:
        """
        InfinispanServiceSpec specify configuration for specific service
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['InfinispanSpecServiceArgs']]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class InfinispanSpecAutoscaleArgs:
    def __init__(__self__, *,
                 max_mem_usage_percent: pulumi.Input[int],
                 max_replicas: pulumi.Input[int],
                 min_mem_usage_percent: pulumi.Input[int],
                 min_replicas: pulumi.Input[int]):
        """
        Autoscale describe autoscaling configuration for the cluster
        """
        pulumi.set(__self__, "max_mem_usage_percent", max_mem_usage_percent)
        pulumi.set(__self__, "max_replicas", max_replicas)
        pulumi.set(__self__, "min_mem_usage_percent", min_mem_usage_percent)
        pulumi.set(__self__, "min_replicas", min_replicas)

    @property
    @pulumi.getter(name="maxMemUsagePercent")
    def max_mem_usage_percent(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_mem_usage_percent")

    @max_mem_usage_percent.setter
    def max_mem_usage_percent(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_mem_usage_percent", value)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_replicas", value)

    @property
    @pulumi.getter(name="minMemUsagePercent")
    def min_mem_usage_percent(self) -> pulumi.Input[int]:
        return pulumi.get(self, "min_mem_usage_percent")

    @min_mem_usage_percent.setter
    def min_mem_usage_percent(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_mem_usage_percent", value)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> pulumi.Input[int]:
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_replicas", value)


@pulumi.input_type
class InfinispanSpecContainerArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[str]] = None,
                 extra_jvm_opts: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        InfinispanContainerSpec specify resource requirements per container
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if extra_jvm_opts is not None:
            pulumi.set(__self__, "extra_jvm_opts", extra_jvm_opts)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="extraJvmOpts")
    def extra_jvm_opts(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extra_jvm_opts")

    @extra_jvm_opts.setter
    def extra_jvm_opts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_jvm_opts", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class InfinispanSpecExposeArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 host: Optional[pulumi.Input[str]] = None,
                 node_port: Optional[pulumi.Input[int]] = None):
        """
        ExposeSpec describe how Infinispan will be exposed externally
        :param pulumi.Input[str] type: Type specifies different exposition methods for datagrid
        """
        pulumi.set(__self__, "type", type)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type specifies different exposition methods for datagrid
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "node_port")

    @node_port.setter
    def node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_port", value)


@pulumi.input_type
class InfinispanSpecLoggingArgs:
    def __init__(__self__, *,
                 categories: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if categories is not None:
            pulumi.set(__self__, "categories", categories)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "categories", value)


@pulumi.input_type
class InfinispanSpecSecurityArgs:
    def __init__(__self__, *,
                 endpoint_encryption: Optional[pulumi.Input['InfinispanSpecSecurityEndpointEncryptionArgs']] = None,
                 endpoint_secret_name: Optional[pulumi.Input[str]] = None):
        """
        InfinispanSecurity info for the user application connection
        :param pulumi.Input['InfinispanSpecSecurityEndpointEncryptionArgs'] endpoint_encryption: EndpointEncryption configuration
        """
        if endpoint_encryption is not None:
            pulumi.set(__self__, "endpoint_encryption", endpoint_encryption)
        if endpoint_secret_name is not None:
            pulumi.set(__self__, "endpoint_secret_name", endpoint_secret_name)

    @property
    @pulumi.getter(name="endpointEncryption")
    def endpoint_encryption(self) -> Optional[pulumi.Input['InfinispanSpecSecurityEndpointEncryptionArgs']]:
        """
        EndpointEncryption configuration
        """
        return pulumi.get(self, "endpoint_encryption")

    @endpoint_encryption.setter
    def endpoint_encryption(self, value: Optional[pulumi.Input['InfinispanSpecSecurityEndpointEncryptionArgs']]):
        pulumi.set(self, "endpoint_encryption", value)

    @property
    @pulumi.getter(name="endpointSecretName")
    def endpoint_secret_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "endpoint_secret_name")

    @endpoint_secret_name.setter
    def endpoint_secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_secret_name", value)


@pulumi.input_type
class InfinispanSpecSecurityEndpointEncryptionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cert_secret_name: Optional[pulumi.Input[str]] = None,
                 cert_service_name: Optional[pulumi.Input[str]] = None):
        """
        EndpointEncryption configuration
        """
        pulumi.set(__self__, "type", type)
        if cert_secret_name is not None:
            pulumi.set(__self__, "cert_secret_name", cert_secret_name)
        if cert_service_name is not None:
            pulumi.set(__self__, "cert_service_name", cert_service_name)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="certSecretName")
    def cert_secret_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_secret_name")

    @cert_secret_name.setter
    def cert_secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_secret_name", value)

    @property
    @pulumi.getter(name="certServiceName")
    def cert_service_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_service_name")

    @cert_service_name.setter
    def cert_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_service_name", value)


@pulumi.input_type
class InfinispanSpecServiceArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 container: Optional[pulumi.Input['InfinispanSpecServiceContainerArgs']] = None,
                 replication_factor: Optional[pulumi.Input[int]] = None,
                 sites: Optional[pulumi.Input['InfinispanSpecServiceSitesArgs']] = None):
        """
        InfinispanServiceSpec specify configuration for specific service
        :param pulumi.Input['InfinispanSpecServiceContainerArgs'] container: InfinispanServiceContainerSpec resource requirements specific for service
        """
        pulumi.set(__self__, "type", type)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if replication_factor is not None:
            pulumi.set(__self__, "replication_factor", replication_factor)
        if sites is not None:
            pulumi.set(__self__, "sites", sites)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input['InfinispanSpecServiceContainerArgs']]:
        """
        InfinispanServiceContainerSpec resource requirements specific for service
        """
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input['InfinispanSpecServiceContainerArgs']]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter(name="replicationFactor")
    def replication_factor(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replication_factor")

    @replication_factor.setter
    def replication_factor(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replication_factor", value)

    @property
    @pulumi.getter
    def sites(self) -> Optional[pulumi.Input['InfinispanSpecServiceSitesArgs']]:
        return pulumi.get(self, "sites")

    @sites.setter
    def sites(self, value: Optional[pulumi.Input['InfinispanSpecServiceSitesArgs']]):
        pulumi.set(self, "sites", value)


@pulumi.input_type
class InfinispanSpecServiceContainerArgs:
    def __init__(__self__, *,
                 storage: pulumi.Input[str]):
        """
        InfinispanServiceContainerSpec resource requirements specific for service
        """
        pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class InfinispanSpecServiceSitesArgs:
    def __init__(__self__, *,
                 local: pulumi.Input['InfinispanSpecServiceSitesLocalArgs'],
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input['InfinispanSpecServiceSitesLocationsArgs']]]] = None):
        pulumi.set(__self__, "local", local)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)

    @property
    @pulumi.getter
    def local(self) -> pulumi.Input['InfinispanSpecServiceSitesLocalArgs']:
        return pulumi.get(self, "local")

    @local.setter
    def local(self, value: pulumi.Input['InfinispanSpecServiceSitesLocalArgs']):
        pulumi.set(self, "local", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InfinispanSpecServiceSitesLocationsArgs']]]]:
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InfinispanSpecServiceSitesLocationsArgs']]]]):
        pulumi.set(self, "locations", value)


@pulumi.input_type
class InfinispanSpecServiceSitesLocalArgs:
    def __init__(__self__, *,
                 expose: pulumi.Input['InfinispanSpecServiceSitesLocalExposeArgs'],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input['InfinispanSpecServiceSitesLocalExposeArgs'] expose: ExposeSpec describe how Infinispan will be exposed externally
        """
        pulumi.set(__self__, "expose", expose)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def expose(self) -> pulumi.Input['InfinispanSpecServiceSitesLocalExposeArgs']:
        """
        ExposeSpec describe how Infinispan will be exposed externally
        """
        return pulumi.get(self, "expose")

    @expose.setter
    def expose(self, value: pulumi.Input['InfinispanSpecServiceSitesLocalExposeArgs']):
        pulumi.set(self, "expose", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class InfinispanSpecServiceSitesLocalExposeArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 host: Optional[pulumi.Input[str]] = None,
                 node_port: Optional[pulumi.Input[int]] = None):
        """
        ExposeSpec describe how Infinispan will be exposed externally
        :param pulumi.Input[str] type: Type specifies different exposition methods for datagrid
        """
        pulumi.set(__self__, "type", type)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type specifies different exposition methods for datagrid
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "node_port")

    @node_port.setter
    def node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_port", value)


@pulumi.input_type
class InfinispanSpecServiceSitesLocationsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 secret_name: pulumi.Input[str],
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class InfinispanStatusArgs:
    def __init__(__self__, *,
                 security: pulumi.Input['InfinispanStatusSecurityArgs'],
                 stateful_set_name: pulumi.Input[str],
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['InfinispanStatusConditionsArgs']]]] = None,
                 replicas_wanted_at_restart: Optional[pulumi.Input[int]] = None):
        """
        InfinispanStatus defines the observed state of Infinispan
        :param pulumi.Input['InfinispanStatusSecurityArgs'] security: InfinispanSecurity info for the user application connection
        :param pulumi.Input[Sequence[pulumi.Input['InfinispanStatusConditionsArgs']]] conditions: Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "security", security)
        pulumi.set(__self__, "stateful_set_name", stateful_set_name)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if replicas_wanted_at_restart is not None:
            pulumi.set(__self__, "replicas_wanted_at_restart", replicas_wanted_at_restart)

    @property
    @pulumi.getter
    def security(self) -> pulumi.Input['InfinispanStatusSecurityArgs']:
        """
        InfinispanSecurity info for the user application connection
        """
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: pulumi.Input['InfinispanStatusSecurityArgs']):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter(name="statefulSetName")
    def stateful_set_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "stateful_set_name")

    @stateful_set_name.setter
    def stateful_set_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "stateful_set_name", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InfinispanStatusConditionsArgs']]]]:
        """
        Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InfinispanStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="replicasWantedAtRestart")
    def replicas_wanted_at_restart(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas_wanted_at_restart")

    @replicas_wanted_at_restart.setter
    def replicas_wanted_at_restart(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas_wanted_at_restart", value)


@pulumi.input_type
class InfinispanStatusConditionsArgs:
    def __init__(__self__, *,
                 message: pulumi.Input[str],
                 status: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        InfinispanCondition define a condition of the cluster
        :param pulumi.Input[str] message: Human-readable message indicating details about last transition.
        :param pulumi.Input[str] status: Status is the status of the condition.
        :param pulumi.Input[str] type: Type is the type of the condition.
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[str]:
        """
        Human-readable message indicating details about last transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[str]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status is the status of the condition.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type is the type of the condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class InfinispanStatusSecurityArgs:
    def __init__(__self__, *,
                 endpoint_encryption: Optional[pulumi.Input['InfinispanStatusSecurityEndpointEncryptionArgs']] = None,
                 endpoint_secret_name: Optional[pulumi.Input[str]] = None):
        """
        InfinispanSecurity info for the user application connection
        :param pulumi.Input['InfinispanStatusSecurityEndpointEncryptionArgs'] endpoint_encryption: EndpointEncryption configuration
        """
        if endpoint_encryption is not None:
            pulumi.set(__self__, "endpoint_encryption", endpoint_encryption)
        if endpoint_secret_name is not None:
            pulumi.set(__self__, "endpoint_secret_name", endpoint_secret_name)

    @property
    @pulumi.getter(name="endpointEncryption")
    def endpoint_encryption(self) -> Optional[pulumi.Input['InfinispanStatusSecurityEndpointEncryptionArgs']]:
        """
        EndpointEncryption configuration
        """
        return pulumi.get(self, "endpoint_encryption")

    @endpoint_encryption.setter
    def endpoint_encryption(self, value: Optional[pulumi.Input['InfinispanStatusSecurityEndpointEncryptionArgs']]):
        pulumi.set(self, "endpoint_encryption", value)

    @property
    @pulumi.getter(name="endpointSecretName")
    def endpoint_secret_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "endpoint_secret_name")

    @endpoint_secret_name.setter
    def endpoint_secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_secret_name", value)


@pulumi.input_type
class InfinispanStatusSecurityEndpointEncryptionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cert_secret_name: Optional[pulumi.Input[str]] = None,
                 cert_service_name: Optional[pulumi.Input[str]] = None):
        """
        EndpointEncryption configuration
        """
        pulumi.set(__self__, "type", type)
        if cert_secret_name is not None:
            pulumi.set(__self__, "cert_secret_name", cert_secret_name)
        if cert_service_name is not None:
            pulumi.set(__self__, "cert_service_name", cert_service_name)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="certSecretName")
    def cert_secret_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_secret_name")

    @cert_secret_name.setter
    def cert_secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_secret_name", value)

    @property
    @pulumi.getter(name="certServiceName")
    def cert_service_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_service_name")

    @cert_service_name.setter
    def cert_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_service_name", value)



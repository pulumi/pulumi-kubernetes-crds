# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'BackupSpecArgs',
    'BackupSpecContainerArgs',
    'BackupSpecResourcesArgs',
    'BackupSpecVolumeArgs',
    'BackupStatusArgs',
    'CacheSpecArgs',
    'CacheSpecAdminAuthArgs',
    'CacheSpecAdminAuthPasswordArgs',
    'CacheSpecAdminAuthUsernameArgs',
    'CacheStatusArgs',
    'CacheStatusConditionsArgs',
    'RestoreSpecArgs',
    'RestoreSpecContainerArgs',
    'RestoreSpecResourcesArgs',
    'RestoreStatusArgs',
]

@pulumi.input_type
class BackupSpecArgs:
    def __init__(__self__, *,
                 cluster: pulumi.Input[str],
                 container: Optional[pulumi.Input['BackupSpecContainerArgs']] = None,
                 resources: Optional[pulumi.Input['BackupSpecResourcesArgs']] = None,
                 volume: Optional[pulumi.Input['BackupSpecVolumeArgs']] = None):
        """
        BackupSpec defines the desired state of Backup
        :param pulumi.Input['BackupSpecContainerArgs'] container: InfinispanContainerSpec specify resource requirements per container
        """
        pulumi.set(__self__, "cluster", cluster)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)

    @property
    @pulumi.getter
    def cluster(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster", value)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input['BackupSpecContainerArgs']]:
        """
        InfinispanContainerSpec specify resource requirements per container
        """
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input['BackupSpecContainerArgs']]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['BackupSpecResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['BackupSpecResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input['BackupSpecVolumeArgs']]:
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input['BackupSpecVolumeArgs']]):
        pulumi.set(self, "volume", value)


@pulumi.input_type
class BackupSpecContainerArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[str]] = None,
                 extra_jvm_opts: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        InfinispanContainerSpec specify resource requirements per container
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if extra_jvm_opts is not None:
            pulumi.set(__self__, "extra_jvm_opts", extra_jvm_opts)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="extraJvmOpts")
    def extra_jvm_opts(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extra_jvm_opts")

    @extra_jvm_opts.setter
    def extra_jvm_opts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_jvm_opts", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class BackupSpecResourcesArgs:
    def __init__(__self__, *,
                 cache_configs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 caches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 counters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 proto_schemas: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 scripts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if cache_configs is not None:
            pulumi.set(__self__, "cache_configs", cache_configs)
        if caches is not None:
            pulumi.set(__self__, "caches", caches)
        if counters is not None:
            pulumi.set(__self__, "counters", counters)
        if proto_schemas is not None:
            pulumi.set(__self__, "proto_schemas", proto_schemas)
        if scripts is not None:
            pulumi.set(__self__, "scripts", scripts)

    @property
    @pulumi.getter(name="cacheConfigs")
    def cache_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "cache_configs")

    @cache_configs.setter
    def cache_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cache_configs", value)

    @property
    @pulumi.getter
    def caches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "caches")

    @caches.setter
    def caches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "caches", value)

    @property
    @pulumi.getter
    def counters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "counters")

    @counters.setter
    def counters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "counters", value)

    @property
    @pulumi.getter(name="protoSchemas")
    def proto_schemas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "proto_schemas")

    @proto_schemas.setter
    def proto_schemas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "proto_schemas", value)

    @property
    @pulumi.getter
    def scripts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "scripts")

    @scripts.setter
    def scripts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scripts", value)


@pulumi.input_type
class BackupSpecVolumeArgs:
    def __init__(__self__, *,
                 storage: Optional[pulumi.Input[str]] = None,
                 storage_class_name: Optional[pulumi.Input[str]] = None):
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_class_name")

    @storage_class_name.setter
    def storage_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_class_name", value)


@pulumi.input_type
class BackupStatusArgs:
    def __init__(__self__, *,
                 phase: pulumi.Input[str],
                 pvc: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        BackupStatus defines the observed state of Backup
        :param pulumi.Input[str] phase: State indicates the current state of the backup operation
        :param pulumi.Input[str] pvc: The name of the created PersistentVolumeClaim used to store the backup
        :param pulumi.Input[str] reason: Reason indicates the reason for any backup related failures.
        """
        pulumi.set(__self__, "phase", phase)
        if pvc is not None:
            pulumi.set(__self__, "pvc", pvc)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def phase(self) -> pulumi.Input[str]:
        """
        State indicates the current state of the backup operation
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: pulumi.Input[str]):
        pulumi.set(self, "phase", value)

    @property
    @pulumi.getter
    def pvc(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the created PersistentVolumeClaim used to store the backup
        """
        return pulumi.get(self, "pvc")

    @pvc.setter
    def pvc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pvc", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason indicates the reason for any backup related failures.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class CacheSpecArgs:
    def __init__(__self__, *,
                 admin_auth: Optional[pulumi.Input['CacheSpecAdminAuthArgs']] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 template: Optional[pulumi.Input[str]] = None,
                 template_name: Optional[pulumi.Input[str]] = None):
        """
        CacheSpec defines the desired state of Cache
        :param pulumi.Input['CacheSpecAdminAuthArgs'] admin_auth: Authentication info
        :param pulumi.Input[str] cluster_name: Name of the cluster where to create the cache
        :param pulumi.Input[str] name: Name of the cache to be created. If empty ObjectMeta.Name will be used
        :param pulumi.Input[str] template: Cache template in XML format
        :param pulumi.Input[str] template_name: Name of the template to be used to create this cache
        """
        if admin_auth is not None:
            pulumi.set(__self__, "admin_auth", admin_auth)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="adminAuth")
    def admin_auth(self) -> Optional[pulumi.Input['CacheSpecAdminAuthArgs']]:
        """
        Authentication info
        """
        return pulumi.get(self, "admin_auth")

    @admin_auth.setter
    def admin_auth(self, value: Optional[pulumi.Input['CacheSpecAdminAuthArgs']]):
        pulumi.set(self, "admin_auth", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the cluster where to create the cache
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the cache to be created. If empty ObjectMeta.Name will be used
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[str]]:
        """
        Cache template in XML format
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the template to be used to create this cache
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_name", value)


@pulumi.input_type
class CacheSpecAdminAuthArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input['CacheSpecAdminAuthPasswordArgs']] = None,
                 secret_name: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input['CacheSpecAdminAuthUsernameArgs']] = None):
        """
        Authentication info
        :param pulumi.Input['CacheSpecAdminAuthPasswordArgs'] password: Secret and key containing the admin password for authentication.
        :param pulumi.Input[str] secret_name: name of the secret containing both admin username and password
        :param pulumi.Input['CacheSpecAdminAuthUsernameArgs'] username: Secret and key containing the admin username for authentication.
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input['CacheSpecAdminAuthPasswordArgs']]:
        """
        Secret and key containing the admin password for authentication.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input['CacheSpecAdminAuthPasswordArgs']]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the secret containing both admin username and password
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input['CacheSpecAdminAuthUsernameArgs']]:
        """
        Secret and key containing the admin username for authentication.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input['CacheSpecAdminAuthUsernameArgs']]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class CacheSpecAdminAuthPasswordArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Secret and key containing the admin password for authentication.
        :param pulumi.Input[str] key: The key of the secret to select from.  Must be a valid secret key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class CacheSpecAdminAuthUsernameArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Secret and key containing the admin username for authentication.
        :param pulumi.Input[str] key: The key of the secret to select from.  Must be a valid secret key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class CacheStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['CacheStatusConditionsArgs']]]] = None,
                 service_name: Optional[pulumi.Input[str]] = None):
        """
        CacheStatus defines the observed state of Cache
        :param pulumi.Input[Sequence[pulumi.Input['CacheStatusConditionsArgs']]] conditions: Conditions list for this cache
        :param pulumi.Input[str] service_name: Service name that exposes the cache inside the cluster
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CacheStatusConditionsArgs']]]]:
        """
        Conditions list for this cache
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CacheStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name that exposes the cache inside the cluster
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)


@pulumi.input_type
class CacheStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 message: Optional[pulumi.Input[str]] = None):
        """
        CacheCondition define a condition of the cluster
        :param pulumi.Input[str] status: Status is the status of the condition.
        :param pulumi.Input[str] type: Type is the type of the condition.
        :param pulumi.Input[str] message: Human-readable message indicating details about last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status is the status of the condition.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type is the type of the condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Human-readable message indicating details about last transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)


@pulumi.input_type
class RestoreSpecArgs:
    def __init__(__self__, *,
                 backup: pulumi.Input[str],
                 cluster: pulumi.Input[str],
                 container: Optional[pulumi.Input['RestoreSpecContainerArgs']] = None,
                 resources: Optional[pulumi.Input['RestoreSpecResourcesArgs']] = None):
        """
        BackupSpec defines the desired state of Backup
        :param pulumi.Input['RestoreSpecContainerArgs'] container: InfinispanContainerSpec specify resource requirements per container
        """
        pulumi.set(__self__, "backup", backup)
        pulumi.set(__self__, "cluster", cluster)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def backup(self) -> pulumi.Input[str]:
        return pulumi.get(self, "backup")

    @backup.setter
    def backup(self, value: pulumi.Input[str]):
        pulumi.set(self, "backup", value)

    @property
    @pulumi.getter
    def cluster(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster", value)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input['RestoreSpecContainerArgs']]:
        """
        InfinispanContainerSpec specify resource requirements per container
        """
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input['RestoreSpecContainerArgs']]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['RestoreSpecResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['RestoreSpecResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class RestoreSpecContainerArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[str]] = None,
                 extra_jvm_opts: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[str]] = None):
        """
        InfinispanContainerSpec specify resource requirements per container
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if extra_jvm_opts is not None:
            pulumi.set(__self__, "extra_jvm_opts", extra_jvm_opts)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="extraJvmOpts")
    def extra_jvm_opts(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extra_jvm_opts")

    @extra_jvm_opts.setter
    def extra_jvm_opts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_jvm_opts", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class RestoreSpecResourcesArgs:
    def __init__(__self__, *,
                 cache_configs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 caches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 counters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 proto_schemas: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 scripts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if cache_configs is not None:
            pulumi.set(__self__, "cache_configs", cache_configs)
        if caches is not None:
            pulumi.set(__self__, "caches", caches)
        if counters is not None:
            pulumi.set(__self__, "counters", counters)
        if proto_schemas is not None:
            pulumi.set(__self__, "proto_schemas", proto_schemas)
        if scripts is not None:
            pulumi.set(__self__, "scripts", scripts)

    @property
    @pulumi.getter(name="cacheConfigs")
    def cache_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "cache_configs")

    @cache_configs.setter
    def cache_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cache_configs", value)

    @property
    @pulumi.getter
    def caches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "caches")

    @caches.setter
    def caches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "caches", value)

    @property
    @pulumi.getter
    def counters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "counters")

    @counters.setter
    def counters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "counters", value)

    @property
    @pulumi.getter(name="protoSchemas")
    def proto_schemas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "proto_schemas")

    @proto_schemas.setter
    def proto_schemas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "proto_schemas", value)

    @property
    @pulumi.getter
    def scripts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "scripts")

    @scripts.setter
    def scripts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scripts", value)


@pulumi.input_type
class RestoreStatusArgs:
    def __init__(__self__, *,
                 phase: pulumi.Input[str],
                 reason: Optional[pulumi.Input[str]] = None):
        """
        RestoreStatus defines the observed state of Restore
        :param pulumi.Input[str] phase: State indicates the current state of the restore operation
        :param pulumi.Input[str] reason: Reason indicates the reason for any Restore related failures.
        """
        pulumi.set(__self__, "phase", phase)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def phase(self) -> pulumi.Input[str]:
        """
        State indicates the current state of the restore operation
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: pulumi.Input[str]):
        pulumi.set(self, "phase", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason indicates the reason for any Restore related failures.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)



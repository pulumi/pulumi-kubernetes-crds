// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Alertmanager describes an Alertmanager cluster.
type AlertmanagerType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the desired behavior of the Alertmanager cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec AlertmanagerSpec `pulumi:"spec"`
	// Most recent observed status of the Alertmanager cluster. Read-only. Not included when requesting from the apiserver, only from the Prometheus Operator API itself. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *AlertmanagerStatus `pulumi:"status"`
}

// AlertmanagerTypeInput is an input type that accepts AlertmanagerTypeArgs and AlertmanagerTypeOutput values.
// You can construct a concrete instance of `AlertmanagerTypeInput` via:
//
//          AlertmanagerTypeArgs{...}
type AlertmanagerTypeInput interface {
	pulumi.Input

	ToAlertmanagerTypeOutput() AlertmanagerTypeOutput
	ToAlertmanagerTypeOutputWithContext(context.Context) AlertmanagerTypeOutput
}

// Alertmanager describes an Alertmanager cluster.
type AlertmanagerTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Specification of the desired behavior of the Alertmanager cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec AlertmanagerSpecInput `pulumi:"spec"`
	// Most recent observed status of the Alertmanager cluster. Read-only. Not included when requesting from the apiserver, only from the Prometheus Operator API itself. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status AlertmanagerStatusPtrInput `pulumi:"status"`
}

func (AlertmanagerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerType)(nil)).Elem()
}

func (i AlertmanagerTypeArgs) ToAlertmanagerTypeOutput() AlertmanagerTypeOutput {
	return i.ToAlertmanagerTypeOutputWithContext(context.Background())
}

func (i AlertmanagerTypeArgs) ToAlertmanagerTypeOutputWithContext(ctx context.Context) AlertmanagerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerTypeOutput)
}

// Alertmanager describes an Alertmanager cluster.
type AlertmanagerTypeOutput struct{ *pulumi.OutputState }

func (AlertmanagerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerType)(nil)).Elem()
}

func (o AlertmanagerTypeOutput) ToAlertmanagerTypeOutput() AlertmanagerTypeOutput {
	return o
}

func (o AlertmanagerTypeOutput) ToAlertmanagerTypeOutputWithContext(ctx context.Context) AlertmanagerTypeOutput {
	return o
}

func (o AlertmanagerTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o AlertmanagerTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o AlertmanagerTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v AlertmanagerType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Specification of the desired behavior of the Alertmanager cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o AlertmanagerTypeOutput) Spec() AlertmanagerSpecOutput {
	return o.ApplyT(func(v AlertmanagerType) AlertmanagerSpec { return v.Spec }).(AlertmanagerSpecOutput)
}

// Most recent observed status of the Alertmanager cluster. Read-only. Not included when requesting from the apiserver, only from the Prometheus Operator API itself. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o AlertmanagerTypeOutput) Status() AlertmanagerStatusPtrOutput {
	return o.ApplyT(func(v AlertmanagerType) *AlertmanagerStatus { return v.Status }).(AlertmanagerStatusPtrOutput)
}

type AlertmanagerMetadata struct {
}

// AlertmanagerMetadataInput is an input type that accepts AlertmanagerMetadataArgs and AlertmanagerMetadataOutput values.
// You can construct a concrete instance of `AlertmanagerMetadataInput` via:
//
//          AlertmanagerMetadataArgs{...}
type AlertmanagerMetadataInput interface {
	pulumi.Input

	ToAlertmanagerMetadataOutput() AlertmanagerMetadataOutput
	ToAlertmanagerMetadataOutputWithContext(context.Context) AlertmanagerMetadataOutput
}

type AlertmanagerMetadataArgs struct {
}

func (AlertmanagerMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerMetadata)(nil)).Elem()
}

func (i AlertmanagerMetadataArgs) ToAlertmanagerMetadataOutput() AlertmanagerMetadataOutput {
	return i.ToAlertmanagerMetadataOutputWithContext(context.Background())
}

func (i AlertmanagerMetadataArgs) ToAlertmanagerMetadataOutputWithContext(ctx context.Context) AlertmanagerMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerMetadataOutput)
}

type AlertmanagerMetadataOutput struct{ *pulumi.OutputState }

func (AlertmanagerMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerMetadata)(nil)).Elem()
}

func (o AlertmanagerMetadataOutput) ToAlertmanagerMetadataOutput() AlertmanagerMetadataOutput {
	return o
}

func (o AlertmanagerMetadataOutput) ToAlertmanagerMetadataOutputWithContext(ctx context.Context) AlertmanagerMetadataOutput {
	return o
}

// Specification of the desired behavior of the Alertmanager cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
type AlertmanagerSpec struct {
	// AdditionalPeers allows injecting a set of additional Alertmanagers to peer with to form a highly available cluster.
	AdditionalPeers []string `pulumi:"additionalPeers"`
	// If specified, the pod's scheduling constraints.
	Affinity *AlertmanagerSpecAffinity `pulumi:"affinity"`
	// Base image that is used to deploy pods, without tag.
	BaseImage *string `pulumi:"baseImage"`
	// ConfigMaps is a list of ConfigMaps in the same namespace as the Alertmanager object, which shall be mounted into the Alertmanager Pods. The ConfigMaps are mounted into /etc/alertmanager/configmaps/<configmap-name>.
	ConfigMaps []string `pulumi:"configMaps"`
	// ConfigSecret is the name of a Kubernetes Secret in the same namespace as the Alertmanager object, which contains configuration for this Alertmanager instance. Defaults to 'alertmanager-<alertmanager-name>' The secret is mounted into /etc/alertmanager/config.
	ConfigSecret *string `pulumi:"configSecret"`
	// Containers allows injecting additional containers. This is meant to allow adding an authentication proxy to an Alertmanager pod.
	Containers []AlertmanagerSpecContainers `pulumi:"containers"`
	// The external URL the Alertmanager instances will be available under. This is necessary to generate correct URLs. This is necessary if Alertmanager is not served from root of a DNS name.
	ExternalUrl *string `pulumi:"externalUrl"`
	// Image if specified has precedence over baseImage, tag and sha combinations. Specifying the version is still necessary to ensure the Prometheus Operator knows what version of Alertmanager is being configured.
	Image *string `pulumi:"image"`
	// An optional list of references to secrets in the same namespace to use for pulling prometheus and alertmanager images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod
	ImagePullSecrets []AlertmanagerSpecImagePullSecrets `pulumi:"imagePullSecrets"`
	// InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the Alertmanager configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.
	InitContainers []AlertmanagerSpecInitContainers `pulumi:"initContainers"`
	// ListenLocal makes the Alertmanager server listen on loopback, so that it does not bind against the Pod IP. Note this is only for the Alertmanager UI, not the gossip communication.
	ListenLocal *bool `pulumi:"listenLocal"`
	// Log format for Alertmanager to be configured with.
	LogFormat *string `pulumi:"logFormat"`
	// Log level for Alertmanager to be configured with.
	LogLevel *string `pulumi:"logLevel"`
	// Define which Nodes the Pods are scheduled on.
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// If set to true all actions on the underlaying managed objects are not goint to be performed, except for delete actions.
	Paused *bool `pulumi:"paused"`
	// PodMetadata configures Labels and Annotations which are propagated to the alertmanager pods.
	PodMetadata *AlertmanagerSpecPodMetadata `pulumi:"podMetadata"`
	// Port name used for the pods and governing service. This defaults to web
	PortName *string `pulumi:"portName"`
	// Priority class assigned to the Pods
	PriorityClassName *string `pulumi:"priorityClassName"`
	// Size is the expected size of the alertmanager cluster. The controller will eventually make the size of the running cluster equal to the expected size.
	Replicas *int `pulumi:"replicas"`
	// Define resources requests and limits for single Pods.
	Resources *AlertmanagerSpecResources `pulumi:"resources"`
	// Time duration Alertmanager shall retain data for. Default is '120h', and must match the regular expression `[0-9]+(ms|s|m|h)` (milliseconds seconds minutes hours).
	Retention *string `pulumi:"retention"`
	// The route prefix Alertmanager registers HTTP handlers for. This is useful, if using ExternalURL and a proxy is rewriting HTTP routes of a request, and the actual ExternalURL is still true, but the server serves requests under a different route prefix. For example for use with `kubectl proxy`.
	RoutePrefix *string `pulumi:"routePrefix"`
	// Secrets is a list of Secrets in the same namespace as the Alertmanager object, which shall be mounted into the Alertmanager Pods. The Secrets are mounted into /etc/alertmanager/secrets/<secret-name>.
	Secrets []string `pulumi:"secrets"`
	// SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.
	SecurityContext *AlertmanagerSpecSecurityContext `pulumi:"securityContext"`
	// ServiceAccountName is the name of the ServiceAccount to use to run the Prometheus Pods.
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// SHA of Alertmanager container image to be deployed. Defaults to the value of `version`. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set.
	Sha *string `pulumi:"sha"`
	// Storage is the definition of how storage will be used by the Alertmanager instances.
	Storage *AlertmanagerSpecStorage `pulumi:"storage"`
	// Tag of Alertmanager container image to be deployed. Defaults to the value of `version`. Version is ignored if Tag is set.
	Tag *string `pulumi:"tag"`
	// If specified, the pod's tolerations.
	Tolerations []AlertmanagerSpecTolerations `pulumi:"tolerations"`
	// Version the cluster should be on.
	Version *string `pulumi:"version"`
	// VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition. VolumeMounts specified will be appended to other VolumeMounts in the alertmanager container, that are generated as a result of StorageSpec objects.
	VolumeMounts []AlertmanagerSpecVolumeMounts `pulumi:"volumeMounts"`
	// Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.
	Volumes []AlertmanagerSpecVolumes `pulumi:"volumes"`
}

// AlertmanagerSpecInput is an input type that accepts AlertmanagerSpecArgs and AlertmanagerSpecOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInput` via:
//
//          AlertmanagerSpecArgs{...}
type AlertmanagerSpecInput interface {
	pulumi.Input

	ToAlertmanagerSpecOutput() AlertmanagerSpecOutput
	ToAlertmanagerSpecOutputWithContext(context.Context) AlertmanagerSpecOutput
}

// Specification of the desired behavior of the Alertmanager cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
type AlertmanagerSpecArgs struct {
	// AdditionalPeers allows injecting a set of additional Alertmanagers to peer with to form a highly available cluster.
	AdditionalPeers pulumi.StringArrayInput `pulumi:"additionalPeers"`
	// If specified, the pod's scheduling constraints.
	Affinity AlertmanagerSpecAffinityPtrInput `pulumi:"affinity"`
	// Base image that is used to deploy pods, without tag.
	BaseImage pulumi.StringPtrInput `pulumi:"baseImage"`
	// ConfigMaps is a list of ConfigMaps in the same namespace as the Alertmanager object, which shall be mounted into the Alertmanager Pods. The ConfigMaps are mounted into /etc/alertmanager/configmaps/<configmap-name>.
	ConfigMaps pulumi.StringArrayInput `pulumi:"configMaps"`
	// ConfigSecret is the name of a Kubernetes Secret in the same namespace as the Alertmanager object, which contains configuration for this Alertmanager instance. Defaults to 'alertmanager-<alertmanager-name>' The secret is mounted into /etc/alertmanager/config.
	ConfigSecret pulumi.StringPtrInput `pulumi:"configSecret"`
	// Containers allows injecting additional containers. This is meant to allow adding an authentication proxy to an Alertmanager pod.
	Containers AlertmanagerSpecContainersArrayInput `pulumi:"containers"`
	// The external URL the Alertmanager instances will be available under. This is necessary to generate correct URLs. This is necessary if Alertmanager is not served from root of a DNS name.
	ExternalUrl pulumi.StringPtrInput `pulumi:"externalUrl"`
	// Image if specified has precedence over baseImage, tag and sha combinations. Specifying the version is still necessary to ensure the Prometheus Operator knows what version of Alertmanager is being configured.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// An optional list of references to secrets in the same namespace to use for pulling prometheus and alertmanager images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod
	ImagePullSecrets AlertmanagerSpecImagePullSecretsArrayInput `pulumi:"imagePullSecrets"`
	// InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the Alertmanager configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.
	InitContainers AlertmanagerSpecInitContainersArrayInput `pulumi:"initContainers"`
	// ListenLocal makes the Alertmanager server listen on loopback, so that it does not bind against the Pod IP. Note this is only for the Alertmanager UI, not the gossip communication.
	ListenLocal pulumi.BoolPtrInput `pulumi:"listenLocal"`
	// Log format for Alertmanager to be configured with.
	LogFormat pulumi.StringPtrInput `pulumi:"logFormat"`
	// Log level for Alertmanager to be configured with.
	LogLevel pulumi.StringPtrInput `pulumi:"logLevel"`
	// Define which Nodes the Pods are scheduled on.
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// If set to true all actions on the underlaying managed objects are not goint to be performed, except for delete actions.
	Paused pulumi.BoolPtrInput `pulumi:"paused"`
	// PodMetadata configures Labels and Annotations which are propagated to the alertmanager pods.
	PodMetadata AlertmanagerSpecPodMetadataPtrInput `pulumi:"podMetadata"`
	// Port name used for the pods and governing service. This defaults to web
	PortName pulumi.StringPtrInput `pulumi:"portName"`
	// Priority class assigned to the Pods
	PriorityClassName pulumi.StringPtrInput `pulumi:"priorityClassName"`
	// Size is the expected size of the alertmanager cluster. The controller will eventually make the size of the running cluster equal to the expected size.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// Define resources requests and limits for single Pods.
	Resources AlertmanagerSpecResourcesPtrInput `pulumi:"resources"`
	// Time duration Alertmanager shall retain data for. Default is '120h', and must match the regular expression `[0-9]+(ms|s|m|h)` (milliseconds seconds minutes hours).
	Retention pulumi.StringPtrInput `pulumi:"retention"`
	// The route prefix Alertmanager registers HTTP handlers for. This is useful, if using ExternalURL and a proxy is rewriting HTTP routes of a request, and the actual ExternalURL is still true, but the server serves requests under a different route prefix. For example for use with `kubectl proxy`.
	RoutePrefix pulumi.StringPtrInput `pulumi:"routePrefix"`
	// Secrets is a list of Secrets in the same namespace as the Alertmanager object, which shall be mounted into the Alertmanager Pods. The Secrets are mounted into /etc/alertmanager/secrets/<secret-name>.
	Secrets pulumi.StringArrayInput `pulumi:"secrets"`
	// SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.
	SecurityContext AlertmanagerSpecSecurityContextPtrInput `pulumi:"securityContext"`
	// ServiceAccountName is the name of the ServiceAccount to use to run the Prometheus Pods.
	ServiceAccountName pulumi.StringPtrInput `pulumi:"serviceAccountName"`
	// SHA of Alertmanager container image to be deployed. Defaults to the value of `version`. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set.
	Sha pulumi.StringPtrInput `pulumi:"sha"`
	// Storage is the definition of how storage will be used by the Alertmanager instances.
	Storage AlertmanagerSpecStoragePtrInput `pulumi:"storage"`
	// Tag of Alertmanager container image to be deployed. Defaults to the value of `version`. Version is ignored if Tag is set.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// If specified, the pod's tolerations.
	Tolerations AlertmanagerSpecTolerationsArrayInput `pulumi:"tolerations"`
	// Version the cluster should be on.
	Version pulumi.StringPtrInput `pulumi:"version"`
	// VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition. VolumeMounts specified will be appended to other VolumeMounts in the alertmanager container, that are generated as a result of StorageSpec objects.
	VolumeMounts AlertmanagerSpecVolumeMountsArrayInput `pulumi:"volumeMounts"`
	// Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.
	Volumes AlertmanagerSpecVolumesArrayInput `pulumi:"volumes"`
}

func (AlertmanagerSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpec)(nil)).Elem()
}

func (i AlertmanagerSpecArgs) ToAlertmanagerSpecOutput() AlertmanagerSpecOutput {
	return i.ToAlertmanagerSpecOutputWithContext(context.Background())
}

func (i AlertmanagerSpecArgs) ToAlertmanagerSpecOutputWithContext(ctx context.Context) AlertmanagerSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecOutput)
}

func (i AlertmanagerSpecArgs) ToAlertmanagerSpecPtrOutput() AlertmanagerSpecPtrOutput {
	return i.ToAlertmanagerSpecPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecArgs) ToAlertmanagerSpecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecOutput).ToAlertmanagerSpecPtrOutputWithContext(ctx)
}

// AlertmanagerSpecPtrInput is an input type that accepts AlertmanagerSpecArgs, AlertmanagerSpecPtr and AlertmanagerSpecPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecPtrInput` via:
//
//          AlertmanagerSpecArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecPtrOutput() AlertmanagerSpecPtrOutput
	ToAlertmanagerSpecPtrOutputWithContext(context.Context) AlertmanagerSpecPtrOutput
}

type alertmanagerSpecPtrType AlertmanagerSpecArgs

func AlertmanagerSpecPtr(v *AlertmanagerSpecArgs) AlertmanagerSpecPtrInput {
	return (*alertmanagerSpecPtrType)(v)
}

func (*alertmanagerSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpec)(nil)).Elem()
}

func (i *alertmanagerSpecPtrType) ToAlertmanagerSpecPtrOutput() AlertmanagerSpecPtrOutput {
	return i.ToAlertmanagerSpecPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecPtrType) ToAlertmanagerSpecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecPtrOutput)
}

// Specification of the desired behavior of the Alertmanager cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
type AlertmanagerSpecOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpec)(nil)).Elem()
}

func (o AlertmanagerSpecOutput) ToAlertmanagerSpecOutput() AlertmanagerSpecOutput {
	return o
}

func (o AlertmanagerSpecOutput) ToAlertmanagerSpecOutputWithContext(ctx context.Context) AlertmanagerSpecOutput {
	return o
}

func (o AlertmanagerSpecOutput) ToAlertmanagerSpecPtrOutput() AlertmanagerSpecPtrOutput {
	return o.ToAlertmanagerSpecPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecOutput) ToAlertmanagerSpecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpec) *AlertmanagerSpec {
		return &v
	}).(AlertmanagerSpecPtrOutput)
}

// AdditionalPeers allows injecting a set of additional Alertmanagers to peer with to form a highly available cluster.
func (o AlertmanagerSpecOutput) AdditionalPeers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpec) []string { return v.AdditionalPeers }).(pulumi.StringArrayOutput)
}

// If specified, the pod's scheduling constraints.
func (o AlertmanagerSpecOutput) Affinity() AlertmanagerSpecAffinityPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpec) *AlertmanagerSpecAffinity { return v.Affinity }).(AlertmanagerSpecAffinityPtrOutput)
}

// Base image that is used to deploy pods, without tag.
func (o AlertmanagerSpecOutput) BaseImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpec) *string { return v.BaseImage }).(pulumi.StringPtrOutput)
}

// ConfigMaps is a list of ConfigMaps in the same namespace as the Alertmanager object, which shall be mounted into the Alertmanager Pods. The ConfigMaps are mounted into /etc/alertmanager/configmaps/<configmap-name>.
func (o AlertmanagerSpecOutput) ConfigMaps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpec) []string { return v.ConfigMaps }).(pulumi.StringArrayOutput)
}

// ConfigSecret is the name of a Kubernetes Secret in the same namespace as the Alertmanager object, which contains configuration for this Alertmanager instance. Defaults to 'alertmanager-<alertmanager-name>' The secret is mounted into /etc/alertmanager/config.
func (o AlertmanagerSpecOutput) ConfigSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpec) *string { return v.ConfigSecret }).(pulumi.StringPtrOutput)
}

// Containers allows injecting additional containers. This is meant to allow adding an authentication proxy to an Alertmanager pod.
func (o AlertmanagerSpecOutput) Containers() AlertmanagerSpecContainersArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpec) []AlertmanagerSpecContainers { return v.Containers }).(AlertmanagerSpecContainersArrayOutput)
}

// The external URL the Alertmanager instances will be available under. This is necessary to generate correct URLs. This is necessary if Alertmanager is not served from root of a DNS name.
func (o AlertmanagerSpecOutput) ExternalUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpec) *string { return v.ExternalUrl }).(pulumi.StringPtrOutput)
}

// Image if specified has precedence over baseImage, tag and sha combinations. Specifying the version is still necessary to ensure the Prometheus Operator knows what version of Alertmanager is being configured.
func (o AlertmanagerSpecOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpec) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// An optional list of references to secrets in the same namespace to use for pulling prometheus and alertmanager images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod
func (o AlertmanagerSpecOutput) ImagePullSecrets() AlertmanagerSpecImagePullSecretsArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpec) []AlertmanagerSpecImagePullSecrets { return v.ImagePullSecrets }).(AlertmanagerSpecImagePullSecretsArrayOutput)
}

// InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the Alertmanager configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.
func (o AlertmanagerSpecOutput) InitContainers() AlertmanagerSpecInitContainersArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpec) []AlertmanagerSpecInitContainers { return v.InitContainers }).(AlertmanagerSpecInitContainersArrayOutput)
}

// ListenLocal makes the Alertmanager server listen on loopback, so that it does not bind against the Pod IP. Note this is only for the Alertmanager UI, not the gossip communication.
func (o AlertmanagerSpecOutput) ListenLocal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpec) *bool { return v.ListenLocal }).(pulumi.BoolPtrOutput)
}

// Log format for Alertmanager to be configured with.
func (o AlertmanagerSpecOutput) LogFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpec) *string { return v.LogFormat }).(pulumi.StringPtrOutput)
}

// Log level for Alertmanager to be configured with.
func (o AlertmanagerSpecOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpec) *string { return v.LogLevel }).(pulumi.StringPtrOutput)
}

// Define which Nodes the Pods are scheduled on.
func (o AlertmanagerSpecOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertmanagerSpec) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// If set to true all actions on the underlaying managed objects are not goint to be performed, except for delete actions.
func (o AlertmanagerSpecOutput) Paused() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpec) *bool { return v.Paused }).(pulumi.BoolPtrOutput)
}

// PodMetadata configures Labels and Annotations which are propagated to the alertmanager pods.
func (o AlertmanagerSpecOutput) PodMetadata() AlertmanagerSpecPodMetadataPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpec) *AlertmanagerSpecPodMetadata { return v.PodMetadata }).(AlertmanagerSpecPodMetadataPtrOutput)
}

// Port name used for the pods and governing service. This defaults to web
func (o AlertmanagerSpecOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpec) *string { return v.PortName }).(pulumi.StringPtrOutput)
}

// Priority class assigned to the Pods
func (o AlertmanagerSpecOutput) PriorityClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpec) *string { return v.PriorityClassName }).(pulumi.StringPtrOutput)
}

// Size is the expected size of the alertmanager cluster. The controller will eventually make the size of the running cluster equal to the expected size.
func (o AlertmanagerSpecOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Define resources requests and limits for single Pods.
func (o AlertmanagerSpecOutput) Resources() AlertmanagerSpecResourcesPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpec) *AlertmanagerSpecResources { return v.Resources }).(AlertmanagerSpecResourcesPtrOutput)
}

// Time duration Alertmanager shall retain data for. Default is '120h', and must match the regular expression `[0-9]+(ms|s|m|h)` (milliseconds seconds minutes hours).
func (o AlertmanagerSpecOutput) Retention() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpec) *string { return v.Retention }).(pulumi.StringPtrOutput)
}

// The route prefix Alertmanager registers HTTP handlers for. This is useful, if using ExternalURL and a proxy is rewriting HTTP routes of a request, and the actual ExternalURL is still true, but the server serves requests under a different route prefix. For example for use with `kubectl proxy`.
func (o AlertmanagerSpecOutput) RoutePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpec) *string { return v.RoutePrefix }).(pulumi.StringPtrOutput)
}

// Secrets is a list of Secrets in the same namespace as the Alertmanager object, which shall be mounted into the Alertmanager Pods. The Secrets are mounted into /etc/alertmanager/secrets/<secret-name>.
func (o AlertmanagerSpecOutput) Secrets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpec) []string { return v.Secrets }).(pulumi.StringArrayOutput)
}

// SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.
func (o AlertmanagerSpecOutput) SecurityContext() AlertmanagerSpecSecurityContextPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpec) *AlertmanagerSpecSecurityContext { return v.SecurityContext }).(AlertmanagerSpecSecurityContextPtrOutput)
}

// ServiceAccountName is the name of the ServiceAccount to use to run the Prometheus Pods.
func (o AlertmanagerSpecOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpec) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

// SHA of Alertmanager container image to be deployed. Defaults to the value of `version`. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set.
func (o AlertmanagerSpecOutput) Sha() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpec) *string { return v.Sha }).(pulumi.StringPtrOutput)
}

// Storage is the definition of how storage will be used by the Alertmanager instances.
func (o AlertmanagerSpecOutput) Storage() AlertmanagerSpecStoragePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpec) *AlertmanagerSpecStorage { return v.Storage }).(AlertmanagerSpecStoragePtrOutput)
}

// Tag of Alertmanager container image to be deployed. Defaults to the value of `version`. Version is ignored if Tag is set.
func (o AlertmanagerSpecOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpec) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// If specified, the pod's tolerations.
func (o AlertmanagerSpecOutput) Tolerations() AlertmanagerSpecTolerationsArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpec) []AlertmanagerSpecTolerations { return v.Tolerations }).(AlertmanagerSpecTolerationsArrayOutput)
}

// Version the cluster should be on.
func (o AlertmanagerSpecOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpec) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition. VolumeMounts specified will be appended to other VolumeMounts in the alertmanager container, that are generated as a result of StorageSpec objects.
func (o AlertmanagerSpecOutput) VolumeMounts() AlertmanagerSpecVolumeMountsArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpec) []AlertmanagerSpecVolumeMounts { return v.VolumeMounts }).(AlertmanagerSpecVolumeMountsArrayOutput)
}

// Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.
func (o AlertmanagerSpecOutput) Volumes() AlertmanagerSpecVolumesArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpec) []AlertmanagerSpecVolumes { return v.Volumes }).(AlertmanagerSpecVolumesArrayOutput)
}

type AlertmanagerSpecPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpec)(nil)).Elem()
}

func (o AlertmanagerSpecPtrOutput) ToAlertmanagerSpecPtrOutput() AlertmanagerSpecPtrOutput {
	return o
}

func (o AlertmanagerSpecPtrOutput) ToAlertmanagerSpecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecPtrOutput {
	return o
}

func (o AlertmanagerSpecPtrOutput) Elem() AlertmanagerSpecOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) AlertmanagerSpec { return *v }).(AlertmanagerSpecOutput)
}

// AdditionalPeers allows injecting a set of additional Alertmanagers to peer with to form a highly available cluster.
func (o AlertmanagerSpecPtrOutput) AdditionalPeers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) []string {
		if v == nil {
			return nil
		}
		return v.AdditionalPeers
	}).(pulumi.StringArrayOutput)
}

// If specified, the pod's scheduling constraints.
func (o AlertmanagerSpecPtrOutput) Affinity() AlertmanagerSpecAffinityPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) *AlertmanagerSpecAffinity {
		if v == nil {
			return nil
		}
		return v.Affinity
	}).(AlertmanagerSpecAffinityPtrOutput)
}

// Base image that is used to deploy pods, without tag.
func (o AlertmanagerSpecPtrOutput) BaseImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) *string {
		if v == nil {
			return nil
		}
		return v.BaseImage
	}).(pulumi.StringPtrOutput)
}

// ConfigMaps is a list of ConfigMaps in the same namespace as the Alertmanager object, which shall be mounted into the Alertmanager Pods. The ConfigMaps are mounted into /etc/alertmanager/configmaps/<configmap-name>.
func (o AlertmanagerSpecPtrOutput) ConfigMaps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) []string {
		if v == nil {
			return nil
		}
		return v.ConfigMaps
	}).(pulumi.StringArrayOutput)
}

// ConfigSecret is the name of a Kubernetes Secret in the same namespace as the Alertmanager object, which contains configuration for this Alertmanager instance. Defaults to 'alertmanager-<alertmanager-name>' The secret is mounted into /etc/alertmanager/config.
func (o AlertmanagerSpecPtrOutput) ConfigSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) *string {
		if v == nil {
			return nil
		}
		return v.ConfigSecret
	}).(pulumi.StringPtrOutput)
}

// Containers allows injecting additional containers. This is meant to allow adding an authentication proxy to an Alertmanager pod.
func (o AlertmanagerSpecPtrOutput) Containers() AlertmanagerSpecContainersArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) []AlertmanagerSpecContainers {
		if v == nil {
			return nil
		}
		return v.Containers
	}).(AlertmanagerSpecContainersArrayOutput)
}

// The external URL the Alertmanager instances will be available under. This is necessary to generate correct URLs. This is necessary if Alertmanager is not served from root of a DNS name.
func (o AlertmanagerSpecPtrOutput) ExternalUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalUrl
	}).(pulumi.StringPtrOutput)
}

// Image if specified has precedence over baseImage, tag and sha combinations. Specifying the version is still necessary to ensure the Prometheus Operator knows what version of Alertmanager is being configured.
func (o AlertmanagerSpecPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// An optional list of references to secrets in the same namespace to use for pulling prometheus and alertmanager images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod
func (o AlertmanagerSpecPtrOutput) ImagePullSecrets() AlertmanagerSpecImagePullSecretsArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) []AlertmanagerSpecImagePullSecrets {
		if v == nil {
			return nil
		}
		return v.ImagePullSecrets
	}).(AlertmanagerSpecImagePullSecretsArrayOutput)
}

// InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the Alertmanager configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.
func (o AlertmanagerSpecPtrOutput) InitContainers() AlertmanagerSpecInitContainersArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) []AlertmanagerSpecInitContainers {
		if v == nil {
			return nil
		}
		return v.InitContainers
	}).(AlertmanagerSpecInitContainersArrayOutput)
}

// ListenLocal makes the Alertmanager server listen on loopback, so that it does not bind against the Pod IP. Note this is only for the Alertmanager UI, not the gossip communication.
func (o AlertmanagerSpecPtrOutput) ListenLocal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) *bool {
		if v == nil {
			return nil
		}
		return v.ListenLocal
	}).(pulumi.BoolPtrOutput)
}

// Log format for Alertmanager to be configured with.
func (o AlertmanagerSpecPtrOutput) LogFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) *string {
		if v == nil {
			return nil
		}
		return v.LogFormat
	}).(pulumi.StringPtrOutput)
}

// Log level for Alertmanager to be configured with.
func (o AlertmanagerSpecPtrOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) *string {
		if v == nil {
			return nil
		}
		return v.LogLevel
	}).(pulumi.StringPtrOutput)
}

// Define which Nodes the Pods are scheduled on.
func (o AlertmanagerSpecPtrOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringMapOutput)
}

// If set to true all actions on the underlaying managed objects are not goint to be performed, except for delete actions.
func (o AlertmanagerSpecPtrOutput) Paused() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Paused
	}).(pulumi.BoolPtrOutput)
}

// PodMetadata configures Labels and Annotations which are propagated to the alertmanager pods.
func (o AlertmanagerSpecPtrOutput) PodMetadata() AlertmanagerSpecPodMetadataPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) *AlertmanagerSpecPodMetadata {
		if v == nil {
			return nil
		}
		return v.PodMetadata
	}).(AlertmanagerSpecPodMetadataPtrOutput)
}

// Port name used for the pods and governing service. This defaults to web
func (o AlertmanagerSpecPtrOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) *string {
		if v == nil {
			return nil
		}
		return v.PortName
	}).(pulumi.StringPtrOutput)
}

// Priority class assigned to the Pods
func (o AlertmanagerSpecPtrOutput) PriorityClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) *string {
		if v == nil {
			return nil
		}
		return v.PriorityClassName
	}).(pulumi.StringPtrOutput)
}

// Size is the expected size of the alertmanager cluster. The controller will eventually make the size of the running cluster equal to the expected size.
func (o AlertmanagerSpecPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Define resources requests and limits for single Pods.
func (o AlertmanagerSpecPtrOutput) Resources() AlertmanagerSpecResourcesPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) *AlertmanagerSpecResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(AlertmanagerSpecResourcesPtrOutput)
}

// Time duration Alertmanager shall retain data for. Default is '120h', and must match the regular expression `[0-9]+(ms|s|m|h)` (milliseconds seconds minutes hours).
func (o AlertmanagerSpecPtrOutput) Retention() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) *string {
		if v == nil {
			return nil
		}
		return v.Retention
	}).(pulumi.StringPtrOutput)
}

// The route prefix Alertmanager registers HTTP handlers for. This is useful, if using ExternalURL and a proxy is rewriting HTTP routes of a request, and the actual ExternalURL is still true, but the server serves requests under a different route prefix. For example for use with `kubectl proxy`.
func (o AlertmanagerSpecPtrOutput) RoutePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) *string {
		if v == nil {
			return nil
		}
		return v.RoutePrefix
	}).(pulumi.StringPtrOutput)
}

// Secrets is a list of Secrets in the same namespace as the Alertmanager object, which shall be mounted into the Alertmanager Pods. The Secrets are mounted into /etc/alertmanager/secrets/<secret-name>.
func (o AlertmanagerSpecPtrOutput) Secrets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) []string {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(pulumi.StringArrayOutput)
}

// SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.
func (o AlertmanagerSpecPtrOutput) SecurityContext() AlertmanagerSpecSecurityContextPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) *AlertmanagerSpecSecurityContext {
		if v == nil {
			return nil
		}
		return v.SecurityContext
	}).(AlertmanagerSpecSecurityContextPtrOutput)
}

// ServiceAccountName is the name of the ServiceAccount to use to run the Prometheus Pods.
func (o AlertmanagerSpecPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// SHA of Alertmanager container image to be deployed. Defaults to the value of `version`. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set.
func (o AlertmanagerSpecPtrOutput) Sha() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) *string {
		if v == nil {
			return nil
		}
		return v.Sha
	}).(pulumi.StringPtrOutput)
}

// Storage is the definition of how storage will be used by the Alertmanager instances.
func (o AlertmanagerSpecPtrOutput) Storage() AlertmanagerSpecStoragePtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) *AlertmanagerSpecStorage {
		if v == nil {
			return nil
		}
		return v.Storage
	}).(AlertmanagerSpecStoragePtrOutput)
}

// Tag of Alertmanager container image to be deployed. Defaults to the value of `version`. Version is ignored if Tag is set.
func (o AlertmanagerSpecPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// If specified, the pod's tolerations.
func (o AlertmanagerSpecPtrOutput) Tolerations() AlertmanagerSpecTolerationsArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) []AlertmanagerSpecTolerations {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(AlertmanagerSpecTolerationsArrayOutput)
}

// Version the cluster should be on.
func (o AlertmanagerSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition. VolumeMounts specified will be appended to other VolumeMounts in the alertmanager container, that are generated as a result of StorageSpec objects.
func (o AlertmanagerSpecPtrOutput) VolumeMounts() AlertmanagerSpecVolumeMountsArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) []AlertmanagerSpecVolumeMounts {
		if v == nil {
			return nil
		}
		return v.VolumeMounts
	}).(AlertmanagerSpecVolumeMountsArrayOutput)
}

// Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.
func (o AlertmanagerSpecPtrOutput) Volumes() AlertmanagerSpecVolumesArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpec) []AlertmanagerSpecVolumes {
		if v == nil {
			return nil
		}
		return v.Volumes
	}).(AlertmanagerSpecVolumesArrayOutput)
}

// If specified, the pod's scheduling constraints.
type AlertmanagerSpecAffinity struct {
	// Describes node affinity scheduling rules for the pod.
	NodeAffinity *AlertmanagerSpecAffinityNodeAffinity `pulumi:"nodeAffinity"`
	// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
	PodAffinity *AlertmanagerSpecAffinityPodAffinity `pulumi:"podAffinity"`
	// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
	PodAntiAffinity *AlertmanagerSpecAffinityPodAntiAffinity `pulumi:"podAntiAffinity"`
}

// AlertmanagerSpecAffinityInput is an input type that accepts AlertmanagerSpecAffinityArgs and AlertmanagerSpecAffinityOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityInput` via:
//
//          AlertmanagerSpecAffinityArgs{...}
type AlertmanagerSpecAffinityInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityOutput() AlertmanagerSpecAffinityOutput
	ToAlertmanagerSpecAffinityOutputWithContext(context.Context) AlertmanagerSpecAffinityOutput
}

// If specified, the pod's scheduling constraints.
type AlertmanagerSpecAffinityArgs struct {
	// Describes node affinity scheduling rules for the pod.
	NodeAffinity AlertmanagerSpecAffinityNodeAffinityPtrInput `pulumi:"nodeAffinity"`
	// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
	PodAffinity AlertmanagerSpecAffinityPodAffinityPtrInput `pulumi:"podAffinity"`
	// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
	PodAntiAffinity AlertmanagerSpecAffinityPodAntiAffinityPtrInput `pulumi:"podAntiAffinity"`
}

func (AlertmanagerSpecAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinity)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityArgs) ToAlertmanagerSpecAffinityOutput() AlertmanagerSpecAffinityOutput {
	return i.ToAlertmanagerSpecAffinityOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityArgs) ToAlertmanagerSpecAffinityOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityOutput)
}

func (i AlertmanagerSpecAffinityArgs) ToAlertmanagerSpecAffinityPtrOutput() AlertmanagerSpecAffinityPtrOutput {
	return i.ToAlertmanagerSpecAffinityPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityArgs) ToAlertmanagerSpecAffinityPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityOutput).ToAlertmanagerSpecAffinityPtrOutputWithContext(ctx)
}

// AlertmanagerSpecAffinityPtrInput is an input type that accepts AlertmanagerSpecAffinityArgs, AlertmanagerSpecAffinityPtr and AlertmanagerSpecAffinityPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPtrInput` via:
//
//          AlertmanagerSpecAffinityArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecAffinityPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPtrOutput() AlertmanagerSpecAffinityPtrOutput
	ToAlertmanagerSpecAffinityPtrOutputWithContext(context.Context) AlertmanagerSpecAffinityPtrOutput
}

type alertmanagerSpecAffinityPtrType AlertmanagerSpecAffinityArgs

func AlertmanagerSpecAffinityPtr(v *AlertmanagerSpecAffinityArgs) AlertmanagerSpecAffinityPtrInput {
	return (*alertmanagerSpecAffinityPtrType)(v)
}

func (*alertmanagerSpecAffinityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecAffinity)(nil)).Elem()
}

func (i *alertmanagerSpecAffinityPtrType) ToAlertmanagerSpecAffinityPtrOutput() AlertmanagerSpecAffinityPtrOutput {
	return i.ToAlertmanagerSpecAffinityPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecAffinityPtrType) ToAlertmanagerSpecAffinityPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPtrOutput)
}

// If specified, the pod's scheduling constraints.
type AlertmanagerSpecAffinityOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinity)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityOutput) ToAlertmanagerSpecAffinityOutput() AlertmanagerSpecAffinityOutput {
	return o
}

func (o AlertmanagerSpecAffinityOutput) ToAlertmanagerSpecAffinityOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityOutput {
	return o
}

func (o AlertmanagerSpecAffinityOutput) ToAlertmanagerSpecAffinityPtrOutput() AlertmanagerSpecAffinityPtrOutput {
	return o.ToAlertmanagerSpecAffinityPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecAffinityOutput) ToAlertmanagerSpecAffinityPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinity) *AlertmanagerSpecAffinity {
		return &v
	}).(AlertmanagerSpecAffinityPtrOutput)
}

// Describes node affinity scheduling rules for the pod.
func (o AlertmanagerSpecAffinityOutput) NodeAffinity() AlertmanagerSpecAffinityNodeAffinityPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinity) *AlertmanagerSpecAffinityNodeAffinity { return v.NodeAffinity }).(AlertmanagerSpecAffinityNodeAffinityPtrOutput)
}

// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
func (o AlertmanagerSpecAffinityOutput) PodAffinity() AlertmanagerSpecAffinityPodAffinityPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinity) *AlertmanagerSpecAffinityPodAffinity { return v.PodAffinity }).(AlertmanagerSpecAffinityPodAffinityPtrOutput)
}

// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
func (o AlertmanagerSpecAffinityOutput) PodAntiAffinity() AlertmanagerSpecAffinityPodAntiAffinityPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinity) *AlertmanagerSpecAffinityPodAntiAffinity { return v.PodAntiAffinity }).(AlertmanagerSpecAffinityPodAntiAffinityPtrOutput)
}

type AlertmanagerSpecAffinityPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecAffinity)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPtrOutput) ToAlertmanagerSpecAffinityPtrOutput() AlertmanagerSpecAffinityPtrOutput {
	return o
}

func (o AlertmanagerSpecAffinityPtrOutput) ToAlertmanagerSpecAffinityPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPtrOutput {
	return o
}

func (o AlertmanagerSpecAffinityPtrOutput) Elem() AlertmanagerSpecAffinityOutput {
	return o.ApplyT(func(v *AlertmanagerSpecAffinity) AlertmanagerSpecAffinity { return *v }).(AlertmanagerSpecAffinityOutput)
}

// Describes node affinity scheduling rules for the pod.
func (o AlertmanagerSpecAffinityPtrOutput) NodeAffinity() AlertmanagerSpecAffinityNodeAffinityPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecAffinity) *AlertmanagerSpecAffinityNodeAffinity {
		if v == nil {
			return nil
		}
		return v.NodeAffinity
	}).(AlertmanagerSpecAffinityNodeAffinityPtrOutput)
}

// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
func (o AlertmanagerSpecAffinityPtrOutput) PodAffinity() AlertmanagerSpecAffinityPodAffinityPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecAffinity) *AlertmanagerSpecAffinityPodAffinity {
		if v == nil {
			return nil
		}
		return v.PodAffinity
	}).(AlertmanagerSpecAffinityPodAffinityPtrOutput)
}

// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
func (o AlertmanagerSpecAffinityPtrOutput) PodAntiAffinity() AlertmanagerSpecAffinityPodAntiAffinityPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecAffinity) *AlertmanagerSpecAffinityPodAntiAffinity {
		if v == nil {
			return nil
		}
		return v.PodAntiAffinity
	}).(AlertmanagerSpecAffinityPodAntiAffinityPtrOutput)
}

// Describes node affinity scheduling rules for the pod.
type AlertmanagerSpecAffinityNodeAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
	RequiredDuringSchedulingIgnoredDuringExecution *AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

// AlertmanagerSpecAffinityNodeAffinityInput is an input type that accepts AlertmanagerSpecAffinityNodeAffinityArgs and AlertmanagerSpecAffinityNodeAffinityOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityNodeAffinityInput` via:
//
//          AlertmanagerSpecAffinityNodeAffinityArgs{...}
type AlertmanagerSpecAffinityNodeAffinityInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityNodeAffinityOutput() AlertmanagerSpecAffinityNodeAffinityOutput
	ToAlertmanagerSpecAffinityNodeAffinityOutputWithContext(context.Context) AlertmanagerSpecAffinityNodeAffinityOutput
}

// Describes node affinity scheduling rules for the pod.
type AlertmanagerSpecAffinityNodeAffinityArgs struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
	RequiredDuringSchedulingIgnoredDuringExecution AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrInput `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

func (AlertmanagerSpecAffinityNodeAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityNodeAffinity)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityNodeAffinityArgs) ToAlertmanagerSpecAffinityNodeAffinityOutput() AlertmanagerSpecAffinityNodeAffinityOutput {
	return i.ToAlertmanagerSpecAffinityNodeAffinityOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityNodeAffinityArgs) ToAlertmanagerSpecAffinityNodeAffinityOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityNodeAffinityOutput)
}

func (i AlertmanagerSpecAffinityNodeAffinityArgs) ToAlertmanagerSpecAffinityNodeAffinityPtrOutput() AlertmanagerSpecAffinityNodeAffinityPtrOutput {
	return i.ToAlertmanagerSpecAffinityNodeAffinityPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityNodeAffinityArgs) ToAlertmanagerSpecAffinityNodeAffinityPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityNodeAffinityOutput).ToAlertmanagerSpecAffinityNodeAffinityPtrOutputWithContext(ctx)
}

// AlertmanagerSpecAffinityNodeAffinityPtrInput is an input type that accepts AlertmanagerSpecAffinityNodeAffinityArgs, AlertmanagerSpecAffinityNodeAffinityPtr and AlertmanagerSpecAffinityNodeAffinityPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityNodeAffinityPtrInput` via:
//
//          AlertmanagerSpecAffinityNodeAffinityArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecAffinityNodeAffinityPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityNodeAffinityPtrOutput() AlertmanagerSpecAffinityNodeAffinityPtrOutput
	ToAlertmanagerSpecAffinityNodeAffinityPtrOutputWithContext(context.Context) AlertmanagerSpecAffinityNodeAffinityPtrOutput
}

type alertmanagerSpecAffinityNodeAffinityPtrType AlertmanagerSpecAffinityNodeAffinityArgs

func AlertmanagerSpecAffinityNodeAffinityPtr(v *AlertmanagerSpecAffinityNodeAffinityArgs) AlertmanagerSpecAffinityNodeAffinityPtrInput {
	return (*alertmanagerSpecAffinityNodeAffinityPtrType)(v)
}

func (*alertmanagerSpecAffinityNodeAffinityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecAffinityNodeAffinity)(nil)).Elem()
}

func (i *alertmanagerSpecAffinityNodeAffinityPtrType) ToAlertmanagerSpecAffinityNodeAffinityPtrOutput() AlertmanagerSpecAffinityNodeAffinityPtrOutput {
	return i.ToAlertmanagerSpecAffinityNodeAffinityPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecAffinityNodeAffinityPtrType) ToAlertmanagerSpecAffinityNodeAffinityPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityNodeAffinityPtrOutput)
}

// Describes node affinity scheduling rules for the pod.
type AlertmanagerSpecAffinityNodeAffinityOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityNodeAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityNodeAffinity)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityNodeAffinityOutput) ToAlertmanagerSpecAffinityNodeAffinityOutput() AlertmanagerSpecAffinityNodeAffinityOutput {
	return o
}

func (o AlertmanagerSpecAffinityNodeAffinityOutput) ToAlertmanagerSpecAffinityNodeAffinityOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityOutput {
	return o
}

func (o AlertmanagerSpecAffinityNodeAffinityOutput) ToAlertmanagerSpecAffinityNodeAffinityPtrOutput() AlertmanagerSpecAffinityNodeAffinityPtrOutput {
	return o.ToAlertmanagerSpecAffinityNodeAffinityPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecAffinityNodeAffinityOutput) ToAlertmanagerSpecAffinityNodeAffinityPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityNodeAffinity) *AlertmanagerSpecAffinityNodeAffinity {
		return &v
	}).(AlertmanagerSpecAffinityNodeAffinityPtrOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
func (o AlertmanagerSpecAffinityNodeAffinityOutput) PreferredDuringSchedulingIgnoredDuringExecution() AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityNodeAffinity) []AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
func (o AlertmanagerSpecAffinityNodeAffinityOutput) RequiredDuringSchedulingIgnoredDuringExecution() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityNodeAffinity) *AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput)
}

type AlertmanagerSpecAffinityNodeAffinityPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityNodeAffinityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecAffinityNodeAffinity)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityNodeAffinityPtrOutput) ToAlertmanagerSpecAffinityNodeAffinityPtrOutput() AlertmanagerSpecAffinityNodeAffinityPtrOutput {
	return o
}

func (o AlertmanagerSpecAffinityNodeAffinityPtrOutput) ToAlertmanagerSpecAffinityNodeAffinityPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityPtrOutput {
	return o
}

func (o AlertmanagerSpecAffinityNodeAffinityPtrOutput) Elem() AlertmanagerSpecAffinityNodeAffinityOutput {
	return o.ApplyT(func(v *AlertmanagerSpecAffinityNodeAffinity) AlertmanagerSpecAffinityNodeAffinity { return *v }).(AlertmanagerSpecAffinityNodeAffinityOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
func (o AlertmanagerSpecAffinityNodeAffinityPtrOutput) PreferredDuringSchedulingIgnoredDuringExecution() AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecAffinityNodeAffinity) []AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
		if v == nil {
			return nil
		}
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
func (o AlertmanagerSpecAffinityNodeAffinityPtrOutput) RequiredDuringSchedulingIgnoredDuringExecution() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecAffinityNodeAffinity) *AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		if v == nil {
			return nil
		}
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput)
}

// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
type AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution struct {
	// A node selector term, associated with the corresponding weight.
	Preference AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference `pulumi:"preference"`
	// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
	Weight int `pulumi:"weight"`
}

// AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput is an input type that accepts AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs and AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput` via:
//
//          AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs{...}
type AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput() AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput
	ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Context) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput
}

// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
type AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs struct {
	// A node selector term, associated with the corresponding weight.
	Preference AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceInput `pulumi:"preference"`
	// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput() AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return i.ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput)
}

// AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput is an input type that accepts AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray and AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput` via:
//
//          AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray{ AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs{...} }
type AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput() AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput
	ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Context) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput
}

type AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray []AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput

func (AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput() AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return i.ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
type AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput() AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

func (o AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

// A node selector term, associated with the corresponding weight.
func (o AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) Preference() AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
		return v.Preference
	}).(AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput)
}

// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
func (o AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution) int {
		return v.Weight
	}).(pulumi.IntOutput)
}

type AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput() AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
		return vs[0].([]AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution)[vs[1].(int)]
	}).(AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput)
}

// A node selector term, associated with the corresponding weight.
type AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions []AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions `pulumi:"matchExpressions"`
	// A list of node selector requirements by node's fields.
	MatchFields []AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields `pulumi:"matchFields"`
}

// AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceInput is an input type that accepts AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs and AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceInput` via:
//
//          AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs{...}
type AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput() AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput
	ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutputWithContext(context.Context) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput
}

// A node selector term, associated with the corresponding weight.
type AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// A list of node selector requirements by node's fields.
	MatchFields AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayInput `pulumi:"matchFields"`
}

func (AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput() AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput {
	return i.ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput)
}

// A node selector term, associated with the corresponding weight.
type AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput() AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput {
	return o
}

func (o AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput {
	return o
}

// A list of node selector requirements by node's labels.
func (o AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput) MatchExpressions() AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference) []AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
		return v.MatchExpressions
	}).(AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput)
}

// A list of node selector requirements by node's fields.
func (o AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput) MatchFields() AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference) []AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
		return v.MatchFields
	}).(AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions struct {
	// The label key that the selector applies to.
	Key string `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator string `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsInput is an input type that accepts AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs and AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsInput` via:
//
//          AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs{...}
type AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput() AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput
	ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutputWithContext(context.Context) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs struct {
	// The label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator pulumi.StringInput `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput() AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput {
	return i.ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput)
}

// AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayInput is an input type that accepts AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArray and AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayInput` via:
//
//          AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArray{ AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs{...} }
type AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput() AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput
	ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutputWithContext(context.Context) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput
}

type AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArray []AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsInput

func (AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArray) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput() AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput {
	return i.ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArray) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput() AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput {
	return o
}

func (o AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput {
	return o
}

// The label key that the selector applies to.
func (o AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions) string {
		return v.Key
	}).(pulumi.StringOutput)
}

// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
func (o AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
func (o AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput() AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
		return vs[0].([]AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions)[vs[1].(int)]
	}).(AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields struct {
	// The label key that the selector applies to.
	Key string `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator string `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsInput is an input type that accepts AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs and AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsInput` via:
//
//          AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs{...}
type AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput() AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput
	ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutputWithContext(context.Context) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs struct {
	// The label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator pulumi.StringInput `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput() AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput {
	return i.ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput)
}

// AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayInput is an input type that accepts AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArray and AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayInput` via:
//
//          AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArray{ AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs{...} }
type AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput() AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput
	ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutputWithContext(context.Context) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput
}

type AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArray []AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsInput

func (AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArray) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput() AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput {
	return i.ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArray) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput() AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput {
	return o
}

func (o AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput {
	return o
}

// The label key that the selector applies to.
func (o AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields) string {
		return v.Key
	}).(pulumi.StringOutput)
}

// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
func (o AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
func (o AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput() AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput) ToAlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
		return vs[0].([]AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields)[vs[1].(int)]
	}).(AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
type AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	// Required. A list of node selector terms. The terms are ORed.
	NodeSelectorTerms []AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms `pulumi:"nodeSelectorTerms"`
}

// AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput is an input type that accepts AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs and AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput` via:
//
//          AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs{...}
type AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput
	ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Context) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
type AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs struct {
	// Required. A list of node selector terms. The terms are ORed.
	NodeSelectorTerms AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayInput `pulumi:"nodeSelectorTerms"`
}

func (AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return i.ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput)
}

func (i AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return i.ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput).ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutputWithContext(ctx)
}

// AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrInput is an input type that accepts AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs, AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtr and AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrInput` via:
//
//          AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput
	ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutputWithContext(context.Context) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput
}

type alertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrType AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs

func AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtr(v *AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrInput {
	return (*alertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrType)(v)
}

func (*alertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i *alertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrType) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return i.ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrType) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
type AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return o.ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution) *AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		return &v
	}).(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput)
}

// Required. A list of node selector terms. The terms are ORed.
func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) NodeSelectorTerms() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution) []AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
		return v.NodeSelectorTerms
	}).(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput)
}

type AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return o
}

func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return o
}

func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput) Elem() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return o.ApplyT(func(v *AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		return *v
	}).(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput)
}

// Required. A list of node selector terms. The terms are ORed.
func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput) NodeSelectorTerms() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution) []AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
		if v == nil {
			return nil
		}
		return v.NodeSelectorTerms
	}).(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput)
}

// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
type AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions []AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions `pulumi:"matchExpressions"`
	// A list of node selector requirements by node's fields.
	MatchFields []AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields `pulumi:"matchFields"`
}

// AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsInput is an input type that accepts AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs and AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsInput` via:
//
//          AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs{...}
type AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput
	ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutputWithContext(context.Context) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput
}

// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
type AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// A list of node selector requirements by node's fields.
	MatchFields AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayInput `pulumi:"matchFields"`
}

func (AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput {
	return i.ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput)
}

// AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayInput is an input type that accepts AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArray and AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayInput` via:
//
//          AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArray{ AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs{...} }
type AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput
	ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutputWithContext(context.Context) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput
}

type AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArray []AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsInput

func (AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArray) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput {
	return i.ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArray) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput)
}

// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
type AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput {
	return o
}

func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput {
	return o
}

// A list of node selector requirements by node's labels.
func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput) MatchExpressions() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms) []AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
		return v.MatchExpressions
	}).(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput)
}

// A list of node selector requirements by node's fields.
func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput) MatchFields() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms) []AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
		return v.MatchFields
	}).(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput)
}

type AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
		return vs[0].([]AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms)[vs[1].(int)]
	}).(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions struct {
	// The label key that the selector applies to.
	Key string `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator string `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsInput is an input type that accepts AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs and AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsInput` via:
//
//          AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs{...}
type AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput
	ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutputWithContext(context.Context) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs struct {
	// The label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator pulumi.StringInput `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput {
	return i.ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput)
}

// AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayInput is an input type that accepts AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArray and AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayInput` via:
//
//          AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArray{ AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs{...} }
type AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput
	ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutputWithContext(context.Context) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput
}

type AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArray []AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsInput

func (AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArray) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput {
	return i.ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArray) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput {
	return o
}

func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput {
	return o
}

// The label key that the selector applies to.
func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions) string {
		return v.Key
	}).(pulumi.StringOutput)
}

// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
		return vs[0].([]AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions)[vs[1].(int)]
	}).(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields struct {
	// The label key that the selector applies to.
	Key string `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator string `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsInput is an input type that accepts AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs and AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsInput` via:
//
//          AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs{...}
type AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput
	ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutputWithContext(context.Context) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs struct {
	// The label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator pulumi.StringInput `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput {
	return i.ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput)
}

// AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayInput is an input type that accepts AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArray and AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayInput` via:
//
//          AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArray{ AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs{...} }
type AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput
	ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutputWithContext(context.Context) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput
}

type AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArray []AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsInput

func (AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArray) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput {
	return i.ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArray) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput {
	return o
}

func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput {
	return o
}

// The label key that the selector applies to.
func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields) string {
		return v.Key
	}).(pulumi.StringOutput)
}

// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput() AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput) ToAlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
		return vs[0].([]AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields)[vs[1].(int)]
	}).(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput)
}

// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
type AlertmanagerSpecAffinityPodAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution []AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

// AlertmanagerSpecAffinityPodAffinityInput is an input type that accepts AlertmanagerSpecAffinityPodAffinityArgs and AlertmanagerSpecAffinityPodAffinityOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAffinityInput` via:
//
//          AlertmanagerSpecAffinityPodAffinityArgs{...}
type AlertmanagerSpecAffinityPodAffinityInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAffinityOutput() AlertmanagerSpecAffinityPodAffinityOutput
	ToAlertmanagerSpecAffinityPodAffinityOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAffinityOutput
}

// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
type AlertmanagerSpecAffinityPodAffinityArgs struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

func (AlertmanagerSpecAffinityPodAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAffinity)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAffinityArgs) ToAlertmanagerSpecAffinityPodAffinityOutput() AlertmanagerSpecAffinityPodAffinityOutput {
	return i.ToAlertmanagerSpecAffinityPodAffinityOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAffinityArgs) ToAlertmanagerSpecAffinityPodAffinityOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAffinityOutput)
}

func (i AlertmanagerSpecAffinityPodAffinityArgs) ToAlertmanagerSpecAffinityPodAffinityPtrOutput() AlertmanagerSpecAffinityPodAffinityPtrOutput {
	return i.ToAlertmanagerSpecAffinityPodAffinityPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAffinityArgs) ToAlertmanagerSpecAffinityPodAffinityPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAffinityOutput).ToAlertmanagerSpecAffinityPodAffinityPtrOutputWithContext(ctx)
}

// AlertmanagerSpecAffinityPodAffinityPtrInput is an input type that accepts AlertmanagerSpecAffinityPodAffinityArgs, AlertmanagerSpecAffinityPodAffinityPtr and AlertmanagerSpecAffinityPodAffinityPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAffinityPtrInput` via:
//
//          AlertmanagerSpecAffinityPodAffinityArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecAffinityPodAffinityPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAffinityPtrOutput() AlertmanagerSpecAffinityPodAffinityPtrOutput
	ToAlertmanagerSpecAffinityPodAffinityPtrOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAffinityPtrOutput
}

type alertmanagerSpecAffinityPodAffinityPtrType AlertmanagerSpecAffinityPodAffinityArgs

func AlertmanagerSpecAffinityPodAffinityPtr(v *AlertmanagerSpecAffinityPodAffinityArgs) AlertmanagerSpecAffinityPodAffinityPtrInput {
	return (*alertmanagerSpecAffinityPodAffinityPtrType)(v)
}

func (*alertmanagerSpecAffinityPodAffinityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecAffinityPodAffinity)(nil)).Elem()
}

func (i *alertmanagerSpecAffinityPodAffinityPtrType) ToAlertmanagerSpecAffinityPodAffinityPtrOutput() AlertmanagerSpecAffinityPodAffinityPtrOutput {
	return i.ToAlertmanagerSpecAffinityPodAffinityPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecAffinityPodAffinityPtrType) ToAlertmanagerSpecAffinityPodAffinityPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAffinityPtrOutput)
}

// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
type AlertmanagerSpecAffinityPodAffinityOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAffinity)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAffinityOutput) ToAlertmanagerSpecAffinityPodAffinityOutput() AlertmanagerSpecAffinityPodAffinityOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAffinityOutput) ToAlertmanagerSpecAffinityPodAffinityOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAffinityOutput) ToAlertmanagerSpecAffinityPodAffinityPtrOutput() AlertmanagerSpecAffinityPodAffinityPtrOutput {
	return o.ToAlertmanagerSpecAffinityPodAffinityPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecAffinityPodAffinityOutput) ToAlertmanagerSpecAffinityPodAffinityPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAffinity) *AlertmanagerSpecAffinityPodAffinity {
		return &v
	}).(AlertmanagerSpecAffinityPodAffinityPtrOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
func (o AlertmanagerSpecAffinityPodAffinityOutput) PreferredDuringSchedulingIgnoredDuringExecution() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAffinity) []AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
func (o AlertmanagerSpecAffinityPodAffinityOutput) RequiredDuringSchedulingIgnoredDuringExecution() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAffinity) []AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

type AlertmanagerSpecAffinityPodAffinityPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAffinityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecAffinityPodAffinity)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAffinityPtrOutput) ToAlertmanagerSpecAffinityPodAffinityPtrOutput() AlertmanagerSpecAffinityPodAffinityPtrOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAffinityPtrOutput) ToAlertmanagerSpecAffinityPodAffinityPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityPtrOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAffinityPtrOutput) Elem() AlertmanagerSpecAffinityPodAffinityOutput {
	return o.ApplyT(func(v *AlertmanagerSpecAffinityPodAffinity) AlertmanagerSpecAffinityPodAffinity { return *v }).(AlertmanagerSpecAffinityPodAffinityOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
func (o AlertmanagerSpecAffinityPodAffinityPtrOutput) PreferredDuringSchedulingIgnoredDuringExecution() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecAffinityPodAffinity) []AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
		if v == nil {
			return nil
		}
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
func (o AlertmanagerSpecAffinityPodAffinityPtrOutput) RequiredDuringSchedulingIgnoredDuringExecution() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecAffinityPodAffinity) []AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		if v == nil {
			return nil
		}
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution struct {
	// Required. A pod affinity term, associated with the corresponding weight.
	PodAffinityTerm AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm `pulumi:"podAffinityTerm"`
	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight int `pulumi:"weight"`
}

// AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput is an input type that accepts AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs and AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput` via:
//
//          AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs{...}
type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput
	ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs struct {
	// Required. A pod affinity term, associated with the corresponding weight.
	PodAffinityTerm AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermInput `pulumi:"podAffinityTerm"`
	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return i.ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput)
}

// AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput is an input type that accepts AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray and AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput` via:
//
//          AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray{ AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs{...} }
type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput
	ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput
}

type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray []AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput

func (AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return i.ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

// Required. A pod affinity term, associated with the corresponding weight.
func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) PodAffinityTerm() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
		return v.PodAffinityTerm
	}).(AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput)
}

// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution) int {
		return v.Weight
	}).(pulumi.IntOutput)
}

type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
		return vs[0].([]AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution)[vs[1].(int)]
	}).(AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput)
}

// Required. A pod affinity term, associated with the corresponding weight.
type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm struct {
	// A label query over a set of resources, in this case pods.
	LabelSelector *AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector `pulumi:"labelSelector"`
	// namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
	Namespaces []string `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `pulumi:"topologyKey"`
}

// AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermInput is an input type that accepts AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs and AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermInput` via:
//
//          AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs{...}
type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput
	ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput
}

// Required. A pod affinity term, associated with the corresponding weight.
type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs struct {
	// A label query over a set of resources, in this case pods.
	LabelSelector AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput `pulumi:"labelSelector"`
	// namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
	Namespaces pulumi.StringArrayInput `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey pulumi.StringInput `pulumi:"topologyKey"`
}

func (AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return i.ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput)
}

// Required. A pod affinity term, associated with the corresponding weight.
type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return o
}

// A label query over a set of resources, in this case pods.
func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) LabelSelector() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) *AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
		return v.LabelSelector
	}).(AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput)
}

// namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) []string {
		return v.Namespaces
	}).(pulumi.StringArrayOutput)
}

// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) TopologyKey() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) string {
		return v.TopologyKey
	}).(pulumi.StringOutput)
}

// A label query over a set of resources, in this case pods.
type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorInput is an input type that accepts AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs and AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorInput` via:
//
//          AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs{...}
type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput
	ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput
}

// A label query over a set of resources, in this case pods.
type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return i.ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput)
}

func (i AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return i.ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput).ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx)
}

// AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput is an input type that accepts AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs, AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtr and AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput` via:
//
//          AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput
	ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput
}

type alertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs

func AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtr(v *AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput {
	return (*alertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType)(v)
}

func (*alertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector)(nil)).Elem()
}

func (i *alertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return i.ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput)
}

// A label query over a set of resources, in this case pods.
type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o.ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) *AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
		return &v
	}).(AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) MatchExpressions() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) []AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
		return v.MatchExpressions
	}).(AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) Elem() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return o.ApplyT(func(v *AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
		return *v
	}).(AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) MatchExpressions() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) []AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput is an input type that accepts AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs and AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput` via:
//
//          AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs{...}
type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput
	ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return i.ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput)
}

// AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput is an input type that accepts AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray and AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput` via:
//
//          AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray{ AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs{...} }
type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput
	ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput
}

type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray []AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput

func (AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return i.ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions) string {
		return v.Key
	}).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
		return vs[0].([]AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)[vs[1].(int)]
	}).(AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabels struct {
}

// AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsInput is an input type that accepts AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsArgs and AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsInput` via:
//
//          AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsArgs{...}
type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput
	ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsArgs struct {
}

func (AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabels)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsArgs) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput {
	return i.ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsArgs) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabels)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput() AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput) ToAlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput {
	return o
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	// A label query over a set of resources, in this case pods.
	LabelSelector *AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector `pulumi:"labelSelector"`
	// namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
	Namespaces []string `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `pulumi:"topologyKey"`
}

// AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput is an input type that accepts AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs and AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput` via:
//
//          AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs{...}
type AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput
	ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs struct {
	// A label query over a set of resources, in this case pods.
	LabelSelector AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput `pulumi:"labelSelector"`
	// namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
	Namespaces pulumi.StringArrayInput `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey pulumi.StringInput `pulumi:"topologyKey"`
}

func (AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return i.ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput)
}

// AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput is an input type that accepts AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray and AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput` via:
//
//          AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray{ AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs{...} }
type AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput
	ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput
}

type AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray []AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput

func (AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return i.ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

// A label query over a set of resources, in this case pods.
func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) LabelSelector() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution) *AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
		return v.LabelSelector
	}).(AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput)
}

// namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution) []string {
		return v.Namespaces
	}).(pulumi.StringArrayOutput)
}

// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) TopologyKey() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution) string {
		return v.TopologyKey
	}).(pulumi.StringOutput)
}

type AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		return vs[0].([]AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution)[vs[1].(int)]
	}).(AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput)
}

// A label query over a set of resources, in this case pods.
type AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorInput is an input type that accepts AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs and AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorInput` via:
//
//          AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs{...}
type AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput
	ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput
}

// A label query over a set of resources, in this case pods.
type AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return i.ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput)
}

func (i AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return i.ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput).ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx)
}

// AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput is an input type that accepts AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs, AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtr and AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput` via:
//
//          AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput
	ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput
}

type alertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs

func AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtr(v *AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput {
	return (*alertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType)(v)
}

func (*alertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector)(nil)).Elem()
}

func (i *alertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return i.ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput)
}

// A label query over a set of resources, in this case pods.
type AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o.ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) *AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
		return &v
	}).(AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) MatchExpressions() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) []AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
		return v.MatchExpressions
	}).(AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) Elem() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return o.ApplyT(func(v *AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
		return *v
	}).(AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) MatchExpressions() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) []AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput is an input type that accepts AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs and AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput` via:
//
//          AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs{...}
type AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput
	ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return i.ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput)
}

// AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput is an input type that accepts AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray and AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput` via:
//
//          AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray{ AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs{...} }
type AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput
	ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput
}

type AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray []AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput

func (AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return i.ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions) string {
		return v.Key
	}).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
		return vs[0].([]AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)[vs[1].(int)]
	}).(AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabels struct {
}

// AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsInput is an input type that accepts AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsArgs and AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsInput` via:
//
//          AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsArgs{...}
type AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput
	ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsArgs struct {
}

func (AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabels)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsArgs) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput {
	return i.ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsArgs) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabels)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput() AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput) ToAlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput {
	return o
}

// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
type AlertmanagerSpecAffinityPodAntiAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution []AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

// AlertmanagerSpecAffinityPodAntiAffinityInput is an input type that accepts AlertmanagerSpecAffinityPodAntiAffinityArgs and AlertmanagerSpecAffinityPodAntiAffinityOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAntiAffinityInput` via:
//
//          AlertmanagerSpecAffinityPodAntiAffinityArgs{...}
type AlertmanagerSpecAffinityPodAntiAffinityInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAntiAffinityOutput() AlertmanagerSpecAffinityPodAntiAffinityOutput
	ToAlertmanagerSpecAffinityPodAntiAffinityOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAntiAffinityOutput
}

// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
type AlertmanagerSpecAffinityPodAntiAffinityArgs struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

func (AlertmanagerSpecAffinityPodAntiAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAntiAffinity)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAntiAffinityArgs) ToAlertmanagerSpecAffinityPodAntiAffinityOutput() AlertmanagerSpecAffinityPodAntiAffinityOutput {
	return i.ToAlertmanagerSpecAffinityPodAntiAffinityOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAntiAffinityArgs) ToAlertmanagerSpecAffinityPodAntiAffinityOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAntiAffinityOutput)
}

func (i AlertmanagerSpecAffinityPodAntiAffinityArgs) ToAlertmanagerSpecAffinityPodAntiAffinityPtrOutput() AlertmanagerSpecAffinityPodAntiAffinityPtrOutput {
	return i.ToAlertmanagerSpecAffinityPodAntiAffinityPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAntiAffinityArgs) ToAlertmanagerSpecAffinityPodAntiAffinityPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAntiAffinityOutput).ToAlertmanagerSpecAffinityPodAntiAffinityPtrOutputWithContext(ctx)
}

// AlertmanagerSpecAffinityPodAntiAffinityPtrInput is an input type that accepts AlertmanagerSpecAffinityPodAntiAffinityArgs, AlertmanagerSpecAffinityPodAntiAffinityPtr and AlertmanagerSpecAffinityPodAntiAffinityPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAntiAffinityPtrInput` via:
//
//          AlertmanagerSpecAffinityPodAntiAffinityArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecAffinityPodAntiAffinityPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAntiAffinityPtrOutput() AlertmanagerSpecAffinityPodAntiAffinityPtrOutput
	ToAlertmanagerSpecAffinityPodAntiAffinityPtrOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAntiAffinityPtrOutput
}

type alertmanagerSpecAffinityPodAntiAffinityPtrType AlertmanagerSpecAffinityPodAntiAffinityArgs

func AlertmanagerSpecAffinityPodAntiAffinityPtr(v *AlertmanagerSpecAffinityPodAntiAffinityArgs) AlertmanagerSpecAffinityPodAntiAffinityPtrInput {
	return (*alertmanagerSpecAffinityPodAntiAffinityPtrType)(v)
}

func (*alertmanagerSpecAffinityPodAntiAffinityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecAffinityPodAntiAffinity)(nil)).Elem()
}

func (i *alertmanagerSpecAffinityPodAntiAffinityPtrType) ToAlertmanagerSpecAffinityPodAntiAffinityPtrOutput() AlertmanagerSpecAffinityPodAntiAffinityPtrOutput {
	return i.ToAlertmanagerSpecAffinityPodAntiAffinityPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecAffinityPodAntiAffinityPtrType) ToAlertmanagerSpecAffinityPodAntiAffinityPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAntiAffinityPtrOutput)
}

// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
type AlertmanagerSpecAffinityPodAntiAffinityOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAntiAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAntiAffinity)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAntiAffinityOutput) ToAlertmanagerSpecAffinityPodAntiAffinityOutput() AlertmanagerSpecAffinityPodAntiAffinityOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAntiAffinityOutput) ToAlertmanagerSpecAffinityPodAntiAffinityOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAntiAffinityOutput) ToAlertmanagerSpecAffinityPodAntiAffinityPtrOutput() AlertmanagerSpecAffinityPodAntiAffinityPtrOutput {
	return o.ToAlertmanagerSpecAffinityPodAntiAffinityPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecAffinityPodAntiAffinityOutput) ToAlertmanagerSpecAffinityPodAntiAffinityPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAntiAffinity) *AlertmanagerSpecAffinityPodAntiAffinity {
		return &v
	}).(AlertmanagerSpecAffinityPodAntiAffinityPtrOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
func (o AlertmanagerSpecAffinityPodAntiAffinityOutput) PreferredDuringSchedulingIgnoredDuringExecution() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAntiAffinity) []AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
func (o AlertmanagerSpecAffinityPodAntiAffinityOutput) RequiredDuringSchedulingIgnoredDuringExecution() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAntiAffinity) []AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

type AlertmanagerSpecAffinityPodAntiAffinityPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAntiAffinityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecAffinityPodAntiAffinity)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAntiAffinityPtrOutput) ToAlertmanagerSpecAffinityPodAntiAffinityPtrOutput() AlertmanagerSpecAffinityPodAntiAffinityPtrOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAntiAffinityPtrOutput) ToAlertmanagerSpecAffinityPodAntiAffinityPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityPtrOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAntiAffinityPtrOutput) Elem() AlertmanagerSpecAffinityPodAntiAffinityOutput {
	return o.ApplyT(func(v *AlertmanagerSpecAffinityPodAntiAffinity) AlertmanagerSpecAffinityPodAntiAffinity { return *v }).(AlertmanagerSpecAffinityPodAntiAffinityOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
func (o AlertmanagerSpecAffinityPodAntiAffinityPtrOutput) PreferredDuringSchedulingIgnoredDuringExecution() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecAffinityPodAntiAffinity) []AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
		if v == nil {
			return nil
		}
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
func (o AlertmanagerSpecAffinityPodAntiAffinityPtrOutput) RequiredDuringSchedulingIgnoredDuringExecution() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecAffinityPodAntiAffinity) []AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		if v == nil {
			return nil
		}
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution struct {
	// Required. A pod affinity term, associated with the corresponding weight.
	PodAffinityTerm AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm `pulumi:"podAffinityTerm"`
	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight int `pulumi:"weight"`
}

// AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput is an input type that accepts AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs and AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput` via:
//
//          AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs{...}
type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput
	ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs struct {
	// Required. A pod affinity term, associated with the corresponding weight.
	PodAffinityTerm AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermInput `pulumi:"podAffinityTerm"`
	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return i.ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput)
}

// AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput is an input type that accepts AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray and AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput` via:
//
//          AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray{ AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs{...} }
type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput
	ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput
}

type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray []AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput

func (AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return i.ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

// Required. A pod affinity term, associated with the corresponding weight.
func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) PodAffinityTerm() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
		return v.PodAffinityTerm
	}).(AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput)
}

// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution) int {
		return v.Weight
	}).(pulumi.IntOutput)
}

type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
		return vs[0].([]AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution)[vs[1].(int)]
	}).(AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput)
}

// Required. A pod affinity term, associated with the corresponding weight.
type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm struct {
	// A label query over a set of resources, in this case pods.
	LabelSelector *AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector `pulumi:"labelSelector"`
	// namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
	Namespaces []string `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `pulumi:"topologyKey"`
}

// AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermInput is an input type that accepts AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs and AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermInput` via:
//
//          AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs{...}
type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput
	ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput
}

// Required. A pod affinity term, associated with the corresponding weight.
type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs struct {
	// A label query over a set of resources, in this case pods.
	LabelSelector AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput `pulumi:"labelSelector"`
	// namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
	Namespaces pulumi.StringArrayInput `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey pulumi.StringInput `pulumi:"topologyKey"`
}

func (AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return i.ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput)
}

// Required. A pod affinity term, associated with the corresponding weight.
type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return o
}

// A label query over a set of resources, in this case pods.
func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) LabelSelector() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) *AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
		return v.LabelSelector
	}).(AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput)
}

// namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) []string {
		return v.Namespaces
	}).(pulumi.StringArrayOutput)
}

// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) TopologyKey() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) string {
		return v.TopologyKey
	}).(pulumi.StringOutput)
}

// A label query over a set of resources, in this case pods.
type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorInput is an input type that accepts AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs and AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorInput` via:
//
//          AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs{...}
type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput
	ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput
}

// A label query over a set of resources, in this case pods.
type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return i.ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput)
}

func (i AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return i.ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput).ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx)
}

// AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput is an input type that accepts AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs, AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtr and AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput` via:
//
//          AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput
	ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput
}

type alertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs

func AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtr(v *AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput {
	return (*alertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType)(v)
}

func (*alertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector)(nil)).Elem()
}

func (i *alertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return i.ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput)
}

// A label query over a set of resources, in this case pods.
type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o.ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) *AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
		return &v
	}).(AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) MatchExpressions() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) []AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
		return v.MatchExpressions
	}).(AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) Elem() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return o.ApplyT(func(v *AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
		return *v
	}).(AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) MatchExpressions() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) []AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput is an input type that accepts AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs and AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput` via:
//
//          AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs{...}
type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput
	ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return i.ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput)
}

// AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput is an input type that accepts AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray and AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput` via:
//
//          AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray{ AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs{...} }
type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput
	ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput
}

type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray []AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput

func (AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return i.ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions) string {
		return v.Key
	}).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
		return vs[0].([]AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)[vs[1].(int)]
	}).(AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabels struct {
}

// AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsInput is an input type that accepts AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsArgs and AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsInput` via:
//
//          AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsArgs{...}
type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput
	ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsArgs struct {
}

func (AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabels)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsArgs) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput {
	return i.ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsArgs) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabels)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput() AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput) ToAlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput {
	return o
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	// A label query over a set of resources, in this case pods.
	LabelSelector *AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector `pulumi:"labelSelector"`
	// namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
	Namespaces []string `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `pulumi:"topologyKey"`
}

// AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput is an input type that accepts AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs and AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput` via:
//
//          AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs{...}
type AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput
	ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs struct {
	// A label query over a set of resources, in this case pods.
	LabelSelector AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput `pulumi:"labelSelector"`
	// namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
	Namespaces pulumi.StringArrayInput `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey pulumi.StringInput `pulumi:"topologyKey"`
}

func (AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return i.ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput)
}

// AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput is an input type that accepts AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray and AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput` via:
//
//          AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray{ AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs{...} }
type AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput
	ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput
}

type AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray []AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput

func (AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return i.ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

// A label query over a set of resources, in this case pods.
func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) LabelSelector() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution) *AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
		return v.LabelSelector
	}).(AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput)
}

// namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution) []string {
		return v.Namespaces
	}).(pulumi.StringArrayOutput)
}

// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) TopologyKey() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution) string {
		return v.TopologyKey
	}).(pulumi.StringOutput)
}

type AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		return vs[0].([]AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution)[vs[1].(int)]
	}).(AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput)
}

// A label query over a set of resources, in this case pods.
type AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorInput is an input type that accepts AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs and AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorInput` via:
//
//          AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs{...}
type AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput
	ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput
}

// A label query over a set of resources, in this case pods.
type AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return i.ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput)
}

func (i AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return i.ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput).ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx)
}

// AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput is an input type that accepts AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs, AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtr and AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput` via:
//
//          AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput
	ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput
}

type alertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs

func AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtr(v *AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput {
	return (*alertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType)(v)
}

func (*alertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector)(nil)).Elem()
}

func (i *alertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return i.ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput)
}

// A label query over a set of resources, in this case pods.
type AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o.ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) *AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
		return &v
	}).(AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) MatchExpressions() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) []AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
		return v.MatchExpressions
	}).(AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) Elem() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return o.ApplyT(func(v *AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
		return *v
	}).(AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) MatchExpressions() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) []AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput is an input type that accepts AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs and AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput` via:
//
//          AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs{...}
type AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput
	ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return i.ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput)
}

// AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput is an input type that accepts AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray and AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput` via:
//
//          AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray{ AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs{...} }
type AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput
	ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput
}

type AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray []AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput

func (AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return i.ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions) string {
		return v.Key
	}).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
		return vs[0].([]AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)[vs[1].(int)]
	}).(AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabels struct {
}

// AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsInput is an input type that accepts AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsArgs and AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsInput` via:
//
//          AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsArgs{...}
type AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsInput interface {
	pulumi.Input

	ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput
	ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutputWithContext(context.Context) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsArgs struct {
}

func (AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabels)(nil)).Elem()
}

func (i AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsArgs) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput {
	return i.ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsArgs) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabels)(nil)).Elem()
}

func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput() AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput {
	return o
}

func (o AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput) ToAlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutputWithContext(ctx context.Context) AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput {
	return o
}

// A single application container that you want to run within a pod.
type AlertmanagerSpecContainers struct {
	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args []string `pulumi:"args"`
	// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command []string `pulumi:"command"`
	// List of environment variables to set in the container. Cannot be updated.
	Env []AlertmanagerSpecContainersEnv `pulumi:"env"`
	// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
	EnvFrom []AlertmanagerSpecContainersEnvFrom `pulumi:"envFrom"`
	// Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
	Image *string `pulumi:"image"`
	// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Actions that the management system should take in response to container lifecycle events. Cannot be updated.
	Lifecycle *AlertmanagerSpecContainersLifecycle `pulumi:"lifecycle"`
	// Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	LivenessProbe *AlertmanagerSpecContainersLivenessProbe `pulumi:"livenessProbe"`
	// Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
	Name string `pulumi:"name"`
	// List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
	Ports []AlertmanagerSpecContainersPorts `pulumi:"ports"`
	// Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	ReadinessProbe *AlertmanagerSpecContainersReadinessProbe `pulumi:"readinessProbe"`
	// Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Resources *AlertmanagerSpecContainersResources `pulumi:"resources"`
	// Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	SecurityContext *AlertmanagerSpecContainersSecurityContext `pulumi:"securityContext"`
	// StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	StartupProbe *AlertmanagerSpecContainersStartupProbe `pulumi:"startupProbe"`
	// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
	Stdin *bool `pulumi:"stdin"`
	// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
	StdinOnce *bool `pulumi:"stdinOnce"`
	// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
	TerminationMessagePath *string `pulumi:"terminationMessagePath"`
	// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy *string `pulumi:"terminationMessagePolicy"`
	// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
	Tty *bool `pulumi:"tty"`
	// volumeDevices is the list of block devices to be used by the container. This is a beta feature.
	VolumeDevices []AlertmanagerSpecContainersVolumeDevices `pulumi:"volumeDevices"`
	// Pod volumes to mount into the container's filesystem. Cannot be updated.
	VolumeMounts []AlertmanagerSpecContainersVolumeMounts `pulumi:"volumeMounts"`
	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
	WorkingDir *string `pulumi:"workingDir"`
}

// AlertmanagerSpecContainersInput is an input type that accepts AlertmanagerSpecContainersArgs and AlertmanagerSpecContainersOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersInput` via:
//
//          AlertmanagerSpecContainersArgs{...}
type AlertmanagerSpecContainersInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersOutput() AlertmanagerSpecContainersOutput
	ToAlertmanagerSpecContainersOutputWithContext(context.Context) AlertmanagerSpecContainersOutput
}

// A single application container that you want to run within a pod.
type AlertmanagerSpecContainersArgs struct {
	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command pulumi.StringArrayInput `pulumi:"command"`
	// List of environment variables to set in the container. Cannot be updated.
	Env AlertmanagerSpecContainersEnvArrayInput `pulumi:"env"`
	// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
	EnvFrom AlertmanagerSpecContainersEnvFromArrayInput `pulumi:"envFrom"`
	// Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Actions that the management system should take in response to container lifecycle events. Cannot be updated.
	Lifecycle AlertmanagerSpecContainersLifecyclePtrInput `pulumi:"lifecycle"`
	// Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	LivenessProbe AlertmanagerSpecContainersLivenessProbePtrInput `pulumi:"livenessProbe"`
	// Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
	Name pulumi.StringInput `pulumi:"name"`
	// List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
	Ports AlertmanagerSpecContainersPortsArrayInput `pulumi:"ports"`
	// Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	ReadinessProbe AlertmanagerSpecContainersReadinessProbePtrInput `pulumi:"readinessProbe"`
	// Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Resources AlertmanagerSpecContainersResourcesPtrInput `pulumi:"resources"`
	// Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	SecurityContext AlertmanagerSpecContainersSecurityContextPtrInput `pulumi:"securityContext"`
	// StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	StartupProbe AlertmanagerSpecContainersStartupProbePtrInput `pulumi:"startupProbe"`
	// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
	Stdin pulumi.BoolPtrInput `pulumi:"stdin"`
	// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
	StdinOnce pulumi.BoolPtrInput `pulumi:"stdinOnce"`
	// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
	TerminationMessagePath pulumi.StringPtrInput `pulumi:"terminationMessagePath"`
	// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy pulumi.StringPtrInput `pulumi:"terminationMessagePolicy"`
	// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
	Tty pulumi.BoolPtrInput `pulumi:"tty"`
	// volumeDevices is the list of block devices to be used by the container. This is a beta feature.
	VolumeDevices AlertmanagerSpecContainersVolumeDevicesArrayInput `pulumi:"volumeDevices"`
	// Pod volumes to mount into the container's filesystem. Cannot be updated.
	VolumeMounts AlertmanagerSpecContainersVolumeMountsArrayInput `pulumi:"volumeMounts"`
	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
	WorkingDir pulumi.StringPtrInput `pulumi:"workingDir"`
}

func (AlertmanagerSpecContainersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainers)(nil)).Elem()
}

func (i AlertmanagerSpecContainersArgs) ToAlertmanagerSpecContainersOutput() AlertmanagerSpecContainersOutput {
	return i.ToAlertmanagerSpecContainersOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersArgs) ToAlertmanagerSpecContainersOutputWithContext(ctx context.Context) AlertmanagerSpecContainersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersOutput)
}

// AlertmanagerSpecContainersArrayInput is an input type that accepts AlertmanagerSpecContainersArray and AlertmanagerSpecContainersArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersArrayInput` via:
//
//          AlertmanagerSpecContainersArray{ AlertmanagerSpecContainersArgs{...} }
type AlertmanagerSpecContainersArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersArrayOutput() AlertmanagerSpecContainersArrayOutput
	ToAlertmanagerSpecContainersArrayOutputWithContext(context.Context) AlertmanagerSpecContainersArrayOutput
}

type AlertmanagerSpecContainersArray []AlertmanagerSpecContainersInput

func (AlertmanagerSpecContainersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecContainers)(nil)).Elem()
}

func (i AlertmanagerSpecContainersArray) ToAlertmanagerSpecContainersArrayOutput() AlertmanagerSpecContainersArrayOutput {
	return i.ToAlertmanagerSpecContainersArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersArray) ToAlertmanagerSpecContainersArrayOutputWithContext(ctx context.Context) AlertmanagerSpecContainersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersArrayOutput)
}

// A single application container that you want to run within a pod.
type AlertmanagerSpecContainersOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainers)(nil)).Elem()
}

func (o AlertmanagerSpecContainersOutput) ToAlertmanagerSpecContainersOutput() AlertmanagerSpecContainersOutput {
	return o
}

func (o AlertmanagerSpecContainersOutput) ToAlertmanagerSpecContainersOutputWithContext(ctx context.Context) AlertmanagerSpecContainersOutput {
	return o
}

// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
func (o AlertmanagerSpecContainersOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainers) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
func (o AlertmanagerSpecContainersOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainers) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// List of environment variables to set in the container. Cannot be updated.
func (o AlertmanagerSpecContainersOutput) Env() AlertmanagerSpecContainersEnvArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainers) []AlertmanagerSpecContainersEnv { return v.Env }).(AlertmanagerSpecContainersEnvArrayOutput)
}

// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
func (o AlertmanagerSpecContainersOutput) EnvFrom() AlertmanagerSpecContainersEnvFromArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainers) []AlertmanagerSpecContainersEnvFrom { return v.EnvFrom }).(AlertmanagerSpecContainersEnvFromArrayOutput)
}

// Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
func (o AlertmanagerSpecContainersOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainers) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
func (o AlertmanagerSpecContainersOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainers) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Actions that the management system should take in response to container lifecycle events. Cannot be updated.
func (o AlertmanagerSpecContainersOutput) Lifecycle() AlertmanagerSpecContainersLifecyclePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainers) *AlertmanagerSpecContainersLifecycle { return v.Lifecycle }).(AlertmanagerSpecContainersLifecyclePtrOutput)
}

// Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecContainersOutput) LivenessProbe() AlertmanagerSpecContainersLivenessProbePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainers) *AlertmanagerSpecContainersLivenessProbe { return v.LivenessProbe }).(AlertmanagerSpecContainersLivenessProbePtrOutput)
}

// Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
func (o AlertmanagerSpecContainersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainers) string { return v.Name }).(pulumi.StringOutput)
}

// List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
func (o AlertmanagerSpecContainersOutput) Ports() AlertmanagerSpecContainersPortsArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainers) []AlertmanagerSpecContainersPorts { return v.Ports }).(AlertmanagerSpecContainersPortsArrayOutput)
}

// Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecContainersOutput) ReadinessProbe() AlertmanagerSpecContainersReadinessProbePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainers) *AlertmanagerSpecContainersReadinessProbe { return v.ReadinessProbe }).(AlertmanagerSpecContainersReadinessProbePtrOutput)
}

// Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o AlertmanagerSpecContainersOutput) Resources() AlertmanagerSpecContainersResourcesPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainers) *AlertmanagerSpecContainersResources { return v.Resources }).(AlertmanagerSpecContainersResourcesPtrOutput)
}

// Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
func (o AlertmanagerSpecContainersOutput) SecurityContext() AlertmanagerSpecContainersSecurityContextPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainers) *AlertmanagerSpecContainersSecurityContext {
		return v.SecurityContext
	}).(AlertmanagerSpecContainersSecurityContextPtrOutput)
}

// StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecContainersOutput) StartupProbe() AlertmanagerSpecContainersStartupProbePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainers) *AlertmanagerSpecContainersStartupProbe { return v.StartupProbe }).(AlertmanagerSpecContainersStartupProbePtrOutput)
}

// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
func (o AlertmanagerSpecContainersOutput) Stdin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainers) *bool { return v.Stdin }).(pulumi.BoolPtrOutput)
}

// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
func (o AlertmanagerSpecContainersOutput) StdinOnce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainers) *bool { return v.StdinOnce }).(pulumi.BoolPtrOutput)
}

// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
func (o AlertmanagerSpecContainersOutput) TerminationMessagePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainers) *string { return v.TerminationMessagePath }).(pulumi.StringPtrOutput)
}

// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
func (o AlertmanagerSpecContainersOutput) TerminationMessagePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainers) *string { return v.TerminationMessagePolicy }).(pulumi.StringPtrOutput)
}

// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
func (o AlertmanagerSpecContainersOutput) Tty() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainers) *bool { return v.Tty }).(pulumi.BoolPtrOutput)
}

// volumeDevices is the list of block devices to be used by the container. This is a beta feature.
func (o AlertmanagerSpecContainersOutput) VolumeDevices() AlertmanagerSpecContainersVolumeDevicesArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainers) []AlertmanagerSpecContainersVolumeDevices { return v.VolumeDevices }).(AlertmanagerSpecContainersVolumeDevicesArrayOutput)
}

// Pod volumes to mount into the container's filesystem. Cannot be updated.
func (o AlertmanagerSpecContainersOutput) VolumeMounts() AlertmanagerSpecContainersVolumeMountsArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainers) []AlertmanagerSpecContainersVolumeMounts { return v.VolumeMounts }).(AlertmanagerSpecContainersVolumeMountsArrayOutput)
}

// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
func (o AlertmanagerSpecContainersOutput) WorkingDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainers) *string { return v.WorkingDir }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecContainersArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecContainers)(nil)).Elem()
}

func (o AlertmanagerSpecContainersArrayOutput) ToAlertmanagerSpecContainersArrayOutput() AlertmanagerSpecContainersArrayOutput {
	return o
}

func (o AlertmanagerSpecContainersArrayOutput) ToAlertmanagerSpecContainersArrayOutputWithContext(ctx context.Context) AlertmanagerSpecContainersArrayOutput {
	return o
}

func (o AlertmanagerSpecContainersArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecContainersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecContainers {
		return vs[0].([]AlertmanagerSpecContainers)[vs[1].(int)]
	}).(AlertmanagerSpecContainersOutput)
}

// EnvVar represents an environment variable present in a Container.
type AlertmanagerSpecContainersEnv struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *AlertmanagerSpecContainersEnvValueFrom `pulumi:"valueFrom"`
}

// AlertmanagerSpecContainersEnvInput is an input type that accepts AlertmanagerSpecContainersEnvArgs and AlertmanagerSpecContainersEnvOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersEnvInput` via:
//
//          AlertmanagerSpecContainersEnvArgs{...}
type AlertmanagerSpecContainersEnvInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersEnvOutput() AlertmanagerSpecContainersEnvOutput
	ToAlertmanagerSpecContainersEnvOutputWithContext(context.Context) AlertmanagerSpecContainersEnvOutput
}

// EnvVar represents an environment variable present in a Container.
type AlertmanagerSpecContainersEnvArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom AlertmanagerSpecContainersEnvValueFromPtrInput `pulumi:"valueFrom"`
}

func (AlertmanagerSpecContainersEnvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersEnv)(nil)).Elem()
}

func (i AlertmanagerSpecContainersEnvArgs) ToAlertmanagerSpecContainersEnvOutput() AlertmanagerSpecContainersEnvOutput {
	return i.ToAlertmanagerSpecContainersEnvOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersEnvArgs) ToAlertmanagerSpecContainersEnvOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersEnvOutput)
}

// AlertmanagerSpecContainersEnvArrayInput is an input type that accepts AlertmanagerSpecContainersEnvArray and AlertmanagerSpecContainersEnvArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersEnvArrayInput` via:
//
//          AlertmanagerSpecContainersEnvArray{ AlertmanagerSpecContainersEnvArgs{...} }
type AlertmanagerSpecContainersEnvArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersEnvArrayOutput() AlertmanagerSpecContainersEnvArrayOutput
	ToAlertmanagerSpecContainersEnvArrayOutputWithContext(context.Context) AlertmanagerSpecContainersEnvArrayOutput
}

type AlertmanagerSpecContainersEnvArray []AlertmanagerSpecContainersEnvInput

func (AlertmanagerSpecContainersEnvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecContainersEnv)(nil)).Elem()
}

func (i AlertmanagerSpecContainersEnvArray) ToAlertmanagerSpecContainersEnvArrayOutput() AlertmanagerSpecContainersEnvArrayOutput {
	return i.ToAlertmanagerSpecContainersEnvArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersEnvArray) ToAlertmanagerSpecContainersEnvArrayOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersEnvArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type AlertmanagerSpecContainersEnvOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersEnvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersEnv)(nil)).Elem()
}

func (o AlertmanagerSpecContainersEnvOutput) ToAlertmanagerSpecContainersEnvOutput() AlertmanagerSpecContainersEnvOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvOutput) ToAlertmanagerSpecContainersEnvOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o AlertmanagerSpecContainersEnvOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnv) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o AlertmanagerSpecContainersEnvOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnv) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o AlertmanagerSpecContainersEnvOutput) ValueFrom() AlertmanagerSpecContainersEnvValueFromPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnv) *AlertmanagerSpecContainersEnvValueFrom { return v.ValueFrom }).(AlertmanagerSpecContainersEnvValueFromPtrOutput)
}

type AlertmanagerSpecContainersEnvArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersEnvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecContainersEnv)(nil)).Elem()
}

func (o AlertmanagerSpecContainersEnvArrayOutput) ToAlertmanagerSpecContainersEnvArrayOutput() AlertmanagerSpecContainersEnvArrayOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvArrayOutput) ToAlertmanagerSpecContainersEnvArrayOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvArrayOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecContainersEnvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecContainersEnv {
		return vs[0].([]AlertmanagerSpecContainersEnv)[vs[1].(int)]
	}).(AlertmanagerSpecContainersEnvOutput)
}

// EnvFromSource represents the source of a set of ConfigMaps
type AlertmanagerSpecContainersEnvFrom struct {
	// The ConfigMap to select from
	ConfigMapRef *AlertmanagerSpecContainersEnvFromConfigMapRef `pulumi:"configMapRef"`
	// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
	Prefix *string `pulumi:"prefix"`
	// The Secret to select from
	SecretRef *AlertmanagerSpecContainersEnvFromSecretRef `pulumi:"secretRef"`
}

// AlertmanagerSpecContainersEnvFromInput is an input type that accepts AlertmanagerSpecContainersEnvFromArgs and AlertmanagerSpecContainersEnvFromOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersEnvFromInput` via:
//
//          AlertmanagerSpecContainersEnvFromArgs{...}
type AlertmanagerSpecContainersEnvFromInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersEnvFromOutput() AlertmanagerSpecContainersEnvFromOutput
	ToAlertmanagerSpecContainersEnvFromOutputWithContext(context.Context) AlertmanagerSpecContainersEnvFromOutput
}

// EnvFromSource represents the source of a set of ConfigMaps
type AlertmanagerSpecContainersEnvFromArgs struct {
	// The ConfigMap to select from
	ConfigMapRef AlertmanagerSpecContainersEnvFromConfigMapRefPtrInput `pulumi:"configMapRef"`
	// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// The Secret to select from
	SecretRef AlertmanagerSpecContainersEnvFromSecretRefPtrInput `pulumi:"secretRef"`
}

func (AlertmanagerSpecContainersEnvFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersEnvFrom)(nil)).Elem()
}

func (i AlertmanagerSpecContainersEnvFromArgs) ToAlertmanagerSpecContainersEnvFromOutput() AlertmanagerSpecContainersEnvFromOutput {
	return i.ToAlertmanagerSpecContainersEnvFromOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersEnvFromArgs) ToAlertmanagerSpecContainersEnvFromOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersEnvFromOutput)
}

// AlertmanagerSpecContainersEnvFromArrayInput is an input type that accepts AlertmanagerSpecContainersEnvFromArray and AlertmanagerSpecContainersEnvFromArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersEnvFromArrayInput` via:
//
//          AlertmanagerSpecContainersEnvFromArray{ AlertmanagerSpecContainersEnvFromArgs{...} }
type AlertmanagerSpecContainersEnvFromArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersEnvFromArrayOutput() AlertmanagerSpecContainersEnvFromArrayOutput
	ToAlertmanagerSpecContainersEnvFromArrayOutputWithContext(context.Context) AlertmanagerSpecContainersEnvFromArrayOutput
}

type AlertmanagerSpecContainersEnvFromArray []AlertmanagerSpecContainersEnvFromInput

func (AlertmanagerSpecContainersEnvFromArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecContainersEnvFrom)(nil)).Elem()
}

func (i AlertmanagerSpecContainersEnvFromArray) ToAlertmanagerSpecContainersEnvFromArrayOutput() AlertmanagerSpecContainersEnvFromArrayOutput {
	return i.ToAlertmanagerSpecContainersEnvFromArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersEnvFromArray) ToAlertmanagerSpecContainersEnvFromArrayOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvFromArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersEnvFromArrayOutput)
}

// EnvFromSource represents the source of a set of ConfigMaps
type AlertmanagerSpecContainersEnvFromOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersEnvFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersEnvFrom)(nil)).Elem()
}

func (o AlertmanagerSpecContainersEnvFromOutput) ToAlertmanagerSpecContainersEnvFromOutput() AlertmanagerSpecContainersEnvFromOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvFromOutput) ToAlertmanagerSpecContainersEnvFromOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvFromOutput {
	return o
}

// The ConfigMap to select from
func (o AlertmanagerSpecContainersEnvFromOutput) ConfigMapRef() AlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvFrom) *AlertmanagerSpecContainersEnvFromConfigMapRef {
		return v.ConfigMapRef
	}).(AlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput)
}

// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
func (o AlertmanagerSpecContainersEnvFromOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvFrom) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The Secret to select from
func (o AlertmanagerSpecContainersEnvFromOutput) SecretRef() AlertmanagerSpecContainersEnvFromSecretRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvFrom) *AlertmanagerSpecContainersEnvFromSecretRef {
		return v.SecretRef
	}).(AlertmanagerSpecContainersEnvFromSecretRefPtrOutput)
}

type AlertmanagerSpecContainersEnvFromArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersEnvFromArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecContainersEnvFrom)(nil)).Elem()
}

func (o AlertmanagerSpecContainersEnvFromArrayOutput) ToAlertmanagerSpecContainersEnvFromArrayOutput() AlertmanagerSpecContainersEnvFromArrayOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvFromArrayOutput) ToAlertmanagerSpecContainersEnvFromArrayOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvFromArrayOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvFromArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecContainersEnvFromOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecContainersEnvFrom {
		return vs[0].([]AlertmanagerSpecContainersEnvFrom)[vs[1].(int)]
	}).(AlertmanagerSpecContainersEnvFromOutput)
}

// The ConfigMap to select from
type AlertmanagerSpecContainersEnvFromConfigMapRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap must be defined
	Optional *bool `pulumi:"optional"`
}

// AlertmanagerSpecContainersEnvFromConfigMapRefInput is an input type that accepts AlertmanagerSpecContainersEnvFromConfigMapRefArgs and AlertmanagerSpecContainersEnvFromConfigMapRefOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersEnvFromConfigMapRefInput` via:
//
//          AlertmanagerSpecContainersEnvFromConfigMapRefArgs{...}
type AlertmanagerSpecContainersEnvFromConfigMapRefInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersEnvFromConfigMapRefOutput() AlertmanagerSpecContainersEnvFromConfigMapRefOutput
	ToAlertmanagerSpecContainersEnvFromConfigMapRefOutputWithContext(context.Context) AlertmanagerSpecContainersEnvFromConfigMapRefOutput
}

// The ConfigMap to select from
type AlertmanagerSpecContainersEnvFromConfigMapRefArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (AlertmanagerSpecContainersEnvFromConfigMapRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersEnvFromConfigMapRef)(nil)).Elem()
}

func (i AlertmanagerSpecContainersEnvFromConfigMapRefArgs) ToAlertmanagerSpecContainersEnvFromConfigMapRefOutput() AlertmanagerSpecContainersEnvFromConfigMapRefOutput {
	return i.ToAlertmanagerSpecContainersEnvFromConfigMapRefOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersEnvFromConfigMapRefArgs) ToAlertmanagerSpecContainersEnvFromConfigMapRefOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvFromConfigMapRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersEnvFromConfigMapRefOutput)
}

func (i AlertmanagerSpecContainersEnvFromConfigMapRefArgs) ToAlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput() AlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput {
	return i.ToAlertmanagerSpecContainersEnvFromConfigMapRefPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersEnvFromConfigMapRefArgs) ToAlertmanagerSpecContainersEnvFromConfigMapRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersEnvFromConfigMapRefOutput).ToAlertmanagerSpecContainersEnvFromConfigMapRefPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersEnvFromConfigMapRefPtrInput is an input type that accepts AlertmanagerSpecContainersEnvFromConfigMapRefArgs, AlertmanagerSpecContainersEnvFromConfigMapRefPtr and AlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersEnvFromConfigMapRefPtrInput` via:
//
//          AlertmanagerSpecContainersEnvFromConfigMapRefArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersEnvFromConfigMapRefPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput() AlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput
	ToAlertmanagerSpecContainersEnvFromConfigMapRefPtrOutputWithContext(context.Context) AlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput
}

type alertmanagerSpecContainersEnvFromConfigMapRefPtrType AlertmanagerSpecContainersEnvFromConfigMapRefArgs

func AlertmanagerSpecContainersEnvFromConfigMapRefPtr(v *AlertmanagerSpecContainersEnvFromConfigMapRefArgs) AlertmanagerSpecContainersEnvFromConfigMapRefPtrInput {
	return (*alertmanagerSpecContainersEnvFromConfigMapRefPtrType)(v)
}

func (*alertmanagerSpecContainersEnvFromConfigMapRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersEnvFromConfigMapRef)(nil)).Elem()
}

func (i *alertmanagerSpecContainersEnvFromConfigMapRefPtrType) ToAlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput() AlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput {
	return i.ToAlertmanagerSpecContainersEnvFromConfigMapRefPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersEnvFromConfigMapRefPtrType) ToAlertmanagerSpecContainersEnvFromConfigMapRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput)
}

// The ConfigMap to select from
type AlertmanagerSpecContainersEnvFromConfigMapRefOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersEnvFromConfigMapRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersEnvFromConfigMapRef)(nil)).Elem()
}

func (o AlertmanagerSpecContainersEnvFromConfigMapRefOutput) ToAlertmanagerSpecContainersEnvFromConfigMapRefOutput() AlertmanagerSpecContainersEnvFromConfigMapRefOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvFromConfigMapRefOutput) ToAlertmanagerSpecContainersEnvFromConfigMapRefOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvFromConfigMapRefOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvFromConfigMapRefOutput) ToAlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput() AlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput {
	return o.ToAlertmanagerSpecContainersEnvFromConfigMapRefPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersEnvFromConfigMapRefOutput) ToAlertmanagerSpecContainersEnvFromConfigMapRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvFromConfigMapRef) *AlertmanagerSpecContainersEnvFromConfigMapRef {
		return &v
	}).(AlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecContainersEnvFromConfigMapRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvFromConfigMapRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap must be defined
func (o AlertmanagerSpecContainersEnvFromConfigMapRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvFromConfigMapRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type AlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersEnvFromConfigMapRef)(nil)).Elem()
}

func (o AlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput) ToAlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput() AlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput) ToAlertmanagerSpecContainersEnvFromConfigMapRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput) Elem() AlertmanagerSpecContainersEnvFromConfigMapRefOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersEnvFromConfigMapRef) AlertmanagerSpecContainersEnvFromConfigMapRef {
		return *v
	}).(AlertmanagerSpecContainersEnvFromConfigMapRefOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersEnvFromConfigMapRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap must be defined
func (o AlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersEnvFromConfigMapRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// The Secret to select from
type AlertmanagerSpecContainersEnvFromSecretRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret must be defined
	Optional *bool `pulumi:"optional"`
}

// AlertmanagerSpecContainersEnvFromSecretRefInput is an input type that accepts AlertmanagerSpecContainersEnvFromSecretRefArgs and AlertmanagerSpecContainersEnvFromSecretRefOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersEnvFromSecretRefInput` via:
//
//          AlertmanagerSpecContainersEnvFromSecretRefArgs{...}
type AlertmanagerSpecContainersEnvFromSecretRefInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersEnvFromSecretRefOutput() AlertmanagerSpecContainersEnvFromSecretRefOutput
	ToAlertmanagerSpecContainersEnvFromSecretRefOutputWithContext(context.Context) AlertmanagerSpecContainersEnvFromSecretRefOutput
}

// The Secret to select from
type AlertmanagerSpecContainersEnvFromSecretRefArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (AlertmanagerSpecContainersEnvFromSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersEnvFromSecretRef)(nil)).Elem()
}

func (i AlertmanagerSpecContainersEnvFromSecretRefArgs) ToAlertmanagerSpecContainersEnvFromSecretRefOutput() AlertmanagerSpecContainersEnvFromSecretRefOutput {
	return i.ToAlertmanagerSpecContainersEnvFromSecretRefOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersEnvFromSecretRefArgs) ToAlertmanagerSpecContainersEnvFromSecretRefOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvFromSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersEnvFromSecretRefOutput)
}

func (i AlertmanagerSpecContainersEnvFromSecretRefArgs) ToAlertmanagerSpecContainersEnvFromSecretRefPtrOutput() AlertmanagerSpecContainersEnvFromSecretRefPtrOutput {
	return i.ToAlertmanagerSpecContainersEnvFromSecretRefPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersEnvFromSecretRefArgs) ToAlertmanagerSpecContainersEnvFromSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvFromSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersEnvFromSecretRefOutput).ToAlertmanagerSpecContainersEnvFromSecretRefPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersEnvFromSecretRefPtrInput is an input type that accepts AlertmanagerSpecContainersEnvFromSecretRefArgs, AlertmanagerSpecContainersEnvFromSecretRefPtr and AlertmanagerSpecContainersEnvFromSecretRefPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersEnvFromSecretRefPtrInput` via:
//
//          AlertmanagerSpecContainersEnvFromSecretRefArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersEnvFromSecretRefPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersEnvFromSecretRefPtrOutput() AlertmanagerSpecContainersEnvFromSecretRefPtrOutput
	ToAlertmanagerSpecContainersEnvFromSecretRefPtrOutputWithContext(context.Context) AlertmanagerSpecContainersEnvFromSecretRefPtrOutput
}

type alertmanagerSpecContainersEnvFromSecretRefPtrType AlertmanagerSpecContainersEnvFromSecretRefArgs

func AlertmanagerSpecContainersEnvFromSecretRefPtr(v *AlertmanagerSpecContainersEnvFromSecretRefArgs) AlertmanagerSpecContainersEnvFromSecretRefPtrInput {
	return (*alertmanagerSpecContainersEnvFromSecretRefPtrType)(v)
}

func (*alertmanagerSpecContainersEnvFromSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersEnvFromSecretRef)(nil)).Elem()
}

func (i *alertmanagerSpecContainersEnvFromSecretRefPtrType) ToAlertmanagerSpecContainersEnvFromSecretRefPtrOutput() AlertmanagerSpecContainersEnvFromSecretRefPtrOutput {
	return i.ToAlertmanagerSpecContainersEnvFromSecretRefPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersEnvFromSecretRefPtrType) ToAlertmanagerSpecContainersEnvFromSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvFromSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersEnvFromSecretRefPtrOutput)
}

// The Secret to select from
type AlertmanagerSpecContainersEnvFromSecretRefOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersEnvFromSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersEnvFromSecretRef)(nil)).Elem()
}

func (o AlertmanagerSpecContainersEnvFromSecretRefOutput) ToAlertmanagerSpecContainersEnvFromSecretRefOutput() AlertmanagerSpecContainersEnvFromSecretRefOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvFromSecretRefOutput) ToAlertmanagerSpecContainersEnvFromSecretRefOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvFromSecretRefOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvFromSecretRefOutput) ToAlertmanagerSpecContainersEnvFromSecretRefPtrOutput() AlertmanagerSpecContainersEnvFromSecretRefPtrOutput {
	return o.ToAlertmanagerSpecContainersEnvFromSecretRefPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersEnvFromSecretRefOutput) ToAlertmanagerSpecContainersEnvFromSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvFromSecretRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvFromSecretRef) *AlertmanagerSpecContainersEnvFromSecretRef {
		return &v
	}).(AlertmanagerSpecContainersEnvFromSecretRefPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecContainersEnvFromSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvFromSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret must be defined
func (o AlertmanagerSpecContainersEnvFromSecretRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvFromSecretRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type AlertmanagerSpecContainersEnvFromSecretRefPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersEnvFromSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersEnvFromSecretRef)(nil)).Elem()
}

func (o AlertmanagerSpecContainersEnvFromSecretRefPtrOutput) ToAlertmanagerSpecContainersEnvFromSecretRefPtrOutput() AlertmanagerSpecContainersEnvFromSecretRefPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvFromSecretRefPtrOutput) ToAlertmanagerSpecContainersEnvFromSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvFromSecretRefPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvFromSecretRefPtrOutput) Elem() AlertmanagerSpecContainersEnvFromSecretRefOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersEnvFromSecretRef) AlertmanagerSpecContainersEnvFromSecretRef {
		return *v
	}).(AlertmanagerSpecContainersEnvFromSecretRefOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecContainersEnvFromSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersEnvFromSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret must be defined
func (o AlertmanagerSpecContainersEnvFromSecretRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersEnvFromSecretRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type AlertmanagerSpecContainersEnvValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *AlertmanagerSpecContainersEnvValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *AlertmanagerSpecContainersEnvValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *AlertmanagerSpecContainersEnvValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *AlertmanagerSpecContainersEnvValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// AlertmanagerSpecContainersEnvValueFromInput is an input type that accepts AlertmanagerSpecContainersEnvValueFromArgs and AlertmanagerSpecContainersEnvValueFromOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersEnvValueFromInput` via:
//
//          AlertmanagerSpecContainersEnvValueFromArgs{...}
type AlertmanagerSpecContainersEnvValueFromInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersEnvValueFromOutput() AlertmanagerSpecContainersEnvValueFromOutput
	ToAlertmanagerSpecContainersEnvValueFromOutputWithContext(context.Context) AlertmanagerSpecContainersEnvValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type AlertmanagerSpecContainersEnvValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef AlertmanagerSpecContainersEnvValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (AlertmanagerSpecContainersEnvValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersEnvValueFrom)(nil)).Elem()
}

func (i AlertmanagerSpecContainersEnvValueFromArgs) ToAlertmanagerSpecContainersEnvValueFromOutput() AlertmanagerSpecContainersEnvValueFromOutput {
	return i.ToAlertmanagerSpecContainersEnvValueFromOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersEnvValueFromArgs) ToAlertmanagerSpecContainersEnvValueFromOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersEnvValueFromOutput)
}

func (i AlertmanagerSpecContainersEnvValueFromArgs) ToAlertmanagerSpecContainersEnvValueFromPtrOutput() AlertmanagerSpecContainersEnvValueFromPtrOutput {
	return i.ToAlertmanagerSpecContainersEnvValueFromPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersEnvValueFromArgs) ToAlertmanagerSpecContainersEnvValueFromPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersEnvValueFromOutput).ToAlertmanagerSpecContainersEnvValueFromPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersEnvValueFromPtrInput is an input type that accepts AlertmanagerSpecContainersEnvValueFromArgs, AlertmanagerSpecContainersEnvValueFromPtr and AlertmanagerSpecContainersEnvValueFromPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersEnvValueFromPtrInput` via:
//
//          AlertmanagerSpecContainersEnvValueFromArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersEnvValueFromPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersEnvValueFromPtrOutput() AlertmanagerSpecContainersEnvValueFromPtrOutput
	ToAlertmanagerSpecContainersEnvValueFromPtrOutputWithContext(context.Context) AlertmanagerSpecContainersEnvValueFromPtrOutput
}

type alertmanagerSpecContainersEnvValueFromPtrType AlertmanagerSpecContainersEnvValueFromArgs

func AlertmanagerSpecContainersEnvValueFromPtr(v *AlertmanagerSpecContainersEnvValueFromArgs) AlertmanagerSpecContainersEnvValueFromPtrInput {
	return (*alertmanagerSpecContainersEnvValueFromPtrType)(v)
}

func (*alertmanagerSpecContainersEnvValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersEnvValueFrom)(nil)).Elem()
}

func (i *alertmanagerSpecContainersEnvValueFromPtrType) ToAlertmanagerSpecContainersEnvValueFromPtrOutput() AlertmanagerSpecContainersEnvValueFromPtrOutput {
	return i.ToAlertmanagerSpecContainersEnvValueFromPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersEnvValueFromPtrType) ToAlertmanagerSpecContainersEnvValueFromPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersEnvValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type AlertmanagerSpecContainersEnvValueFromOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersEnvValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersEnvValueFrom)(nil)).Elem()
}

func (o AlertmanagerSpecContainersEnvValueFromOutput) ToAlertmanagerSpecContainersEnvValueFromOutput() AlertmanagerSpecContainersEnvValueFromOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvValueFromOutput) ToAlertmanagerSpecContainersEnvValueFromOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvValueFromOutput) ToAlertmanagerSpecContainersEnvValueFromPtrOutput() AlertmanagerSpecContainersEnvValueFromPtrOutput {
	return o.ToAlertmanagerSpecContainersEnvValueFromPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersEnvValueFromOutput) ToAlertmanagerSpecContainersEnvValueFromPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvValueFrom) *AlertmanagerSpecContainersEnvValueFrom {
		return &v
	}).(AlertmanagerSpecContainersEnvValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o AlertmanagerSpecContainersEnvValueFromOutput) ConfigMapKeyRef() AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvValueFrom) *AlertmanagerSpecContainersEnvValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o AlertmanagerSpecContainersEnvValueFromOutput) FieldRef() AlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvValueFrom) *AlertmanagerSpecContainersEnvValueFromFieldRef {
		return v.FieldRef
	}).(AlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o AlertmanagerSpecContainersEnvValueFromOutput) ResourceFieldRef() AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvValueFrom) *AlertmanagerSpecContainersEnvValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o AlertmanagerSpecContainersEnvValueFromOutput) SecretKeyRef() AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvValueFrom) *AlertmanagerSpecContainersEnvValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput)
}

type AlertmanagerSpecContainersEnvValueFromPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersEnvValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersEnvValueFrom)(nil)).Elem()
}

func (o AlertmanagerSpecContainersEnvValueFromPtrOutput) ToAlertmanagerSpecContainersEnvValueFromPtrOutput() AlertmanagerSpecContainersEnvValueFromPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvValueFromPtrOutput) ToAlertmanagerSpecContainersEnvValueFromPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvValueFromPtrOutput) Elem() AlertmanagerSpecContainersEnvValueFromOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersEnvValueFrom) AlertmanagerSpecContainersEnvValueFrom { return *v }).(AlertmanagerSpecContainersEnvValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o AlertmanagerSpecContainersEnvValueFromPtrOutput) ConfigMapKeyRef() AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersEnvValueFrom) *AlertmanagerSpecContainersEnvValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o AlertmanagerSpecContainersEnvValueFromPtrOutput) FieldRef() AlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersEnvValueFrom) *AlertmanagerSpecContainersEnvValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(AlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o AlertmanagerSpecContainersEnvValueFromPtrOutput) ResourceFieldRef() AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersEnvValueFrom) *AlertmanagerSpecContainersEnvValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o AlertmanagerSpecContainersEnvValueFromPtrOutput) SecretKeyRef() AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersEnvValueFrom) *AlertmanagerSpecContainersEnvValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type AlertmanagerSpecContainersEnvValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefInput is an input type that accepts AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefArgs and AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefInput` via:
//
//          AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefArgs{...}
type AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutput() AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutput
	ToAlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutputWithContext(context.Context) AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefArgs) ToAlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutput() AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutput {
	return i.ToAlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefArgs) ToAlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutput)
}

func (i AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefArgs) ToAlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput() AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput {
	return i.ToAlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefArgs) ToAlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutput).ToAlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrInput is an input type that accepts AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefArgs, AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtr and AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrInput` via:
//
//          AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput() AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput
	ToAlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput
}

type alertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrType AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefArgs

func AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtr(v *AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefArgs) AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrInput {
	return (*alertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrType)(v)
}

func (*alertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *alertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrType) ToAlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput() AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput {
	return i.ToAlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrType) ToAlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutput) ToAlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutput() AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutput) ToAlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutput) ToAlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput() AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ToAlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutput) ToAlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvValueFromConfigMapKeyRef) *AlertmanagerSpecContainersEnvValueFromConfigMapKeyRef {
		return &v
	}).(AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput) ToAlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput() AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput) ToAlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput) Elem() AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersEnvValueFromConfigMapKeyRef) AlertmanagerSpecContainersEnvValueFromConfigMapKeyRef {
		return *v
	}).(AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersEnvValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersEnvValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersEnvValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type AlertmanagerSpecContainersEnvValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// AlertmanagerSpecContainersEnvValueFromFieldRefInput is an input type that accepts AlertmanagerSpecContainersEnvValueFromFieldRefArgs and AlertmanagerSpecContainersEnvValueFromFieldRefOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersEnvValueFromFieldRefInput` via:
//
//          AlertmanagerSpecContainersEnvValueFromFieldRefArgs{...}
type AlertmanagerSpecContainersEnvValueFromFieldRefInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersEnvValueFromFieldRefOutput() AlertmanagerSpecContainersEnvValueFromFieldRefOutput
	ToAlertmanagerSpecContainersEnvValueFromFieldRefOutputWithContext(context.Context) AlertmanagerSpecContainersEnvValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type AlertmanagerSpecContainersEnvValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (AlertmanagerSpecContainersEnvValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersEnvValueFromFieldRef)(nil)).Elem()
}

func (i AlertmanagerSpecContainersEnvValueFromFieldRefArgs) ToAlertmanagerSpecContainersEnvValueFromFieldRefOutput() AlertmanagerSpecContainersEnvValueFromFieldRefOutput {
	return i.ToAlertmanagerSpecContainersEnvValueFromFieldRefOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersEnvValueFromFieldRefArgs) ToAlertmanagerSpecContainersEnvValueFromFieldRefOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersEnvValueFromFieldRefOutput)
}

func (i AlertmanagerSpecContainersEnvValueFromFieldRefArgs) ToAlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput() AlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput {
	return i.ToAlertmanagerSpecContainersEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersEnvValueFromFieldRefArgs) ToAlertmanagerSpecContainersEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersEnvValueFromFieldRefOutput).ToAlertmanagerSpecContainersEnvValueFromFieldRefPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersEnvValueFromFieldRefPtrInput is an input type that accepts AlertmanagerSpecContainersEnvValueFromFieldRefArgs, AlertmanagerSpecContainersEnvValueFromFieldRefPtr and AlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersEnvValueFromFieldRefPtrInput` via:
//
//          AlertmanagerSpecContainersEnvValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersEnvValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput() AlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput
	ToAlertmanagerSpecContainersEnvValueFromFieldRefPtrOutputWithContext(context.Context) AlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput
}

type alertmanagerSpecContainersEnvValueFromFieldRefPtrType AlertmanagerSpecContainersEnvValueFromFieldRefArgs

func AlertmanagerSpecContainersEnvValueFromFieldRefPtr(v *AlertmanagerSpecContainersEnvValueFromFieldRefArgs) AlertmanagerSpecContainersEnvValueFromFieldRefPtrInput {
	return (*alertmanagerSpecContainersEnvValueFromFieldRefPtrType)(v)
}

func (*alertmanagerSpecContainersEnvValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersEnvValueFromFieldRef)(nil)).Elem()
}

func (i *alertmanagerSpecContainersEnvValueFromFieldRefPtrType) ToAlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput() AlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput {
	return i.ToAlertmanagerSpecContainersEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersEnvValueFromFieldRefPtrType) ToAlertmanagerSpecContainersEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type AlertmanagerSpecContainersEnvValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersEnvValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersEnvValueFromFieldRef)(nil)).Elem()
}

func (o AlertmanagerSpecContainersEnvValueFromFieldRefOutput) ToAlertmanagerSpecContainersEnvValueFromFieldRefOutput() AlertmanagerSpecContainersEnvValueFromFieldRefOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvValueFromFieldRefOutput) ToAlertmanagerSpecContainersEnvValueFromFieldRefOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromFieldRefOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvValueFromFieldRefOutput) ToAlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput() AlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput {
	return o.ToAlertmanagerSpecContainersEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersEnvValueFromFieldRefOutput) ToAlertmanagerSpecContainersEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvValueFromFieldRef) *AlertmanagerSpecContainersEnvValueFromFieldRef {
		return &v
	}).(AlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o AlertmanagerSpecContainersEnvValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o AlertmanagerSpecContainersEnvValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type AlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersEnvValueFromFieldRef)(nil)).Elem()
}

func (o AlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput) ToAlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput() AlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput) ToAlertmanagerSpecContainersEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput) Elem() AlertmanagerSpecContainersEnvValueFromFieldRefOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersEnvValueFromFieldRef) AlertmanagerSpecContainersEnvValueFromFieldRef {
		return *v
	}).(AlertmanagerSpecContainersEnvValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o AlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersEnvValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o AlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersEnvValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type AlertmanagerSpecContainersEnvValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *string `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// AlertmanagerSpecContainersEnvValueFromResourceFieldRefInput is an input type that accepts AlertmanagerSpecContainersEnvValueFromResourceFieldRefArgs and AlertmanagerSpecContainersEnvValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersEnvValueFromResourceFieldRefInput` via:
//
//          AlertmanagerSpecContainersEnvValueFromResourceFieldRefArgs{...}
type AlertmanagerSpecContainersEnvValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersEnvValueFromResourceFieldRefOutput() AlertmanagerSpecContainersEnvValueFromResourceFieldRefOutput
	ToAlertmanagerSpecContainersEnvValueFromResourceFieldRefOutputWithContext(context.Context) AlertmanagerSpecContainersEnvValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type AlertmanagerSpecContainersEnvValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.StringPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (AlertmanagerSpecContainersEnvValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (i AlertmanagerSpecContainersEnvValueFromResourceFieldRefArgs) ToAlertmanagerSpecContainersEnvValueFromResourceFieldRefOutput() AlertmanagerSpecContainersEnvValueFromResourceFieldRefOutput {
	return i.ToAlertmanagerSpecContainersEnvValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersEnvValueFromResourceFieldRefArgs) ToAlertmanagerSpecContainersEnvValueFromResourceFieldRefOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersEnvValueFromResourceFieldRefOutput)
}

func (i AlertmanagerSpecContainersEnvValueFromResourceFieldRefArgs) ToAlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput() AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput {
	return i.ToAlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersEnvValueFromResourceFieldRefArgs) ToAlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersEnvValueFromResourceFieldRefOutput).ToAlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrInput is an input type that accepts AlertmanagerSpecContainersEnvValueFromResourceFieldRefArgs, AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtr and AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrInput` via:
//
//          AlertmanagerSpecContainersEnvValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput() AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput
	ToAlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutputWithContext(context.Context) AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput
}

type alertmanagerSpecContainersEnvValueFromResourceFieldRefPtrType AlertmanagerSpecContainersEnvValueFromResourceFieldRefArgs

func AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtr(v *AlertmanagerSpecContainersEnvValueFromResourceFieldRefArgs) AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrInput {
	return (*alertmanagerSpecContainersEnvValueFromResourceFieldRefPtrType)(v)
}

func (*alertmanagerSpecContainersEnvValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (i *alertmanagerSpecContainersEnvValueFromResourceFieldRefPtrType) ToAlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput() AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput {
	return i.ToAlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersEnvValueFromResourceFieldRefPtrType) ToAlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type AlertmanagerSpecContainersEnvValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersEnvValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (o AlertmanagerSpecContainersEnvValueFromResourceFieldRefOutput) ToAlertmanagerSpecContainersEnvValueFromResourceFieldRefOutput() AlertmanagerSpecContainersEnvValueFromResourceFieldRefOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvValueFromResourceFieldRefOutput) ToAlertmanagerSpecContainersEnvValueFromResourceFieldRefOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromResourceFieldRefOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvValueFromResourceFieldRefOutput) ToAlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput() AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput {
	return o.ToAlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersEnvValueFromResourceFieldRefOutput) ToAlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvValueFromResourceFieldRef) *AlertmanagerSpecContainersEnvValueFromResourceFieldRef {
		return &v
	}).(AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o AlertmanagerSpecContainersEnvValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o AlertmanagerSpecContainersEnvValueFromResourceFieldRefOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvValueFromResourceFieldRef) *string { return v.Divisor }).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o AlertmanagerSpecContainersEnvValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (o AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput) ToAlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput() AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput) ToAlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput) Elem() AlertmanagerSpecContainersEnvValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersEnvValueFromResourceFieldRef) AlertmanagerSpecContainersEnvValueFromResourceFieldRef {
		return *v
	}).(AlertmanagerSpecContainersEnvValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersEnvValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersEnvValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersEnvValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type AlertmanagerSpecContainersEnvValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// AlertmanagerSpecContainersEnvValueFromSecretKeyRefInput is an input type that accepts AlertmanagerSpecContainersEnvValueFromSecretKeyRefArgs and AlertmanagerSpecContainersEnvValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersEnvValueFromSecretKeyRefInput` via:
//
//          AlertmanagerSpecContainersEnvValueFromSecretKeyRefArgs{...}
type AlertmanagerSpecContainersEnvValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersEnvValueFromSecretKeyRefOutput() AlertmanagerSpecContainersEnvValueFromSecretKeyRefOutput
	ToAlertmanagerSpecContainersEnvValueFromSecretKeyRefOutputWithContext(context.Context) AlertmanagerSpecContainersEnvValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type AlertmanagerSpecContainersEnvValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (AlertmanagerSpecContainersEnvValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (i AlertmanagerSpecContainersEnvValueFromSecretKeyRefArgs) ToAlertmanagerSpecContainersEnvValueFromSecretKeyRefOutput() AlertmanagerSpecContainersEnvValueFromSecretKeyRefOutput {
	return i.ToAlertmanagerSpecContainersEnvValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersEnvValueFromSecretKeyRefArgs) ToAlertmanagerSpecContainersEnvValueFromSecretKeyRefOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersEnvValueFromSecretKeyRefOutput)
}

func (i AlertmanagerSpecContainersEnvValueFromSecretKeyRefArgs) ToAlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput() AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput {
	return i.ToAlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersEnvValueFromSecretKeyRefArgs) ToAlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersEnvValueFromSecretKeyRefOutput).ToAlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrInput is an input type that accepts AlertmanagerSpecContainersEnvValueFromSecretKeyRefArgs, AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtr and AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrInput` via:
//
//          AlertmanagerSpecContainersEnvValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput() AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput
	ToAlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutputWithContext(context.Context) AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput
}

type alertmanagerSpecContainersEnvValueFromSecretKeyRefPtrType AlertmanagerSpecContainersEnvValueFromSecretKeyRefArgs

func AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtr(v *AlertmanagerSpecContainersEnvValueFromSecretKeyRefArgs) AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrInput {
	return (*alertmanagerSpecContainersEnvValueFromSecretKeyRefPtrType)(v)
}

func (*alertmanagerSpecContainersEnvValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (i *alertmanagerSpecContainersEnvValueFromSecretKeyRefPtrType) ToAlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput() AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput {
	return i.ToAlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersEnvValueFromSecretKeyRefPtrType) ToAlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type AlertmanagerSpecContainersEnvValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersEnvValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (o AlertmanagerSpecContainersEnvValueFromSecretKeyRefOutput) ToAlertmanagerSpecContainersEnvValueFromSecretKeyRefOutput() AlertmanagerSpecContainersEnvValueFromSecretKeyRefOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvValueFromSecretKeyRefOutput) ToAlertmanagerSpecContainersEnvValueFromSecretKeyRefOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromSecretKeyRefOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvValueFromSecretKeyRefOutput) ToAlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput() AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput {
	return o.ToAlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersEnvValueFromSecretKeyRefOutput) ToAlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvValueFromSecretKeyRef) *AlertmanagerSpecContainersEnvValueFromSecretKeyRef {
		return &v
	}).(AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o AlertmanagerSpecContainersEnvValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecContainersEnvValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o AlertmanagerSpecContainersEnvValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersEnvValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (o AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput) ToAlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput() AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput) ToAlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput) Elem() AlertmanagerSpecContainersEnvValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersEnvValueFromSecretKeyRef) AlertmanagerSpecContainersEnvValueFromSecretKeyRef {
		return *v
	}).(AlertmanagerSpecContainersEnvValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersEnvValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersEnvValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersEnvValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Actions that the management system should take in response to container lifecycle events. Cannot be updated.
type AlertmanagerSpecContainersLifecycle struct {
	// PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
	PostStart *AlertmanagerSpecContainersLifecyclePostStart `pulumi:"postStart"`
	// PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
	PreStop *AlertmanagerSpecContainersLifecyclePreStop `pulumi:"preStop"`
}

// AlertmanagerSpecContainersLifecycleInput is an input type that accepts AlertmanagerSpecContainersLifecycleArgs and AlertmanagerSpecContainersLifecycleOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecycleInput` via:
//
//          AlertmanagerSpecContainersLifecycleArgs{...}
type AlertmanagerSpecContainersLifecycleInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecycleOutput() AlertmanagerSpecContainersLifecycleOutput
	ToAlertmanagerSpecContainersLifecycleOutputWithContext(context.Context) AlertmanagerSpecContainersLifecycleOutput
}

// Actions that the management system should take in response to container lifecycle events. Cannot be updated.
type AlertmanagerSpecContainersLifecycleArgs struct {
	// PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
	PostStart AlertmanagerSpecContainersLifecyclePostStartPtrInput `pulumi:"postStart"`
	// PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
	PreStop AlertmanagerSpecContainersLifecyclePreStopPtrInput `pulumi:"preStop"`
}

func (AlertmanagerSpecContainersLifecycleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecycle)(nil)).Elem()
}

func (i AlertmanagerSpecContainersLifecycleArgs) ToAlertmanagerSpecContainersLifecycleOutput() AlertmanagerSpecContainersLifecycleOutput {
	return i.ToAlertmanagerSpecContainersLifecycleOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecycleArgs) ToAlertmanagerSpecContainersLifecycleOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecycleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecycleOutput)
}

func (i AlertmanagerSpecContainersLifecycleArgs) ToAlertmanagerSpecContainersLifecyclePtrOutput() AlertmanagerSpecContainersLifecyclePtrOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecycleArgs) ToAlertmanagerSpecContainersLifecyclePtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecycleOutput).ToAlertmanagerSpecContainersLifecyclePtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersLifecyclePtrInput is an input type that accepts AlertmanagerSpecContainersLifecycleArgs, AlertmanagerSpecContainersLifecyclePtr and AlertmanagerSpecContainersLifecyclePtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePtrInput` via:
//
//          AlertmanagerSpecContainersLifecycleArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersLifecyclePtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePtrOutput() AlertmanagerSpecContainersLifecyclePtrOutput
	ToAlertmanagerSpecContainersLifecyclePtrOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePtrOutput
}

type alertmanagerSpecContainersLifecyclePtrType AlertmanagerSpecContainersLifecycleArgs

func AlertmanagerSpecContainersLifecyclePtr(v *AlertmanagerSpecContainersLifecycleArgs) AlertmanagerSpecContainersLifecyclePtrInput {
	return (*alertmanagerSpecContainersLifecyclePtrType)(v)
}

func (*alertmanagerSpecContainersLifecyclePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLifecycle)(nil)).Elem()
}

func (i *alertmanagerSpecContainersLifecyclePtrType) ToAlertmanagerSpecContainersLifecyclePtrOutput() AlertmanagerSpecContainersLifecyclePtrOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersLifecyclePtrType) ToAlertmanagerSpecContainersLifecyclePtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePtrOutput)
}

// Actions that the management system should take in response to container lifecycle events. Cannot be updated.
type AlertmanagerSpecContainersLifecycleOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecycleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecycle)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecycleOutput) ToAlertmanagerSpecContainersLifecycleOutput() AlertmanagerSpecContainersLifecycleOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecycleOutput) ToAlertmanagerSpecContainersLifecycleOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecycleOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecycleOutput) ToAlertmanagerSpecContainersLifecyclePtrOutput() AlertmanagerSpecContainersLifecyclePtrOutput {
	return o.ToAlertmanagerSpecContainersLifecyclePtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersLifecycleOutput) ToAlertmanagerSpecContainersLifecyclePtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecycle) *AlertmanagerSpecContainersLifecycle {
		return &v
	}).(AlertmanagerSpecContainersLifecyclePtrOutput)
}

// PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
func (o AlertmanagerSpecContainersLifecycleOutput) PostStart() AlertmanagerSpecContainersLifecyclePostStartPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecycle) *AlertmanagerSpecContainersLifecyclePostStart {
		return v.PostStart
	}).(AlertmanagerSpecContainersLifecyclePostStartPtrOutput)
}

// PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
func (o AlertmanagerSpecContainersLifecycleOutput) PreStop() AlertmanagerSpecContainersLifecyclePreStopPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecycle) *AlertmanagerSpecContainersLifecyclePreStop {
		return v.PreStop
	}).(AlertmanagerSpecContainersLifecyclePreStopPtrOutput)
}

type AlertmanagerSpecContainersLifecyclePtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLifecycle)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePtrOutput) ToAlertmanagerSpecContainersLifecyclePtrOutput() AlertmanagerSpecContainersLifecyclePtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePtrOutput) ToAlertmanagerSpecContainersLifecyclePtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePtrOutput) Elem() AlertmanagerSpecContainersLifecycleOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecycle) AlertmanagerSpecContainersLifecycle { return *v }).(AlertmanagerSpecContainersLifecycleOutput)
}

// PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
func (o AlertmanagerSpecContainersLifecyclePtrOutput) PostStart() AlertmanagerSpecContainersLifecyclePostStartPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecycle) *AlertmanagerSpecContainersLifecyclePostStart {
		if v == nil {
			return nil
		}
		return v.PostStart
	}).(AlertmanagerSpecContainersLifecyclePostStartPtrOutput)
}

// PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
func (o AlertmanagerSpecContainersLifecyclePtrOutput) PreStop() AlertmanagerSpecContainersLifecyclePreStopPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecycle) *AlertmanagerSpecContainersLifecyclePreStop {
		if v == nil {
			return nil
		}
		return v.PreStop
	}).(AlertmanagerSpecContainersLifecyclePreStopPtrOutput)
}

// PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
type AlertmanagerSpecContainersLifecyclePostStart struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec *AlertmanagerSpecContainersLifecyclePostStartExec `pulumi:"exec"`
	// HTTPGet specifies the http request to perform.
	HttpGet *AlertmanagerSpecContainersLifecyclePostStartHttpGet `pulumi:"httpGet"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
	TcpSocket *AlertmanagerSpecContainersLifecyclePostStartTcpSocket `pulumi:"tcpSocket"`
}

// AlertmanagerSpecContainersLifecyclePostStartInput is an input type that accepts AlertmanagerSpecContainersLifecyclePostStartArgs and AlertmanagerSpecContainersLifecyclePostStartOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePostStartInput` via:
//
//          AlertmanagerSpecContainersLifecyclePostStartArgs{...}
type AlertmanagerSpecContainersLifecyclePostStartInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePostStartOutput() AlertmanagerSpecContainersLifecyclePostStartOutput
	ToAlertmanagerSpecContainersLifecyclePostStartOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePostStartOutput
}

// PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
type AlertmanagerSpecContainersLifecyclePostStartArgs struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec AlertmanagerSpecContainersLifecyclePostStartExecPtrInput `pulumi:"exec"`
	// HTTPGet specifies the http request to perform.
	HttpGet AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrInput `pulumi:"httpGet"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
	TcpSocket AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrInput `pulumi:"tcpSocket"`
}

func (AlertmanagerSpecContainersLifecyclePostStartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePostStart)(nil)).Elem()
}

func (i AlertmanagerSpecContainersLifecyclePostStartArgs) ToAlertmanagerSpecContainersLifecyclePostStartOutput() AlertmanagerSpecContainersLifecyclePostStartOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePostStartOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePostStartArgs) ToAlertmanagerSpecContainersLifecyclePostStartOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePostStartOutput)
}

func (i AlertmanagerSpecContainersLifecyclePostStartArgs) ToAlertmanagerSpecContainersLifecyclePostStartPtrOutput() AlertmanagerSpecContainersLifecyclePostStartPtrOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePostStartPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePostStartArgs) ToAlertmanagerSpecContainersLifecyclePostStartPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePostStartOutput).ToAlertmanagerSpecContainersLifecyclePostStartPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersLifecyclePostStartPtrInput is an input type that accepts AlertmanagerSpecContainersLifecyclePostStartArgs, AlertmanagerSpecContainersLifecyclePostStartPtr and AlertmanagerSpecContainersLifecyclePostStartPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePostStartPtrInput` via:
//
//          AlertmanagerSpecContainersLifecyclePostStartArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersLifecyclePostStartPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePostStartPtrOutput() AlertmanagerSpecContainersLifecyclePostStartPtrOutput
	ToAlertmanagerSpecContainersLifecyclePostStartPtrOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePostStartPtrOutput
}

type alertmanagerSpecContainersLifecyclePostStartPtrType AlertmanagerSpecContainersLifecyclePostStartArgs

func AlertmanagerSpecContainersLifecyclePostStartPtr(v *AlertmanagerSpecContainersLifecyclePostStartArgs) AlertmanagerSpecContainersLifecyclePostStartPtrInput {
	return (*alertmanagerSpecContainersLifecyclePostStartPtrType)(v)
}

func (*alertmanagerSpecContainersLifecyclePostStartPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLifecyclePostStart)(nil)).Elem()
}

func (i *alertmanagerSpecContainersLifecyclePostStartPtrType) ToAlertmanagerSpecContainersLifecyclePostStartPtrOutput() AlertmanagerSpecContainersLifecyclePostStartPtrOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePostStartPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersLifecyclePostStartPtrType) ToAlertmanagerSpecContainersLifecyclePostStartPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePostStartPtrOutput)
}

// PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
type AlertmanagerSpecContainersLifecyclePostStartOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePostStartOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePostStart)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePostStartOutput) ToAlertmanagerSpecContainersLifecyclePostStartOutput() AlertmanagerSpecContainersLifecyclePostStartOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePostStartOutput) ToAlertmanagerSpecContainersLifecyclePostStartOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePostStartOutput) ToAlertmanagerSpecContainersLifecyclePostStartPtrOutput() AlertmanagerSpecContainersLifecyclePostStartPtrOutput {
	return o.ToAlertmanagerSpecContainersLifecyclePostStartPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersLifecyclePostStartOutput) ToAlertmanagerSpecContainersLifecyclePostStartPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePostStart) *AlertmanagerSpecContainersLifecyclePostStart {
		return &v
	}).(AlertmanagerSpecContainersLifecyclePostStartPtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
func (o AlertmanagerSpecContainersLifecyclePostStartOutput) Exec() AlertmanagerSpecContainersLifecyclePostStartExecPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePostStart) *AlertmanagerSpecContainersLifecyclePostStartExec {
		return v.Exec
	}).(AlertmanagerSpecContainersLifecyclePostStartExecPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o AlertmanagerSpecContainersLifecyclePostStartOutput) HttpGet() AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePostStart) *AlertmanagerSpecContainersLifecyclePostStartHttpGet {
		return v.HttpGet
	}).(AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
func (o AlertmanagerSpecContainersLifecyclePostStartOutput) TcpSocket() AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePostStart) *AlertmanagerSpecContainersLifecyclePostStartTcpSocket {
		return v.TcpSocket
	}).(AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput)
}

type AlertmanagerSpecContainersLifecyclePostStartPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePostStartPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLifecyclePostStart)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePostStartPtrOutput) ToAlertmanagerSpecContainersLifecyclePostStartPtrOutput() AlertmanagerSpecContainersLifecyclePostStartPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePostStartPtrOutput) ToAlertmanagerSpecContainersLifecyclePostStartPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePostStartPtrOutput) Elem() AlertmanagerSpecContainersLifecyclePostStartOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePostStart) AlertmanagerSpecContainersLifecyclePostStart {
		return *v
	}).(AlertmanagerSpecContainersLifecyclePostStartOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
func (o AlertmanagerSpecContainersLifecyclePostStartPtrOutput) Exec() AlertmanagerSpecContainersLifecyclePostStartExecPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePostStart) *AlertmanagerSpecContainersLifecyclePostStartExec {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(AlertmanagerSpecContainersLifecyclePostStartExecPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o AlertmanagerSpecContainersLifecyclePostStartPtrOutput) HttpGet() AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePostStart) *AlertmanagerSpecContainersLifecyclePostStartHttpGet {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
func (o AlertmanagerSpecContainersLifecyclePostStartPtrOutput) TcpSocket() AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePostStart) *AlertmanagerSpecContainersLifecyclePostStartTcpSocket {
		if v == nil {
			return nil
		}
		return v.TcpSocket
	}).(AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecContainersLifecyclePostStartExec struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command []string `pulumi:"command"`
}

// AlertmanagerSpecContainersLifecyclePostStartExecInput is an input type that accepts AlertmanagerSpecContainersLifecyclePostStartExecArgs and AlertmanagerSpecContainersLifecyclePostStartExecOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePostStartExecInput` via:
//
//          AlertmanagerSpecContainersLifecyclePostStartExecArgs{...}
type AlertmanagerSpecContainersLifecyclePostStartExecInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePostStartExecOutput() AlertmanagerSpecContainersLifecyclePostStartExecOutput
	ToAlertmanagerSpecContainersLifecyclePostStartExecOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePostStartExecOutput
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecContainersLifecyclePostStartExecArgs struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command pulumi.StringArrayInput `pulumi:"command"`
}

func (AlertmanagerSpecContainersLifecyclePostStartExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePostStartExec)(nil)).Elem()
}

func (i AlertmanagerSpecContainersLifecyclePostStartExecArgs) ToAlertmanagerSpecContainersLifecyclePostStartExecOutput() AlertmanagerSpecContainersLifecyclePostStartExecOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePostStartExecOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePostStartExecArgs) ToAlertmanagerSpecContainersLifecyclePostStartExecOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePostStartExecOutput)
}

func (i AlertmanagerSpecContainersLifecyclePostStartExecArgs) ToAlertmanagerSpecContainersLifecyclePostStartExecPtrOutput() AlertmanagerSpecContainersLifecyclePostStartExecPtrOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePostStartExecPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePostStartExecArgs) ToAlertmanagerSpecContainersLifecyclePostStartExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePostStartExecOutput).ToAlertmanagerSpecContainersLifecyclePostStartExecPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersLifecyclePostStartExecPtrInput is an input type that accepts AlertmanagerSpecContainersLifecyclePostStartExecArgs, AlertmanagerSpecContainersLifecyclePostStartExecPtr and AlertmanagerSpecContainersLifecyclePostStartExecPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePostStartExecPtrInput` via:
//
//          AlertmanagerSpecContainersLifecyclePostStartExecArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersLifecyclePostStartExecPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePostStartExecPtrOutput() AlertmanagerSpecContainersLifecyclePostStartExecPtrOutput
	ToAlertmanagerSpecContainersLifecyclePostStartExecPtrOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePostStartExecPtrOutput
}

type alertmanagerSpecContainersLifecyclePostStartExecPtrType AlertmanagerSpecContainersLifecyclePostStartExecArgs

func AlertmanagerSpecContainersLifecyclePostStartExecPtr(v *AlertmanagerSpecContainersLifecyclePostStartExecArgs) AlertmanagerSpecContainersLifecyclePostStartExecPtrInput {
	return (*alertmanagerSpecContainersLifecyclePostStartExecPtrType)(v)
}

func (*alertmanagerSpecContainersLifecyclePostStartExecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLifecyclePostStartExec)(nil)).Elem()
}

func (i *alertmanagerSpecContainersLifecyclePostStartExecPtrType) ToAlertmanagerSpecContainersLifecyclePostStartExecPtrOutput() AlertmanagerSpecContainersLifecyclePostStartExecPtrOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePostStartExecPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersLifecyclePostStartExecPtrType) ToAlertmanagerSpecContainersLifecyclePostStartExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePostStartExecPtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecContainersLifecyclePostStartExecOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePostStartExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePostStartExec)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePostStartExecOutput) ToAlertmanagerSpecContainersLifecyclePostStartExecOutput() AlertmanagerSpecContainersLifecyclePostStartExecOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePostStartExecOutput) ToAlertmanagerSpecContainersLifecyclePostStartExecOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartExecOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePostStartExecOutput) ToAlertmanagerSpecContainersLifecyclePostStartExecPtrOutput() AlertmanagerSpecContainersLifecyclePostStartExecPtrOutput {
	return o.ToAlertmanagerSpecContainersLifecyclePostStartExecPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersLifecyclePostStartExecOutput) ToAlertmanagerSpecContainersLifecyclePostStartExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartExecPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePostStartExec) *AlertmanagerSpecContainersLifecyclePostStartExec {
		return &v
	}).(AlertmanagerSpecContainersLifecyclePostStartExecPtrOutput)
}

// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o AlertmanagerSpecContainersLifecyclePostStartExecOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePostStartExec) []string { return v.Command }).(pulumi.StringArrayOutput)
}

type AlertmanagerSpecContainersLifecyclePostStartExecPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePostStartExecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLifecyclePostStartExec)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePostStartExecPtrOutput) ToAlertmanagerSpecContainersLifecyclePostStartExecPtrOutput() AlertmanagerSpecContainersLifecyclePostStartExecPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePostStartExecPtrOutput) ToAlertmanagerSpecContainersLifecyclePostStartExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartExecPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePostStartExecPtrOutput) Elem() AlertmanagerSpecContainersLifecyclePostStartExecOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePostStartExec) AlertmanagerSpecContainersLifecyclePostStartExec {
		return *v
	}).(AlertmanagerSpecContainersLifecyclePostStartExecOutput)
}

// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o AlertmanagerSpecContainersLifecyclePostStartExecPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePostStartExec) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecContainersLifecyclePostStartHttpGet struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeaders `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path *string `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecContainersLifecyclePostStartHttpGetPort `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `pulumi:"scheme"`
}

// AlertmanagerSpecContainersLifecyclePostStartHttpGetInput is an input type that accepts AlertmanagerSpecContainersLifecyclePostStartHttpGetArgs and AlertmanagerSpecContainersLifecyclePostStartHttpGetOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePostStartHttpGetInput` via:
//
//          AlertmanagerSpecContainersLifecyclePostStartHttpGetArgs{...}
type AlertmanagerSpecContainersLifecyclePostStartHttpGetInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePostStartHttpGetOutput() AlertmanagerSpecContainersLifecyclePostStartHttpGetOutput
	ToAlertmanagerSpecContainersLifecyclePostStartHttpGetOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePostStartHttpGetOutput
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecContainersLifecyclePostStartHttpGetArgs struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayInput `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecContainersLifecyclePostStartHttpGetPortInput `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (AlertmanagerSpecContainersLifecyclePostStartHttpGetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePostStartHttpGet)(nil)).Elem()
}

func (i AlertmanagerSpecContainersLifecyclePostStartHttpGetArgs) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetOutput() AlertmanagerSpecContainersLifecyclePostStartHttpGetOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePostStartHttpGetOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePostStartHttpGetArgs) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartHttpGetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePostStartHttpGetOutput)
}

func (i AlertmanagerSpecContainersLifecyclePostStartHttpGetArgs) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput() AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePostStartHttpGetArgs) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePostStartHttpGetOutput).ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrInput is an input type that accepts AlertmanagerSpecContainersLifecyclePostStartHttpGetArgs, AlertmanagerSpecContainersLifecyclePostStartHttpGetPtr and AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrInput` via:
//
//          AlertmanagerSpecContainersLifecyclePostStartHttpGetArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput() AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput
	ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput
}

type alertmanagerSpecContainersLifecyclePostStartHttpGetPtrType AlertmanagerSpecContainersLifecyclePostStartHttpGetArgs

func AlertmanagerSpecContainersLifecyclePostStartHttpGetPtr(v *AlertmanagerSpecContainersLifecyclePostStartHttpGetArgs) AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrInput {
	return (*alertmanagerSpecContainersLifecyclePostStartHttpGetPtrType)(v)
}

func (*alertmanagerSpecContainersLifecyclePostStartHttpGetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLifecyclePostStartHttpGet)(nil)).Elem()
}

func (i *alertmanagerSpecContainersLifecyclePostStartHttpGetPtrType) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput() AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersLifecyclePostStartHttpGetPtrType) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput)
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecContainersLifecyclePostStartHttpGetOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePostStartHttpGetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePostStartHttpGet)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetOutput) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetOutput() AlertmanagerSpecContainersLifecyclePostStartHttpGetOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetOutput) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartHttpGetOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetOutput) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput() AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput {
	return o.ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetOutput) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePostStartHttpGet) *AlertmanagerSpecContainersLifecyclePostStartHttpGet {
		return &v
	}).(AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePostStartHttpGet) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetOutput) HttpHeaders() AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePostStartHttpGet) []AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeaders {
		return v.HttpHeaders
	}).(AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePostStartHttpGet) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetOutput) Port() AlertmanagerSpecContainersLifecyclePostStartHttpGetPortOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePostStartHttpGet) AlertmanagerSpecContainersLifecyclePostStartHttpGetPort {
		return v.Port
	}).(AlertmanagerSpecContainersLifecyclePostStartHttpGetPortOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePostStartHttpGet) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLifecyclePostStartHttpGet)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput() AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput) Elem() AlertmanagerSpecContainersLifecyclePostStartHttpGetOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePostStartHttpGet) AlertmanagerSpecContainersLifecyclePostStartHttpGet {
		return *v
	}).(AlertmanagerSpecContainersLifecyclePostStartHttpGetOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePostStartHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput) HttpHeaders() AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePostStartHttpGet) []AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeaders {
		if v == nil {
			return nil
		}
		return v.HttpHeaders
	}).(AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePostStartHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput) Port() AlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePostStartHttpGet) *AlertmanagerSpecContainersLifecyclePostStartHttpGetPort {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(AlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePostStartHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeaders struct {
	// The header field name
	Name string `pulumi:"name"`
	// The header field value
	Value string `pulumi:"value"`
}

// AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersInput is an input type that accepts AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs and AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersInput` via:
//
//          AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs{...}
type AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersOutput() AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersOutput
	ToAlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersOutput
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs struct {
	// The header field name
	Name pulumi.StringInput `pulumi:"name"`
	// The header field value
	Value pulumi.StringInput `pulumi:"value"`
}

func (AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeaders)(nil)).Elem()
}

func (i AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersOutput() AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersOutput)
}

// AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayInput is an input type that accepts AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArray and AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayInput` via:
//
//          AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArray{ AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs{...} }
type AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput() AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput
	ToAlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput
}

type AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArray []AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersInput

func (AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeaders)(nil)).Elem()
}

func (i AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArray) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput() AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArray) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeaders)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersOutput) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersOutput() AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersOutput) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersOutput {
	return o
}

// The header field name
func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeaders) string { return v.Name }).(pulumi.StringOutput)
}

// The header field value
func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeaders) string { return v.Value }).(pulumi.StringOutput)
}

type AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeaders)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput() AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeaders {
		return vs[0].([]AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeaders)[vs[1].(int)]
	}).(AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersOutput)
}

type AlertmanagerSpecContainersLifecyclePostStartHttpGetPort struct {
}

// AlertmanagerSpecContainersLifecyclePostStartHttpGetPortInput is an input type that accepts AlertmanagerSpecContainersLifecyclePostStartHttpGetPortArgs and AlertmanagerSpecContainersLifecyclePostStartHttpGetPortOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePostStartHttpGetPortInput` via:
//
//          AlertmanagerSpecContainersLifecyclePostStartHttpGetPortArgs{...}
type AlertmanagerSpecContainersLifecyclePostStartHttpGetPortInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPortOutput() AlertmanagerSpecContainersLifecyclePostStartHttpGetPortOutput
	ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPortOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePostStartHttpGetPortOutput
}

type AlertmanagerSpecContainersLifecyclePostStartHttpGetPortArgs struct {
}

func (AlertmanagerSpecContainersLifecyclePostStartHttpGetPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePostStartHttpGetPort)(nil)).Elem()
}

func (i AlertmanagerSpecContainersLifecyclePostStartHttpGetPortArgs) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPortOutput() AlertmanagerSpecContainersLifecyclePostStartHttpGetPortOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPortOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePostStartHttpGetPortArgs) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPortOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartHttpGetPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePostStartHttpGetPortOutput)
}

func (i AlertmanagerSpecContainersLifecyclePostStartHttpGetPortArgs) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutput() AlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePostStartHttpGetPortArgs) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePostStartHttpGetPortOutput).ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrInput is an input type that accepts AlertmanagerSpecContainersLifecyclePostStartHttpGetPortArgs, AlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtr and AlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrInput` via:
//
//          AlertmanagerSpecContainersLifecyclePostStartHttpGetPortArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutput() AlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutput
	ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutput
}

type alertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrType AlertmanagerSpecContainersLifecyclePostStartHttpGetPortArgs

func AlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtr(v *AlertmanagerSpecContainersLifecyclePostStartHttpGetPortArgs) AlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrInput {
	return (*alertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrType)(v)
}

func (*alertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLifecyclePostStartHttpGetPort)(nil)).Elem()
}

func (i *alertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrType) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutput() AlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrType) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutput)
}

type AlertmanagerSpecContainersLifecyclePostStartHttpGetPortOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePostStartHttpGetPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePostStartHttpGetPort)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetPortOutput) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPortOutput() AlertmanagerSpecContainersLifecyclePostStartHttpGetPortOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetPortOutput) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPortOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartHttpGetPortOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetPortOutput) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutput() AlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutput {
	return o.ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetPortOutput) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePostStartHttpGetPort) *AlertmanagerSpecContainersLifecyclePostStartHttpGetPort {
		return &v
	}).(AlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutput)
}

type AlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLifecyclePostStartHttpGetPort)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutput) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutput() AlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutput) ToAlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutput) Elem() AlertmanagerSpecContainersLifecyclePostStartHttpGetPortOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePostStartHttpGetPort) AlertmanagerSpecContainersLifecyclePostStartHttpGetPort {
		return *v
	}).(AlertmanagerSpecContainersLifecyclePostStartHttpGetPortOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecContainersLifecyclePostStartTcpSocket struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecContainersLifecyclePostStartTcpSocketPort `pulumi:"port"`
}

// AlertmanagerSpecContainersLifecyclePostStartTcpSocketInput is an input type that accepts AlertmanagerSpecContainersLifecyclePostStartTcpSocketArgs and AlertmanagerSpecContainersLifecyclePostStartTcpSocketOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePostStartTcpSocketInput` via:
//
//          AlertmanagerSpecContainersLifecyclePostStartTcpSocketArgs{...}
type AlertmanagerSpecContainersLifecyclePostStartTcpSocketInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketOutput() AlertmanagerSpecContainersLifecyclePostStartTcpSocketOutput
	ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePostStartTcpSocketOutput
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecContainersLifecyclePostStartTcpSocketArgs struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortInput `pulumi:"port"`
}

func (AlertmanagerSpecContainersLifecyclePostStartTcpSocketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePostStartTcpSocket)(nil)).Elem()
}

func (i AlertmanagerSpecContainersLifecyclePostStartTcpSocketArgs) ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketOutput() AlertmanagerSpecContainersLifecyclePostStartTcpSocketOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePostStartTcpSocketArgs) ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartTcpSocketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePostStartTcpSocketOutput)
}

func (i AlertmanagerSpecContainersLifecyclePostStartTcpSocketArgs) ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput() AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePostStartTcpSocketArgs) ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePostStartTcpSocketOutput).ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrInput is an input type that accepts AlertmanagerSpecContainersLifecyclePostStartTcpSocketArgs, AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtr and AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrInput` via:
//
//          AlertmanagerSpecContainersLifecyclePostStartTcpSocketArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput() AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput
	ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput
}

type alertmanagerSpecContainersLifecyclePostStartTcpSocketPtrType AlertmanagerSpecContainersLifecyclePostStartTcpSocketArgs

func AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtr(v *AlertmanagerSpecContainersLifecyclePostStartTcpSocketArgs) AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrInput {
	return (*alertmanagerSpecContainersLifecyclePostStartTcpSocketPtrType)(v)
}

func (*alertmanagerSpecContainersLifecyclePostStartTcpSocketPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLifecyclePostStartTcpSocket)(nil)).Elem()
}

func (i *alertmanagerSpecContainersLifecyclePostStartTcpSocketPtrType) ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput() AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersLifecyclePostStartTcpSocketPtrType) ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecContainersLifecyclePostStartTcpSocketOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePostStartTcpSocketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePostStartTcpSocket)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePostStartTcpSocketOutput) ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketOutput() AlertmanagerSpecContainersLifecyclePostStartTcpSocketOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePostStartTcpSocketOutput) ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartTcpSocketOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePostStartTcpSocketOutput) ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput() AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput {
	return o.ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersLifecyclePostStartTcpSocketOutput) ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePostStartTcpSocket) *AlertmanagerSpecContainersLifecyclePostStartTcpSocket {
		return &v
	}).(AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o AlertmanagerSpecContainersLifecyclePostStartTcpSocketOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePostStartTcpSocket) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecContainersLifecyclePostStartTcpSocketOutput) Port() AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePostStartTcpSocket) AlertmanagerSpecContainersLifecyclePostStartTcpSocketPort {
		return v.Port
	}).(AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortOutput)
}

type AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLifecyclePostStartTcpSocket)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput) ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput() AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput) ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput) Elem() AlertmanagerSpecContainersLifecyclePostStartTcpSocketOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePostStartTcpSocket) AlertmanagerSpecContainersLifecyclePostStartTcpSocket {
		return *v
	}).(AlertmanagerSpecContainersLifecyclePostStartTcpSocketOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePostStartTcpSocket) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput) Port() AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePostStartTcpSocket) *AlertmanagerSpecContainersLifecyclePostStartTcpSocketPort {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutput)
}

type AlertmanagerSpecContainersLifecyclePostStartTcpSocketPort struct {
}

// AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortInput is an input type that accepts AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortArgs and AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortInput` via:
//
//          AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortArgs{...}
type AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPortOutput() AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortOutput
	ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPortOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortOutput
}

type AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortArgs struct {
}

func (AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePostStartTcpSocketPort)(nil)).Elem()
}

func (i AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortArgs) ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPortOutput() AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPortOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortArgs) ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPortOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortOutput)
}

func (i AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortArgs) ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutput() AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortArgs) ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortOutput).ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrInput is an input type that accepts AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortArgs, AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtr and AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrInput` via:
//
//          AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutput() AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutput
	ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutput
}

type alertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrType AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortArgs

func AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtr(v *AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortArgs) AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrInput {
	return (*alertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrType)(v)
}

func (*alertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLifecyclePostStartTcpSocketPort)(nil)).Elem()
}

func (i *alertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrType) ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutput() AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrType) ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutput)
}

type AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePostStartTcpSocketPort)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortOutput) ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPortOutput() AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortOutput) ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPortOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortOutput) ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutput() AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutput {
	return o.ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortOutput) ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePostStartTcpSocketPort) *AlertmanagerSpecContainersLifecyclePostStartTcpSocketPort {
		return &v
	}).(AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutput)
}

type AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLifecyclePostStartTcpSocketPort)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutput) ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutput() AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutput) ToAlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutput) Elem() AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePostStartTcpSocketPort) AlertmanagerSpecContainersLifecyclePostStartTcpSocketPort {
		return *v
	}).(AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortOutput)
}

// PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
type AlertmanagerSpecContainersLifecyclePreStop struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec *AlertmanagerSpecContainersLifecyclePreStopExec `pulumi:"exec"`
	// HTTPGet specifies the http request to perform.
	HttpGet *AlertmanagerSpecContainersLifecyclePreStopHttpGet `pulumi:"httpGet"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
	TcpSocket *AlertmanagerSpecContainersLifecyclePreStopTcpSocket `pulumi:"tcpSocket"`
}

// AlertmanagerSpecContainersLifecyclePreStopInput is an input type that accepts AlertmanagerSpecContainersLifecyclePreStopArgs and AlertmanagerSpecContainersLifecyclePreStopOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePreStopInput` via:
//
//          AlertmanagerSpecContainersLifecyclePreStopArgs{...}
type AlertmanagerSpecContainersLifecyclePreStopInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePreStopOutput() AlertmanagerSpecContainersLifecyclePreStopOutput
	ToAlertmanagerSpecContainersLifecyclePreStopOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePreStopOutput
}

// PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
type AlertmanagerSpecContainersLifecyclePreStopArgs struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec AlertmanagerSpecContainersLifecyclePreStopExecPtrInput `pulumi:"exec"`
	// HTTPGet specifies the http request to perform.
	HttpGet AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrInput `pulumi:"httpGet"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
	TcpSocket AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrInput `pulumi:"tcpSocket"`
}

func (AlertmanagerSpecContainersLifecyclePreStopArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePreStop)(nil)).Elem()
}

func (i AlertmanagerSpecContainersLifecyclePreStopArgs) ToAlertmanagerSpecContainersLifecyclePreStopOutput() AlertmanagerSpecContainersLifecyclePreStopOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePreStopOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePreStopArgs) ToAlertmanagerSpecContainersLifecyclePreStopOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePreStopOutput)
}

func (i AlertmanagerSpecContainersLifecyclePreStopArgs) ToAlertmanagerSpecContainersLifecyclePreStopPtrOutput() AlertmanagerSpecContainersLifecyclePreStopPtrOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePreStopPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePreStopArgs) ToAlertmanagerSpecContainersLifecyclePreStopPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePreStopOutput).ToAlertmanagerSpecContainersLifecyclePreStopPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersLifecyclePreStopPtrInput is an input type that accepts AlertmanagerSpecContainersLifecyclePreStopArgs, AlertmanagerSpecContainersLifecyclePreStopPtr and AlertmanagerSpecContainersLifecyclePreStopPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePreStopPtrInput` via:
//
//          AlertmanagerSpecContainersLifecyclePreStopArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersLifecyclePreStopPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePreStopPtrOutput() AlertmanagerSpecContainersLifecyclePreStopPtrOutput
	ToAlertmanagerSpecContainersLifecyclePreStopPtrOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePreStopPtrOutput
}

type alertmanagerSpecContainersLifecyclePreStopPtrType AlertmanagerSpecContainersLifecyclePreStopArgs

func AlertmanagerSpecContainersLifecyclePreStopPtr(v *AlertmanagerSpecContainersLifecyclePreStopArgs) AlertmanagerSpecContainersLifecyclePreStopPtrInput {
	return (*alertmanagerSpecContainersLifecyclePreStopPtrType)(v)
}

func (*alertmanagerSpecContainersLifecyclePreStopPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLifecyclePreStop)(nil)).Elem()
}

func (i *alertmanagerSpecContainersLifecyclePreStopPtrType) ToAlertmanagerSpecContainersLifecyclePreStopPtrOutput() AlertmanagerSpecContainersLifecyclePreStopPtrOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePreStopPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersLifecyclePreStopPtrType) ToAlertmanagerSpecContainersLifecyclePreStopPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePreStopPtrOutput)
}

// PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
type AlertmanagerSpecContainersLifecyclePreStopOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePreStopOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePreStop)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePreStopOutput) ToAlertmanagerSpecContainersLifecyclePreStopOutput() AlertmanagerSpecContainersLifecyclePreStopOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePreStopOutput) ToAlertmanagerSpecContainersLifecyclePreStopOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePreStopOutput) ToAlertmanagerSpecContainersLifecyclePreStopPtrOutput() AlertmanagerSpecContainersLifecyclePreStopPtrOutput {
	return o.ToAlertmanagerSpecContainersLifecyclePreStopPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersLifecyclePreStopOutput) ToAlertmanagerSpecContainersLifecyclePreStopPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePreStop) *AlertmanagerSpecContainersLifecyclePreStop {
		return &v
	}).(AlertmanagerSpecContainersLifecyclePreStopPtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
func (o AlertmanagerSpecContainersLifecyclePreStopOutput) Exec() AlertmanagerSpecContainersLifecyclePreStopExecPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePreStop) *AlertmanagerSpecContainersLifecyclePreStopExec {
		return v.Exec
	}).(AlertmanagerSpecContainersLifecyclePreStopExecPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o AlertmanagerSpecContainersLifecyclePreStopOutput) HttpGet() AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePreStop) *AlertmanagerSpecContainersLifecyclePreStopHttpGet {
		return v.HttpGet
	}).(AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
func (o AlertmanagerSpecContainersLifecyclePreStopOutput) TcpSocket() AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePreStop) *AlertmanagerSpecContainersLifecyclePreStopTcpSocket {
		return v.TcpSocket
	}).(AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput)
}

type AlertmanagerSpecContainersLifecyclePreStopPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePreStopPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLifecyclePreStop)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePreStopPtrOutput) ToAlertmanagerSpecContainersLifecyclePreStopPtrOutput() AlertmanagerSpecContainersLifecyclePreStopPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePreStopPtrOutput) ToAlertmanagerSpecContainersLifecyclePreStopPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePreStopPtrOutput) Elem() AlertmanagerSpecContainersLifecyclePreStopOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePreStop) AlertmanagerSpecContainersLifecyclePreStop {
		return *v
	}).(AlertmanagerSpecContainersLifecyclePreStopOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
func (o AlertmanagerSpecContainersLifecyclePreStopPtrOutput) Exec() AlertmanagerSpecContainersLifecyclePreStopExecPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePreStop) *AlertmanagerSpecContainersLifecyclePreStopExec {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(AlertmanagerSpecContainersLifecyclePreStopExecPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o AlertmanagerSpecContainersLifecyclePreStopPtrOutput) HttpGet() AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePreStop) *AlertmanagerSpecContainersLifecyclePreStopHttpGet {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
func (o AlertmanagerSpecContainersLifecyclePreStopPtrOutput) TcpSocket() AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePreStop) *AlertmanagerSpecContainersLifecyclePreStopTcpSocket {
		if v == nil {
			return nil
		}
		return v.TcpSocket
	}).(AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecContainersLifecyclePreStopExec struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command []string `pulumi:"command"`
}

// AlertmanagerSpecContainersLifecyclePreStopExecInput is an input type that accepts AlertmanagerSpecContainersLifecyclePreStopExecArgs and AlertmanagerSpecContainersLifecyclePreStopExecOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePreStopExecInput` via:
//
//          AlertmanagerSpecContainersLifecyclePreStopExecArgs{...}
type AlertmanagerSpecContainersLifecyclePreStopExecInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePreStopExecOutput() AlertmanagerSpecContainersLifecyclePreStopExecOutput
	ToAlertmanagerSpecContainersLifecyclePreStopExecOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePreStopExecOutput
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecContainersLifecyclePreStopExecArgs struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command pulumi.StringArrayInput `pulumi:"command"`
}

func (AlertmanagerSpecContainersLifecyclePreStopExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePreStopExec)(nil)).Elem()
}

func (i AlertmanagerSpecContainersLifecyclePreStopExecArgs) ToAlertmanagerSpecContainersLifecyclePreStopExecOutput() AlertmanagerSpecContainersLifecyclePreStopExecOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePreStopExecOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePreStopExecArgs) ToAlertmanagerSpecContainersLifecyclePreStopExecOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePreStopExecOutput)
}

func (i AlertmanagerSpecContainersLifecyclePreStopExecArgs) ToAlertmanagerSpecContainersLifecyclePreStopExecPtrOutput() AlertmanagerSpecContainersLifecyclePreStopExecPtrOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePreStopExecPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePreStopExecArgs) ToAlertmanagerSpecContainersLifecyclePreStopExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePreStopExecOutput).ToAlertmanagerSpecContainersLifecyclePreStopExecPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersLifecyclePreStopExecPtrInput is an input type that accepts AlertmanagerSpecContainersLifecyclePreStopExecArgs, AlertmanagerSpecContainersLifecyclePreStopExecPtr and AlertmanagerSpecContainersLifecyclePreStopExecPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePreStopExecPtrInput` via:
//
//          AlertmanagerSpecContainersLifecyclePreStopExecArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersLifecyclePreStopExecPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePreStopExecPtrOutput() AlertmanagerSpecContainersLifecyclePreStopExecPtrOutput
	ToAlertmanagerSpecContainersLifecyclePreStopExecPtrOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePreStopExecPtrOutput
}

type alertmanagerSpecContainersLifecyclePreStopExecPtrType AlertmanagerSpecContainersLifecyclePreStopExecArgs

func AlertmanagerSpecContainersLifecyclePreStopExecPtr(v *AlertmanagerSpecContainersLifecyclePreStopExecArgs) AlertmanagerSpecContainersLifecyclePreStopExecPtrInput {
	return (*alertmanagerSpecContainersLifecyclePreStopExecPtrType)(v)
}

func (*alertmanagerSpecContainersLifecyclePreStopExecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLifecyclePreStopExec)(nil)).Elem()
}

func (i *alertmanagerSpecContainersLifecyclePreStopExecPtrType) ToAlertmanagerSpecContainersLifecyclePreStopExecPtrOutput() AlertmanagerSpecContainersLifecyclePreStopExecPtrOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePreStopExecPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersLifecyclePreStopExecPtrType) ToAlertmanagerSpecContainersLifecyclePreStopExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePreStopExecPtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecContainersLifecyclePreStopExecOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePreStopExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePreStopExec)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePreStopExecOutput) ToAlertmanagerSpecContainersLifecyclePreStopExecOutput() AlertmanagerSpecContainersLifecyclePreStopExecOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePreStopExecOutput) ToAlertmanagerSpecContainersLifecyclePreStopExecOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopExecOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePreStopExecOutput) ToAlertmanagerSpecContainersLifecyclePreStopExecPtrOutput() AlertmanagerSpecContainersLifecyclePreStopExecPtrOutput {
	return o.ToAlertmanagerSpecContainersLifecyclePreStopExecPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersLifecyclePreStopExecOutput) ToAlertmanagerSpecContainersLifecyclePreStopExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopExecPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePreStopExec) *AlertmanagerSpecContainersLifecyclePreStopExec {
		return &v
	}).(AlertmanagerSpecContainersLifecyclePreStopExecPtrOutput)
}

// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o AlertmanagerSpecContainersLifecyclePreStopExecOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePreStopExec) []string { return v.Command }).(pulumi.StringArrayOutput)
}

type AlertmanagerSpecContainersLifecyclePreStopExecPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePreStopExecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLifecyclePreStopExec)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePreStopExecPtrOutput) ToAlertmanagerSpecContainersLifecyclePreStopExecPtrOutput() AlertmanagerSpecContainersLifecyclePreStopExecPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePreStopExecPtrOutput) ToAlertmanagerSpecContainersLifecyclePreStopExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopExecPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePreStopExecPtrOutput) Elem() AlertmanagerSpecContainersLifecyclePreStopExecOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePreStopExec) AlertmanagerSpecContainersLifecyclePreStopExec {
		return *v
	}).(AlertmanagerSpecContainersLifecyclePreStopExecOutput)
}

// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o AlertmanagerSpecContainersLifecyclePreStopExecPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePreStopExec) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecContainersLifecyclePreStopHttpGet struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeaders `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path *string `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecContainersLifecyclePreStopHttpGetPort `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `pulumi:"scheme"`
}

// AlertmanagerSpecContainersLifecyclePreStopHttpGetInput is an input type that accepts AlertmanagerSpecContainersLifecyclePreStopHttpGetArgs and AlertmanagerSpecContainersLifecyclePreStopHttpGetOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePreStopHttpGetInput` via:
//
//          AlertmanagerSpecContainersLifecyclePreStopHttpGetArgs{...}
type AlertmanagerSpecContainersLifecyclePreStopHttpGetInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePreStopHttpGetOutput() AlertmanagerSpecContainersLifecyclePreStopHttpGetOutput
	ToAlertmanagerSpecContainersLifecyclePreStopHttpGetOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePreStopHttpGetOutput
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecContainersLifecyclePreStopHttpGetArgs struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayInput `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecContainersLifecyclePreStopHttpGetPortInput `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (AlertmanagerSpecContainersLifecyclePreStopHttpGetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePreStopHttpGet)(nil)).Elem()
}

func (i AlertmanagerSpecContainersLifecyclePreStopHttpGetArgs) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetOutput() AlertmanagerSpecContainersLifecyclePreStopHttpGetOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePreStopHttpGetOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePreStopHttpGetArgs) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopHttpGetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePreStopHttpGetOutput)
}

func (i AlertmanagerSpecContainersLifecyclePreStopHttpGetArgs) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput() AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePreStopHttpGetArgs) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePreStopHttpGetOutput).ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrInput is an input type that accepts AlertmanagerSpecContainersLifecyclePreStopHttpGetArgs, AlertmanagerSpecContainersLifecyclePreStopHttpGetPtr and AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrInput` via:
//
//          AlertmanagerSpecContainersLifecyclePreStopHttpGetArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput() AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput
	ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput
}

type alertmanagerSpecContainersLifecyclePreStopHttpGetPtrType AlertmanagerSpecContainersLifecyclePreStopHttpGetArgs

func AlertmanagerSpecContainersLifecyclePreStopHttpGetPtr(v *AlertmanagerSpecContainersLifecyclePreStopHttpGetArgs) AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrInput {
	return (*alertmanagerSpecContainersLifecyclePreStopHttpGetPtrType)(v)
}

func (*alertmanagerSpecContainersLifecyclePreStopHttpGetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLifecyclePreStopHttpGet)(nil)).Elem()
}

func (i *alertmanagerSpecContainersLifecyclePreStopHttpGetPtrType) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput() AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersLifecyclePreStopHttpGetPtrType) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput)
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecContainersLifecyclePreStopHttpGetOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePreStopHttpGetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePreStopHttpGet)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetOutput) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetOutput() AlertmanagerSpecContainersLifecyclePreStopHttpGetOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetOutput) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopHttpGetOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetOutput) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput() AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput {
	return o.ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetOutput) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePreStopHttpGet) *AlertmanagerSpecContainersLifecyclePreStopHttpGet {
		return &v
	}).(AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePreStopHttpGet) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetOutput) HttpHeaders() AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePreStopHttpGet) []AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeaders {
		return v.HttpHeaders
	}).(AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePreStopHttpGet) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetOutput) Port() AlertmanagerSpecContainersLifecyclePreStopHttpGetPortOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePreStopHttpGet) AlertmanagerSpecContainersLifecyclePreStopHttpGetPort {
		return v.Port
	}).(AlertmanagerSpecContainersLifecyclePreStopHttpGetPortOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePreStopHttpGet) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLifecyclePreStopHttpGet)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput() AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput) Elem() AlertmanagerSpecContainersLifecyclePreStopHttpGetOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePreStopHttpGet) AlertmanagerSpecContainersLifecyclePreStopHttpGet {
		return *v
	}).(AlertmanagerSpecContainersLifecyclePreStopHttpGetOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePreStopHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput) HttpHeaders() AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePreStopHttpGet) []AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeaders {
		if v == nil {
			return nil
		}
		return v.HttpHeaders
	}).(AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePreStopHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput) Port() AlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePreStopHttpGet) *AlertmanagerSpecContainersLifecyclePreStopHttpGetPort {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(AlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePreStopHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeaders struct {
	// The header field name
	Name string `pulumi:"name"`
	// The header field value
	Value string `pulumi:"value"`
}

// AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersInput is an input type that accepts AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs and AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersInput` via:
//
//          AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs{...}
type AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersOutput() AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersOutput
	ToAlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersOutput
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs struct {
	// The header field name
	Name pulumi.StringInput `pulumi:"name"`
	// The header field value
	Value pulumi.StringInput `pulumi:"value"`
}

func (AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeaders)(nil)).Elem()
}

func (i AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersOutput() AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersOutput)
}

// AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayInput is an input type that accepts AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArray and AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayInput` via:
//
//          AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArray{ AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs{...} }
type AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput() AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput
	ToAlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput
}

type AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArray []AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersInput

func (AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeaders)(nil)).Elem()
}

func (i AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArray) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput() AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArray) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeaders)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersOutput) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersOutput() AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersOutput) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersOutput {
	return o
}

// The header field name
func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeaders) string { return v.Name }).(pulumi.StringOutput)
}

// The header field value
func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeaders) string { return v.Value }).(pulumi.StringOutput)
}

type AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeaders)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput() AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeaders {
		return vs[0].([]AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeaders)[vs[1].(int)]
	}).(AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersOutput)
}

type AlertmanagerSpecContainersLifecyclePreStopHttpGetPort struct {
}

// AlertmanagerSpecContainersLifecyclePreStopHttpGetPortInput is an input type that accepts AlertmanagerSpecContainersLifecyclePreStopHttpGetPortArgs and AlertmanagerSpecContainersLifecyclePreStopHttpGetPortOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePreStopHttpGetPortInput` via:
//
//          AlertmanagerSpecContainersLifecyclePreStopHttpGetPortArgs{...}
type AlertmanagerSpecContainersLifecyclePreStopHttpGetPortInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPortOutput() AlertmanagerSpecContainersLifecyclePreStopHttpGetPortOutput
	ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPortOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePreStopHttpGetPortOutput
}

type AlertmanagerSpecContainersLifecyclePreStopHttpGetPortArgs struct {
}

func (AlertmanagerSpecContainersLifecyclePreStopHttpGetPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePreStopHttpGetPort)(nil)).Elem()
}

func (i AlertmanagerSpecContainersLifecyclePreStopHttpGetPortArgs) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPortOutput() AlertmanagerSpecContainersLifecyclePreStopHttpGetPortOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPortOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePreStopHttpGetPortArgs) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPortOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopHttpGetPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePreStopHttpGetPortOutput)
}

func (i AlertmanagerSpecContainersLifecyclePreStopHttpGetPortArgs) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutput() AlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePreStopHttpGetPortArgs) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePreStopHttpGetPortOutput).ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrInput is an input type that accepts AlertmanagerSpecContainersLifecyclePreStopHttpGetPortArgs, AlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtr and AlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrInput` via:
//
//          AlertmanagerSpecContainersLifecyclePreStopHttpGetPortArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutput() AlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutput
	ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutput
}

type alertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrType AlertmanagerSpecContainersLifecyclePreStopHttpGetPortArgs

func AlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtr(v *AlertmanagerSpecContainersLifecyclePreStopHttpGetPortArgs) AlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrInput {
	return (*alertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrType)(v)
}

func (*alertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLifecyclePreStopHttpGetPort)(nil)).Elem()
}

func (i *alertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrType) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutput() AlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrType) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutput)
}

type AlertmanagerSpecContainersLifecyclePreStopHttpGetPortOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePreStopHttpGetPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePreStopHttpGetPort)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetPortOutput) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPortOutput() AlertmanagerSpecContainersLifecyclePreStopHttpGetPortOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetPortOutput) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPortOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopHttpGetPortOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetPortOutput) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutput() AlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutput {
	return o.ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetPortOutput) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePreStopHttpGetPort) *AlertmanagerSpecContainersLifecyclePreStopHttpGetPort {
		return &v
	}).(AlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutput)
}

type AlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLifecyclePreStopHttpGetPort)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutput) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutput() AlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutput) ToAlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutput) Elem() AlertmanagerSpecContainersLifecyclePreStopHttpGetPortOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePreStopHttpGetPort) AlertmanagerSpecContainersLifecyclePreStopHttpGetPort {
		return *v
	}).(AlertmanagerSpecContainersLifecyclePreStopHttpGetPortOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecContainersLifecyclePreStopTcpSocket struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecContainersLifecyclePreStopTcpSocketPort `pulumi:"port"`
}

// AlertmanagerSpecContainersLifecyclePreStopTcpSocketInput is an input type that accepts AlertmanagerSpecContainersLifecyclePreStopTcpSocketArgs and AlertmanagerSpecContainersLifecyclePreStopTcpSocketOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePreStopTcpSocketInput` via:
//
//          AlertmanagerSpecContainersLifecyclePreStopTcpSocketArgs{...}
type AlertmanagerSpecContainersLifecyclePreStopTcpSocketInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketOutput() AlertmanagerSpecContainersLifecyclePreStopTcpSocketOutput
	ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePreStopTcpSocketOutput
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecContainersLifecyclePreStopTcpSocketArgs struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortInput `pulumi:"port"`
}

func (AlertmanagerSpecContainersLifecyclePreStopTcpSocketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePreStopTcpSocket)(nil)).Elem()
}

func (i AlertmanagerSpecContainersLifecyclePreStopTcpSocketArgs) ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketOutput() AlertmanagerSpecContainersLifecyclePreStopTcpSocketOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePreStopTcpSocketArgs) ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopTcpSocketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePreStopTcpSocketOutput)
}

func (i AlertmanagerSpecContainersLifecyclePreStopTcpSocketArgs) ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput() AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePreStopTcpSocketArgs) ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePreStopTcpSocketOutput).ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrInput is an input type that accepts AlertmanagerSpecContainersLifecyclePreStopTcpSocketArgs, AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtr and AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrInput` via:
//
//          AlertmanagerSpecContainersLifecyclePreStopTcpSocketArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput() AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput
	ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput
}

type alertmanagerSpecContainersLifecyclePreStopTcpSocketPtrType AlertmanagerSpecContainersLifecyclePreStopTcpSocketArgs

func AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtr(v *AlertmanagerSpecContainersLifecyclePreStopTcpSocketArgs) AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrInput {
	return (*alertmanagerSpecContainersLifecyclePreStopTcpSocketPtrType)(v)
}

func (*alertmanagerSpecContainersLifecyclePreStopTcpSocketPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLifecyclePreStopTcpSocket)(nil)).Elem()
}

func (i *alertmanagerSpecContainersLifecyclePreStopTcpSocketPtrType) ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput() AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersLifecyclePreStopTcpSocketPtrType) ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecContainersLifecyclePreStopTcpSocketOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePreStopTcpSocketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePreStopTcpSocket)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePreStopTcpSocketOutput) ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketOutput() AlertmanagerSpecContainersLifecyclePreStopTcpSocketOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePreStopTcpSocketOutput) ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopTcpSocketOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePreStopTcpSocketOutput) ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput() AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput {
	return o.ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersLifecyclePreStopTcpSocketOutput) ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePreStopTcpSocket) *AlertmanagerSpecContainersLifecyclePreStopTcpSocket {
		return &v
	}).(AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o AlertmanagerSpecContainersLifecyclePreStopTcpSocketOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePreStopTcpSocket) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecContainersLifecyclePreStopTcpSocketOutput) Port() AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePreStopTcpSocket) AlertmanagerSpecContainersLifecyclePreStopTcpSocketPort {
		return v.Port
	}).(AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortOutput)
}

type AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLifecyclePreStopTcpSocket)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput) ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput() AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput) ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput) Elem() AlertmanagerSpecContainersLifecyclePreStopTcpSocketOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePreStopTcpSocket) AlertmanagerSpecContainersLifecyclePreStopTcpSocket {
		return *v
	}).(AlertmanagerSpecContainersLifecyclePreStopTcpSocketOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePreStopTcpSocket) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput) Port() AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePreStopTcpSocket) *AlertmanagerSpecContainersLifecyclePreStopTcpSocketPort {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutput)
}

type AlertmanagerSpecContainersLifecyclePreStopTcpSocketPort struct {
}

// AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortInput is an input type that accepts AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortArgs and AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortInput` via:
//
//          AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortArgs{...}
type AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPortOutput() AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortOutput
	ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPortOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortOutput
}

type AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortArgs struct {
}

func (AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePreStopTcpSocketPort)(nil)).Elem()
}

func (i AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortArgs) ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPortOutput() AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPortOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortArgs) ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPortOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortOutput)
}

func (i AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortArgs) ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutput() AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortArgs) ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortOutput).ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrInput is an input type that accepts AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortArgs, AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtr and AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrInput` via:
//
//          AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutput() AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutput
	ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutputWithContext(context.Context) AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutput
}

type alertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrType AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortArgs

func AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtr(v *AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortArgs) AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrInput {
	return (*alertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrType)(v)
}

func (*alertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLifecyclePreStopTcpSocketPort)(nil)).Elem()
}

func (i *alertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrType) ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutput() AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutput {
	return i.ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrType) ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutput)
}

type AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLifecyclePreStopTcpSocketPort)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortOutput) ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPortOutput() AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortOutput) ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPortOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortOutput) ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutput() AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutput {
	return o.ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortOutput) ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLifecyclePreStopTcpSocketPort) *AlertmanagerSpecContainersLifecyclePreStopTcpSocketPort {
		return &v
	}).(AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutput)
}

type AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLifecyclePreStopTcpSocketPort)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutput) ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutput() AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutput) ToAlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutput) Elem() AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLifecyclePreStopTcpSocketPort) AlertmanagerSpecContainersLifecyclePreStopTcpSocketPort {
		return *v
	}).(AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortOutput)
}

// Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
type AlertmanagerSpecContainersLivenessProbe struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec *AlertmanagerSpecContainersLivenessProbeExec `pulumi:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// HTTPGet specifies the http request to perform.
	HttpGet *AlertmanagerSpecContainersLivenessProbeHttpGet `pulumi:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
	TcpSocket *AlertmanagerSpecContainersLivenessProbeTcpSocket `pulumi:"tcpSocket"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// AlertmanagerSpecContainersLivenessProbeInput is an input type that accepts AlertmanagerSpecContainersLivenessProbeArgs and AlertmanagerSpecContainersLivenessProbeOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLivenessProbeInput` via:
//
//          AlertmanagerSpecContainersLivenessProbeArgs{...}
type AlertmanagerSpecContainersLivenessProbeInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLivenessProbeOutput() AlertmanagerSpecContainersLivenessProbeOutput
	ToAlertmanagerSpecContainersLivenessProbeOutputWithContext(context.Context) AlertmanagerSpecContainersLivenessProbeOutput
}

// Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
type AlertmanagerSpecContainersLivenessProbeArgs struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec AlertmanagerSpecContainersLivenessProbeExecPtrInput `pulumi:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// HTTPGet specifies the http request to perform.
	HttpGet AlertmanagerSpecContainersLivenessProbeHttpGetPtrInput `pulumi:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
	TcpSocket AlertmanagerSpecContainersLivenessProbeTcpSocketPtrInput `pulumi:"tcpSocket"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (AlertmanagerSpecContainersLivenessProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLivenessProbe)(nil)).Elem()
}

func (i AlertmanagerSpecContainersLivenessProbeArgs) ToAlertmanagerSpecContainersLivenessProbeOutput() AlertmanagerSpecContainersLivenessProbeOutput {
	return i.ToAlertmanagerSpecContainersLivenessProbeOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLivenessProbeArgs) ToAlertmanagerSpecContainersLivenessProbeOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLivenessProbeOutput)
}

func (i AlertmanagerSpecContainersLivenessProbeArgs) ToAlertmanagerSpecContainersLivenessProbePtrOutput() AlertmanagerSpecContainersLivenessProbePtrOutput {
	return i.ToAlertmanagerSpecContainersLivenessProbePtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLivenessProbeArgs) ToAlertmanagerSpecContainersLivenessProbePtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLivenessProbeOutput).ToAlertmanagerSpecContainersLivenessProbePtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersLivenessProbePtrInput is an input type that accepts AlertmanagerSpecContainersLivenessProbeArgs, AlertmanagerSpecContainersLivenessProbePtr and AlertmanagerSpecContainersLivenessProbePtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLivenessProbePtrInput` via:
//
//          AlertmanagerSpecContainersLivenessProbeArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersLivenessProbePtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLivenessProbePtrOutput() AlertmanagerSpecContainersLivenessProbePtrOutput
	ToAlertmanagerSpecContainersLivenessProbePtrOutputWithContext(context.Context) AlertmanagerSpecContainersLivenessProbePtrOutput
}

type alertmanagerSpecContainersLivenessProbePtrType AlertmanagerSpecContainersLivenessProbeArgs

func AlertmanagerSpecContainersLivenessProbePtr(v *AlertmanagerSpecContainersLivenessProbeArgs) AlertmanagerSpecContainersLivenessProbePtrInput {
	return (*alertmanagerSpecContainersLivenessProbePtrType)(v)
}

func (*alertmanagerSpecContainersLivenessProbePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLivenessProbe)(nil)).Elem()
}

func (i *alertmanagerSpecContainersLivenessProbePtrType) ToAlertmanagerSpecContainersLivenessProbePtrOutput() AlertmanagerSpecContainersLivenessProbePtrOutput {
	return i.ToAlertmanagerSpecContainersLivenessProbePtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersLivenessProbePtrType) ToAlertmanagerSpecContainersLivenessProbePtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLivenessProbePtrOutput)
}

// Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
type AlertmanagerSpecContainersLivenessProbeOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLivenessProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLivenessProbe)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLivenessProbeOutput) ToAlertmanagerSpecContainersLivenessProbeOutput() AlertmanagerSpecContainersLivenessProbeOutput {
	return o
}

func (o AlertmanagerSpecContainersLivenessProbeOutput) ToAlertmanagerSpecContainersLivenessProbeOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeOutput {
	return o
}

func (o AlertmanagerSpecContainersLivenessProbeOutput) ToAlertmanagerSpecContainersLivenessProbePtrOutput() AlertmanagerSpecContainersLivenessProbePtrOutput {
	return o.ToAlertmanagerSpecContainersLivenessProbePtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersLivenessProbeOutput) ToAlertmanagerSpecContainersLivenessProbePtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLivenessProbe) *AlertmanagerSpecContainersLivenessProbe {
		return &v
	}).(AlertmanagerSpecContainersLivenessProbePtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
func (o AlertmanagerSpecContainersLivenessProbeOutput) Exec() AlertmanagerSpecContainersLivenessProbeExecPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLivenessProbe) *AlertmanagerSpecContainersLivenessProbeExec {
		return v.Exec
	}).(AlertmanagerSpecContainersLivenessProbeExecPtrOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (o AlertmanagerSpecContainersLivenessProbeOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLivenessProbe) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o AlertmanagerSpecContainersLivenessProbeOutput) HttpGet() AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLivenessProbe) *AlertmanagerSpecContainersLivenessProbeHttpGet {
		return v.HttpGet
	}).(AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput)
}

// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecContainersLivenessProbeOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLivenessProbe) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
func (o AlertmanagerSpecContainersLivenessProbeOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLivenessProbe) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
func (o AlertmanagerSpecContainersLivenessProbeOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLivenessProbe) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
func (o AlertmanagerSpecContainersLivenessProbeOutput) TcpSocket() AlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLivenessProbe) *AlertmanagerSpecContainersLivenessProbeTcpSocket {
		return v.TcpSocket
	}).(AlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput)
}

// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecContainersLivenessProbeOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLivenessProbe) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type AlertmanagerSpecContainersLivenessProbePtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLivenessProbePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLivenessProbe)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLivenessProbePtrOutput) ToAlertmanagerSpecContainersLivenessProbePtrOutput() AlertmanagerSpecContainersLivenessProbePtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLivenessProbePtrOutput) ToAlertmanagerSpecContainersLivenessProbePtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbePtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLivenessProbePtrOutput) Elem() AlertmanagerSpecContainersLivenessProbeOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLivenessProbe) AlertmanagerSpecContainersLivenessProbe { return *v }).(AlertmanagerSpecContainersLivenessProbeOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
func (o AlertmanagerSpecContainersLivenessProbePtrOutput) Exec() AlertmanagerSpecContainersLivenessProbeExecPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLivenessProbe) *AlertmanagerSpecContainersLivenessProbeExec {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(AlertmanagerSpecContainersLivenessProbeExecPtrOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (o AlertmanagerSpecContainersLivenessProbePtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o AlertmanagerSpecContainersLivenessProbePtrOutput) HttpGet() AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLivenessProbe) *AlertmanagerSpecContainersLivenessProbeHttpGet {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput)
}

// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecContainersLivenessProbePtrOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.InitialDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
func (o AlertmanagerSpecContainersLivenessProbePtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
func (o AlertmanagerSpecContainersLivenessProbePtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
func (o AlertmanagerSpecContainersLivenessProbePtrOutput) TcpSocket() AlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLivenessProbe) *AlertmanagerSpecContainersLivenessProbeTcpSocket {
		if v == nil {
			return nil
		}
		return v.TcpSocket
	}).(AlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput)
}

// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecContainersLivenessProbePtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecContainersLivenessProbeExec struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command []string `pulumi:"command"`
}

// AlertmanagerSpecContainersLivenessProbeExecInput is an input type that accepts AlertmanagerSpecContainersLivenessProbeExecArgs and AlertmanagerSpecContainersLivenessProbeExecOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLivenessProbeExecInput` via:
//
//          AlertmanagerSpecContainersLivenessProbeExecArgs{...}
type AlertmanagerSpecContainersLivenessProbeExecInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLivenessProbeExecOutput() AlertmanagerSpecContainersLivenessProbeExecOutput
	ToAlertmanagerSpecContainersLivenessProbeExecOutputWithContext(context.Context) AlertmanagerSpecContainersLivenessProbeExecOutput
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecContainersLivenessProbeExecArgs struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command pulumi.StringArrayInput `pulumi:"command"`
}

func (AlertmanagerSpecContainersLivenessProbeExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLivenessProbeExec)(nil)).Elem()
}

func (i AlertmanagerSpecContainersLivenessProbeExecArgs) ToAlertmanagerSpecContainersLivenessProbeExecOutput() AlertmanagerSpecContainersLivenessProbeExecOutput {
	return i.ToAlertmanagerSpecContainersLivenessProbeExecOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLivenessProbeExecArgs) ToAlertmanagerSpecContainersLivenessProbeExecOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLivenessProbeExecOutput)
}

func (i AlertmanagerSpecContainersLivenessProbeExecArgs) ToAlertmanagerSpecContainersLivenessProbeExecPtrOutput() AlertmanagerSpecContainersLivenessProbeExecPtrOutput {
	return i.ToAlertmanagerSpecContainersLivenessProbeExecPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLivenessProbeExecArgs) ToAlertmanagerSpecContainersLivenessProbeExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLivenessProbeExecOutput).ToAlertmanagerSpecContainersLivenessProbeExecPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersLivenessProbeExecPtrInput is an input type that accepts AlertmanagerSpecContainersLivenessProbeExecArgs, AlertmanagerSpecContainersLivenessProbeExecPtr and AlertmanagerSpecContainersLivenessProbeExecPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLivenessProbeExecPtrInput` via:
//
//          AlertmanagerSpecContainersLivenessProbeExecArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersLivenessProbeExecPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLivenessProbeExecPtrOutput() AlertmanagerSpecContainersLivenessProbeExecPtrOutput
	ToAlertmanagerSpecContainersLivenessProbeExecPtrOutputWithContext(context.Context) AlertmanagerSpecContainersLivenessProbeExecPtrOutput
}

type alertmanagerSpecContainersLivenessProbeExecPtrType AlertmanagerSpecContainersLivenessProbeExecArgs

func AlertmanagerSpecContainersLivenessProbeExecPtr(v *AlertmanagerSpecContainersLivenessProbeExecArgs) AlertmanagerSpecContainersLivenessProbeExecPtrInput {
	return (*alertmanagerSpecContainersLivenessProbeExecPtrType)(v)
}

func (*alertmanagerSpecContainersLivenessProbeExecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLivenessProbeExec)(nil)).Elem()
}

func (i *alertmanagerSpecContainersLivenessProbeExecPtrType) ToAlertmanagerSpecContainersLivenessProbeExecPtrOutput() AlertmanagerSpecContainersLivenessProbeExecPtrOutput {
	return i.ToAlertmanagerSpecContainersLivenessProbeExecPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersLivenessProbeExecPtrType) ToAlertmanagerSpecContainersLivenessProbeExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLivenessProbeExecPtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecContainersLivenessProbeExecOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLivenessProbeExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLivenessProbeExec)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLivenessProbeExecOutput) ToAlertmanagerSpecContainersLivenessProbeExecOutput() AlertmanagerSpecContainersLivenessProbeExecOutput {
	return o
}

func (o AlertmanagerSpecContainersLivenessProbeExecOutput) ToAlertmanagerSpecContainersLivenessProbeExecOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeExecOutput {
	return o
}

func (o AlertmanagerSpecContainersLivenessProbeExecOutput) ToAlertmanagerSpecContainersLivenessProbeExecPtrOutput() AlertmanagerSpecContainersLivenessProbeExecPtrOutput {
	return o.ToAlertmanagerSpecContainersLivenessProbeExecPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersLivenessProbeExecOutput) ToAlertmanagerSpecContainersLivenessProbeExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeExecPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLivenessProbeExec) *AlertmanagerSpecContainersLivenessProbeExec {
		return &v
	}).(AlertmanagerSpecContainersLivenessProbeExecPtrOutput)
}

// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o AlertmanagerSpecContainersLivenessProbeExecOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLivenessProbeExec) []string { return v.Command }).(pulumi.StringArrayOutput)
}

type AlertmanagerSpecContainersLivenessProbeExecPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLivenessProbeExecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLivenessProbeExec)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLivenessProbeExecPtrOutput) ToAlertmanagerSpecContainersLivenessProbeExecPtrOutput() AlertmanagerSpecContainersLivenessProbeExecPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLivenessProbeExecPtrOutput) ToAlertmanagerSpecContainersLivenessProbeExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeExecPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLivenessProbeExecPtrOutput) Elem() AlertmanagerSpecContainersLivenessProbeExecOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLivenessProbeExec) AlertmanagerSpecContainersLivenessProbeExec {
		return *v
	}).(AlertmanagerSpecContainersLivenessProbeExecOutput)
}

// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o AlertmanagerSpecContainersLivenessProbeExecPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLivenessProbeExec) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecContainersLivenessProbeHttpGet struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeaders `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path *string `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecContainersLivenessProbeHttpGetPort `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `pulumi:"scheme"`
}

// AlertmanagerSpecContainersLivenessProbeHttpGetInput is an input type that accepts AlertmanagerSpecContainersLivenessProbeHttpGetArgs and AlertmanagerSpecContainersLivenessProbeHttpGetOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLivenessProbeHttpGetInput` via:
//
//          AlertmanagerSpecContainersLivenessProbeHttpGetArgs{...}
type AlertmanagerSpecContainersLivenessProbeHttpGetInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLivenessProbeHttpGetOutput() AlertmanagerSpecContainersLivenessProbeHttpGetOutput
	ToAlertmanagerSpecContainersLivenessProbeHttpGetOutputWithContext(context.Context) AlertmanagerSpecContainersLivenessProbeHttpGetOutput
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecContainersLivenessProbeHttpGetArgs struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayInput `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecContainersLivenessProbeHttpGetPortInput `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (AlertmanagerSpecContainersLivenessProbeHttpGetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLivenessProbeHttpGet)(nil)).Elem()
}

func (i AlertmanagerSpecContainersLivenessProbeHttpGetArgs) ToAlertmanagerSpecContainersLivenessProbeHttpGetOutput() AlertmanagerSpecContainersLivenessProbeHttpGetOutput {
	return i.ToAlertmanagerSpecContainersLivenessProbeHttpGetOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLivenessProbeHttpGetArgs) ToAlertmanagerSpecContainersLivenessProbeHttpGetOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeHttpGetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLivenessProbeHttpGetOutput)
}

func (i AlertmanagerSpecContainersLivenessProbeHttpGetArgs) ToAlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput() AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput {
	return i.ToAlertmanagerSpecContainersLivenessProbeHttpGetPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLivenessProbeHttpGetArgs) ToAlertmanagerSpecContainersLivenessProbeHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLivenessProbeHttpGetOutput).ToAlertmanagerSpecContainersLivenessProbeHttpGetPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersLivenessProbeHttpGetPtrInput is an input type that accepts AlertmanagerSpecContainersLivenessProbeHttpGetArgs, AlertmanagerSpecContainersLivenessProbeHttpGetPtr and AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLivenessProbeHttpGetPtrInput` via:
//
//          AlertmanagerSpecContainersLivenessProbeHttpGetArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersLivenessProbeHttpGetPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput() AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput
	ToAlertmanagerSpecContainersLivenessProbeHttpGetPtrOutputWithContext(context.Context) AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput
}

type alertmanagerSpecContainersLivenessProbeHttpGetPtrType AlertmanagerSpecContainersLivenessProbeHttpGetArgs

func AlertmanagerSpecContainersLivenessProbeHttpGetPtr(v *AlertmanagerSpecContainersLivenessProbeHttpGetArgs) AlertmanagerSpecContainersLivenessProbeHttpGetPtrInput {
	return (*alertmanagerSpecContainersLivenessProbeHttpGetPtrType)(v)
}

func (*alertmanagerSpecContainersLivenessProbeHttpGetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLivenessProbeHttpGet)(nil)).Elem()
}

func (i *alertmanagerSpecContainersLivenessProbeHttpGetPtrType) ToAlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput() AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput {
	return i.ToAlertmanagerSpecContainersLivenessProbeHttpGetPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersLivenessProbeHttpGetPtrType) ToAlertmanagerSpecContainersLivenessProbeHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput)
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecContainersLivenessProbeHttpGetOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLivenessProbeHttpGetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLivenessProbeHttpGet)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLivenessProbeHttpGetOutput) ToAlertmanagerSpecContainersLivenessProbeHttpGetOutput() AlertmanagerSpecContainersLivenessProbeHttpGetOutput {
	return o
}

func (o AlertmanagerSpecContainersLivenessProbeHttpGetOutput) ToAlertmanagerSpecContainersLivenessProbeHttpGetOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeHttpGetOutput {
	return o
}

func (o AlertmanagerSpecContainersLivenessProbeHttpGetOutput) ToAlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput() AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput {
	return o.ToAlertmanagerSpecContainersLivenessProbeHttpGetPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersLivenessProbeHttpGetOutput) ToAlertmanagerSpecContainersLivenessProbeHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLivenessProbeHttpGet) *AlertmanagerSpecContainersLivenessProbeHttpGet {
		return &v
	}).(AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o AlertmanagerSpecContainersLivenessProbeHttpGetOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLivenessProbeHttpGet) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o AlertmanagerSpecContainersLivenessProbeHttpGetOutput) HttpHeaders() AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLivenessProbeHttpGet) []AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeaders {
		return v.HttpHeaders
	}).(AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o AlertmanagerSpecContainersLivenessProbeHttpGetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLivenessProbeHttpGet) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecContainersLivenessProbeHttpGetOutput) Port() AlertmanagerSpecContainersLivenessProbeHttpGetPortOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLivenessProbeHttpGet) AlertmanagerSpecContainersLivenessProbeHttpGetPort {
		return v.Port
	}).(AlertmanagerSpecContainersLivenessProbeHttpGetPortOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o AlertmanagerSpecContainersLivenessProbeHttpGetOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLivenessProbeHttpGet) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLivenessProbeHttpGet)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput) ToAlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput() AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput) ToAlertmanagerSpecContainersLivenessProbeHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput) Elem() AlertmanagerSpecContainersLivenessProbeHttpGetOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLivenessProbeHttpGet) AlertmanagerSpecContainersLivenessProbeHttpGet {
		return *v
	}).(AlertmanagerSpecContainersLivenessProbeHttpGetOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLivenessProbeHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput) HttpHeaders() AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLivenessProbeHttpGet) []AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeaders {
		if v == nil {
			return nil
		}
		return v.HttpHeaders
	}).(AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLivenessProbeHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput) Port() AlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLivenessProbeHttpGet) *AlertmanagerSpecContainersLivenessProbeHttpGetPort {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(AlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLivenessProbeHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeaders struct {
	// The header field name
	Name string `pulumi:"name"`
	// The header field value
	Value string `pulumi:"value"`
}

// AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersInput is an input type that accepts AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArgs and AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersInput` via:
//
//          AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArgs{...}
type AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersOutput() AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersOutput
	ToAlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersOutputWithContext(context.Context) AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersOutput
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArgs struct {
	// The header field name
	Name pulumi.StringInput `pulumi:"name"`
	// The header field value
	Value pulumi.StringInput `pulumi:"value"`
}

func (AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (i AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArgs) ToAlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersOutput() AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersOutput {
	return i.ToAlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArgs) ToAlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersOutput)
}

// AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayInput is an input type that accepts AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArray and AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayInput` via:
//
//          AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArray{ AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArgs{...} }
type AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayOutput() AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayOutput
	ToAlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayOutputWithContext(context.Context) AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayOutput
}

type AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArray []AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersInput

func (AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (i AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArray) ToAlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayOutput() AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayOutput {
	return i.ToAlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArray) ToAlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersOutput) ToAlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersOutput() AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersOutput {
	return o
}

func (o AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersOutput) ToAlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersOutput {
	return o
}

// The header field name
func (o AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeaders) string { return v.Name }).(pulumi.StringOutput)
}

// The header field value
func (o AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeaders) string { return v.Value }).(pulumi.StringOutput)
}

type AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayOutput) ToAlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayOutput() AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayOutput {
	return o
}

func (o AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayOutput) ToAlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayOutput {
	return o
}

func (o AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeaders {
		return vs[0].([]AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeaders)[vs[1].(int)]
	}).(AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersOutput)
}

type AlertmanagerSpecContainersLivenessProbeHttpGetPort struct {
}

// AlertmanagerSpecContainersLivenessProbeHttpGetPortInput is an input type that accepts AlertmanagerSpecContainersLivenessProbeHttpGetPortArgs and AlertmanagerSpecContainersLivenessProbeHttpGetPortOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLivenessProbeHttpGetPortInput` via:
//
//          AlertmanagerSpecContainersLivenessProbeHttpGetPortArgs{...}
type AlertmanagerSpecContainersLivenessProbeHttpGetPortInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLivenessProbeHttpGetPortOutput() AlertmanagerSpecContainersLivenessProbeHttpGetPortOutput
	ToAlertmanagerSpecContainersLivenessProbeHttpGetPortOutputWithContext(context.Context) AlertmanagerSpecContainersLivenessProbeHttpGetPortOutput
}

type AlertmanagerSpecContainersLivenessProbeHttpGetPortArgs struct {
}

func (AlertmanagerSpecContainersLivenessProbeHttpGetPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLivenessProbeHttpGetPort)(nil)).Elem()
}

func (i AlertmanagerSpecContainersLivenessProbeHttpGetPortArgs) ToAlertmanagerSpecContainersLivenessProbeHttpGetPortOutput() AlertmanagerSpecContainersLivenessProbeHttpGetPortOutput {
	return i.ToAlertmanagerSpecContainersLivenessProbeHttpGetPortOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLivenessProbeHttpGetPortArgs) ToAlertmanagerSpecContainersLivenessProbeHttpGetPortOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeHttpGetPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLivenessProbeHttpGetPortOutput)
}

func (i AlertmanagerSpecContainersLivenessProbeHttpGetPortArgs) ToAlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutput() AlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutput {
	return i.ToAlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLivenessProbeHttpGetPortArgs) ToAlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLivenessProbeHttpGetPortOutput).ToAlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersLivenessProbeHttpGetPortPtrInput is an input type that accepts AlertmanagerSpecContainersLivenessProbeHttpGetPortArgs, AlertmanagerSpecContainersLivenessProbeHttpGetPortPtr and AlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLivenessProbeHttpGetPortPtrInput` via:
//
//          AlertmanagerSpecContainersLivenessProbeHttpGetPortArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersLivenessProbeHttpGetPortPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutput() AlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutput
	ToAlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutputWithContext(context.Context) AlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutput
}

type alertmanagerSpecContainersLivenessProbeHttpGetPortPtrType AlertmanagerSpecContainersLivenessProbeHttpGetPortArgs

func AlertmanagerSpecContainersLivenessProbeHttpGetPortPtr(v *AlertmanagerSpecContainersLivenessProbeHttpGetPortArgs) AlertmanagerSpecContainersLivenessProbeHttpGetPortPtrInput {
	return (*alertmanagerSpecContainersLivenessProbeHttpGetPortPtrType)(v)
}

func (*alertmanagerSpecContainersLivenessProbeHttpGetPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLivenessProbeHttpGetPort)(nil)).Elem()
}

func (i *alertmanagerSpecContainersLivenessProbeHttpGetPortPtrType) ToAlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutput() AlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutput {
	return i.ToAlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersLivenessProbeHttpGetPortPtrType) ToAlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutput)
}

type AlertmanagerSpecContainersLivenessProbeHttpGetPortOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLivenessProbeHttpGetPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLivenessProbeHttpGetPort)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLivenessProbeHttpGetPortOutput) ToAlertmanagerSpecContainersLivenessProbeHttpGetPortOutput() AlertmanagerSpecContainersLivenessProbeHttpGetPortOutput {
	return o
}

func (o AlertmanagerSpecContainersLivenessProbeHttpGetPortOutput) ToAlertmanagerSpecContainersLivenessProbeHttpGetPortOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeHttpGetPortOutput {
	return o
}

func (o AlertmanagerSpecContainersLivenessProbeHttpGetPortOutput) ToAlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutput() AlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutput {
	return o.ToAlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersLivenessProbeHttpGetPortOutput) ToAlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLivenessProbeHttpGetPort) *AlertmanagerSpecContainersLivenessProbeHttpGetPort {
		return &v
	}).(AlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutput)
}

type AlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLivenessProbeHttpGetPort)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutput) ToAlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutput() AlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutput) ToAlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutput) Elem() AlertmanagerSpecContainersLivenessProbeHttpGetPortOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLivenessProbeHttpGetPort) AlertmanagerSpecContainersLivenessProbeHttpGetPort {
		return *v
	}).(AlertmanagerSpecContainersLivenessProbeHttpGetPortOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecContainersLivenessProbeTcpSocket struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecContainersLivenessProbeTcpSocketPort `pulumi:"port"`
}

// AlertmanagerSpecContainersLivenessProbeTcpSocketInput is an input type that accepts AlertmanagerSpecContainersLivenessProbeTcpSocketArgs and AlertmanagerSpecContainersLivenessProbeTcpSocketOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLivenessProbeTcpSocketInput` via:
//
//          AlertmanagerSpecContainersLivenessProbeTcpSocketArgs{...}
type AlertmanagerSpecContainersLivenessProbeTcpSocketInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLivenessProbeTcpSocketOutput() AlertmanagerSpecContainersLivenessProbeTcpSocketOutput
	ToAlertmanagerSpecContainersLivenessProbeTcpSocketOutputWithContext(context.Context) AlertmanagerSpecContainersLivenessProbeTcpSocketOutput
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecContainersLivenessProbeTcpSocketArgs struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecContainersLivenessProbeTcpSocketPortInput `pulumi:"port"`
}

func (AlertmanagerSpecContainersLivenessProbeTcpSocketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLivenessProbeTcpSocket)(nil)).Elem()
}

func (i AlertmanagerSpecContainersLivenessProbeTcpSocketArgs) ToAlertmanagerSpecContainersLivenessProbeTcpSocketOutput() AlertmanagerSpecContainersLivenessProbeTcpSocketOutput {
	return i.ToAlertmanagerSpecContainersLivenessProbeTcpSocketOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLivenessProbeTcpSocketArgs) ToAlertmanagerSpecContainersLivenessProbeTcpSocketOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeTcpSocketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLivenessProbeTcpSocketOutput)
}

func (i AlertmanagerSpecContainersLivenessProbeTcpSocketArgs) ToAlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput() AlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput {
	return i.ToAlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLivenessProbeTcpSocketArgs) ToAlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLivenessProbeTcpSocketOutput).ToAlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersLivenessProbeTcpSocketPtrInput is an input type that accepts AlertmanagerSpecContainersLivenessProbeTcpSocketArgs, AlertmanagerSpecContainersLivenessProbeTcpSocketPtr and AlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLivenessProbeTcpSocketPtrInput` via:
//
//          AlertmanagerSpecContainersLivenessProbeTcpSocketArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersLivenessProbeTcpSocketPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput() AlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput
	ToAlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutputWithContext(context.Context) AlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput
}

type alertmanagerSpecContainersLivenessProbeTcpSocketPtrType AlertmanagerSpecContainersLivenessProbeTcpSocketArgs

func AlertmanagerSpecContainersLivenessProbeTcpSocketPtr(v *AlertmanagerSpecContainersLivenessProbeTcpSocketArgs) AlertmanagerSpecContainersLivenessProbeTcpSocketPtrInput {
	return (*alertmanagerSpecContainersLivenessProbeTcpSocketPtrType)(v)
}

func (*alertmanagerSpecContainersLivenessProbeTcpSocketPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLivenessProbeTcpSocket)(nil)).Elem()
}

func (i *alertmanagerSpecContainersLivenessProbeTcpSocketPtrType) ToAlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput() AlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput {
	return i.ToAlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersLivenessProbeTcpSocketPtrType) ToAlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecContainersLivenessProbeTcpSocketOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLivenessProbeTcpSocketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLivenessProbeTcpSocket)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLivenessProbeTcpSocketOutput) ToAlertmanagerSpecContainersLivenessProbeTcpSocketOutput() AlertmanagerSpecContainersLivenessProbeTcpSocketOutput {
	return o
}

func (o AlertmanagerSpecContainersLivenessProbeTcpSocketOutput) ToAlertmanagerSpecContainersLivenessProbeTcpSocketOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeTcpSocketOutput {
	return o
}

func (o AlertmanagerSpecContainersLivenessProbeTcpSocketOutput) ToAlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput() AlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput {
	return o.ToAlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersLivenessProbeTcpSocketOutput) ToAlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLivenessProbeTcpSocket) *AlertmanagerSpecContainersLivenessProbeTcpSocket {
		return &v
	}).(AlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o AlertmanagerSpecContainersLivenessProbeTcpSocketOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLivenessProbeTcpSocket) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecContainersLivenessProbeTcpSocketOutput) Port() AlertmanagerSpecContainersLivenessProbeTcpSocketPortOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLivenessProbeTcpSocket) AlertmanagerSpecContainersLivenessProbeTcpSocketPort {
		return v.Port
	}).(AlertmanagerSpecContainersLivenessProbeTcpSocketPortOutput)
}

type AlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLivenessProbeTcpSocket)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput) ToAlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput() AlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput) ToAlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput) Elem() AlertmanagerSpecContainersLivenessProbeTcpSocketOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLivenessProbeTcpSocket) AlertmanagerSpecContainersLivenessProbeTcpSocket {
		return *v
	}).(AlertmanagerSpecContainersLivenessProbeTcpSocketOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o AlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLivenessProbeTcpSocket) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput) Port() AlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLivenessProbeTcpSocket) *AlertmanagerSpecContainersLivenessProbeTcpSocketPort {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(AlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutput)
}

type AlertmanagerSpecContainersLivenessProbeTcpSocketPort struct {
}

// AlertmanagerSpecContainersLivenessProbeTcpSocketPortInput is an input type that accepts AlertmanagerSpecContainersLivenessProbeTcpSocketPortArgs and AlertmanagerSpecContainersLivenessProbeTcpSocketPortOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLivenessProbeTcpSocketPortInput` via:
//
//          AlertmanagerSpecContainersLivenessProbeTcpSocketPortArgs{...}
type AlertmanagerSpecContainersLivenessProbeTcpSocketPortInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLivenessProbeTcpSocketPortOutput() AlertmanagerSpecContainersLivenessProbeTcpSocketPortOutput
	ToAlertmanagerSpecContainersLivenessProbeTcpSocketPortOutputWithContext(context.Context) AlertmanagerSpecContainersLivenessProbeTcpSocketPortOutput
}

type AlertmanagerSpecContainersLivenessProbeTcpSocketPortArgs struct {
}

func (AlertmanagerSpecContainersLivenessProbeTcpSocketPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLivenessProbeTcpSocketPort)(nil)).Elem()
}

func (i AlertmanagerSpecContainersLivenessProbeTcpSocketPortArgs) ToAlertmanagerSpecContainersLivenessProbeTcpSocketPortOutput() AlertmanagerSpecContainersLivenessProbeTcpSocketPortOutput {
	return i.ToAlertmanagerSpecContainersLivenessProbeTcpSocketPortOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLivenessProbeTcpSocketPortArgs) ToAlertmanagerSpecContainersLivenessProbeTcpSocketPortOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeTcpSocketPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLivenessProbeTcpSocketPortOutput)
}

func (i AlertmanagerSpecContainersLivenessProbeTcpSocketPortArgs) ToAlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutput() AlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutput {
	return i.ToAlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersLivenessProbeTcpSocketPortArgs) ToAlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLivenessProbeTcpSocketPortOutput).ToAlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrInput is an input type that accepts AlertmanagerSpecContainersLivenessProbeTcpSocketPortArgs, AlertmanagerSpecContainersLivenessProbeTcpSocketPortPtr and AlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrInput` via:
//
//          AlertmanagerSpecContainersLivenessProbeTcpSocketPortArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutput() AlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutput
	ToAlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutputWithContext(context.Context) AlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutput
}

type alertmanagerSpecContainersLivenessProbeTcpSocketPortPtrType AlertmanagerSpecContainersLivenessProbeTcpSocketPortArgs

func AlertmanagerSpecContainersLivenessProbeTcpSocketPortPtr(v *AlertmanagerSpecContainersLivenessProbeTcpSocketPortArgs) AlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrInput {
	return (*alertmanagerSpecContainersLivenessProbeTcpSocketPortPtrType)(v)
}

func (*alertmanagerSpecContainersLivenessProbeTcpSocketPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLivenessProbeTcpSocketPort)(nil)).Elem()
}

func (i *alertmanagerSpecContainersLivenessProbeTcpSocketPortPtrType) ToAlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutput() AlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutput {
	return i.ToAlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersLivenessProbeTcpSocketPortPtrType) ToAlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutput)
}

type AlertmanagerSpecContainersLivenessProbeTcpSocketPortOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLivenessProbeTcpSocketPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersLivenessProbeTcpSocketPort)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLivenessProbeTcpSocketPortOutput) ToAlertmanagerSpecContainersLivenessProbeTcpSocketPortOutput() AlertmanagerSpecContainersLivenessProbeTcpSocketPortOutput {
	return o
}

func (o AlertmanagerSpecContainersLivenessProbeTcpSocketPortOutput) ToAlertmanagerSpecContainersLivenessProbeTcpSocketPortOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeTcpSocketPortOutput {
	return o
}

func (o AlertmanagerSpecContainersLivenessProbeTcpSocketPortOutput) ToAlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutput() AlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutput {
	return o.ToAlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersLivenessProbeTcpSocketPortOutput) ToAlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersLivenessProbeTcpSocketPort) *AlertmanagerSpecContainersLivenessProbeTcpSocketPort {
		return &v
	}).(AlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutput)
}

type AlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersLivenessProbeTcpSocketPort)(nil)).Elem()
}

func (o AlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutput) ToAlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutput() AlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutput) ToAlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutput) Elem() AlertmanagerSpecContainersLivenessProbeTcpSocketPortOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersLivenessProbeTcpSocketPort) AlertmanagerSpecContainersLivenessProbeTcpSocketPort {
		return *v
	}).(AlertmanagerSpecContainersLivenessProbeTcpSocketPortOutput)
}

// ContainerPort represents a network port in a single container.
type AlertmanagerSpecContainersPorts struct {
	// Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
	ContainerPort int `pulumi:"containerPort"`
	// What host IP to bind the external port to.
	HostIP *string `pulumi:"hostIP"`
	// Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
	HostPort *int `pulumi:"hostPort"`
	// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
	Name *string `pulumi:"name"`
	// Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
	Protocol *string `pulumi:"protocol"`
}

// AlertmanagerSpecContainersPortsInput is an input type that accepts AlertmanagerSpecContainersPortsArgs and AlertmanagerSpecContainersPortsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersPortsInput` via:
//
//          AlertmanagerSpecContainersPortsArgs{...}
type AlertmanagerSpecContainersPortsInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersPortsOutput() AlertmanagerSpecContainersPortsOutput
	ToAlertmanagerSpecContainersPortsOutputWithContext(context.Context) AlertmanagerSpecContainersPortsOutput
}

// ContainerPort represents a network port in a single container.
type AlertmanagerSpecContainersPortsArgs struct {
	// Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
	ContainerPort pulumi.IntInput `pulumi:"containerPort"`
	// What host IP to bind the external port to.
	HostIP pulumi.StringPtrInput `pulumi:"hostIP"`
	// Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
	HostPort pulumi.IntPtrInput `pulumi:"hostPort"`
	// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (AlertmanagerSpecContainersPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersPorts)(nil)).Elem()
}

func (i AlertmanagerSpecContainersPortsArgs) ToAlertmanagerSpecContainersPortsOutput() AlertmanagerSpecContainersPortsOutput {
	return i.ToAlertmanagerSpecContainersPortsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersPortsArgs) ToAlertmanagerSpecContainersPortsOutputWithContext(ctx context.Context) AlertmanagerSpecContainersPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersPortsOutput)
}

// AlertmanagerSpecContainersPortsArrayInput is an input type that accepts AlertmanagerSpecContainersPortsArray and AlertmanagerSpecContainersPortsArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersPortsArrayInput` via:
//
//          AlertmanagerSpecContainersPortsArray{ AlertmanagerSpecContainersPortsArgs{...} }
type AlertmanagerSpecContainersPortsArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersPortsArrayOutput() AlertmanagerSpecContainersPortsArrayOutput
	ToAlertmanagerSpecContainersPortsArrayOutputWithContext(context.Context) AlertmanagerSpecContainersPortsArrayOutput
}

type AlertmanagerSpecContainersPortsArray []AlertmanagerSpecContainersPortsInput

func (AlertmanagerSpecContainersPortsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecContainersPorts)(nil)).Elem()
}

func (i AlertmanagerSpecContainersPortsArray) ToAlertmanagerSpecContainersPortsArrayOutput() AlertmanagerSpecContainersPortsArrayOutput {
	return i.ToAlertmanagerSpecContainersPortsArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersPortsArray) ToAlertmanagerSpecContainersPortsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecContainersPortsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersPortsArrayOutput)
}

// ContainerPort represents a network port in a single container.
type AlertmanagerSpecContainersPortsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersPorts)(nil)).Elem()
}

func (o AlertmanagerSpecContainersPortsOutput) ToAlertmanagerSpecContainersPortsOutput() AlertmanagerSpecContainersPortsOutput {
	return o
}

func (o AlertmanagerSpecContainersPortsOutput) ToAlertmanagerSpecContainersPortsOutputWithContext(ctx context.Context) AlertmanagerSpecContainersPortsOutput {
	return o
}

// Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
func (o AlertmanagerSpecContainersPortsOutput) ContainerPort() pulumi.IntOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersPorts) int { return v.ContainerPort }).(pulumi.IntOutput)
}

// What host IP to bind the external port to.
func (o AlertmanagerSpecContainersPortsOutput) HostIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersPorts) *string { return v.HostIP }).(pulumi.StringPtrOutput)
}

// Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
func (o AlertmanagerSpecContainersPortsOutput) HostPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersPorts) *int { return v.HostPort }).(pulumi.IntPtrOutput)
}

// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
func (o AlertmanagerSpecContainersPortsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersPorts) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
func (o AlertmanagerSpecContainersPortsOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersPorts) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecContainersPortsArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersPortsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecContainersPorts)(nil)).Elem()
}

func (o AlertmanagerSpecContainersPortsArrayOutput) ToAlertmanagerSpecContainersPortsArrayOutput() AlertmanagerSpecContainersPortsArrayOutput {
	return o
}

func (o AlertmanagerSpecContainersPortsArrayOutput) ToAlertmanagerSpecContainersPortsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecContainersPortsArrayOutput {
	return o
}

func (o AlertmanagerSpecContainersPortsArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecContainersPortsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecContainersPorts {
		return vs[0].([]AlertmanagerSpecContainersPorts)[vs[1].(int)]
	}).(AlertmanagerSpecContainersPortsOutput)
}

// Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
type AlertmanagerSpecContainersReadinessProbe struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec *AlertmanagerSpecContainersReadinessProbeExec `pulumi:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// HTTPGet specifies the http request to perform.
	HttpGet *AlertmanagerSpecContainersReadinessProbeHttpGet `pulumi:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
	TcpSocket *AlertmanagerSpecContainersReadinessProbeTcpSocket `pulumi:"tcpSocket"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// AlertmanagerSpecContainersReadinessProbeInput is an input type that accepts AlertmanagerSpecContainersReadinessProbeArgs and AlertmanagerSpecContainersReadinessProbeOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersReadinessProbeInput` via:
//
//          AlertmanagerSpecContainersReadinessProbeArgs{...}
type AlertmanagerSpecContainersReadinessProbeInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersReadinessProbeOutput() AlertmanagerSpecContainersReadinessProbeOutput
	ToAlertmanagerSpecContainersReadinessProbeOutputWithContext(context.Context) AlertmanagerSpecContainersReadinessProbeOutput
}

// Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
type AlertmanagerSpecContainersReadinessProbeArgs struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec AlertmanagerSpecContainersReadinessProbeExecPtrInput `pulumi:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// HTTPGet specifies the http request to perform.
	HttpGet AlertmanagerSpecContainersReadinessProbeHttpGetPtrInput `pulumi:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
	TcpSocket AlertmanagerSpecContainersReadinessProbeTcpSocketPtrInput `pulumi:"tcpSocket"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (AlertmanagerSpecContainersReadinessProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersReadinessProbe)(nil)).Elem()
}

func (i AlertmanagerSpecContainersReadinessProbeArgs) ToAlertmanagerSpecContainersReadinessProbeOutput() AlertmanagerSpecContainersReadinessProbeOutput {
	return i.ToAlertmanagerSpecContainersReadinessProbeOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersReadinessProbeArgs) ToAlertmanagerSpecContainersReadinessProbeOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersReadinessProbeOutput)
}

func (i AlertmanagerSpecContainersReadinessProbeArgs) ToAlertmanagerSpecContainersReadinessProbePtrOutput() AlertmanagerSpecContainersReadinessProbePtrOutput {
	return i.ToAlertmanagerSpecContainersReadinessProbePtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersReadinessProbeArgs) ToAlertmanagerSpecContainersReadinessProbePtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersReadinessProbeOutput).ToAlertmanagerSpecContainersReadinessProbePtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersReadinessProbePtrInput is an input type that accepts AlertmanagerSpecContainersReadinessProbeArgs, AlertmanagerSpecContainersReadinessProbePtr and AlertmanagerSpecContainersReadinessProbePtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersReadinessProbePtrInput` via:
//
//          AlertmanagerSpecContainersReadinessProbeArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersReadinessProbePtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersReadinessProbePtrOutput() AlertmanagerSpecContainersReadinessProbePtrOutput
	ToAlertmanagerSpecContainersReadinessProbePtrOutputWithContext(context.Context) AlertmanagerSpecContainersReadinessProbePtrOutput
}

type alertmanagerSpecContainersReadinessProbePtrType AlertmanagerSpecContainersReadinessProbeArgs

func AlertmanagerSpecContainersReadinessProbePtr(v *AlertmanagerSpecContainersReadinessProbeArgs) AlertmanagerSpecContainersReadinessProbePtrInput {
	return (*alertmanagerSpecContainersReadinessProbePtrType)(v)
}

func (*alertmanagerSpecContainersReadinessProbePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersReadinessProbe)(nil)).Elem()
}

func (i *alertmanagerSpecContainersReadinessProbePtrType) ToAlertmanagerSpecContainersReadinessProbePtrOutput() AlertmanagerSpecContainersReadinessProbePtrOutput {
	return i.ToAlertmanagerSpecContainersReadinessProbePtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersReadinessProbePtrType) ToAlertmanagerSpecContainersReadinessProbePtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersReadinessProbePtrOutput)
}

// Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
type AlertmanagerSpecContainersReadinessProbeOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersReadinessProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersReadinessProbe)(nil)).Elem()
}

func (o AlertmanagerSpecContainersReadinessProbeOutput) ToAlertmanagerSpecContainersReadinessProbeOutput() AlertmanagerSpecContainersReadinessProbeOutput {
	return o
}

func (o AlertmanagerSpecContainersReadinessProbeOutput) ToAlertmanagerSpecContainersReadinessProbeOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeOutput {
	return o
}

func (o AlertmanagerSpecContainersReadinessProbeOutput) ToAlertmanagerSpecContainersReadinessProbePtrOutput() AlertmanagerSpecContainersReadinessProbePtrOutput {
	return o.ToAlertmanagerSpecContainersReadinessProbePtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersReadinessProbeOutput) ToAlertmanagerSpecContainersReadinessProbePtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersReadinessProbe) *AlertmanagerSpecContainersReadinessProbe {
		return &v
	}).(AlertmanagerSpecContainersReadinessProbePtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
func (o AlertmanagerSpecContainersReadinessProbeOutput) Exec() AlertmanagerSpecContainersReadinessProbeExecPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersReadinessProbe) *AlertmanagerSpecContainersReadinessProbeExec {
		return v.Exec
	}).(AlertmanagerSpecContainersReadinessProbeExecPtrOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (o AlertmanagerSpecContainersReadinessProbeOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersReadinessProbe) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o AlertmanagerSpecContainersReadinessProbeOutput) HttpGet() AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersReadinessProbe) *AlertmanagerSpecContainersReadinessProbeHttpGet {
		return v.HttpGet
	}).(AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput)
}

// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecContainersReadinessProbeOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersReadinessProbe) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
func (o AlertmanagerSpecContainersReadinessProbeOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersReadinessProbe) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
func (o AlertmanagerSpecContainersReadinessProbeOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersReadinessProbe) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
func (o AlertmanagerSpecContainersReadinessProbeOutput) TcpSocket() AlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersReadinessProbe) *AlertmanagerSpecContainersReadinessProbeTcpSocket {
		return v.TcpSocket
	}).(AlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput)
}

// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecContainersReadinessProbeOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersReadinessProbe) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type AlertmanagerSpecContainersReadinessProbePtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersReadinessProbePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersReadinessProbe)(nil)).Elem()
}

func (o AlertmanagerSpecContainersReadinessProbePtrOutput) ToAlertmanagerSpecContainersReadinessProbePtrOutput() AlertmanagerSpecContainersReadinessProbePtrOutput {
	return o
}

func (o AlertmanagerSpecContainersReadinessProbePtrOutput) ToAlertmanagerSpecContainersReadinessProbePtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbePtrOutput {
	return o
}

func (o AlertmanagerSpecContainersReadinessProbePtrOutput) Elem() AlertmanagerSpecContainersReadinessProbeOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersReadinessProbe) AlertmanagerSpecContainersReadinessProbe { return *v }).(AlertmanagerSpecContainersReadinessProbeOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
func (o AlertmanagerSpecContainersReadinessProbePtrOutput) Exec() AlertmanagerSpecContainersReadinessProbeExecPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersReadinessProbe) *AlertmanagerSpecContainersReadinessProbeExec {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(AlertmanagerSpecContainersReadinessProbeExecPtrOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (o AlertmanagerSpecContainersReadinessProbePtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o AlertmanagerSpecContainersReadinessProbePtrOutput) HttpGet() AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersReadinessProbe) *AlertmanagerSpecContainersReadinessProbeHttpGet {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput)
}

// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecContainersReadinessProbePtrOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.InitialDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
func (o AlertmanagerSpecContainersReadinessProbePtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
func (o AlertmanagerSpecContainersReadinessProbePtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
func (o AlertmanagerSpecContainersReadinessProbePtrOutput) TcpSocket() AlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersReadinessProbe) *AlertmanagerSpecContainersReadinessProbeTcpSocket {
		if v == nil {
			return nil
		}
		return v.TcpSocket
	}).(AlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput)
}

// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecContainersReadinessProbePtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecContainersReadinessProbeExec struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command []string `pulumi:"command"`
}

// AlertmanagerSpecContainersReadinessProbeExecInput is an input type that accepts AlertmanagerSpecContainersReadinessProbeExecArgs and AlertmanagerSpecContainersReadinessProbeExecOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersReadinessProbeExecInput` via:
//
//          AlertmanagerSpecContainersReadinessProbeExecArgs{...}
type AlertmanagerSpecContainersReadinessProbeExecInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersReadinessProbeExecOutput() AlertmanagerSpecContainersReadinessProbeExecOutput
	ToAlertmanagerSpecContainersReadinessProbeExecOutputWithContext(context.Context) AlertmanagerSpecContainersReadinessProbeExecOutput
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecContainersReadinessProbeExecArgs struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command pulumi.StringArrayInput `pulumi:"command"`
}

func (AlertmanagerSpecContainersReadinessProbeExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersReadinessProbeExec)(nil)).Elem()
}

func (i AlertmanagerSpecContainersReadinessProbeExecArgs) ToAlertmanagerSpecContainersReadinessProbeExecOutput() AlertmanagerSpecContainersReadinessProbeExecOutput {
	return i.ToAlertmanagerSpecContainersReadinessProbeExecOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersReadinessProbeExecArgs) ToAlertmanagerSpecContainersReadinessProbeExecOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersReadinessProbeExecOutput)
}

func (i AlertmanagerSpecContainersReadinessProbeExecArgs) ToAlertmanagerSpecContainersReadinessProbeExecPtrOutput() AlertmanagerSpecContainersReadinessProbeExecPtrOutput {
	return i.ToAlertmanagerSpecContainersReadinessProbeExecPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersReadinessProbeExecArgs) ToAlertmanagerSpecContainersReadinessProbeExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersReadinessProbeExecOutput).ToAlertmanagerSpecContainersReadinessProbeExecPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersReadinessProbeExecPtrInput is an input type that accepts AlertmanagerSpecContainersReadinessProbeExecArgs, AlertmanagerSpecContainersReadinessProbeExecPtr and AlertmanagerSpecContainersReadinessProbeExecPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersReadinessProbeExecPtrInput` via:
//
//          AlertmanagerSpecContainersReadinessProbeExecArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersReadinessProbeExecPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersReadinessProbeExecPtrOutput() AlertmanagerSpecContainersReadinessProbeExecPtrOutput
	ToAlertmanagerSpecContainersReadinessProbeExecPtrOutputWithContext(context.Context) AlertmanagerSpecContainersReadinessProbeExecPtrOutput
}

type alertmanagerSpecContainersReadinessProbeExecPtrType AlertmanagerSpecContainersReadinessProbeExecArgs

func AlertmanagerSpecContainersReadinessProbeExecPtr(v *AlertmanagerSpecContainersReadinessProbeExecArgs) AlertmanagerSpecContainersReadinessProbeExecPtrInput {
	return (*alertmanagerSpecContainersReadinessProbeExecPtrType)(v)
}

func (*alertmanagerSpecContainersReadinessProbeExecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersReadinessProbeExec)(nil)).Elem()
}

func (i *alertmanagerSpecContainersReadinessProbeExecPtrType) ToAlertmanagerSpecContainersReadinessProbeExecPtrOutput() AlertmanagerSpecContainersReadinessProbeExecPtrOutput {
	return i.ToAlertmanagerSpecContainersReadinessProbeExecPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersReadinessProbeExecPtrType) ToAlertmanagerSpecContainersReadinessProbeExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersReadinessProbeExecPtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecContainersReadinessProbeExecOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersReadinessProbeExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersReadinessProbeExec)(nil)).Elem()
}

func (o AlertmanagerSpecContainersReadinessProbeExecOutput) ToAlertmanagerSpecContainersReadinessProbeExecOutput() AlertmanagerSpecContainersReadinessProbeExecOutput {
	return o
}

func (o AlertmanagerSpecContainersReadinessProbeExecOutput) ToAlertmanagerSpecContainersReadinessProbeExecOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeExecOutput {
	return o
}

func (o AlertmanagerSpecContainersReadinessProbeExecOutput) ToAlertmanagerSpecContainersReadinessProbeExecPtrOutput() AlertmanagerSpecContainersReadinessProbeExecPtrOutput {
	return o.ToAlertmanagerSpecContainersReadinessProbeExecPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersReadinessProbeExecOutput) ToAlertmanagerSpecContainersReadinessProbeExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeExecPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersReadinessProbeExec) *AlertmanagerSpecContainersReadinessProbeExec {
		return &v
	}).(AlertmanagerSpecContainersReadinessProbeExecPtrOutput)
}

// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o AlertmanagerSpecContainersReadinessProbeExecOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersReadinessProbeExec) []string { return v.Command }).(pulumi.StringArrayOutput)
}

type AlertmanagerSpecContainersReadinessProbeExecPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersReadinessProbeExecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersReadinessProbeExec)(nil)).Elem()
}

func (o AlertmanagerSpecContainersReadinessProbeExecPtrOutput) ToAlertmanagerSpecContainersReadinessProbeExecPtrOutput() AlertmanagerSpecContainersReadinessProbeExecPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersReadinessProbeExecPtrOutput) ToAlertmanagerSpecContainersReadinessProbeExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeExecPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersReadinessProbeExecPtrOutput) Elem() AlertmanagerSpecContainersReadinessProbeExecOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersReadinessProbeExec) AlertmanagerSpecContainersReadinessProbeExec {
		return *v
	}).(AlertmanagerSpecContainersReadinessProbeExecOutput)
}

// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o AlertmanagerSpecContainersReadinessProbeExecPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersReadinessProbeExec) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecContainersReadinessProbeHttpGet struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeaders `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path *string `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecContainersReadinessProbeHttpGetPort `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `pulumi:"scheme"`
}

// AlertmanagerSpecContainersReadinessProbeHttpGetInput is an input type that accepts AlertmanagerSpecContainersReadinessProbeHttpGetArgs and AlertmanagerSpecContainersReadinessProbeHttpGetOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersReadinessProbeHttpGetInput` via:
//
//          AlertmanagerSpecContainersReadinessProbeHttpGetArgs{...}
type AlertmanagerSpecContainersReadinessProbeHttpGetInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersReadinessProbeHttpGetOutput() AlertmanagerSpecContainersReadinessProbeHttpGetOutput
	ToAlertmanagerSpecContainersReadinessProbeHttpGetOutputWithContext(context.Context) AlertmanagerSpecContainersReadinessProbeHttpGetOutput
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecContainersReadinessProbeHttpGetArgs struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayInput `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecContainersReadinessProbeHttpGetPortInput `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (AlertmanagerSpecContainersReadinessProbeHttpGetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersReadinessProbeHttpGet)(nil)).Elem()
}

func (i AlertmanagerSpecContainersReadinessProbeHttpGetArgs) ToAlertmanagerSpecContainersReadinessProbeHttpGetOutput() AlertmanagerSpecContainersReadinessProbeHttpGetOutput {
	return i.ToAlertmanagerSpecContainersReadinessProbeHttpGetOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersReadinessProbeHttpGetArgs) ToAlertmanagerSpecContainersReadinessProbeHttpGetOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeHttpGetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersReadinessProbeHttpGetOutput)
}

func (i AlertmanagerSpecContainersReadinessProbeHttpGetArgs) ToAlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput() AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput {
	return i.ToAlertmanagerSpecContainersReadinessProbeHttpGetPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersReadinessProbeHttpGetArgs) ToAlertmanagerSpecContainersReadinessProbeHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersReadinessProbeHttpGetOutput).ToAlertmanagerSpecContainersReadinessProbeHttpGetPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersReadinessProbeHttpGetPtrInput is an input type that accepts AlertmanagerSpecContainersReadinessProbeHttpGetArgs, AlertmanagerSpecContainersReadinessProbeHttpGetPtr and AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersReadinessProbeHttpGetPtrInput` via:
//
//          AlertmanagerSpecContainersReadinessProbeHttpGetArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersReadinessProbeHttpGetPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput() AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput
	ToAlertmanagerSpecContainersReadinessProbeHttpGetPtrOutputWithContext(context.Context) AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput
}

type alertmanagerSpecContainersReadinessProbeHttpGetPtrType AlertmanagerSpecContainersReadinessProbeHttpGetArgs

func AlertmanagerSpecContainersReadinessProbeHttpGetPtr(v *AlertmanagerSpecContainersReadinessProbeHttpGetArgs) AlertmanagerSpecContainersReadinessProbeHttpGetPtrInput {
	return (*alertmanagerSpecContainersReadinessProbeHttpGetPtrType)(v)
}

func (*alertmanagerSpecContainersReadinessProbeHttpGetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersReadinessProbeHttpGet)(nil)).Elem()
}

func (i *alertmanagerSpecContainersReadinessProbeHttpGetPtrType) ToAlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput() AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput {
	return i.ToAlertmanagerSpecContainersReadinessProbeHttpGetPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersReadinessProbeHttpGetPtrType) ToAlertmanagerSpecContainersReadinessProbeHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput)
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecContainersReadinessProbeHttpGetOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersReadinessProbeHttpGetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersReadinessProbeHttpGet)(nil)).Elem()
}

func (o AlertmanagerSpecContainersReadinessProbeHttpGetOutput) ToAlertmanagerSpecContainersReadinessProbeHttpGetOutput() AlertmanagerSpecContainersReadinessProbeHttpGetOutput {
	return o
}

func (o AlertmanagerSpecContainersReadinessProbeHttpGetOutput) ToAlertmanagerSpecContainersReadinessProbeHttpGetOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeHttpGetOutput {
	return o
}

func (o AlertmanagerSpecContainersReadinessProbeHttpGetOutput) ToAlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput() AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput {
	return o.ToAlertmanagerSpecContainersReadinessProbeHttpGetPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersReadinessProbeHttpGetOutput) ToAlertmanagerSpecContainersReadinessProbeHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersReadinessProbeHttpGet) *AlertmanagerSpecContainersReadinessProbeHttpGet {
		return &v
	}).(AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o AlertmanagerSpecContainersReadinessProbeHttpGetOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersReadinessProbeHttpGet) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o AlertmanagerSpecContainersReadinessProbeHttpGetOutput) HttpHeaders() AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersReadinessProbeHttpGet) []AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeaders {
		return v.HttpHeaders
	}).(AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o AlertmanagerSpecContainersReadinessProbeHttpGetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersReadinessProbeHttpGet) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecContainersReadinessProbeHttpGetOutput) Port() AlertmanagerSpecContainersReadinessProbeHttpGetPortOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersReadinessProbeHttpGet) AlertmanagerSpecContainersReadinessProbeHttpGetPort {
		return v.Port
	}).(AlertmanagerSpecContainersReadinessProbeHttpGetPortOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o AlertmanagerSpecContainersReadinessProbeHttpGetOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersReadinessProbeHttpGet) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersReadinessProbeHttpGet)(nil)).Elem()
}

func (o AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput) ToAlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput() AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput) ToAlertmanagerSpecContainersReadinessProbeHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput) Elem() AlertmanagerSpecContainersReadinessProbeHttpGetOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersReadinessProbeHttpGet) AlertmanagerSpecContainersReadinessProbeHttpGet {
		return *v
	}).(AlertmanagerSpecContainersReadinessProbeHttpGetOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersReadinessProbeHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput) HttpHeaders() AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersReadinessProbeHttpGet) []AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeaders {
		if v == nil {
			return nil
		}
		return v.HttpHeaders
	}).(AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersReadinessProbeHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput) Port() AlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersReadinessProbeHttpGet) *AlertmanagerSpecContainersReadinessProbeHttpGetPort {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(AlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersReadinessProbeHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeaders struct {
	// The header field name
	Name string `pulumi:"name"`
	// The header field value
	Value string `pulumi:"value"`
}

// AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersInput is an input type that accepts AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArgs and AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersInput` via:
//
//          AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArgs{...}
type AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersOutput() AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersOutput
	ToAlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersOutputWithContext(context.Context) AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersOutput
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArgs struct {
	// The header field name
	Name pulumi.StringInput `pulumi:"name"`
	// The header field value
	Value pulumi.StringInput `pulumi:"value"`
}

func (AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (i AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArgs) ToAlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersOutput() AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersOutput {
	return i.ToAlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArgs) ToAlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersOutput)
}

// AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayInput is an input type that accepts AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArray and AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayInput` via:
//
//          AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArray{ AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArgs{...} }
type AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayOutput() AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayOutput
	ToAlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayOutputWithContext(context.Context) AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayOutput
}

type AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArray []AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersInput

func (AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (i AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArray) ToAlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayOutput() AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayOutput {
	return i.ToAlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArray) ToAlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (o AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersOutput) ToAlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersOutput() AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersOutput {
	return o
}

func (o AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersOutput) ToAlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersOutput {
	return o
}

// The header field name
func (o AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeaders) string { return v.Name }).(pulumi.StringOutput)
}

// The header field value
func (o AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeaders) string { return v.Value }).(pulumi.StringOutput)
}

type AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (o AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayOutput) ToAlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayOutput() AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayOutput {
	return o
}

func (o AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayOutput) ToAlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayOutput {
	return o
}

func (o AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeaders {
		return vs[0].([]AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeaders)[vs[1].(int)]
	}).(AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersOutput)
}

type AlertmanagerSpecContainersReadinessProbeHttpGetPort struct {
}

// AlertmanagerSpecContainersReadinessProbeHttpGetPortInput is an input type that accepts AlertmanagerSpecContainersReadinessProbeHttpGetPortArgs and AlertmanagerSpecContainersReadinessProbeHttpGetPortOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersReadinessProbeHttpGetPortInput` via:
//
//          AlertmanagerSpecContainersReadinessProbeHttpGetPortArgs{...}
type AlertmanagerSpecContainersReadinessProbeHttpGetPortInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersReadinessProbeHttpGetPortOutput() AlertmanagerSpecContainersReadinessProbeHttpGetPortOutput
	ToAlertmanagerSpecContainersReadinessProbeHttpGetPortOutputWithContext(context.Context) AlertmanagerSpecContainersReadinessProbeHttpGetPortOutput
}

type AlertmanagerSpecContainersReadinessProbeHttpGetPortArgs struct {
}

func (AlertmanagerSpecContainersReadinessProbeHttpGetPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersReadinessProbeHttpGetPort)(nil)).Elem()
}

func (i AlertmanagerSpecContainersReadinessProbeHttpGetPortArgs) ToAlertmanagerSpecContainersReadinessProbeHttpGetPortOutput() AlertmanagerSpecContainersReadinessProbeHttpGetPortOutput {
	return i.ToAlertmanagerSpecContainersReadinessProbeHttpGetPortOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersReadinessProbeHttpGetPortArgs) ToAlertmanagerSpecContainersReadinessProbeHttpGetPortOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeHttpGetPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersReadinessProbeHttpGetPortOutput)
}

func (i AlertmanagerSpecContainersReadinessProbeHttpGetPortArgs) ToAlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutput() AlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutput {
	return i.ToAlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersReadinessProbeHttpGetPortArgs) ToAlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersReadinessProbeHttpGetPortOutput).ToAlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersReadinessProbeHttpGetPortPtrInput is an input type that accepts AlertmanagerSpecContainersReadinessProbeHttpGetPortArgs, AlertmanagerSpecContainersReadinessProbeHttpGetPortPtr and AlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersReadinessProbeHttpGetPortPtrInput` via:
//
//          AlertmanagerSpecContainersReadinessProbeHttpGetPortArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersReadinessProbeHttpGetPortPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutput() AlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutput
	ToAlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutputWithContext(context.Context) AlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutput
}

type alertmanagerSpecContainersReadinessProbeHttpGetPortPtrType AlertmanagerSpecContainersReadinessProbeHttpGetPortArgs

func AlertmanagerSpecContainersReadinessProbeHttpGetPortPtr(v *AlertmanagerSpecContainersReadinessProbeHttpGetPortArgs) AlertmanagerSpecContainersReadinessProbeHttpGetPortPtrInput {
	return (*alertmanagerSpecContainersReadinessProbeHttpGetPortPtrType)(v)
}

func (*alertmanagerSpecContainersReadinessProbeHttpGetPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersReadinessProbeHttpGetPort)(nil)).Elem()
}

func (i *alertmanagerSpecContainersReadinessProbeHttpGetPortPtrType) ToAlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutput() AlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutput {
	return i.ToAlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersReadinessProbeHttpGetPortPtrType) ToAlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutput)
}

type AlertmanagerSpecContainersReadinessProbeHttpGetPortOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersReadinessProbeHttpGetPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersReadinessProbeHttpGetPort)(nil)).Elem()
}

func (o AlertmanagerSpecContainersReadinessProbeHttpGetPortOutput) ToAlertmanagerSpecContainersReadinessProbeHttpGetPortOutput() AlertmanagerSpecContainersReadinessProbeHttpGetPortOutput {
	return o
}

func (o AlertmanagerSpecContainersReadinessProbeHttpGetPortOutput) ToAlertmanagerSpecContainersReadinessProbeHttpGetPortOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeHttpGetPortOutput {
	return o
}

func (o AlertmanagerSpecContainersReadinessProbeHttpGetPortOutput) ToAlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutput() AlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutput {
	return o.ToAlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersReadinessProbeHttpGetPortOutput) ToAlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersReadinessProbeHttpGetPort) *AlertmanagerSpecContainersReadinessProbeHttpGetPort {
		return &v
	}).(AlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutput)
}

type AlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersReadinessProbeHttpGetPort)(nil)).Elem()
}

func (o AlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutput) ToAlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutput() AlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutput) ToAlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutput) Elem() AlertmanagerSpecContainersReadinessProbeHttpGetPortOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersReadinessProbeHttpGetPort) AlertmanagerSpecContainersReadinessProbeHttpGetPort {
		return *v
	}).(AlertmanagerSpecContainersReadinessProbeHttpGetPortOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecContainersReadinessProbeTcpSocket struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecContainersReadinessProbeTcpSocketPort `pulumi:"port"`
}

// AlertmanagerSpecContainersReadinessProbeTcpSocketInput is an input type that accepts AlertmanagerSpecContainersReadinessProbeTcpSocketArgs and AlertmanagerSpecContainersReadinessProbeTcpSocketOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersReadinessProbeTcpSocketInput` via:
//
//          AlertmanagerSpecContainersReadinessProbeTcpSocketArgs{...}
type AlertmanagerSpecContainersReadinessProbeTcpSocketInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersReadinessProbeTcpSocketOutput() AlertmanagerSpecContainersReadinessProbeTcpSocketOutput
	ToAlertmanagerSpecContainersReadinessProbeTcpSocketOutputWithContext(context.Context) AlertmanagerSpecContainersReadinessProbeTcpSocketOutput
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecContainersReadinessProbeTcpSocketArgs struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecContainersReadinessProbeTcpSocketPortInput `pulumi:"port"`
}

func (AlertmanagerSpecContainersReadinessProbeTcpSocketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersReadinessProbeTcpSocket)(nil)).Elem()
}

func (i AlertmanagerSpecContainersReadinessProbeTcpSocketArgs) ToAlertmanagerSpecContainersReadinessProbeTcpSocketOutput() AlertmanagerSpecContainersReadinessProbeTcpSocketOutput {
	return i.ToAlertmanagerSpecContainersReadinessProbeTcpSocketOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersReadinessProbeTcpSocketArgs) ToAlertmanagerSpecContainersReadinessProbeTcpSocketOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeTcpSocketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersReadinessProbeTcpSocketOutput)
}

func (i AlertmanagerSpecContainersReadinessProbeTcpSocketArgs) ToAlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput() AlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput {
	return i.ToAlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersReadinessProbeTcpSocketArgs) ToAlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersReadinessProbeTcpSocketOutput).ToAlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersReadinessProbeTcpSocketPtrInput is an input type that accepts AlertmanagerSpecContainersReadinessProbeTcpSocketArgs, AlertmanagerSpecContainersReadinessProbeTcpSocketPtr and AlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersReadinessProbeTcpSocketPtrInput` via:
//
//          AlertmanagerSpecContainersReadinessProbeTcpSocketArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersReadinessProbeTcpSocketPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput() AlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput
	ToAlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutputWithContext(context.Context) AlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput
}

type alertmanagerSpecContainersReadinessProbeTcpSocketPtrType AlertmanagerSpecContainersReadinessProbeTcpSocketArgs

func AlertmanagerSpecContainersReadinessProbeTcpSocketPtr(v *AlertmanagerSpecContainersReadinessProbeTcpSocketArgs) AlertmanagerSpecContainersReadinessProbeTcpSocketPtrInput {
	return (*alertmanagerSpecContainersReadinessProbeTcpSocketPtrType)(v)
}

func (*alertmanagerSpecContainersReadinessProbeTcpSocketPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersReadinessProbeTcpSocket)(nil)).Elem()
}

func (i *alertmanagerSpecContainersReadinessProbeTcpSocketPtrType) ToAlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput() AlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput {
	return i.ToAlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersReadinessProbeTcpSocketPtrType) ToAlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecContainersReadinessProbeTcpSocketOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersReadinessProbeTcpSocketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersReadinessProbeTcpSocket)(nil)).Elem()
}

func (o AlertmanagerSpecContainersReadinessProbeTcpSocketOutput) ToAlertmanagerSpecContainersReadinessProbeTcpSocketOutput() AlertmanagerSpecContainersReadinessProbeTcpSocketOutput {
	return o
}

func (o AlertmanagerSpecContainersReadinessProbeTcpSocketOutput) ToAlertmanagerSpecContainersReadinessProbeTcpSocketOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeTcpSocketOutput {
	return o
}

func (o AlertmanagerSpecContainersReadinessProbeTcpSocketOutput) ToAlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput() AlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput {
	return o.ToAlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersReadinessProbeTcpSocketOutput) ToAlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersReadinessProbeTcpSocket) *AlertmanagerSpecContainersReadinessProbeTcpSocket {
		return &v
	}).(AlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o AlertmanagerSpecContainersReadinessProbeTcpSocketOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersReadinessProbeTcpSocket) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecContainersReadinessProbeTcpSocketOutput) Port() AlertmanagerSpecContainersReadinessProbeTcpSocketPortOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersReadinessProbeTcpSocket) AlertmanagerSpecContainersReadinessProbeTcpSocketPort {
		return v.Port
	}).(AlertmanagerSpecContainersReadinessProbeTcpSocketPortOutput)
}

type AlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersReadinessProbeTcpSocket)(nil)).Elem()
}

func (o AlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput) ToAlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput() AlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput) ToAlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput) Elem() AlertmanagerSpecContainersReadinessProbeTcpSocketOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersReadinessProbeTcpSocket) AlertmanagerSpecContainersReadinessProbeTcpSocket {
		return *v
	}).(AlertmanagerSpecContainersReadinessProbeTcpSocketOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o AlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersReadinessProbeTcpSocket) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput) Port() AlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersReadinessProbeTcpSocket) *AlertmanagerSpecContainersReadinessProbeTcpSocketPort {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(AlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutput)
}

type AlertmanagerSpecContainersReadinessProbeTcpSocketPort struct {
}

// AlertmanagerSpecContainersReadinessProbeTcpSocketPortInput is an input type that accepts AlertmanagerSpecContainersReadinessProbeTcpSocketPortArgs and AlertmanagerSpecContainersReadinessProbeTcpSocketPortOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersReadinessProbeTcpSocketPortInput` via:
//
//          AlertmanagerSpecContainersReadinessProbeTcpSocketPortArgs{...}
type AlertmanagerSpecContainersReadinessProbeTcpSocketPortInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersReadinessProbeTcpSocketPortOutput() AlertmanagerSpecContainersReadinessProbeTcpSocketPortOutput
	ToAlertmanagerSpecContainersReadinessProbeTcpSocketPortOutputWithContext(context.Context) AlertmanagerSpecContainersReadinessProbeTcpSocketPortOutput
}

type AlertmanagerSpecContainersReadinessProbeTcpSocketPortArgs struct {
}

func (AlertmanagerSpecContainersReadinessProbeTcpSocketPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersReadinessProbeTcpSocketPort)(nil)).Elem()
}

func (i AlertmanagerSpecContainersReadinessProbeTcpSocketPortArgs) ToAlertmanagerSpecContainersReadinessProbeTcpSocketPortOutput() AlertmanagerSpecContainersReadinessProbeTcpSocketPortOutput {
	return i.ToAlertmanagerSpecContainersReadinessProbeTcpSocketPortOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersReadinessProbeTcpSocketPortArgs) ToAlertmanagerSpecContainersReadinessProbeTcpSocketPortOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeTcpSocketPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersReadinessProbeTcpSocketPortOutput)
}

func (i AlertmanagerSpecContainersReadinessProbeTcpSocketPortArgs) ToAlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutput() AlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutput {
	return i.ToAlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersReadinessProbeTcpSocketPortArgs) ToAlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersReadinessProbeTcpSocketPortOutput).ToAlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrInput is an input type that accepts AlertmanagerSpecContainersReadinessProbeTcpSocketPortArgs, AlertmanagerSpecContainersReadinessProbeTcpSocketPortPtr and AlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrInput` via:
//
//          AlertmanagerSpecContainersReadinessProbeTcpSocketPortArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutput() AlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutput
	ToAlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutputWithContext(context.Context) AlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutput
}

type alertmanagerSpecContainersReadinessProbeTcpSocketPortPtrType AlertmanagerSpecContainersReadinessProbeTcpSocketPortArgs

func AlertmanagerSpecContainersReadinessProbeTcpSocketPortPtr(v *AlertmanagerSpecContainersReadinessProbeTcpSocketPortArgs) AlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrInput {
	return (*alertmanagerSpecContainersReadinessProbeTcpSocketPortPtrType)(v)
}

func (*alertmanagerSpecContainersReadinessProbeTcpSocketPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersReadinessProbeTcpSocketPort)(nil)).Elem()
}

func (i *alertmanagerSpecContainersReadinessProbeTcpSocketPortPtrType) ToAlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutput() AlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutput {
	return i.ToAlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersReadinessProbeTcpSocketPortPtrType) ToAlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutput)
}

type AlertmanagerSpecContainersReadinessProbeTcpSocketPortOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersReadinessProbeTcpSocketPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersReadinessProbeTcpSocketPort)(nil)).Elem()
}

func (o AlertmanagerSpecContainersReadinessProbeTcpSocketPortOutput) ToAlertmanagerSpecContainersReadinessProbeTcpSocketPortOutput() AlertmanagerSpecContainersReadinessProbeTcpSocketPortOutput {
	return o
}

func (o AlertmanagerSpecContainersReadinessProbeTcpSocketPortOutput) ToAlertmanagerSpecContainersReadinessProbeTcpSocketPortOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeTcpSocketPortOutput {
	return o
}

func (o AlertmanagerSpecContainersReadinessProbeTcpSocketPortOutput) ToAlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutput() AlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutput {
	return o.ToAlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersReadinessProbeTcpSocketPortOutput) ToAlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersReadinessProbeTcpSocketPort) *AlertmanagerSpecContainersReadinessProbeTcpSocketPort {
		return &v
	}).(AlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutput)
}

type AlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersReadinessProbeTcpSocketPort)(nil)).Elem()
}

func (o AlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutput) ToAlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutput() AlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutput) ToAlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutput) Elem() AlertmanagerSpecContainersReadinessProbeTcpSocketPortOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersReadinessProbeTcpSocketPort) AlertmanagerSpecContainersReadinessProbeTcpSocketPort {
		return *v
	}).(AlertmanagerSpecContainersReadinessProbeTcpSocketPortOutput)
}

// Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecContainersResources struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits map[string]string `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests map[string]string `pulumi:"requests"`
}

// AlertmanagerSpecContainersResourcesInput is an input type that accepts AlertmanagerSpecContainersResourcesArgs and AlertmanagerSpecContainersResourcesOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersResourcesInput` via:
//
//          AlertmanagerSpecContainersResourcesArgs{...}
type AlertmanagerSpecContainersResourcesInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersResourcesOutput() AlertmanagerSpecContainersResourcesOutput
	ToAlertmanagerSpecContainersResourcesOutputWithContext(context.Context) AlertmanagerSpecContainersResourcesOutput
}

// Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecContainersResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits pulumi.StringMapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests pulumi.StringMapInput `pulumi:"requests"`
}

func (AlertmanagerSpecContainersResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersResources)(nil)).Elem()
}

func (i AlertmanagerSpecContainersResourcesArgs) ToAlertmanagerSpecContainersResourcesOutput() AlertmanagerSpecContainersResourcesOutput {
	return i.ToAlertmanagerSpecContainersResourcesOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersResourcesArgs) ToAlertmanagerSpecContainersResourcesOutputWithContext(ctx context.Context) AlertmanagerSpecContainersResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersResourcesOutput)
}

func (i AlertmanagerSpecContainersResourcesArgs) ToAlertmanagerSpecContainersResourcesPtrOutput() AlertmanagerSpecContainersResourcesPtrOutput {
	return i.ToAlertmanagerSpecContainersResourcesPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersResourcesArgs) ToAlertmanagerSpecContainersResourcesPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersResourcesOutput).ToAlertmanagerSpecContainersResourcesPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersResourcesPtrInput is an input type that accepts AlertmanagerSpecContainersResourcesArgs, AlertmanagerSpecContainersResourcesPtr and AlertmanagerSpecContainersResourcesPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersResourcesPtrInput` via:
//
//          AlertmanagerSpecContainersResourcesArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersResourcesPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersResourcesPtrOutput() AlertmanagerSpecContainersResourcesPtrOutput
	ToAlertmanagerSpecContainersResourcesPtrOutputWithContext(context.Context) AlertmanagerSpecContainersResourcesPtrOutput
}

type alertmanagerSpecContainersResourcesPtrType AlertmanagerSpecContainersResourcesArgs

func AlertmanagerSpecContainersResourcesPtr(v *AlertmanagerSpecContainersResourcesArgs) AlertmanagerSpecContainersResourcesPtrInput {
	return (*alertmanagerSpecContainersResourcesPtrType)(v)
}

func (*alertmanagerSpecContainersResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersResources)(nil)).Elem()
}

func (i *alertmanagerSpecContainersResourcesPtrType) ToAlertmanagerSpecContainersResourcesPtrOutput() AlertmanagerSpecContainersResourcesPtrOutput {
	return i.ToAlertmanagerSpecContainersResourcesPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersResourcesPtrType) ToAlertmanagerSpecContainersResourcesPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersResourcesPtrOutput)
}

// Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecContainersResourcesOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersResources)(nil)).Elem()
}

func (o AlertmanagerSpecContainersResourcesOutput) ToAlertmanagerSpecContainersResourcesOutput() AlertmanagerSpecContainersResourcesOutput {
	return o
}

func (o AlertmanagerSpecContainersResourcesOutput) ToAlertmanagerSpecContainersResourcesOutputWithContext(ctx context.Context) AlertmanagerSpecContainersResourcesOutput {
	return o
}

func (o AlertmanagerSpecContainersResourcesOutput) ToAlertmanagerSpecContainersResourcesPtrOutput() AlertmanagerSpecContainersResourcesPtrOutput {
	return o.ToAlertmanagerSpecContainersResourcesPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersResourcesOutput) ToAlertmanagerSpecContainersResourcesPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersResourcesPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersResources) *AlertmanagerSpecContainersResources {
		return &v
	}).(AlertmanagerSpecContainersResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o AlertmanagerSpecContainersResourcesOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersResources) map[string]string { return v.Limits }).(pulumi.StringMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o AlertmanagerSpecContainersResourcesOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersResources) map[string]string { return v.Requests }).(pulumi.StringMapOutput)
}

type AlertmanagerSpecContainersResourcesPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersResources)(nil)).Elem()
}

func (o AlertmanagerSpecContainersResourcesPtrOutput) ToAlertmanagerSpecContainersResourcesPtrOutput() AlertmanagerSpecContainersResourcesPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersResourcesPtrOutput) ToAlertmanagerSpecContainersResourcesPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersResourcesPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersResourcesPtrOutput) Elem() AlertmanagerSpecContainersResourcesOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersResources) AlertmanagerSpecContainersResources { return *v }).(AlertmanagerSpecContainersResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o AlertmanagerSpecContainersResourcesPtrOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersResources) map[string]string {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.StringMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o AlertmanagerSpecContainersResourcesPtrOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersResources) map[string]string {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.StringMapOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecContainersResourcesLimits struct {
}

// AlertmanagerSpecContainersResourcesLimitsInput is an input type that accepts AlertmanagerSpecContainersResourcesLimitsArgs and AlertmanagerSpecContainersResourcesLimitsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersResourcesLimitsInput` via:
//
//          AlertmanagerSpecContainersResourcesLimitsArgs{...}
type AlertmanagerSpecContainersResourcesLimitsInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersResourcesLimitsOutput() AlertmanagerSpecContainersResourcesLimitsOutput
	ToAlertmanagerSpecContainersResourcesLimitsOutputWithContext(context.Context) AlertmanagerSpecContainersResourcesLimitsOutput
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecContainersResourcesLimitsArgs struct {
}

func (AlertmanagerSpecContainersResourcesLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersResourcesLimits)(nil)).Elem()
}

func (i AlertmanagerSpecContainersResourcesLimitsArgs) ToAlertmanagerSpecContainersResourcesLimitsOutput() AlertmanagerSpecContainersResourcesLimitsOutput {
	return i.ToAlertmanagerSpecContainersResourcesLimitsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersResourcesLimitsArgs) ToAlertmanagerSpecContainersResourcesLimitsOutputWithContext(ctx context.Context) AlertmanagerSpecContainersResourcesLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersResourcesLimitsOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecContainersResourcesLimitsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersResourcesLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersResourcesLimits)(nil)).Elem()
}

func (o AlertmanagerSpecContainersResourcesLimitsOutput) ToAlertmanagerSpecContainersResourcesLimitsOutput() AlertmanagerSpecContainersResourcesLimitsOutput {
	return o
}

func (o AlertmanagerSpecContainersResourcesLimitsOutput) ToAlertmanagerSpecContainersResourcesLimitsOutputWithContext(ctx context.Context) AlertmanagerSpecContainersResourcesLimitsOutput {
	return o
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecContainersResourcesRequests struct {
}

// AlertmanagerSpecContainersResourcesRequestsInput is an input type that accepts AlertmanagerSpecContainersResourcesRequestsArgs and AlertmanagerSpecContainersResourcesRequestsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersResourcesRequestsInput` via:
//
//          AlertmanagerSpecContainersResourcesRequestsArgs{...}
type AlertmanagerSpecContainersResourcesRequestsInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersResourcesRequestsOutput() AlertmanagerSpecContainersResourcesRequestsOutput
	ToAlertmanagerSpecContainersResourcesRequestsOutputWithContext(context.Context) AlertmanagerSpecContainersResourcesRequestsOutput
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecContainersResourcesRequestsArgs struct {
}

func (AlertmanagerSpecContainersResourcesRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersResourcesRequests)(nil)).Elem()
}

func (i AlertmanagerSpecContainersResourcesRequestsArgs) ToAlertmanagerSpecContainersResourcesRequestsOutput() AlertmanagerSpecContainersResourcesRequestsOutput {
	return i.ToAlertmanagerSpecContainersResourcesRequestsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersResourcesRequestsArgs) ToAlertmanagerSpecContainersResourcesRequestsOutputWithContext(ctx context.Context) AlertmanagerSpecContainersResourcesRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersResourcesRequestsOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecContainersResourcesRequestsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersResourcesRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersResourcesRequests)(nil)).Elem()
}

func (o AlertmanagerSpecContainersResourcesRequestsOutput) ToAlertmanagerSpecContainersResourcesRequestsOutput() AlertmanagerSpecContainersResourcesRequestsOutput {
	return o
}

func (o AlertmanagerSpecContainersResourcesRequestsOutput) ToAlertmanagerSpecContainersResourcesRequestsOutputWithContext(ctx context.Context) AlertmanagerSpecContainersResourcesRequestsOutput {
	return o
}

// Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
type AlertmanagerSpecContainersSecurityContext struct {
	// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
	AllowPrivilegeEscalation *bool `pulumi:"allowPrivilegeEscalation"`
	// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
	Capabilities *AlertmanagerSpecContainersSecurityContextCapabilities `pulumi:"capabilities"`
	// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
	Privileged *bool `pulumi:"privileged"`
	// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
	ProcMount *string `pulumi:"procMount"`
	// Whether this container has a read-only root filesystem. Default is false.
	ReadOnlyRootFilesystem *bool `pulumi:"readOnlyRootFilesystem"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsGroup *int `pulumi:"runAsGroup"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot *bool `pulumi:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUser *int `pulumi:"runAsUser"`
	// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	SeLinuxOptions *AlertmanagerSpecContainersSecurityContextSeLinuxOptions `pulumi:"seLinuxOptions"`
	// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	WindowsOptions *AlertmanagerSpecContainersSecurityContextWindowsOptions `pulumi:"windowsOptions"`
}

// AlertmanagerSpecContainersSecurityContextInput is an input type that accepts AlertmanagerSpecContainersSecurityContextArgs and AlertmanagerSpecContainersSecurityContextOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersSecurityContextInput` via:
//
//          AlertmanagerSpecContainersSecurityContextArgs{...}
type AlertmanagerSpecContainersSecurityContextInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersSecurityContextOutput() AlertmanagerSpecContainersSecurityContextOutput
	ToAlertmanagerSpecContainersSecurityContextOutputWithContext(context.Context) AlertmanagerSpecContainersSecurityContextOutput
}

// Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
type AlertmanagerSpecContainersSecurityContextArgs struct {
	// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
	AllowPrivilegeEscalation pulumi.BoolPtrInput `pulumi:"allowPrivilegeEscalation"`
	// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
	Capabilities AlertmanagerSpecContainersSecurityContextCapabilitiesPtrInput `pulumi:"capabilities"`
	// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
	Privileged pulumi.BoolPtrInput `pulumi:"privileged"`
	// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
	ProcMount pulumi.StringPtrInput `pulumi:"procMount"`
	// Whether this container has a read-only root filesystem. Default is false.
	ReadOnlyRootFilesystem pulumi.BoolPtrInput `pulumi:"readOnlyRootFilesystem"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsGroup pulumi.IntPtrInput `pulumi:"runAsGroup"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot pulumi.BoolPtrInput `pulumi:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUser pulumi.IntPtrInput `pulumi:"runAsUser"`
	// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	SeLinuxOptions AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrInput `pulumi:"seLinuxOptions"`
	// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	WindowsOptions AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrInput `pulumi:"windowsOptions"`
}

func (AlertmanagerSpecContainersSecurityContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersSecurityContext)(nil)).Elem()
}

func (i AlertmanagerSpecContainersSecurityContextArgs) ToAlertmanagerSpecContainersSecurityContextOutput() AlertmanagerSpecContainersSecurityContextOutput {
	return i.ToAlertmanagerSpecContainersSecurityContextOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersSecurityContextArgs) ToAlertmanagerSpecContainersSecurityContextOutputWithContext(ctx context.Context) AlertmanagerSpecContainersSecurityContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersSecurityContextOutput)
}

func (i AlertmanagerSpecContainersSecurityContextArgs) ToAlertmanagerSpecContainersSecurityContextPtrOutput() AlertmanagerSpecContainersSecurityContextPtrOutput {
	return i.ToAlertmanagerSpecContainersSecurityContextPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersSecurityContextArgs) ToAlertmanagerSpecContainersSecurityContextPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersSecurityContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersSecurityContextOutput).ToAlertmanagerSpecContainersSecurityContextPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersSecurityContextPtrInput is an input type that accepts AlertmanagerSpecContainersSecurityContextArgs, AlertmanagerSpecContainersSecurityContextPtr and AlertmanagerSpecContainersSecurityContextPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersSecurityContextPtrInput` via:
//
//          AlertmanagerSpecContainersSecurityContextArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersSecurityContextPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersSecurityContextPtrOutput() AlertmanagerSpecContainersSecurityContextPtrOutput
	ToAlertmanagerSpecContainersSecurityContextPtrOutputWithContext(context.Context) AlertmanagerSpecContainersSecurityContextPtrOutput
}

type alertmanagerSpecContainersSecurityContextPtrType AlertmanagerSpecContainersSecurityContextArgs

func AlertmanagerSpecContainersSecurityContextPtr(v *AlertmanagerSpecContainersSecurityContextArgs) AlertmanagerSpecContainersSecurityContextPtrInput {
	return (*alertmanagerSpecContainersSecurityContextPtrType)(v)
}

func (*alertmanagerSpecContainersSecurityContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersSecurityContext)(nil)).Elem()
}

func (i *alertmanagerSpecContainersSecurityContextPtrType) ToAlertmanagerSpecContainersSecurityContextPtrOutput() AlertmanagerSpecContainersSecurityContextPtrOutput {
	return i.ToAlertmanagerSpecContainersSecurityContextPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersSecurityContextPtrType) ToAlertmanagerSpecContainersSecurityContextPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersSecurityContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersSecurityContextPtrOutput)
}

// Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
type AlertmanagerSpecContainersSecurityContextOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersSecurityContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersSecurityContext)(nil)).Elem()
}

func (o AlertmanagerSpecContainersSecurityContextOutput) ToAlertmanagerSpecContainersSecurityContextOutput() AlertmanagerSpecContainersSecurityContextOutput {
	return o
}

func (o AlertmanagerSpecContainersSecurityContextOutput) ToAlertmanagerSpecContainersSecurityContextOutputWithContext(ctx context.Context) AlertmanagerSpecContainersSecurityContextOutput {
	return o
}

func (o AlertmanagerSpecContainersSecurityContextOutput) ToAlertmanagerSpecContainersSecurityContextPtrOutput() AlertmanagerSpecContainersSecurityContextPtrOutput {
	return o.ToAlertmanagerSpecContainersSecurityContextPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersSecurityContextOutput) ToAlertmanagerSpecContainersSecurityContextPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersSecurityContextPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersSecurityContext) *AlertmanagerSpecContainersSecurityContext {
		return &v
	}).(AlertmanagerSpecContainersSecurityContextPtrOutput)
}

// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
func (o AlertmanagerSpecContainersSecurityContextOutput) AllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersSecurityContext) *bool { return v.AllowPrivilegeEscalation }).(pulumi.BoolPtrOutput)
}

// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
func (o AlertmanagerSpecContainersSecurityContextOutput) Capabilities() AlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersSecurityContext) *AlertmanagerSpecContainersSecurityContextCapabilities {
		return v.Capabilities
	}).(AlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput)
}

// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
func (o AlertmanagerSpecContainersSecurityContextOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersSecurityContext) *bool { return v.Privileged }).(pulumi.BoolPtrOutput)
}

// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
func (o AlertmanagerSpecContainersSecurityContextOutput) ProcMount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersSecurityContext) *string { return v.ProcMount }).(pulumi.StringPtrOutput)
}

// Whether this container has a read-only root filesystem. Default is false.
func (o AlertmanagerSpecContainersSecurityContextOutput) ReadOnlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersSecurityContext) *bool { return v.ReadOnlyRootFilesystem }).(pulumi.BoolPtrOutput)
}

// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o AlertmanagerSpecContainersSecurityContextOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersSecurityContext) *int { return v.RunAsGroup }).(pulumi.IntPtrOutput)
}

// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o AlertmanagerSpecContainersSecurityContextOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersSecurityContext) *bool { return v.RunAsNonRoot }).(pulumi.BoolPtrOutput)
}

// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o AlertmanagerSpecContainersSecurityContextOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersSecurityContext) *int { return v.RunAsUser }).(pulumi.IntPtrOutput)
}

// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o AlertmanagerSpecContainersSecurityContextOutput) SeLinuxOptions() AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersSecurityContext) *AlertmanagerSpecContainersSecurityContextSeLinuxOptions {
		return v.SeLinuxOptions
	}).(AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o AlertmanagerSpecContainersSecurityContextOutput) WindowsOptions() AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersSecurityContext) *AlertmanagerSpecContainersSecurityContextWindowsOptions {
		return v.WindowsOptions
	}).(AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput)
}

type AlertmanagerSpecContainersSecurityContextPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersSecurityContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersSecurityContext)(nil)).Elem()
}

func (o AlertmanagerSpecContainersSecurityContextPtrOutput) ToAlertmanagerSpecContainersSecurityContextPtrOutput() AlertmanagerSpecContainersSecurityContextPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersSecurityContextPtrOutput) ToAlertmanagerSpecContainersSecurityContextPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersSecurityContextPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersSecurityContextPtrOutput) Elem() AlertmanagerSpecContainersSecurityContextOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersSecurityContext) AlertmanagerSpecContainersSecurityContext {
		return *v
	}).(AlertmanagerSpecContainersSecurityContextOutput)
}

// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
func (o AlertmanagerSpecContainersSecurityContextPtrOutput) AllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersSecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPrivilegeEscalation
	}).(pulumi.BoolPtrOutput)
}

// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
func (o AlertmanagerSpecContainersSecurityContextPtrOutput) Capabilities() AlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersSecurityContext) *AlertmanagerSpecContainersSecurityContextCapabilities {
		if v == nil {
			return nil
		}
		return v.Capabilities
	}).(AlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput)
}

// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
func (o AlertmanagerSpecContainersSecurityContextPtrOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersSecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.Privileged
	}).(pulumi.BoolPtrOutput)
}

// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
func (o AlertmanagerSpecContainersSecurityContextPtrOutput) ProcMount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersSecurityContext) *string {
		if v == nil {
			return nil
		}
		return v.ProcMount
	}).(pulumi.StringPtrOutput)
}

// Whether this container has a read-only root filesystem. Default is false.
func (o AlertmanagerSpecContainersSecurityContextPtrOutput) ReadOnlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersSecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnlyRootFilesystem
	}).(pulumi.BoolPtrOutput)
}

// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o AlertmanagerSpecContainersSecurityContextPtrOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersSecurityContext) *int {
		if v == nil {
			return nil
		}
		return v.RunAsGroup
	}).(pulumi.IntPtrOutput)
}

// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o AlertmanagerSpecContainersSecurityContextPtrOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersSecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.RunAsNonRoot
	}).(pulumi.BoolPtrOutput)
}

// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o AlertmanagerSpecContainersSecurityContextPtrOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersSecurityContext) *int {
		if v == nil {
			return nil
		}
		return v.RunAsUser
	}).(pulumi.IntPtrOutput)
}

// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o AlertmanagerSpecContainersSecurityContextPtrOutput) SeLinuxOptions() AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersSecurityContext) *AlertmanagerSpecContainersSecurityContextSeLinuxOptions {
		if v == nil {
			return nil
		}
		return v.SeLinuxOptions
	}).(AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o AlertmanagerSpecContainersSecurityContextPtrOutput) WindowsOptions() AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersSecurityContext) *AlertmanagerSpecContainersSecurityContextWindowsOptions {
		if v == nil {
			return nil
		}
		return v.WindowsOptions
	}).(AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput)
}

// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
type AlertmanagerSpecContainersSecurityContextCapabilities struct {
	// Added capabilities
	Add []string `pulumi:"add"`
	// Removed capabilities
	Drop []string `pulumi:"drop"`
}

// AlertmanagerSpecContainersSecurityContextCapabilitiesInput is an input type that accepts AlertmanagerSpecContainersSecurityContextCapabilitiesArgs and AlertmanagerSpecContainersSecurityContextCapabilitiesOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersSecurityContextCapabilitiesInput` via:
//
//          AlertmanagerSpecContainersSecurityContextCapabilitiesArgs{...}
type AlertmanagerSpecContainersSecurityContextCapabilitiesInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersSecurityContextCapabilitiesOutput() AlertmanagerSpecContainersSecurityContextCapabilitiesOutput
	ToAlertmanagerSpecContainersSecurityContextCapabilitiesOutputWithContext(context.Context) AlertmanagerSpecContainersSecurityContextCapabilitiesOutput
}

// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
type AlertmanagerSpecContainersSecurityContextCapabilitiesArgs struct {
	// Added capabilities
	Add pulumi.StringArrayInput `pulumi:"add"`
	// Removed capabilities
	Drop pulumi.StringArrayInput `pulumi:"drop"`
}

func (AlertmanagerSpecContainersSecurityContextCapabilitiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersSecurityContextCapabilities)(nil)).Elem()
}

func (i AlertmanagerSpecContainersSecurityContextCapabilitiesArgs) ToAlertmanagerSpecContainersSecurityContextCapabilitiesOutput() AlertmanagerSpecContainersSecurityContextCapabilitiesOutput {
	return i.ToAlertmanagerSpecContainersSecurityContextCapabilitiesOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersSecurityContextCapabilitiesArgs) ToAlertmanagerSpecContainersSecurityContextCapabilitiesOutputWithContext(ctx context.Context) AlertmanagerSpecContainersSecurityContextCapabilitiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersSecurityContextCapabilitiesOutput)
}

func (i AlertmanagerSpecContainersSecurityContextCapabilitiesArgs) ToAlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput() AlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput {
	return i.ToAlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersSecurityContextCapabilitiesArgs) ToAlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersSecurityContextCapabilitiesOutput).ToAlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersSecurityContextCapabilitiesPtrInput is an input type that accepts AlertmanagerSpecContainersSecurityContextCapabilitiesArgs, AlertmanagerSpecContainersSecurityContextCapabilitiesPtr and AlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersSecurityContextCapabilitiesPtrInput` via:
//
//          AlertmanagerSpecContainersSecurityContextCapabilitiesArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersSecurityContextCapabilitiesPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput() AlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput
	ToAlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutputWithContext(context.Context) AlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput
}

type alertmanagerSpecContainersSecurityContextCapabilitiesPtrType AlertmanagerSpecContainersSecurityContextCapabilitiesArgs

func AlertmanagerSpecContainersSecurityContextCapabilitiesPtr(v *AlertmanagerSpecContainersSecurityContextCapabilitiesArgs) AlertmanagerSpecContainersSecurityContextCapabilitiesPtrInput {
	return (*alertmanagerSpecContainersSecurityContextCapabilitiesPtrType)(v)
}

func (*alertmanagerSpecContainersSecurityContextCapabilitiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersSecurityContextCapabilities)(nil)).Elem()
}

func (i *alertmanagerSpecContainersSecurityContextCapabilitiesPtrType) ToAlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput() AlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput {
	return i.ToAlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersSecurityContextCapabilitiesPtrType) ToAlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput)
}

// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
type AlertmanagerSpecContainersSecurityContextCapabilitiesOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersSecurityContextCapabilitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersSecurityContextCapabilities)(nil)).Elem()
}

func (o AlertmanagerSpecContainersSecurityContextCapabilitiesOutput) ToAlertmanagerSpecContainersSecurityContextCapabilitiesOutput() AlertmanagerSpecContainersSecurityContextCapabilitiesOutput {
	return o
}

func (o AlertmanagerSpecContainersSecurityContextCapabilitiesOutput) ToAlertmanagerSpecContainersSecurityContextCapabilitiesOutputWithContext(ctx context.Context) AlertmanagerSpecContainersSecurityContextCapabilitiesOutput {
	return o
}

func (o AlertmanagerSpecContainersSecurityContextCapabilitiesOutput) ToAlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput() AlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput {
	return o.ToAlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersSecurityContextCapabilitiesOutput) ToAlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersSecurityContextCapabilities) *AlertmanagerSpecContainersSecurityContextCapabilities {
		return &v
	}).(AlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput)
}

// Added capabilities
func (o AlertmanagerSpecContainersSecurityContextCapabilitiesOutput) Add() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersSecurityContextCapabilities) []string { return v.Add }).(pulumi.StringArrayOutput)
}

// Removed capabilities
func (o AlertmanagerSpecContainersSecurityContextCapabilitiesOutput) Drop() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersSecurityContextCapabilities) []string { return v.Drop }).(pulumi.StringArrayOutput)
}

type AlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersSecurityContextCapabilities)(nil)).Elem()
}

func (o AlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput) ToAlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput() AlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput) ToAlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput) Elem() AlertmanagerSpecContainersSecurityContextCapabilitiesOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersSecurityContextCapabilities) AlertmanagerSpecContainersSecurityContextCapabilities {
		return *v
	}).(AlertmanagerSpecContainersSecurityContextCapabilitiesOutput)
}

// Added capabilities
func (o AlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput) Add() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersSecurityContextCapabilities) []string {
		if v == nil {
			return nil
		}
		return v.Add
	}).(pulumi.StringArrayOutput)
}

// Removed capabilities
func (o AlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput) Drop() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersSecurityContextCapabilities) []string {
		if v == nil {
			return nil
		}
		return v.Drop
	}).(pulumi.StringArrayOutput)
}

// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
type AlertmanagerSpecContainersSecurityContextSeLinuxOptions struct {
	// Level is SELinux level label that applies to the container.
	Level *string `pulumi:"level"`
	// Role is a SELinux role label that applies to the container.
	Role *string `pulumi:"role"`
	// Type is a SELinux type label that applies to the container.
	Type *string `pulumi:"type"`
	// User is a SELinux user label that applies to the container.
	User *string `pulumi:"user"`
}

// AlertmanagerSpecContainersSecurityContextSeLinuxOptionsInput is an input type that accepts AlertmanagerSpecContainersSecurityContextSeLinuxOptionsArgs and AlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersSecurityContextSeLinuxOptionsInput` via:
//
//          AlertmanagerSpecContainersSecurityContextSeLinuxOptionsArgs{...}
type AlertmanagerSpecContainersSecurityContextSeLinuxOptionsInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutput() AlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutput
	ToAlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutputWithContext(context.Context) AlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutput
}

// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
type AlertmanagerSpecContainersSecurityContextSeLinuxOptionsArgs struct {
	// Level is SELinux level label that applies to the container.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// Role is a SELinux role label that applies to the container.
	Role pulumi.StringPtrInput `pulumi:"role"`
	// Type is a SELinux type label that applies to the container.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// User is a SELinux user label that applies to the container.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (AlertmanagerSpecContainersSecurityContextSeLinuxOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (i AlertmanagerSpecContainersSecurityContextSeLinuxOptionsArgs) ToAlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutput() AlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutput {
	return i.ToAlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersSecurityContextSeLinuxOptionsArgs) ToAlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutputWithContext(ctx context.Context) AlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutput)
}

func (i AlertmanagerSpecContainersSecurityContextSeLinuxOptionsArgs) ToAlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput() AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput {
	return i.ToAlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersSecurityContextSeLinuxOptionsArgs) ToAlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutput).ToAlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrInput is an input type that accepts AlertmanagerSpecContainersSecurityContextSeLinuxOptionsArgs, AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtr and AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrInput` via:
//
//          AlertmanagerSpecContainersSecurityContextSeLinuxOptionsArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput() AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput
	ToAlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Context) AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput
}

type alertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrType AlertmanagerSpecContainersSecurityContextSeLinuxOptionsArgs

func AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtr(v *AlertmanagerSpecContainersSecurityContextSeLinuxOptionsArgs) AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrInput {
	return (*alertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrType)(v)
}

func (*alertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (i *alertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrType) ToAlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput() AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput {
	return i.ToAlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrType) ToAlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput)
}

// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
type AlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (o AlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutput) ToAlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutput() AlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutput {
	return o
}

func (o AlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutput) ToAlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutputWithContext(ctx context.Context) AlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutput {
	return o
}

func (o AlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutput) ToAlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput() AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput {
	return o.ToAlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutput) ToAlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersSecurityContextSeLinuxOptions) *AlertmanagerSpecContainersSecurityContextSeLinuxOptions {
		return &v
	}).(AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput)
}

// Level is SELinux level label that applies to the container.
func (o AlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersSecurityContextSeLinuxOptions) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// Role is a SELinux role label that applies to the container.
func (o AlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersSecurityContextSeLinuxOptions) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// Type is a SELinux type label that applies to the container.
func (o AlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersSecurityContextSeLinuxOptions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// User is a SELinux user label that applies to the container.
func (o AlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersSecurityContextSeLinuxOptions) *string { return v.User }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (o AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput) ToAlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput() AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput) ToAlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput) Elem() AlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersSecurityContextSeLinuxOptions) AlertmanagerSpecContainersSecurityContextSeLinuxOptions {
		return *v
	}).(AlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutput)
}

// Level is SELinux level label that applies to the container.
func (o AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.StringPtrOutput)
}

// Role is a SELinux role label that applies to the container.
func (o AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

// Type is a SELinux type label that applies to the container.
func (o AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// User is a SELinux user label that applies to the container.
func (o AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
type AlertmanagerSpecContainersSecurityContextWindowsOptions struct {
	// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
	GmsaCredentialSpec *string `pulumi:"gmsaCredentialSpec"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
	GmsaCredentialSpecName *string `pulumi:"gmsaCredentialSpecName"`
	// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. This field is beta-level and may be disabled with the WindowsRunAsUserName feature flag.
	RunAsUserName *string `pulumi:"runAsUserName"`
}

// AlertmanagerSpecContainersSecurityContextWindowsOptionsInput is an input type that accepts AlertmanagerSpecContainersSecurityContextWindowsOptionsArgs and AlertmanagerSpecContainersSecurityContextWindowsOptionsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersSecurityContextWindowsOptionsInput` via:
//
//          AlertmanagerSpecContainersSecurityContextWindowsOptionsArgs{...}
type AlertmanagerSpecContainersSecurityContextWindowsOptionsInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersSecurityContextWindowsOptionsOutput() AlertmanagerSpecContainersSecurityContextWindowsOptionsOutput
	ToAlertmanagerSpecContainersSecurityContextWindowsOptionsOutputWithContext(context.Context) AlertmanagerSpecContainersSecurityContextWindowsOptionsOutput
}

// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
type AlertmanagerSpecContainersSecurityContextWindowsOptionsArgs struct {
	// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
	GmsaCredentialSpec pulumi.StringPtrInput `pulumi:"gmsaCredentialSpec"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
	GmsaCredentialSpecName pulumi.StringPtrInput `pulumi:"gmsaCredentialSpecName"`
	// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. This field is beta-level and may be disabled with the WindowsRunAsUserName feature flag.
	RunAsUserName pulumi.StringPtrInput `pulumi:"runAsUserName"`
}

func (AlertmanagerSpecContainersSecurityContextWindowsOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersSecurityContextWindowsOptions)(nil)).Elem()
}

func (i AlertmanagerSpecContainersSecurityContextWindowsOptionsArgs) ToAlertmanagerSpecContainersSecurityContextWindowsOptionsOutput() AlertmanagerSpecContainersSecurityContextWindowsOptionsOutput {
	return i.ToAlertmanagerSpecContainersSecurityContextWindowsOptionsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersSecurityContextWindowsOptionsArgs) ToAlertmanagerSpecContainersSecurityContextWindowsOptionsOutputWithContext(ctx context.Context) AlertmanagerSpecContainersSecurityContextWindowsOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersSecurityContextWindowsOptionsOutput)
}

func (i AlertmanagerSpecContainersSecurityContextWindowsOptionsArgs) ToAlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput() AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput {
	return i.ToAlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersSecurityContextWindowsOptionsArgs) ToAlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersSecurityContextWindowsOptionsOutput).ToAlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrInput is an input type that accepts AlertmanagerSpecContainersSecurityContextWindowsOptionsArgs, AlertmanagerSpecContainersSecurityContextWindowsOptionsPtr and AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrInput` via:
//
//          AlertmanagerSpecContainersSecurityContextWindowsOptionsArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput() AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput
	ToAlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutputWithContext(context.Context) AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput
}

type alertmanagerSpecContainersSecurityContextWindowsOptionsPtrType AlertmanagerSpecContainersSecurityContextWindowsOptionsArgs

func AlertmanagerSpecContainersSecurityContextWindowsOptionsPtr(v *AlertmanagerSpecContainersSecurityContextWindowsOptionsArgs) AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrInput {
	return (*alertmanagerSpecContainersSecurityContextWindowsOptionsPtrType)(v)
}

func (*alertmanagerSpecContainersSecurityContextWindowsOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersSecurityContextWindowsOptions)(nil)).Elem()
}

func (i *alertmanagerSpecContainersSecurityContextWindowsOptionsPtrType) ToAlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput() AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput {
	return i.ToAlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersSecurityContextWindowsOptionsPtrType) ToAlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
type AlertmanagerSpecContainersSecurityContextWindowsOptionsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersSecurityContextWindowsOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersSecurityContextWindowsOptions)(nil)).Elem()
}

func (o AlertmanagerSpecContainersSecurityContextWindowsOptionsOutput) ToAlertmanagerSpecContainersSecurityContextWindowsOptionsOutput() AlertmanagerSpecContainersSecurityContextWindowsOptionsOutput {
	return o
}

func (o AlertmanagerSpecContainersSecurityContextWindowsOptionsOutput) ToAlertmanagerSpecContainersSecurityContextWindowsOptionsOutputWithContext(ctx context.Context) AlertmanagerSpecContainersSecurityContextWindowsOptionsOutput {
	return o
}

func (o AlertmanagerSpecContainersSecurityContextWindowsOptionsOutput) ToAlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput() AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput {
	return o.ToAlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersSecurityContextWindowsOptionsOutput) ToAlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersSecurityContextWindowsOptions) *AlertmanagerSpecContainersSecurityContextWindowsOptions {
		return &v
	}).(AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput)
}

// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
func (o AlertmanagerSpecContainersSecurityContextWindowsOptionsOutput) GmsaCredentialSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersSecurityContextWindowsOptions) *string { return v.GmsaCredentialSpec }).(pulumi.StringPtrOutput)
}

// GMSACredentialSpecName is the name of the GMSA credential spec to use. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
func (o AlertmanagerSpecContainersSecurityContextWindowsOptionsOutput) GmsaCredentialSpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersSecurityContextWindowsOptions) *string {
		return v.GmsaCredentialSpecName
	}).(pulumi.StringPtrOutput)
}

// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. This field is beta-level and may be disabled with the WindowsRunAsUserName feature flag.
func (o AlertmanagerSpecContainersSecurityContextWindowsOptionsOutput) RunAsUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersSecurityContextWindowsOptions) *string { return v.RunAsUserName }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersSecurityContextWindowsOptions)(nil)).Elem()
}

func (o AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput) ToAlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput() AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput) ToAlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput) Elem() AlertmanagerSpecContainersSecurityContextWindowsOptionsOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersSecurityContextWindowsOptions) AlertmanagerSpecContainersSecurityContextWindowsOptions {
		return *v
	}).(AlertmanagerSpecContainersSecurityContextWindowsOptionsOutput)
}

// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
func (o AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput) GmsaCredentialSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersSecurityContextWindowsOptions) *string {
		if v == nil {
			return nil
		}
		return v.GmsaCredentialSpec
	}).(pulumi.StringPtrOutput)
}

// GMSACredentialSpecName is the name of the GMSA credential spec to use. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
func (o AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput) GmsaCredentialSpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersSecurityContextWindowsOptions) *string {
		if v == nil {
			return nil
		}
		return v.GmsaCredentialSpecName
	}).(pulumi.StringPtrOutput)
}

// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. This field is beta-level and may be disabled with the WindowsRunAsUserName feature flag.
func (o AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput) RunAsUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersSecurityContextWindowsOptions) *string {
		if v == nil {
			return nil
		}
		return v.RunAsUserName
	}).(pulumi.StringPtrOutput)
}

// StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
type AlertmanagerSpecContainersStartupProbe struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec *AlertmanagerSpecContainersStartupProbeExec `pulumi:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// HTTPGet specifies the http request to perform.
	HttpGet *AlertmanagerSpecContainersStartupProbeHttpGet `pulumi:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
	TcpSocket *AlertmanagerSpecContainersStartupProbeTcpSocket `pulumi:"tcpSocket"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// AlertmanagerSpecContainersStartupProbeInput is an input type that accepts AlertmanagerSpecContainersStartupProbeArgs and AlertmanagerSpecContainersStartupProbeOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersStartupProbeInput` via:
//
//          AlertmanagerSpecContainersStartupProbeArgs{...}
type AlertmanagerSpecContainersStartupProbeInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersStartupProbeOutput() AlertmanagerSpecContainersStartupProbeOutput
	ToAlertmanagerSpecContainersStartupProbeOutputWithContext(context.Context) AlertmanagerSpecContainersStartupProbeOutput
}

// StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
type AlertmanagerSpecContainersStartupProbeArgs struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec AlertmanagerSpecContainersStartupProbeExecPtrInput `pulumi:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// HTTPGet specifies the http request to perform.
	HttpGet AlertmanagerSpecContainersStartupProbeHttpGetPtrInput `pulumi:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
	TcpSocket AlertmanagerSpecContainersStartupProbeTcpSocketPtrInput `pulumi:"tcpSocket"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (AlertmanagerSpecContainersStartupProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersStartupProbe)(nil)).Elem()
}

func (i AlertmanagerSpecContainersStartupProbeArgs) ToAlertmanagerSpecContainersStartupProbeOutput() AlertmanagerSpecContainersStartupProbeOutput {
	return i.ToAlertmanagerSpecContainersStartupProbeOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersStartupProbeArgs) ToAlertmanagerSpecContainersStartupProbeOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersStartupProbeOutput)
}

func (i AlertmanagerSpecContainersStartupProbeArgs) ToAlertmanagerSpecContainersStartupProbePtrOutput() AlertmanagerSpecContainersStartupProbePtrOutput {
	return i.ToAlertmanagerSpecContainersStartupProbePtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersStartupProbeArgs) ToAlertmanagerSpecContainersStartupProbePtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersStartupProbeOutput).ToAlertmanagerSpecContainersStartupProbePtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersStartupProbePtrInput is an input type that accepts AlertmanagerSpecContainersStartupProbeArgs, AlertmanagerSpecContainersStartupProbePtr and AlertmanagerSpecContainersStartupProbePtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersStartupProbePtrInput` via:
//
//          AlertmanagerSpecContainersStartupProbeArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersStartupProbePtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersStartupProbePtrOutput() AlertmanagerSpecContainersStartupProbePtrOutput
	ToAlertmanagerSpecContainersStartupProbePtrOutputWithContext(context.Context) AlertmanagerSpecContainersStartupProbePtrOutput
}

type alertmanagerSpecContainersStartupProbePtrType AlertmanagerSpecContainersStartupProbeArgs

func AlertmanagerSpecContainersStartupProbePtr(v *AlertmanagerSpecContainersStartupProbeArgs) AlertmanagerSpecContainersStartupProbePtrInput {
	return (*alertmanagerSpecContainersStartupProbePtrType)(v)
}

func (*alertmanagerSpecContainersStartupProbePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersStartupProbe)(nil)).Elem()
}

func (i *alertmanagerSpecContainersStartupProbePtrType) ToAlertmanagerSpecContainersStartupProbePtrOutput() AlertmanagerSpecContainersStartupProbePtrOutput {
	return i.ToAlertmanagerSpecContainersStartupProbePtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersStartupProbePtrType) ToAlertmanagerSpecContainersStartupProbePtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersStartupProbePtrOutput)
}

// StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
type AlertmanagerSpecContainersStartupProbeOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersStartupProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersStartupProbe)(nil)).Elem()
}

func (o AlertmanagerSpecContainersStartupProbeOutput) ToAlertmanagerSpecContainersStartupProbeOutput() AlertmanagerSpecContainersStartupProbeOutput {
	return o
}

func (o AlertmanagerSpecContainersStartupProbeOutput) ToAlertmanagerSpecContainersStartupProbeOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeOutput {
	return o
}

func (o AlertmanagerSpecContainersStartupProbeOutput) ToAlertmanagerSpecContainersStartupProbePtrOutput() AlertmanagerSpecContainersStartupProbePtrOutput {
	return o.ToAlertmanagerSpecContainersStartupProbePtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersStartupProbeOutput) ToAlertmanagerSpecContainersStartupProbePtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersStartupProbe) *AlertmanagerSpecContainersStartupProbe {
		return &v
	}).(AlertmanagerSpecContainersStartupProbePtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
func (o AlertmanagerSpecContainersStartupProbeOutput) Exec() AlertmanagerSpecContainersStartupProbeExecPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersStartupProbe) *AlertmanagerSpecContainersStartupProbeExec {
		return v.Exec
	}).(AlertmanagerSpecContainersStartupProbeExecPtrOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (o AlertmanagerSpecContainersStartupProbeOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersStartupProbe) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o AlertmanagerSpecContainersStartupProbeOutput) HttpGet() AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersStartupProbe) *AlertmanagerSpecContainersStartupProbeHttpGet {
		return v.HttpGet
	}).(AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput)
}

// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecContainersStartupProbeOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersStartupProbe) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
func (o AlertmanagerSpecContainersStartupProbeOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersStartupProbe) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
func (o AlertmanagerSpecContainersStartupProbeOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersStartupProbe) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
func (o AlertmanagerSpecContainersStartupProbeOutput) TcpSocket() AlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersStartupProbe) *AlertmanagerSpecContainersStartupProbeTcpSocket {
		return v.TcpSocket
	}).(AlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput)
}

// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecContainersStartupProbeOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersStartupProbe) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type AlertmanagerSpecContainersStartupProbePtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersStartupProbePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersStartupProbe)(nil)).Elem()
}

func (o AlertmanagerSpecContainersStartupProbePtrOutput) ToAlertmanagerSpecContainersStartupProbePtrOutput() AlertmanagerSpecContainersStartupProbePtrOutput {
	return o
}

func (o AlertmanagerSpecContainersStartupProbePtrOutput) ToAlertmanagerSpecContainersStartupProbePtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbePtrOutput {
	return o
}

func (o AlertmanagerSpecContainersStartupProbePtrOutput) Elem() AlertmanagerSpecContainersStartupProbeOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersStartupProbe) AlertmanagerSpecContainersStartupProbe { return *v }).(AlertmanagerSpecContainersStartupProbeOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
func (o AlertmanagerSpecContainersStartupProbePtrOutput) Exec() AlertmanagerSpecContainersStartupProbeExecPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersStartupProbe) *AlertmanagerSpecContainersStartupProbeExec {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(AlertmanagerSpecContainersStartupProbeExecPtrOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (o AlertmanagerSpecContainersStartupProbePtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersStartupProbe) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o AlertmanagerSpecContainersStartupProbePtrOutput) HttpGet() AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersStartupProbe) *AlertmanagerSpecContainersStartupProbeHttpGet {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput)
}

// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecContainersStartupProbePtrOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersStartupProbe) *int {
		if v == nil {
			return nil
		}
		return v.InitialDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
func (o AlertmanagerSpecContainersStartupProbePtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersStartupProbe) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
func (o AlertmanagerSpecContainersStartupProbePtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersStartupProbe) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
func (o AlertmanagerSpecContainersStartupProbePtrOutput) TcpSocket() AlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersStartupProbe) *AlertmanagerSpecContainersStartupProbeTcpSocket {
		if v == nil {
			return nil
		}
		return v.TcpSocket
	}).(AlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput)
}

// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecContainersStartupProbePtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersStartupProbe) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecContainersStartupProbeExec struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command []string `pulumi:"command"`
}

// AlertmanagerSpecContainersStartupProbeExecInput is an input type that accepts AlertmanagerSpecContainersStartupProbeExecArgs and AlertmanagerSpecContainersStartupProbeExecOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersStartupProbeExecInput` via:
//
//          AlertmanagerSpecContainersStartupProbeExecArgs{...}
type AlertmanagerSpecContainersStartupProbeExecInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersStartupProbeExecOutput() AlertmanagerSpecContainersStartupProbeExecOutput
	ToAlertmanagerSpecContainersStartupProbeExecOutputWithContext(context.Context) AlertmanagerSpecContainersStartupProbeExecOutput
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecContainersStartupProbeExecArgs struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command pulumi.StringArrayInput `pulumi:"command"`
}

func (AlertmanagerSpecContainersStartupProbeExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersStartupProbeExec)(nil)).Elem()
}

func (i AlertmanagerSpecContainersStartupProbeExecArgs) ToAlertmanagerSpecContainersStartupProbeExecOutput() AlertmanagerSpecContainersStartupProbeExecOutput {
	return i.ToAlertmanagerSpecContainersStartupProbeExecOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersStartupProbeExecArgs) ToAlertmanagerSpecContainersStartupProbeExecOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersStartupProbeExecOutput)
}

func (i AlertmanagerSpecContainersStartupProbeExecArgs) ToAlertmanagerSpecContainersStartupProbeExecPtrOutput() AlertmanagerSpecContainersStartupProbeExecPtrOutput {
	return i.ToAlertmanagerSpecContainersStartupProbeExecPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersStartupProbeExecArgs) ToAlertmanagerSpecContainersStartupProbeExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersStartupProbeExecOutput).ToAlertmanagerSpecContainersStartupProbeExecPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersStartupProbeExecPtrInput is an input type that accepts AlertmanagerSpecContainersStartupProbeExecArgs, AlertmanagerSpecContainersStartupProbeExecPtr and AlertmanagerSpecContainersStartupProbeExecPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersStartupProbeExecPtrInput` via:
//
//          AlertmanagerSpecContainersStartupProbeExecArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersStartupProbeExecPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersStartupProbeExecPtrOutput() AlertmanagerSpecContainersStartupProbeExecPtrOutput
	ToAlertmanagerSpecContainersStartupProbeExecPtrOutputWithContext(context.Context) AlertmanagerSpecContainersStartupProbeExecPtrOutput
}

type alertmanagerSpecContainersStartupProbeExecPtrType AlertmanagerSpecContainersStartupProbeExecArgs

func AlertmanagerSpecContainersStartupProbeExecPtr(v *AlertmanagerSpecContainersStartupProbeExecArgs) AlertmanagerSpecContainersStartupProbeExecPtrInput {
	return (*alertmanagerSpecContainersStartupProbeExecPtrType)(v)
}

func (*alertmanagerSpecContainersStartupProbeExecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersStartupProbeExec)(nil)).Elem()
}

func (i *alertmanagerSpecContainersStartupProbeExecPtrType) ToAlertmanagerSpecContainersStartupProbeExecPtrOutput() AlertmanagerSpecContainersStartupProbeExecPtrOutput {
	return i.ToAlertmanagerSpecContainersStartupProbeExecPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersStartupProbeExecPtrType) ToAlertmanagerSpecContainersStartupProbeExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersStartupProbeExecPtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecContainersStartupProbeExecOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersStartupProbeExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersStartupProbeExec)(nil)).Elem()
}

func (o AlertmanagerSpecContainersStartupProbeExecOutput) ToAlertmanagerSpecContainersStartupProbeExecOutput() AlertmanagerSpecContainersStartupProbeExecOutput {
	return o
}

func (o AlertmanagerSpecContainersStartupProbeExecOutput) ToAlertmanagerSpecContainersStartupProbeExecOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeExecOutput {
	return o
}

func (o AlertmanagerSpecContainersStartupProbeExecOutput) ToAlertmanagerSpecContainersStartupProbeExecPtrOutput() AlertmanagerSpecContainersStartupProbeExecPtrOutput {
	return o.ToAlertmanagerSpecContainersStartupProbeExecPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersStartupProbeExecOutput) ToAlertmanagerSpecContainersStartupProbeExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeExecPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersStartupProbeExec) *AlertmanagerSpecContainersStartupProbeExec {
		return &v
	}).(AlertmanagerSpecContainersStartupProbeExecPtrOutput)
}

// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o AlertmanagerSpecContainersStartupProbeExecOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersStartupProbeExec) []string { return v.Command }).(pulumi.StringArrayOutput)
}

type AlertmanagerSpecContainersStartupProbeExecPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersStartupProbeExecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersStartupProbeExec)(nil)).Elem()
}

func (o AlertmanagerSpecContainersStartupProbeExecPtrOutput) ToAlertmanagerSpecContainersStartupProbeExecPtrOutput() AlertmanagerSpecContainersStartupProbeExecPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersStartupProbeExecPtrOutput) ToAlertmanagerSpecContainersStartupProbeExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeExecPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersStartupProbeExecPtrOutput) Elem() AlertmanagerSpecContainersStartupProbeExecOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersStartupProbeExec) AlertmanagerSpecContainersStartupProbeExec {
		return *v
	}).(AlertmanagerSpecContainersStartupProbeExecOutput)
}

// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o AlertmanagerSpecContainersStartupProbeExecPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersStartupProbeExec) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecContainersStartupProbeHttpGet struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []AlertmanagerSpecContainersStartupProbeHttpGetHttpHeaders `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path *string `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecContainersStartupProbeHttpGetPort `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `pulumi:"scheme"`
}

// AlertmanagerSpecContainersStartupProbeHttpGetInput is an input type that accepts AlertmanagerSpecContainersStartupProbeHttpGetArgs and AlertmanagerSpecContainersStartupProbeHttpGetOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersStartupProbeHttpGetInput` via:
//
//          AlertmanagerSpecContainersStartupProbeHttpGetArgs{...}
type AlertmanagerSpecContainersStartupProbeHttpGetInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersStartupProbeHttpGetOutput() AlertmanagerSpecContainersStartupProbeHttpGetOutput
	ToAlertmanagerSpecContainersStartupProbeHttpGetOutputWithContext(context.Context) AlertmanagerSpecContainersStartupProbeHttpGetOutput
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecContainersStartupProbeHttpGetArgs struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayInput `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecContainersStartupProbeHttpGetPortInput `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (AlertmanagerSpecContainersStartupProbeHttpGetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersStartupProbeHttpGet)(nil)).Elem()
}

func (i AlertmanagerSpecContainersStartupProbeHttpGetArgs) ToAlertmanagerSpecContainersStartupProbeHttpGetOutput() AlertmanagerSpecContainersStartupProbeHttpGetOutput {
	return i.ToAlertmanagerSpecContainersStartupProbeHttpGetOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersStartupProbeHttpGetArgs) ToAlertmanagerSpecContainersStartupProbeHttpGetOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeHttpGetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersStartupProbeHttpGetOutput)
}

func (i AlertmanagerSpecContainersStartupProbeHttpGetArgs) ToAlertmanagerSpecContainersStartupProbeHttpGetPtrOutput() AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput {
	return i.ToAlertmanagerSpecContainersStartupProbeHttpGetPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersStartupProbeHttpGetArgs) ToAlertmanagerSpecContainersStartupProbeHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersStartupProbeHttpGetOutput).ToAlertmanagerSpecContainersStartupProbeHttpGetPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersStartupProbeHttpGetPtrInput is an input type that accepts AlertmanagerSpecContainersStartupProbeHttpGetArgs, AlertmanagerSpecContainersStartupProbeHttpGetPtr and AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersStartupProbeHttpGetPtrInput` via:
//
//          AlertmanagerSpecContainersStartupProbeHttpGetArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersStartupProbeHttpGetPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersStartupProbeHttpGetPtrOutput() AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput
	ToAlertmanagerSpecContainersStartupProbeHttpGetPtrOutputWithContext(context.Context) AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput
}

type alertmanagerSpecContainersStartupProbeHttpGetPtrType AlertmanagerSpecContainersStartupProbeHttpGetArgs

func AlertmanagerSpecContainersStartupProbeHttpGetPtr(v *AlertmanagerSpecContainersStartupProbeHttpGetArgs) AlertmanagerSpecContainersStartupProbeHttpGetPtrInput {
	return (*alertmanagerSpecContainersStartupProbeHttpGetPtrType)(v)
}

func (*alertmanagerSpecContainersStartupProbeHttpGetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersStartupProbeHttpGet)(nil)).Elem()
}

func (i *alertmanagerSpecContainersStartupProbeHttpGetPtrType) ToAlertmanagerSpecContainersStartupProbeHttpGetPtrOutput() AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput {
	return i.ToAlertmanagerSpecContainersStartupProbeHttpGetPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersStartupProbeHttpGetPtrType) ToAlertmanagerSpecContainersStartupProbeHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput)
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecContainersStartupProbeHttpGetOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersStartupProbeHttpGetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersStartupProbeHttpGet)(nil)).Elem()
}

func (o AlertmanagerSpecContainersStartupProbeHttpGetOutput) ToAlertmanagerSpecContainersStartupProbeHttpGetOutput() AlertmanagerSpecContainersStartupProbeHttpGetOutput {
	return o
}

func (o AlertmanagerSpecContainersStartupProbeHttpGetOutput) ToAlertmanagerSpecContainersStartupProbeHttpGetOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeHttpGetOutput {
	return o
}

func (o AlertmanagerSpecContainersStartupProbeHttpGetOutput) ToAlertmanagerSpecContainersStartupProbeHttpGetPtrOutput() AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput {
	return o.ToAlertmanagerSpecContainersStartupProbeHttpGetPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersStartupProbeHttpGetOutput) ToAlertmanagerSpecContainersStartupProbeHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersStartupProbeHttpGet) *AlertmanagerSpecContainersStartupProbeHttpGet {
		return &v
	}).(AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o AlertmanagerSpecContainersStartupProbeHttpGetOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersStartupProbeHttpGet) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o AlertmanagerSpecContainersStartupProbeHttpGetOutput) HttpHeaders() AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersStartupProbeHttpGet) []AlertmanagerSpecContainersStartupProbeHttpGetHttpHeaders {
		return v.HttpHeaders
	}).(AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o AlertmanagerSpecContainersStartupProbeHttpGetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersStartupProbeHttpGet) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecContainersStartupProbeHttpGetOutput) Port() AlertmanagerSpecContainersStartupProbeHttpGetPortOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersStartupProbeHttpGet) AlertmanagerSpecContainersStartupProbeHttpGetPort {
		return v.Port
	}).(AlertmanagerSpecContainersStartupProbeHttpGetPortOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o AlertmanagerSpecContainersStartupProbeHttpGetOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersStartupProbeHttpGet) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersStartupProbeHttpGet)(nil)).Elem()
}

func (o AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput) ToAlertmanagerSpecContainersStartupProbeHttpGetPtrOutput() AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput) ToAlertmanagerSpecContainersStartupProbeHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput) Elem() AlertmanagerSpecContainersStartupProbeHttpGetOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersStartupProbeHttpGet) AlertmanagerSpecContainersStartupProbeHttpGet {
		return *v
	}).(AlertmanagerSpecContainersStartupProbeHttpGetOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersStartupProbeHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput) HttpHeaders() AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersStartupProbeHttpGet) []AlertmanagerSpecContainersStartupProbeHttpGetHttpHeaders {
		if v == nil {
			return nil
		}
		return v.HttpHeaders
	}).(AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersStartupProbeHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput) Port() AlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersStartupProbeHttpGet) *AlertmanagerSpecContainersStartupProbeHttpGetPort {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(AlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersStartupProbeHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecContainersStartupProbeHttpGetHttpHeaders struct {
	// The header field name
	Name string `pulumi:"name"`
	// The header field value
	Value string `pulumi:"value"`
}

// AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersInput is an input type that accepts AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArgs and AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersInput` via:
//
//          AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArgs{...}
type AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersOutput() AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersOutput
	ToAlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersOutputWithContext(context.Context) AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersOutput
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArgs struct {
	// The header field name
	Name pulumi.StringInput `pulumi:"name"`
	// The header field value
	Value pulumi.StringInput `pulumi:"value"`
}

func (AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersStartupProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (i AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArgs) ToAlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersOutput() AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersOutput {
	return i.ToAlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArgs) ToAlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersOutput)
}

// AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayInput is an input type that accepts AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArray and AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayInput` via:
//
//          AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArray{ AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArgs{...} }
type AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayOutput() AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayOutput
	ToAlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayOutputWithContext(context.Context) AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayOutput
}

type AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArray []AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersInput

func (AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecContainersStartupProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (i AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArray) ToAlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayOutput() AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayOutput {
	return i.ToAlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArray) ToAlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersStartupProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (o AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersOutput) ToAlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersOutput() AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersOutput {
	return o
}

func (o AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersOutput) ToAlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersOutput {
	return o
}

// The header field name
func (o AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersStartupProbeHttpGetHttpHeaders) string { return v.Name }).(pulumi.StringOutput)
}

// The header field value
func (o AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersStartupProbeHttpGetHttpHeaders) string { return v.Value }).(pulumi.StringOutput)
}

type AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecContainersStartupProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (o AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayOutput) ToAlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayOutput() AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayOutput {
	return o
}

func (o AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayOutput) ToAlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayOutput {
	return o
}

func (o AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecContainersStartupProbeHttpGetHttpHeaders {
		return vs[0].([]AlertmanagerSpecContainersStartupProbeHttpGetHttpHeaders)[vs[1].(int)]
	}).(AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersOutput)
}

type AlertmanagerSpecContainersStartupProbeHttpGetPort struct {
}

// AlertmanagerSpecContainersStartupProbeHttpGetPortInput is an input type that accepts AlertmanagerSpecContainersStartupProbeHttpGetPortArgs and AlertmanagerSpecContainersStartupProbeHttpGetPortOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersStartupProbeHttpGetPortInput` via:
//
//          AlertmanagerSpecContainersStartupProbeHttpGetPortArgs{...}
type AlertmanagerSpecContainersStartupProbeHttpGetPortInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersStartupProbeHttpGetPortOutput() AlertmanagerSpecContainersStartupProbeHttpGetPortOutput
	ToAlertmanagerSpecContainersStartupProbeHttpGetPortOutputWithContext(context.Context) AlertmanagerSpecContainersStartupProbeHttpGetPortOutput
}

type AlertmanagerSpecContainersStartupProbeHttpGetPortArgs struct {
}

func (AlertmanagerSpecContainersStartupProbeHttpGetPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersStartupProbeHttpGetPort)(nil)).Elem()
}

func (i AlertmanagerSpecContainersStartupProbeHttpGetPortArgs) ToAlertmanagerSpecContainersStartupProbeHttpGetPortOutput() AlertmanagerSpecContainersStartupProbeHttpGetPortOutput {
	return i.ToAlertmanagerSpecContainersStartupProbeHttpGetPortOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersStartupProbeHttpGetPortArgs) ToAlertmanagerSpecContainersStartupProbeHttpGetPortOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeHttpGetPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersStartupProbeHttpGetPortOutput)
}

func (i AlertmanagerSpecContainersStartupProbeHttpGetPortArgs) ToAlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutput() AlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutput {
	return i.ToAlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersStartupProbeHttpGetPortArgs) ToAlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersStartupProbeHttpGetPortOutput).ToAlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersStartupProbeHttpGetPortPtrInput is an input type that accepts AlertmanagerSpecContainersStartupProbeHttpGetPortArgs, AlertmanagerSpecContainersStartupProbeHttpGetPortPtr and AlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersStartupProbeHttpGetPortPtrInput` via:
//
//          AlertmanagerSpecContainersStartupProbeHttpGetPortArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersStartupProbeHttpGetPortPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutput() AlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutput
	ToAlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutputWithContext(context.Context) AlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutput
}

type alertmanagerSpecContainersStartupProbeHttpGetPortPtrType AlertmanagerSpecContainersStartupProbeHttpGetPortArgs

func AlertmanagerSpecContainersStartupProbeHttpGetPortPtr(v *AlertmanagerSpecContainersStartupProbeHttpGetPortArgs) AlertmanagerSpecContainersStartupProbeHttpGetPortPtrInput {
	return (*alertmanagerSpecContainersStartupProbeHttpGetPortPtrType)(v)
}

func (*alertmanagerSpecContainersStartupProbeHttpGetPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersStartupProbeHttpGetPort)(nil)).Elem()
}

func (i *alertmanagerSpecContainersStartupProbeHttpGetPortPtrType) ToAlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutput() AlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutput {
	return i.ToAlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersStartupProbeHttpGetPortPtrType) ToAlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutput)
}

type AlertmanagerSpecContainersStartupProbeHttpGetPortOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersStartupProbeHttpGetPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersStartupProbeHttpGetPort)(nil)).Elem()
}

func (o AlertmanagerSpecContainersStartupProbeHttpGetPortOutput) ToAlertmanagerSpecContainersStartupProbeHttpGetPortOutput() AlertmanagerSpecContainersStartupProbeHttpGetPortOutput {
	return o
}

func (o AlertmanagerSpecContainersStartupProbeHttpGetPortOutput) ToAlertmanagerSpecContainersStartupProbeHttpGetPortOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeHttpGetPortOutput {
	return o
}

func (o AlertmanagerSpecContainersStartupProbeHttpGetPortOutput) ToAlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutput() AlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutput {
	return o.ToAlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersStartupProbeHttpGetPortOutput) ToAlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersStartupProbeHttpGetPort) *AlertmanagerSpecContainersStartupProbeHttpGetPort {
		return &v
	}).(AlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutput)
}

type AlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersStartupProbeHttpGetPort)(nil)).Elem()
}

func (o AlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutput) ToAlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutput() AlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutput) ToAlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutput) Elem() AlertmanagerSpecContainersStartupProbeHttpGetPortOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersStartupProbeHttpGetPort) AlertmanagerSpecContainersStartupProbeHttpGetPort {
		return *v
	}).(AlertmanagerSpecContainersStartupProbeHttpGetPortOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecContainersStartupProbeTcpSocket struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecContainersStartupProbeTcpSocketPort `pulumi:"port"`
}

// AlertmanagerSpecContainersStartupProbeTcpSocketInput is an input type that accepts AlertmanagerSpecContainersStartupProbeTcpSocketArgs and AlertmanagerSpecContainersStartupProbeTcpSocketOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersStartupProbeTcpSocketInput` via:
//
//          AlertmanagerSpecContainersStartupProbeTcpSocketArgs{...}
type AlertmanagerSpecContainersStartupProbeTcpSocketInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersStartupProbeTcpSocketOutput() AlertmanagerSpecContainersStartupProbeTcpSocketOutput
	ToAlertmanagerSpecContainersStartupProbeTcpSocketOutputWithContext(context.Context) AlertmanagerSpecContainersStartupProbeTcpSocketOutput
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecContainersStartupProbeTcpSocketArgs struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecContainersStartupProbeTcpSocketPortInput `pulumi:"port"`
}

func (AlertmanagerSpecContainersStartupProbeTcpSocketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersStartupProbeTcpSocket)(nil)).Elem()
}

func (i AlertmanagerSpecContainersStartupProbeTcpSocketArgs) ToAlertmanagerSpecContainersStartupProbeTcpSocketOutput() AlertmanagerSpecContainersStartupProbeTcpSocketOutput {
	return i.ToAlertmanagerSpecContainersStartupProbeTcpSocketOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersStartupProbeTcpSocketArgs) ToAlertmanagerSpecContainersStartupProbeTcpSocketOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeTcpSocketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersStartupProbeTcpSocketOutput)
}

func (i AlertmanagerSpecContainersStartupProbeTcpSocketArgs) ToAlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput() AlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput {
	return i.ToAlertmanagerSpecContainersStartupProbeTcpSocketPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersStartupProbeTcpSocketArgs) ToAlertmanagerSpecContainersStartupProbeTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersStartupProbeTcpSocketOutput).ToAlertmanagerSpecContainersStartupProbeTcpSocketPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersStartupProbeTcpSocketPtrInput is an input type that accepts AlertmanagerSpecContainersStartupProbeTcpSocketArgs, AlertmanagerSpecContainersStartupProbeTcpSocketPtr and AlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersStartupProbeTcpSocketPtrInput` via:
//
//          AlertmanagerSpecContainersStartupProbeTcpSocketArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersStartupProbeTcpSocketPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput() AlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput
	ToAlertmanagerSpecContainersStartupProbeTcpSocketPtrOutputWithContext(context.Context) AlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput
}

type alertmanagerSpecContainersStartupProbeTcpSocketPtrType AlertmanagerSpecContainersStartupProbeTcpSocketArgs

func AlertmanagerSpecContainersStartupProbeTcpSocketPtr(v *AlertmanagerSpecContainersStartupProbeTcpSocketArgs) AlertmanagerSpecContainersStartupProbeTcpSocketPtrInput {
	return (*alertmanagerSpecContainersStartupProbeTcpSocketPtrType)(v)
}

func (*alertmanagerSpecContainersStartupProbeTcpSocketPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersStartupProbeTcpSocket)(nil)).Elem()
}

func (i *alertmanagerSpecContainersStartupProbeTcpSocketPtrType) ToAlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput() AlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput {
	return i.ToAlertmanagerSpecContainersStartupProbeTcpSocketPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersStartupProbeTcpSocketPtrType) ToAlertmanagerSpecContainersStartupProbeTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecContainersStartupProbeTcpSocketOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersStartupProbeTcpSocketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersStartupProbeTcpSocket)(nil)).Elem()
}

func (o AlertmanagerSpecContainersStartupProbeTcpSocketOutput) ToAlertmanagerSpecContainersStartupProbeTcpSocketOutput() AlertmanagerSpecContainersStartupProbeTcpSocketOutput {
	return o
}

func (o AlertmanagerSpecContainersStartupProbeTcpSocketOutput) ToAlertmanagerSpecContainersStartupProbeTcpSocketOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeTcpSocketOutput {
	return o
}

func (o AlertmanagerSpecContainersStartupProbeTcpSocketOutput) ToAlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput() AlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput {
	return o.ToAlertmanagerSpecContainersStartupProbeTcpSocketPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersStartupProbeTcpSocketOutput) ToAlertmanagerSpecContainersStartupProbeTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersStartupProbeTcpSocket) *AlertmanagerSpecContainersStartupProbeTcpSocket {
		return &v
	}).(AlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o AlertmanagerSpecContainersStartupProbeTcpSocketOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersStartupProbeTcpSocket) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecContainersStartupProbeTcpSocketOutput) Port() AlertmanagerSpecContainersStartupProbeTcpSocketPortOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersStartupProbeTcpSocket) AlertmanagerSpecContainersStartupProbeTcpSocketPort {
		return v.Port
	}).(AlertmanagerSpecContainersStartupProbeTcpSocketPortOutput)
}

type AlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersStartupProbeTcpSocket)(nil)).Elem()
}

func (o AlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput) ToAlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput() AlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput) ToAlertmanagerSpecContainersStartupProbeTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput) Elem() AlertmanagerSpecContainersStartupProbeTcpSocketOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersStartupProbeTcpSocket) AlertmanagerSpecContainersStartupProbeTcpSocket {
		return *v
	}).(AlertmanagerSpecContainersStartupProbeTcpSocketOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o AlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersStartupProbeTcpSocket) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput) Port() AlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersStartupProbeTcpSocket) *AlertmanagerSpecContainersStartupProbeTcpSocketPort {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(AlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutput)
}

type AlertmanagerSpecContainersStartupProbeTcpSocketPort struct {
}

// AlertmanagerSpecContainersStartupProbeTcpSocketPortInput is an input type that accepts AlertmanagerSpecContainersStartupProbeTcpSocketPortArgs and AlertmanagerSpecContainersStartupProbeTcpSocketPortOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersStartupProbeTcpSocketPortInput` via:
//
//          AlertmanagerSpecContainersStartupProbeTcpSocketPortArgs{...}
type AlertmanagerSpecContainersStartupProbeTcpSocketPortInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersStartupProbeTcpSocketPortOutput() AlertmanagerSpecContainersStartupProbeTcpSocketPortOutput
	ToAlertmanagerSpecContainersStartupProbeTcpSocketPortOutputWithContext(context.Context) AlertmanagerSpecContainersStartupProbeTcpSocketPortOutput
}

type AlertmanagerSpecContainersStartupProbeTcpSocketPortArgs struct {
}

func (AlertmanagerSpecContainersStartupProbeTcpSocketPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersStartupProbeTcpSocketPort)(nil)).Elem()
}

func (i AlertmanagerSpecContainersStartupProbeTcpSocketPortArgs) ToAlertmanagerSpecContainersStartupProbeTcpSocketPortOutput() AlertmanagerSpecContainersStartupProbeTcpSocketPortOutput {
	return i.ToAlertmanagerSpecContainersStartupProbeTcpSocketPortOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersStartupProbeTcpSocketPortArgs) ToAlertmanagerSpecContainersStartupProbeTcpSocketPortOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeTcpSocketPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersStartupProbeTcpSocketPortOutput)
}

func (i AlertmanagerSpecContainersStartupProbeTcpSocketPortArgs) ToAlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutput() AlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutput {
	return i.ToAlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersStartupProbeTcpSocketPortArgs) ToAlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersStartupProbeTcpSocketPortOutput).ToAlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutputWithContext(ctx)
}

// AlertmanagerSpecContainersStartupProbeTcpSocketPortPtrInput is an input type that accepts AlertmanagerSpecContainersStartupProbeTcpSocketPortArgs, AlertmanagerSpecContainersStartupProbeTcpSocketPortPtr and AlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersStartupProbeTcpSocketPortPtrInput` via:
//
//          AlertmanagerSpecContainersStartupProbeTcpSocketPortArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecContainersStartupProbeTcpSocketPortPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutput() AlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutput
	ToAlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutputWithContext(context.Context) AlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutput
}

type alertmanagerSpecContainersStartupProbeTcpSocketPortPtrType AlertmanagerSpecContainersStartupProbeTcpSocketPortArgs

func AlertmanagerSpecContainersStartupProbeTcpSocketPortPtr(v *AlertmanagerSpecContainersStartupProbeTcpSocketPortArgs) AlertmanagerSpecContainersStartupProbeTcpSocketPortPtrInput {
	return (*alertmanagerSpecContainersStartupProbeTcpSocketPortPtrType)(v)
}

func (*alertmanagerSpecContainersStartupProbeTcpSocketPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersStartupProbeTcpSocketPort)(nil)).Elem()
}

func (i *alertmanagerSpecContainersStartupProbeTcpSocketPortPtrType) ToAlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutput() AlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutput {
	return i.ToAlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecContainersStartupProbeTcpSocketPortPtrType) ToAlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutput)
}

type AlertmanagerSpecContainersStartupProbeTcpSocketPortOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersStartupProbeTcpSocketPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersStartupProbeTcpSocketPort)(nil)).Elem()
}

func (o AlertmanagerSpecContainersStartupProbeTcpSocketPortOutput) ToAlertmanagerSpecContainersStartupProbeTcpSocketPortOutput() AlertmanagerSpecContainersStartupProbeTcpSocketPortOutput {
	return o
}

func (o AlertmanagerSpecContainersStartupProbeTcpSocketPortOutput) ToAlertmanagerSpecContainersStartupProbeTcpSocketPortOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeTcpSocketPortOutput {
	return o
}

func (o AlertmanagerSpecContainersStartupProbeTcpSocketPortOutput) ToAlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutput() AlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutput {
	return o.ToAlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecContainersStartupProbeTcpSocketPortOutput) ToAlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersStartupProbeTcpSocketPort) *AlertmanagerSpecContainersStartupProbeTcpSocketPort {
		return &v
	}).(AlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutput)
}

type AlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecContainersStartupProbeTcpSocketPort)(nil)).Elem()
}

func (o AlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutput) ToAlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutput() AlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutput) ToAlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutput {
	return o
}

func (o AlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutput) Elem() AlertmanagerSpecContainersStartupProbeTcpSocketPortOutput {
	return o.ApplyT(func(v *AlertmanagerSpecContainersStartupProbeTcpSocketPort) AlertmanagerSpecContainersStartupProbeTcpSocketPort {
		return *v
	}).(AlertmanagerSpecContainersStartupProbeTcpSocketPortOutput)
}

// volumeDevice describes a mapping of a raw block device within a container.
type AlertmanagerSpecContainersVolumeDevices struct {
	// devicePath is the path inside of the container that the device will be mapped to.
	DevicePath string `pulumi:"devicePath"`
	// name must match the name of a persistentVolumeClaim in the pod
	Name string `pulumi:"name"`
}

// AlertmanagerSpecContainersVolumeDevicesInput is an input type that accepts AlertmanagerSpecContainersVolumeDevicesArgs and AlertmanagerSpecContainersVolumeDevicesOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersVolumeDevicesInput` via:
//
//          AlertmanagerSpecContainersVolumeDevicesArgs{...}
type AlertmanagerSpecContainersVolumeDevicesInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersVolumeDevicesOutput() AlertmanagerSpecContainersVolumeDevicesOutput
	ToAlertmanagerSpecContainersVolumeDevicesOutputWithContext(context.Context) AlertmanagerSpecContainersVolumeDevicesOutput
}

// volumeDevice describes a mapping of a raw block device within a container.
type AlertmanagerSpecContainersVolumeDevicesArgs struct {
	// devicePath is the path inside of the container that the device will be mapped to.
	DevicePath pulumi.StringInput `pulumi:"devicePath"`
	// name must match the name of a persistentVolumeClaim in the pod
	Name pulumi.StringInput `pulumi:"name"`
}

func (AlertmanagerSpecContainersVolumeDevicesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersVolumeDevices)(nil)).Elem()
}

func (i AlertmanagerSpecContainersVolumeDevicesArgs) ToAlertmanagerSpecContainersVolumeDevicesOutput() AlertmanagerSpecContainersVolumeDevicesOutput {
	return i.ToAlertmanagerSpecContainersVolumeDevicesOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersVolumeDevicesArgs) ToAlertmanagerSpecContainersVolumeDevicesOutputWithContext(ctx context.Context) AlertmanagerSpecContainersVolumeDevicesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersVolumeDevicesOutput)
}

// AlertmanagerSpecContainersVolumeDevicesArrayInput is an input type that accepts AlertmanagerSpecContainersVolumeDevicesArray and AlertmanagerSpecContainersVolumeDevicesArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersVolumeDevicesArrayInput` via:
//
//          AlertmanagerSpecContainersVolumeDevicesArray{ AlertmanagerSpecContainersVolumeDevicesArgs{...} }
type AlertmanagerSpecContainersVolumeDevicesArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersVolumeDevicesArrayOutput() AlertmanagerSpecContainersVolumeDevicesArrayOutput
	ToAlertmanagerSpecContainersVolumeDevicesArrayOutputWithContext(context.Context) AlertmanagerSpecContainersVolumeDevicesArrayOutput
}

type AlertmanagerSpecContainersVolumeDevicesArray []AlertmanagerSpecContainersVolumeDevicesInput

func (AlertmanagerSpecContainersVolumeDevicesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecContainersVolumeDevices)(nil)).Elem()
}

func (i AlertmanagerSpecContainersVolumeDevicesArray) ToAlertmanagerSpecContainersVolumeDevicesArrayOutput() AlertmanagerSpecContainersVolumeDevicesArrayOutput {
	return i.ToAlertmanagerSpecContainersVolumeDevicesArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersVolumeDevicesArray) ToAlertmanagerSpecContainersVolumeDevicesArrayOutputWithContext(ctx context.Context) AlertmanagerSpecContainersVolumeDevicesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersVolumeDevicesArrayOutput)
}

// volumeDevice describes a mapping of a raw block device within a container.
type AlertmanagerSpecContainersVolumeDevicesOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersVolumeDevicesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersVolumeDevices)(nil)).Elem()
}

func (o AlertmanagerSpecContainersVolumeDevicesOutput) ToAlertmanagerSpecContainersVolumeDevicesOutput() AlertmanagerSpecContainersVolumeDevicesOutput {
	return o
}

func (o AlertmanagerSpecContainersVolumeDevicesOutput) ToAlertmanagerSpecContainersVolumeDevicesOutputWithContext(ctx context.Context) AlertmanagerSpecContainersVolumeDevicesOutput {
	return o
}

// devicePath is the path inside of the container that the device will be mapped to.
func (o AlertmanagerSpecContainersVolumeDevicesOutput) DevicePath() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersVolumeDevices) string { return v.DevicePath }).(pulumi.StringOutput)
}

// name must match the name of a persistentVolumeClaim in the pod
func (o AlertmanagerSpecContainersVolumeDevicesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersVolumeDevices) string { return v.Name }).(pulumi.StringOutput)
}

type AlertmanagerSpecContainersVolumeDevicesArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersVolumeDevicesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecContainersVolumeDevices)(nil)).Elem()
}

func (o AlertmanagerSpecContainersVolumeDevicesArrayOutput) ToAlertmanagerSpecContainersVolumeDevicesArrayOutput() AlertmanagerSpecContainersVolumeDevicesArrayOutput {
	return o
}

func (o AlertmanagerSpecContainersVolumeDevicesArrayOutput) ToAlertmanagerSpecContainersVolumeDevicesArrayOutputWithContext(ctx context.Context) AlertmanagerSpecContainersVolumeDevicesArrayOutput {
	return o
}

func (o AlertmanagerSpecContainersVolumeDevicesArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecContainersVolumeDevicesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecContainersVolumeDevices {
		return vs[0].([]AlertmanagerSpecContainersVolumeDevices)[vs[1].(int)]
	}).(AlertmanagerSpecContainersVolumeDevicesOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type AlertmanagerSpecContainersVolumeMounts struct {
	// Path within the container at which the volume should be mounted.  Must not contain ':'.
	MountPath string `pulumi:"mountPath"`
	// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
	MountPropagation *string `pulumi:"mountPropagation"`
	// This must match the Name of a Volume.
	Name string `pulumi:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
	ReadOnly *bool `pulumi:"readOnly"`
	// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath *string `pulumi:"subPath"`
	// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr *string `pulumi:"subPathExpr"`
}

// AlertmanagerSpecContainersVolumeMountsInput is an input type that accepts AlertmanagerSpecContainersVolumeMountsArgs and AlertmanagerSpecContainersVolumeMountsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersVolumeMountsInput` via:
//
//          AlertmanagerSpecContainersVolumeMountsArgs{...}
type AlertmanagerSpecContainersVolumeMountsInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersVolumeMountsOutput() AlertmanagerSpecContainersVolumeMountsOutput
	ToAlertmanagerSpecContainersVolumeMountsOutputWithContext(context.Context) AlertmanagerSpecContainersVolumeMountsOutput
}

// VolumeMount describes a mounting of a Volume within a container.
type AlertmanagerSpecContainersVolumeMountsArgs struct {
	// Path within the container at which the volume should be mounted.  Must not contain ':'.
	MountPath pulumi.StringInput `pulumi:"mountPath"`
	// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
	MountPropagation pulumi.StringPtrInput `pulumi:"mountPropagation"`
	// This must match the Name of a Volume.
	Name pulumi.StringInput `pulumi:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath pulumi.StringPtrInput `pulumi:"subPath"`
	// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr pulumi.StringPtrInput `pulumi:"subPathExpr"`
}

func (AlertmanagerSpecContainersVolumeMountsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersVolumeMounts)(nil)).Elem()
}

func (i AlertmanagerSpecContainersVolumeMountsArgs) ToAlertmanagerSpecContainersVolumeMountsOutput() AlertmanagerSpecContainersVolumeMountsOutput {
	return i.ToAlertmanagerSpecContainersVolumeMountsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersVolumeMountsArgs) ToAlertmanagerSpecContainersVolumeMountsOutputWithContext(ctx context.Context) AlertmanagerSpecContainersVolumeMountsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersVolumeMountsOutput)
}

// AlertmanagerSpecContainersVolumeMountsArrayInput is an input type that accepts AlertmanagerSpecContainersVolumeMountsArray and AlertmanagerSpecContainersVolumeMountsArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecContainersVolumeMountsArrayInput` via:
//
//          AlertmanagerSpecContainersVolumeMountsArray{ AlertmanagerSpecContainersVolumeMountsArgs{...} }
type AlertmanagerSpecContainersVolumeMountsArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecContainersVolumeMountsArrayOutput() AlertmanagerSpecContainersVolumeMountsArrayOutput
	ToAlertmanagerSpecContainersVolumeMountsArrayOutputWithContext(context.Context) AlertmanagerSpecContainersVolumeMountsArrayOutput
}

type AlertmanagerSpecContainersVolumeMountsArray []AlertmanagerSpecContainersVolumeMountsInput

func (AlertmanagerSpecContainersVolumeMountsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecContainersVolumeMounts)(nil)).Elem()
}

func (i AlertmanagerSpecContainersVolumeMountsArray) ToAlertmanagerSpecContainersVolumeMountsArrayOutput() AlertmanagerSpecContainersVolumeMountsArrayOutput {
	return i.ToAlertmanagerSpecContainersVolumeMountsArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecContainersVolumeMountsArray) ToAlertmanagerSpecContainersVolumeMountsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecContainersVolumeMountsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecContainersVolumeMountsArrayOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type AlertmanagerSpecContainersVolumeMountsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersVolumeMountsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecContainersVolumeMounts)(nil)).Elem()
}

func (o AlertmanagerSpecContainersVolumeMountsOutput) ToAlertmanagerSpecContainersVolumeMountsOutput() AlertmanagerSpecContainersVolumeMountsOutput {
	return o
}

func (o AlertmanagerSpecContainersVolumeMountsOutput) ToAlertmanagerSpecContainersVolumeMountsOutputWithContext(ctx context.Context) AlertmanagerSpecContainersVolumeMountsOutput {
	return o
}

// Path within the container at which the volume should be mounted.  Must not contain ':'.
func (o AlertmanagerSpecContainersVolumeMountsOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersVolumeMounts) string { return v.MountPath }).(pulumi.StringOutput)
}

// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
func (o AlertmanagerSpecContainersVolumeMountsOutput) MountPropagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersVolumeMounts) *string { return v.MountPropagation }).(pulumi.StringPtrOutput)
}

// This must match the Name of a Volume.
func (o AlertmanagerSpecContainersVolumeMountsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersVolumeMounts) string { return v.Name }).(pulumi.StringOutput)
}

// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
func (o AlertmanagerSpecContainersVolumeMountsOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersVolumeMounts) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
func (o AlertmanagerSpecContainersVolumeMountsOutput) SubPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersVolumeMounts) *string { return v.SubPath }).(pulumi.StringPtrOutput)
}

// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
func (o AlertmanagerSpecContainersVolumeMountsOutput) SubPathExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecContainersVolumeMounts) *string { return v.SubPathExpr }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecContainersVolumeMountsArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecContainersVolumeMountsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecContainersVolumeMounts)(nil)).Elem()
}

func (o AlertmanagerSpecContainersVolumeMountsArrayOutput) ToAlertmanagerSpecContainersVolumeMountsArrayOutput() AlertmanagerSpecContainersVolumeMountsArrayOutput {
	return o
}

func (o AlertmanagerSpecContainersVolumeMountsArrayOutput) ToAlertmanagerSpecContainersVolumeMountsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecContainersVolumeMountsArrayOutput {
	return o
}

func (o AlertmanagerSpecContainersVolumeMountsArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecContainersVolumeMountsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecContainersVolumeMounts {
		return vs[0].([]AlertmanagerSpecContainersVolumeMounts)[vs[1].(int)]
	}).(AlertmanagerSpecContainersVolumeMountsOutput)
}

// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type AlertmanagerSpecImagePullSecrets struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
}

// AlertmanagerSpecImagePullSecretsInput is an input type that accepts AlertmanagerSpecImagePullSecretsArgs and AlertmanagerSpecImagePullSecretsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecImagePullSecretsInput` via:
//
//          AlertmanagerSpecImagePullSecretsArgs{...}
type AlertmanagerSpecImagePullSecretsInput interface {
	pulumi.Input

	ToAlertmanagerSpecImagePullSecretsOutput() AlertmanagerSpecImagePullSecretsOutput
	ToAlertmanagerSpecImagePullSecretsOutputWithContext(context.Context) AlertmanagerSpecImagePullSecretsOutput
}

// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type AlertmanagerSpecImagePullSecretsArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (AlertmanagerSpecImagePullSecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecImagePullSecrets)(nil)).Elem()
}

func (i AlertmanagerSpecImagePullSecretsArgs) ToAlertmanagerSpecImagePullSecretsOutput() AlertmanagerSpecImagePullSecretsOutput {
	return i.ToAlertmanagerSpecImagePullSecretsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecImagePullSecretsArgs) ToAlertmanagerSpecImagePullSecretsOutputWithContext(ctx context.Context) AlertmanagerSpecImagePullSecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecImagePullSecretsOutput)
}

// AlertmanagerSpecImagePullSecretsArrayInput is an input type that accepts AlertmanagerSpecImagePullSecretsArray and AlertmanagerSpecImagePullSecretsArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecImagePullSecretsArrayInput` via:
//
//          AlertmanagerSpecImagePullSecretsArray{ AlertmanagerSpecImagePullSecretsArgs{...} }
type AlertmanagerSpecImagePullSecretsArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecImagePullSecretsArrayOutput() AlertmanagerSpecImagePullSecretsArrayOutput
	ToAlertmanagerSpecImagePullSecretsArrayOutputWithContext(context.Context) AlertmanagerSpecImagePullSecretsArrayOutput
}

type AlertmanagerSpecImagePullSecretsArray []AlertmanagerSpecImagePullSecretsInput

func (AlertmanagerSpecImagePullSecretsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecImagePullSecrets)(nil)).Elem()
}

func (i AlertmanagerSpecImagePullSecretsArray) ToAlertmanagerSpecImagePullSecretsArrayOutput() AlertmanagerSpecImagePullSecretsArrayOutput {
	return i.ToAlertmanagerSpecImagePullSecretsArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecImagePullSecretsArray) ToAlertmanagerSpecImagePullSecretsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecImagePullSecretsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecImagePullSecretsArrayOutput)
}

// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type AlertmanagerSpecImagePullSecretsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecImagePullSecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecImagePullSecrets)(nil)).Elem()
}

func (o AlertmanagerSpecImagePullSecretsOutput) ToAlertmanagerSpecImagePullSecretsOutput() AlertmanagerSpecImagePullSecretsOutput {
	return o
}

func (o AlertmanagerSpecImagePullSecretsOutput) ToAlertmanagerSpecImagePullSecretsOutputWithContext(ctx context.Context) AlertmanagerSpecImagePullSecretsOutput {
	return o
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecImagePullSecretsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecImagePullSecrets) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecImagePullSecretsArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecImagePullSecretsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecImagePullSecrets)(nil)).Elem()
}

func (o AlertmanagerSpecImagePullSecretsArrayOutput) ToAlertmanagerSpecImagePullSecretsArrayOutput() AlertmanagerSpecImagePullSecretsArrayOutput {
	return o
}

func (o AlertmanagerSpecImagePullSecretsArrayOutput) ToAlertmanagerSpecImagePullSecretsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecImagePullSecretsArrayOutput {
	return o
}

func (o AlertmanagerSpecImagePullSecretsArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecImagePullSecretsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecImagePullSecrets {
		return vs[0].([]AlertmanagerSpecImagePullSecrets)[vs[1].(int)]
	}).(AlertmanagerSpecImagePullSecretsOutput)
}

// A single application container that you want to run within a pod.
type AlertmanagerSpecInitContainers struct {
	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args []string `pulumi:"args"`
	// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command []string `pulumi:"command"`
	// List of environment variables to set in the container. Cannot be updated.
	Env []AlertmanagerSpecInitContainersEnv `pulumi:"env"`
	// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
	EnvFrom []AlertmanagerSpecInitContainersEnvFrom `pulumi:"envFrom"`
	// Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
	Image *string `pulumi:"image"`
	// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Actions that the management system should take in response to container lifecycle events. Cannot be updated.
	Lifecycle *AlertmanagerSpecInitContainersLifecycle `pulumi:"lifecycle"`
	// Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	LivenessProbe *AlertmanagerSpecInitContainersLivenessProbe `pulumi:"livenessProbe"`
	// Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
	Name string `pulumi:"name"`
	// List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
	Ports []AlertmanagerSpecInitContainersPorts `pulumi:"ports"`
	// Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	ReadinessProbe *AlertmanagerSpecInitContainersReadinessProbe `pulumi:"readinessProbe"`
	// Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Resources *AlertmanagerSpecInitContainersResources `pulumi:"resources"`
	// Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	SecurityContext *AlertmanagerSpecInitContainersSecurityContext `pulumi:"securityContext"`
	// StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	StartupProbe *AlertmanagerSpecInitContainersStartupProbe `pulumi:"startupProbe"`
	// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
	Stdin *bool `pulumi:"stdin"`
	// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
	StdinOnce *bool `pulumi:"stdinOnce"`
	// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
	TerminationMessagePath *string `pulumi:"terminationMessagePath"`
	// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy *string `pulumi:"terminationMessagePolicy"`
	// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
	Tty *bool `pulumi:"tty"`
	// volumeDevices is the list of block devices to be used by the container. This is a beta feature.
	VolumeDevices []AlertmanagerSpecInitContainersVolumeDevices `pulumi:"volumeDevices"`
	// Pod volumes to mount into the container's filesystem. Cannot be updated.
	VolumeMounts []AlertmanagerSpecInitContainersVolumeMounts `pulumi:"volumeMounts"`
	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
	WorkingDir *string `pulumi:"workingDir"`
}

// AlertmanagerSpecInitContainersInput is an input type that accepts AlertmanagerSpecInitContainersArgs and AlertmanagerSpecInitContainersOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersInput` via:
//
//          AlertmanagerSpecInitContainersArgs{...}
type AlertmanagerSpecInitContainersInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersOutput() AlertmanagerSpecInitContainersOutput
	ToAlertmanagerSpecInitContainersOutputWithContext(context.Context) AlertmanagerSpecInitContainersOutput
}

// A single application container that you want to run within a pod.
type AlertmanagerSpecInitContainersArgs struct {
	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command pulumi.StringArrayInput `pulumi:"command"`
	// List of environment variables to set in the container. Cannot be updated.
	Env AlertmanagerSpecInitContainersEnvArrayInput `pulumi:"env"`
	// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
	EnvFrom AlertmanagerSpecInitContainersEnvFromArrayInput `pulumi:"envFrom"`
	// Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Actions that the management system should take in response to container lifecycle events. Cannot be updated.
	Lifecycle AlertmanagerSpecInitContainersLifecyclePtrInput `pulumi:"lifecycle"`
	// Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	LivenessProbe AlertmanagerSpecInitContainersLivenessProbePtrInput `pulumi:"livenessProbe"`
	// Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
	Name pulumi.StringInput `pulumi:"name"`
	// List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
	Ports AlertmanagerSpecInitContainersPortsArrayInput `pulumi:"ports"`
	// Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	ReadinessProbe AlertmanagerSpecInitContainersReadinessProbePtrInput `pulumi:"readinessProbe"`
	// Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Resources AlertmanagerSpecInitContainersResourcesPtrInput `pulumi:"resources"`
	// Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	SecurityContext AlertmanagerSpecInitContainersSecurityContextPtrInput `pulumi:"securityContext"`
	// StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	StartupProbe AlertmanagerSpecInitContainersStartupProbePtrInput `pulumi:"startupProbe"`
	// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
	Stdin pulumi.BoolPtrInput `pulumi:"stdin"`
	// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
	StdinOnce pulumi.BoolPtrInput `pulumi:"stdinOnce"`
	// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
	TerminationMessagePath pulumi.StringPtrInput `pulumi:"terminationMessagePath"`
	// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy pulumi.StringPtrInput `pulumi:"terminationMessagePolicy"`
	// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
	Tty pulumi.BoolPtrInput `pulumi:"tty"`
	// volumeDevices is the list of block devices to be used by the container. This is a beta feature.
	VolumeDevices AlertmanagerSpecInitContainersVolumeDevicesArrayInput `pulumi:"volumeDevices"`
	// Pod volumes to mount into the container's filesystem. Cannot be updated.
	VolumeMounts AlertmanagerSpecInitContainersVolumeMountsArrayInput `pulumi:"volumeMounts"`
	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
	WorkingDir pulumi.StringPtrInput `pulumi:"workingDir"`
}

func (AlertmanagerSpecInitContainersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainers)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersArgs) ToAlertmanagerSpecInitContainersOutput() AlertmanagerSpecInitContainersOutput {
	return i.ToAlertmanagerSpecInitContainersOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersArgs) ToAlertmanagerSpecInitContainersOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersOutput)
}

// AlertmanagerSpecInitContainersArrayInput is an input type that accepts AlertmanagerSpecInitContainersArray and AlertmanagerSpecInitContainersArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersArrayInput` via:
//
//          AlertmanagerSpecInitContainersArray{ AlertmanagerSpecInitContainersArgs{...} }
type AlertmanagerSpecInitContainersArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersArrayOutput() AlertmanagerSpecInitContainersArrayOutput
	ToAlertmanagerSpecInitContainersArrayOutputWithContext(context.Context) AlertmanagerSpecInitContainersArrayOutput
}

type AlertmanagerSpecInitContainersArray []AlertmanagerSpecInitContainersInput

func (AlertmanagerSpecInitContainersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecInitContainers)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersArray) ToAlertmanagerSpecInitContainersArrayOutput() AlertmanagerSpecInitContainersArrayOutput {
	return i.ToAlertmanagerSpecInitContainersArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersArray) ToAlertmanagerSpecInitContainersArrayOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersArrayOutput)
}

// A single application container that you want to run within a pod.
type AlertmanagerSpecInitContainersOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainers)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersOutput) ToAlertmanagerSpecInitContainersOutput() AlertmanagerSpecInitContainersOutput {
	return o
}

func (o AlertmanagerSpecInitContainersOutput) ToAlertmanagerSpecInitContainersOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersOutput {
	return o
}

// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
func (o AlertmanagerSpecInitContainersOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainers) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
func (o AlertmanagerSpecInitContainersOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainers) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// List of environment variables to set in the container. Cannot be updated.
func (o AlertmanagerSpecInitContainersOutput) Env() AlertmanagerSpecInitContainersEnvArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainers) []AlertmanagerSpecInitContainersEnv { return v.Env }).(AlertmanagerSpecInitContainersEnvArrayOutput)
}

// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
func (o AlertmanagerSpecInitContainersOutput) EnvFrom() AlertmanagerSpecInitContainersEnvFromArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainers) []AlertmanagerSpecInitContainersEnvFrom { return v.EnvFrom }).(AlertmanagerSpecInitContainersEnvFromArrayOutput)
}

// Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
func (o AlertmanagerSpecInitContainersOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainers) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
func (o AlertmanagerSpecInitContainersOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainers) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Actions that the management system should take in response to container lifecycle events. Cannot be updated.
func (o AlertmanagerSpecInitContainersOutput) Lifecycle() AlertmanagerSpecInitContainersLifecyclePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainers) *AlertmanagerSpecInitContainersLifecycle { return v.Lifecycle }).(AlertmanagerSpecInitContainersLifecyclePtrOutput)
}

// Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecInitContainersOutput) LivenessProbe() AlertmanagerSpecInitContainersLivenessProbePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainers) *AlertmanagerSpecInitContainersLivenessProbe {
		return v.LivenessProbe
	}).(AlertmanagerSpecInitContainersLivenessProbePtrOutput)
}

// Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
func (o AlertmanagerSpecInitContainersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainers) string { return v.Name }).(pulumi.StringOutput)
}

// List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
func (o AlertmanagerSpecInitContainersOutput) Ports() AlertmanagerSpecInitContainersPortsArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainers) []AlertmanagerSpecInitContainersPorts { return v.Ports }).(AlertmanagerSpecInitContainersPortsArrayOutput)
}

// Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecInitContainersOutput) ReadinessProbe() AlertmanagerSpecInitContainersReadinessProbePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainers) *AlertmanagerSpecInitContainersReadinessProbe {
		return v.ReadinessProbe
	}).(AlertmanagerSpecInitContainersReadinessProbePtrOutput)
}

// Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o AlertmanagerSpecInitContainersOutput) Resources() AlertmanagerSpecInitContainersResourcesPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainers) *AlertmanagerSpecInitContainersResources { return v.Resources }).(AlertmanagerSpecInitContainersResourcesPtrOutput)
}

// Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
func (o AlertmanagerSpecInitContainersOutput) SecurityContext() AlertmanagerSpecInitContainersSecurityContextPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainers) *AlertmanagerSpecInitContainersSecurityContext {
		return v.SecurityContext
	}).(AlertmanagerSpecInitContainersSecurityContextPtrOutput)
}

// StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecInitContainersOutput) StartupProbe() AlertmanagerSpecInitContainersStartupProbePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainers) *AlertmanagerSpecInitContainersStartupProbe {
		return v.StartupProbe
	}).(AlertmanagerSpecInitContainersStartupProbePtrOutput)
}

// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
func (o AlertmanagerSpecInitContainersOutput) Stdin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainers) *bool { return v.Stdin }).(pulumi.BoolPtrOutput)
}

// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
func (o AlertmanagerSpecInitContainersOutput) StdinOnce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainers) *bool { return v.StdinOnce }).(pulumi.BoolPtrOutput)
}

// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
func (o AlertmanagerSpecInitContainersOutput) TerminationMessagePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainers) *string { return v.TerminationMessagePath }).(pulumi.StringPtrOutput)
}

// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
func (o AlertmanagerSpecInitContainersOutput) TerminationMessagePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainers) *string { return v.TerminationMessagePolicy }).(pulumi.StringPtrOutput)
}

// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
func (o AlertmanagerSpecInitContainersOutput) Tty() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainers) *bool { return v.Tty }).(pulumi.BoolPtrOutput)
}

// volumeDevices is the list of block devices to be used by the container. This is a beta feature.
func (o AlertmanagerSpecInitContainersOutput) VolumeDevices() AlertmanagerSpecInitContainersVolumeDevicesArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainers) []AlertmanagerSpecInitContainersVolumeDevices {
		return v.VolumeDevices
	}).(AlertmanagerSpecInitContainersVolumeDevicesArrayOutput)
}

// Pod volumes to mount into the container's filesystem. Cannot be updated.
func (o AlertmanagerSpecInitContainersOutput) VolumeMounts() AlertmanagerSpecInitContainersVolumeMountsArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainers) []AlertmanagerSpecInitContainersVolumeMounts {
		return v.VolumeMounts
	}).(AlertmanagerSpecInitContainersVolumeMountsArrayOutput)
}

// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
func (o AlertmanagerSpecInitContainersOutput) WorkingDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainers) *string { return v.WorkingDir }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecInitContainersArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecInitContainers)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersArrayOutput) ToAlertmanagerSpecInitContainersArrayOutput() AlertmanagerSpecInitContainersArrayOutput {
	return o
}

func (o AlertmanagerSpecInitContainersArrayOutput) ToAlertmanagerSpecInitContainersArrayOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersArrayOutput {
	return o
}

func (o AlertmanagerSpecInitContainersArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecInitContainersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecInitContainers {
		return vs[0].([]AlertmanagerSpecInitContainers)[vs[1].(int)]
	}).(AlertmanagerSpecInitContainersOutput)
}

// EnvVar represents an environment variable present in a Container.
type AlertmanagerSpecInitContainersEnv struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *AlertmanagerSpecInitContainersEnvValueFrom `pulumi:"valueFrom"`
}

// AlertmanagerSpecInitContainersEnvInput is an input type that accepts AlertmanagerSpecInitContainersEnvArgs and AlertmanagerSpecInitContainersEnvOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersEnvInput` via:
//
//          AlertmanagerSpecInitContainersEnvArgs{...}
type AlertmanagerSpecInitContainersEnvInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersEnvOutput() AlertmanagerSpecInitContainersEnvOutput
	ToAlertmanagerSpecInitContainersEnvOutputWithContext(context.Context) AlertmanagerSpecInitContainersEnvOutput
}

// EnvVar represents an environment variable present in a Container.
type AlertmanagerSpecInitContainersEnvArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom AlertmanagerSpecInitContainersEnvValueFromPtrInput `pulumi:"valueFrom"`
}

func (AlertmanagerSpecInitContainersEnvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersEnv)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersEnvArgs) ToAlertmanagerSpecInitContainersEnvOutput() AlertmanagerSpecInitContainersEnvOutput {
	return i.ToAlertmanagerSpecInitContainersEnvOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersEnvArgs) ToAlertmanagerSpecInitContainersEnvOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersEnvOutput)
}

// AlertmanagerSpecInitContainersEnvArrayInput is an input type that accepts AlertmanagerSpecInitContainersEnvArray and AlertmanagerSpecInitContainersEnvArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersEnvArrayInput` via:
//
//          AlertmanagerSpecInitContainersEnvArray{ AlertmanagerSpecInitContainersEnvArgs{...} }
type AlertmanagerSpecInitContainersEnvArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersEnvArrayOutput() AlertmanagerSpecInitContainersEnvArrayOutput
	ToAlertmanagerSpecInitContainersEnvArrayOutputWithContext(context.Context) AlertmanagerSpecInitContainersEnvArrayOutput
}

type AlertmanagerSpecInitContainersEnvArray []AlertmanagerSpecInitContainersEnvInput

func (AlertmanagerSpecInitContainersEnvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecInitContainersEnv)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersEnvArray) ToAlertmanagerSpecInitContainersEnvArrayOutput() AlertmanagerSpecInitContainersEnvArrayOutput {
	return i.ToAlertmanagerSpecInitContainersEnvArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersEnvArray) ToAlertmanagerSpecInitContainersEnvArrayOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersEnvArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type AlertmanagerSpecInitContainersEnvOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersEnvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersEnv)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersEnvOutput) ToAlertmanagerSpecInitContainersEnvOutput() AlertmanagerSpecInitContainersEnvOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvOutput) ToAlertmanagerSpecInitContainersEnvOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o AlertmanagerSpecInitContainersEnvOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnv) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o AlertmanagerSpecInitContainersEnvOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnv) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o AlertmanagerSpecInitContainersEnvOutput) ValueFrom() AlertmanagerSpecInitContainersEnvValueFromPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnv) *AlertmanagerSpecInitContainersEnvValueFrom {
		return v.ValueFrom
	}).(AlertmanagerSpecInitContainersEnvValueFromPtrOutput)
}

type AlertmanagerSpecInitContainersEnvArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersEnvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecInitContainersEnv)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersEnvArrayOutput) ToAlertmanagerSpecInitContainersEnvArrayOutput() AlertmanagerSpecInitContainersEnvArrayOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvArrayOutput) ToAlertmanagerSpecInitContainersEnvArrayOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvArrayOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecInitContainersEnvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecInitContainersEnv {
		return vs[0].([]AlertmanagerSpecInitContainersEnv)[vs[1].(int)]
	}).(AlertmanagerSpecInitContainersEnvOutput)
}

// EnvFromSource represents the source of a set of ConfigMaps
type AlertmanagerSpecInitContainersEnvFrom struct {
	// The ConfigMap to select from
	ConfigMapRef *AlertmanagerSpecInitContainersEnvFromConfigMapRef `pulumi:"configMapRef"`
	// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
	Prefix *string `pulumi:"prefix"`
	// The Secret to select from
	SecretRef *AlertmanagerSpecInitContainersEnvFromSecretRef `pulumi:"secretRef"`
}

// AlertmanagerSpecInitContainersEnvFromInput is an input type that accepts AlertmanagerSpecInitContainersEnvFromArgs and AlertmanagerSpecInitContainersEnvFromOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersEnvFromInput` via:
//
//          AlertmanagerSpecInitContainersEnvFromArgs{...}
type AlertmanagerSpecInitContainersEnvFromInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersEnvFromOutput() AlertmanagerSpecInitContainersEnvFromOutput
	ToAlertmanagerSpecInitContainersEnvFromOutputWithContext(context.Context) AlertmanagerSpecInitContainersEnvFromOutput
}

// EnvFromSource represents the source of a set of ConfigMaps
type AlertmanagerSpecInitContainersEnvFromArgs struct {
	// The ConfigMap to select from
	ConfigMapRef AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrInput `pulumi:"configMapRef"`
	// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// The Secret to select from
	SecretRef AlertmanagerSpecInitContainersEnvFromSecretRefPtrInput `pulumi:"secretRef"`
}

func (AlertmanagerSpecInitContainersEnvFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersEnvFrom)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersEnvFromArgs) ToAlertmanagerSpecInitContainersEnvFromOutput() AlertmanagerSpecInitContainersEnvFromOutput {
	return i.ToAlertmanagerSpecInitContainersEnvFromOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersEnvFromArgs) ToAlertmanagerSpecInitContainersEnvFromOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersEnvFromOutput)
}

// AlertmanagerSpecInitContainersEnvFromArrayInput is an input type that accepts AlertmanagerSpecInitContainersEnvFromArray and AlertmanagerSpecInitContainersEnvFromArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersEnvFromArrayInput` via:
//
//          AlertmanagerSpecInitContainersEnvFromArray{ AlertmanagerSpecInitContainersEnvFromArgs{...} }
type AlertmanagerSpecInitContainersEnvFromArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersEnvFromArrayOutput() AlertmanagerSpecInitContainersEnvFromArrayOutput
	ToAlertmanagerSpecInitContainersEnvFromArrayOutputWithContext(context.Context) AlertmanagerSpecInitContainersEnvFromArrayOutput
}

type AlertmanagerSpecInitContainersEnvFromArray []AlertmanagerSpecInitContainersEnvFromInput

func (AlertmanagerSpecInitContainersEnvFromArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecInitContainersEnvFrom)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersEnvFromArray) ToAlertmanagerSpecInitContainersEnvFromArrayOutput() AlertmanagerSpecInitContainersEnvFromArrayOutput {
	return i.ToAlertmanagerSpecInitContainersEnvFromArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersEnvFromArray) ToAlertmanagerSpecInitContainersEnvFromArrayOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvFromArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersEnvFromArrayOutput)
}

// EnvFromSource represents the source of a set of ConfigMaps
type AlertmanagerSpecInitContainersEnvFromOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersEnvFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersEnvFrom)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersEnvFromOutput) ToAlertmanagerSpecInitContainersEnvFromOutput() AlertmanagerSpecInitContainersEnvFromOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvFromOutput) ToAlertmanagerSpecInitContainersEnvFromOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvFromOutput {
	return o
}

// The ConfigMap to select from
func (o AlertmanagerSpecInitContainersEnvFromOutput) ConfigMapRef() AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvFrom) *AlertmanagerSpecInitContainersEnvFromConfigMapRef {
		return v.ConfigMapRef
	}).(AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput)
}

// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
func (o AlertmanagerSpecInitContainersEnvFromOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvFrom) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The Secret to select from
func (o AlertmanagerSpecInitContainersEnvFromOutput) SecretRef() AlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvFrom) *AlertmanagerSpecInitContainersEnvFromSecretRef {
		return v.SecretRef
	}).(AlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput)
}

type AlertmanagerSpecInitContainersEnvFromArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersEnvFromArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecInitContainersEnvFrom)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersEnvFromArrayOutput) ToAlertmanagerSpecInitContainersEnvFromArrayOutput() AlertmanagerSpecInitContainersEnvFromArrayOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvFromArrayOutput) ToAlertmanagerSpecInitContainersEnvFromArrayOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvFromArrayOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvFromArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecInitContainersEnvFromOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecInitContainersEnvFrom {
		return vs[0].([]AlertmanagerSpecInitContainersEnvFrom)[vs[1].(int)]
	}).(AlertmanagerSpecInitContainersEnvFromOutput)
}

// The ConfigMap to select from
type AlertmanagerSpecInitContainersEnvFromConfigMapRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap must be defined
	Optional *bool `pulumi:"optional"`
}

// AlertmanagerSpecInitContainersEnvFromConfigMapRefInput is an input type that accepts AlertmanagerSpecInitContainersEnvFromConfigMapRefArgs and AlertmanagerSpecInitContainersEnvFromConfigMapRefOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersEnvFromConfigMapRefInput` via:
//
//          AlertmanagerSpecInitContainersEnvFromConfigMapRefArgs{...}
type AlertmanagerSpecInitContainersEnvFromConfigMapRefInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersEnvFromConfigMapRefOutput() AlertmanagerSpecInitContainersEnvFromConfigMapRefOutput
	ToAlertmanagerSpecInitContainersEnvFromConfigMapRefOutputWithContext(context.Context) AlertmanagerSpecInitContainersEnvFromConfigMapRefOutput
}

// The ConfigMap to select from
type AlertmanagerSpecInitContainersEnvFromConfigMapRefArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (AlertmanagerSpecInitContainersEnvFromConfigMapRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersEnvFromConfigMapRef)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersEnvFromConfigMapRefArgs) ToAlertmanagerSpecInitContainersEnvFromConfigMapRefOutput() AlertmanagerSpecInitContainersEnvFromConfigMapRefOutput {
	return i.ToAlertmanagerSpecInitContainersEnvFromConfigMapRefOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersEnvFromConfigMapRefArgs) ToAlertmanagerSpecInitContainersEnvFromConfigMapRefOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvFromConfigMapRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersEnvFromConfigMapRefOutput)
}

func (i AlertmanagerSpecInitContainersEnvFromConfigMapRefArgs) ToAlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput() AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput {
	return i.ToAlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersEnvFromConfigMapRefArgs) ToAlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersEnvFromConfigMapRefOutput).ToAlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrInput is an input type that accepts AlertmanagerSpecInitContainersEnvFromConfigMapRefArgs, AlertmanagerSpecInitContainersEnvFromConfigMapRefPtr and AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrInput` via:
//
//          AlertmanagerSpecInitContainersEnvFromConfigMapRefArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput() AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput
	ToAlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput
}

type alertmanagerSpecInitContainersEnvFromConfigMapRefPtrType AlertmanagerSpecInitContainersEnvFromConfigMapRefArgs

func AlertmanagerSpecInitContainersEnvFromConfigMapRefPtr(v *AlertmanagerSpecInitContainersEnvFromConfigMapRefArgs) AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrInput {
	return (*alertmanagerSpecInitContainersEnvFromConfigMapRefPtrType)(v)
}

func (*alertmanagerSpecInitContainersEnvFromConfigMapRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersEnvFromConfigMapRef)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersEnvFromConfigMapRefPtrType) ToAlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput() AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput {
	return i.ToAlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersEnvFromConfigMapRefPtrType) ToAlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput)
}

// The ConfigMap to select from
type AlertmanagerSpecInitContainersEnvFromConfigMapRefOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersEnvFromConfigMapRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersEnvFromConfigMapRef)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersEnvFromConfigMapRefOutput) ToAlertmanagerSpecInitContainersEnvFromConfigMapRefOutput() AlertmanagerSpecInitContainersEnvFromConfigMapRefOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvFromConfigMapRefOutput) ToAlertmanagerSpecInitContainersEnvFromConfigMapRefOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvFromConfigMapRefOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvFromConfigMapRefOutput) ToAlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput() AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput {
	return o.ToAlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersEnvFromConfigMapRefOutput) ToAlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvFromConfigMapRef) *AlertmanagerSpecInitContainersEnvFromConfigMapRef {
		return &v
	}).(AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecInitContainersEnvFromConfigMapRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvFromConfigMapRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap must be defined
func (o AlertmanagerSpecInitContainersEnvFromConfigMapRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvFromConfigMapRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersEnvFromConfigMapRef)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput) ToAlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput() AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput) ToAlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput) Elem() AlertmanagerSpecInitContainersEnvFromConfigMapRefOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersEnvFromConfigMapRef) AlertmanagerSpecInitContainersEnvFromConfigMapRef {
		return *v
	}).(AlertmanagerSpecInitContainersEnvFromConfigMapRefOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersEnvFromConfigMapRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap must be defined
func (o AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersEnvFromConfigMapRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// The Secret to select from
type AlertmanagerSpecInitContainersEnvFromSecretRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret must be defined
	Optional *bool `pulumi:"optional"`
}

// AlertmanagerSpecInitContainersEnvFromSecretRefInput is an input type that accepts AlertmanagerSpecInitContainersEnvFromSecretRefArgs and AlertmanagerSpecInitContainersEnvFromSecretRefOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersEnvFromSecretRefInput` via:
//
//          AlertmanagerSpecInitContainersEnvFromSecretRefArgs{...}
type AlertmanagerSpecInitContainersEnvFromSecretRefInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersEnvFromSecretRefOutput() AlertmanagerSpecInitContainersEnvFromSecretRefOutput
	ToAlertmanagerSpecInitContainersEnvFromSecretRefOutputWithContext(context.Context) AlertmanagerSpecInitContainersEnvFromSecretRefOutput
}

// The Secret to select from
type AlertmanagerSpecInitContainersEnvFromSecretRefArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (AlertmanagerSpecInitContainersEnvFromSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersEnvFromSecretRef)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersEnvFromSecretRefArgs) ToAlertmanagerSpecInitContainersEnvFromSecretRefOutput() AlertmanagerSpecInitContainersEnvFromSecretRefOutput {
	return i.ToAlertmanagerSpecInitContainersEnvFromSecretRefOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersEnvFromSecretRefArgs) ToAlertmanagerSpecInitContainersEnvFromSecretRefOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvFromSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersEnvFromSecretRefOutput)
}

func (i AlertmanagerSpecInitContainersEnvFromSecretRefArgs) ToAlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput() AlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput {
	return i.ToAlertmanagerSpecInitContainersEnvFromSecretRefPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersEnvFromSecretRefArgs) ToAlertmanagerSpecInitContainersEnvFromSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersEnvFromSecretRefOutput).ToAlertmanagerSpecInitContainersEnvFromSecretRefPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersEnvFromSecretRefPtrInput is an input type that accepts AlertmanagerSpecInitContainersEnvFromSecretRefArgs, AlertmanagerSpecInitContainersEnvFromSecretRefPtr and AlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersEnvFromSecretRefPtrInput` via:
//
//          AlertmanagerSpecInitContainersEnvFromSecretRefArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersEnvFromSecretRefPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput() AlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput
	ToAlertmanagerSpecInitContainersEnvFromSecretRefPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput
}

type alertmanagerSpecInitContainersEnvFromSecretRefPtrType AlertmanagerSpecInitContainersEnvFromSecretRefArgs

func AlertmanagerSpecInitContainersEnvFromSecretRefPtr(v *AlertmanagerSpecInitContainersEnvFromSecretRefArgs) AlertmanagerSpecInitContainersEnvFromSecretRefPtrInput {
	return (*alertmanagerSpecInitContainersEnvFromSecretRefPtrType)(v)
}

func (*alertmanagerSpecInitContainersEnvFromSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersEnvFromSecretRef)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersEnvFromSecretRefPtrType) ToAlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput() AlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput {
	return i.ToAlertmanagerSpecInitContainersEnvFromSecretRefPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersEnvFromSecretRefPtrType) ToAlertmanagerSpecInitContainersEnvFromSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput)
}

// The Secret to select from
type AlertmanagerSpecInitContainersEnvFromSecretRefOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersEnvFromSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersEnvFromSecretRef)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersEnvFromSecretRefOutput) ToAlertmanagerSpecInitContainersEnvFromSecretRefOutput() AlertmanagerSpecInitContainersEnvFromSecretRefOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvFromSecretRefOutput) ToAlertmanagerSpecInitContainersEnvFromSecretRefOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvFromSecretRefOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvFromSecretRefOutput) ToAlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput() AlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput {
	return o.ToAlertmanagerSpecInitContainersEnvFromSecretRefPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersEnvFromSecretRefOutput) ToAlertmanagerSpecInitContainersEnvFromSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvFromSecretRef) *AlertmanagerSpecInitContainersEnvFromSecretRef {
		return &v
	}).(AlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecInitContainersEnvFromSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvFromSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret must be defined
func (o AlertmanagerSpecInitContainersEnvFromSecretRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvFromSecretRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type AlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersEnvFromSecretRef)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput) ToAlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput() AlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput) ToAlertmanagerSpecInitContainersEnvFromSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput) Elem() AlertmanagerSpecInitContainersEnvFromSecretRefOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersEnvFromSecretRef) AlertmanagerSpecInitContainersEnvFromSecretRef {
		return *v
	}).(AlertmanagerSpecInitContainersEnvFromSecretRefOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersEnvFromSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret must be defined
func (o AlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersEnvFromSecretRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type AlertmanagerSpecInitContainersEnvValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *AlertmanagerSpecInitContainersEnvValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *AlertmanagerSpecInitContainersEnvValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *AlertmanagerSpecInitContainersEnvValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// AlertmanagerSpecInitContainersEnvValueFromInput is an input type that accepts AlertmanagerSpecInitContainersEnvValueFromArgs and AlertmanagerSpecInitContainersEnvValueFromOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersEnvValueFromInput` via:
//
//          AlertmanagerSpecInitContainersEnvValueFromArgs{...}
type AlertmanagerSpecInitContainersEnvValueFromInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersEnvValueFromOutput() AlertmanagerSpecInitContainersEnvValueFromOutput
	ToAlertmanagerSpecInitContainersEnvValueFromOutputWithContext(context.Context) AlertmanagerSpecInitContainersEnvValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type AlertmanagerSpecInitContainersEnvValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (AlertmanagerSpecInitContainersEnvValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersEnvValueFrom)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersEnvValueFromArgs) ToAlertmanagerSpecInitContainersEnvValueFromOutput() AlertmanagerSpecInitContainersEnvValueFromOutput {
	return i.ToAlertmanagerSpecInitContainersEnvValueFromOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersEnvValueFromArgs) ToAlertmanagerSpecInitContainersEnvValueFromOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersEnvValueFromOutput)
}

func (i AlertmanagerSpecInitContainersEnvValueFromArgs) ToAlertmanagerSpecInitContainersEnvValueFromPtrOutput() AlertmanagerSpecInitContainersEnvValueFromPtrOutput {
	return i.ToAlertmanagerSpecInitContainersEnvValueFromPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersEnvValueFromArgs) ToAlertmanagerSpecInitContainersEnvValueFromPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersEnvValueFromOutput).ToAlertmanagerSpecInitContainersEnvValueFromPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersEnvValueFromPtrInput is an input type that accepts AlertmanagerSpecInitContainersEnvValueFromArgs, AlertmanagerSpecInitContainersEnvValueFromPtr and AlertmanagerSpecInitContainersEnvValueFromPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersEnvValueFromPtrInput` via:
//
//          AlertmanagerSpecInitContainersEnvValueFromArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersEnvValueFromPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersEnvValueFromPtrOutput() AlertmanagerSpecInitContainersEnvValueFromPtrOutput
	ToAlertmanagerSpecInitContainersEnvValueFromPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersEnvValueFromPtrOutput
}

type alertmanagerSpecInitContainersEnvValueFromPtrType AlertmanagerSpecInitContainersEnvValueFromArgs

func AlertmanagerSpecInitContainersEnvValueFromPtr(v *AlertmanagerSpecInitContainersEnvValueFromArgs) AlertmanagerSpecInitContainersEnvValueFromPtrInput {
	return (*alertmanagerSpecInitContainersEnvValueFromPtrType)(v)
}

func (*alertmanagerSpecInitContainersEnvValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersEnvValueFrom)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersEnvValueFromPtrType) ToAlertmanagerSpecInitContainersEnvValueFromPtrOutput() AlertmanagerSpecInitContainersEnvValueFromPtrOutput {
	return i.ToAlertmanagerSpecInitContainersEnvValueFromPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersEnvValueFromPtrType) ToAlertmanagerSpecInitContainersEnvValueFromPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersEnvValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type AlertmanagerSpecInitContainersEnvValueFromOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersEnvValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersEnvValueFrom)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersEnvValueFromOutput) ToAlertmanagerSpecInitContainersEnvValueFromOutput() AlertmanagerSpecInitContainersEnvValueFromOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvValueFromOutput) ToAlertmanagerSpecInitContainersEnvValueFromOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvValueFromOutput) ToAlertmanagerSpecInitContainersEnvValueFromPtrOutput() AlertmanagerSpecInitContainersEnvValueFromPtrOutput {
	return o.ToAlertmanagerSpecInitContainersEnvValueFromPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersEnvValueFromOutput) ToAlertmanagerSpecInitContainersEnvValueFromPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvValueFrom) *AlertmanagerSpecInitContainersEnvValueFrom {
		return &v
	}).(AlertmanagerSpecInitContainersEnvValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o AlertmanagerSpecInitContainersEnvValueFromOutput) ConfigMapKeyRef() AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvValueFrom) *AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o AlertmanagerSpecInitContainersEnvValueFromOutput) FieldRef() AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvValueFrom) *AlertmanagerSpecInitContainersEnvValueFromFieldRef {
		return v.FieldRef
	}).(AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o AlertmanagerSpecInitContainersEnvValueFromOutput) ResourceFieldRef() AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvValueFrom) *AlertmanagerSpecInitContainersEnvValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o AlertmanagerSpecInitContainersEnvValueFromOutput) SecretKeyRef() AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvValueFrom) *AlertmanagerSpecInitContainersEnvValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput)
}

type AlertmanagerSpecInitContainersEnvValueFromPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersEnvValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersEnvValueFrom)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersEnvValueFromPtrOutput) ToAlertmanagerSpecInitContainersEnvValueFromPtrOutput() AlertmanagerSpecInitContainersEnvValueFromPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvValueFromPtrOutput) ToAlertmanagerSpecInitContainersEnvValueFromPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvValueFromPtrOutput) Elem() AlertmanagerSpecInitContainersEnvValueFromOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersEnvValueFrom) AlertmanagerSpecInitContainersEnvValueFrom {
		return *v
	}).(AlertmanagerSpecInitContainersEnvValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o AlertmanagerSpecInitContainersEnvValueFromPtrOutput) ConfigMapKeyRef() AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersEnvValueFrom) *AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o AlertmanagerSpecInitContainersEnvValueFromPtrOutput) FieldRef() AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersEnvValueFrom) *AlertmanagerSpecInitContainersEnvValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o AlertmanagerSpecInitContainersEnvValueFromPtrOutput) ResourceFieldRef() AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersEnvValueFrom) *AlertmanagerSpecInitContainersEnvValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o AlertmanagerSpecInitContainersEnvValueFromPtrOutput) SecretKeyRef() AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersEnvValueFrom) *AlertmanagerSpecInitContainersEnvValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefInput is an input type that accepts AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefArgs and AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefInput` via:
//
//          AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefArgs{...}
type AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutput() AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutput
	ToAlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutputWithContext(context.Context) AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefArgs) ToAlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutput() AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutput {
	return i.ToAlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefArgs) ToAlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutput)
}

func (i AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefArgs) ToAlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput() AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput {
	return i.ToAlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefArgs) ToAlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutput).ToAlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrInput is an input type that accepts AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefArgs, AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtr and AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrInput` via:
//
//          AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput() AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput
	ToAlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput
}

type alertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrType AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefArgs

func AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtr(v *AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefArgs) AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrInput {
	return (*alertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrType)(v)
}

func (*alertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrType) ToAlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput() AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput {
	return i.ToAlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrType) ToAlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutput) ToAlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutput() AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutput) ToAlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutput) ToAlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput() AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ToAlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutput) ToAlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRef) *AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRef {
		return &v
	}).(AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput) ToAlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput() AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput) ToAlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput) Elem() AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRef) AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRef {
		return *v
	}).(AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type AlertmanagerSpecInitContainersEnvValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// AlertmanagerSpecInitContainersEnvValueFromFieldRefInput is an input type that accepts AlertmanagerSpecInitContainersEnvValueFromFieldRefArgs and AlertmanagerSpecInitContainersEnvValueFromFieldRefOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersEnvValueFromFieldRefInput` via:
//
//          AlertmanagerSpecInitContainersEnvValueFromFieldRefArgs{...}
type AlertmanagerSpecInitContainersEnvValueFromFieldRefInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersEnvValueFromFieldRefOutput() AlertmanagerSpecInitContainersEnvValueFromFieldRefOutput
	ToAlertmanagerSpecInitContainersEnvValueFromFieldRefOutputWithContext(context.Context) AlertmanagerSpecInitContainersEnvValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type AlertmanagerSpecInitContainersEnvValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (AlertmanagerSpecInitContainersEnvValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersEnvValueFromFieldRef)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersEnvValueFromFieldRefArgs) ToAlertmanagerSpecInitContainersEnvValueFromFieldRefOutput() AlertmanagerSpecInitContainersEnvValueFromFieldRefOutput {
	return i.ToAlertmanagerSpecInitContainersEnvValueFromFieldRefOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersEnvValueFromFieldRefArgs) ToAlertmanagerSpecInitContainersEnvValueFromFieldRefOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersEnvValueFromFieldRefOutput)
}

func (i AlertmanagerSpecInitContainersEnvValueFromFieldRefArgs) ToAlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput() AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput {
	return i.ToAlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersEnvValueFromFieldRefArgs) ToAlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersEnvValueFromFieldRefOutput).ToAlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrInput is an input type that accepts AlertmanagerSpecInitContainersEnvValueFromFieldRefArgs, AlertmanagerSpecInitContainersEnvValueFromFieldRefPtr and AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrInput` via:
//
//          AlertmanagerSpecInitContainersEnvValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput() AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput
	ToAlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput
}

type alertmanagerSpecInitContainersEnvValueFromFieldRefPtrType AlertmanagerSpecInitContainersEnvValueFromFieldRefArgs

func AlertmanagerSpecInitContainersEnvValueFromFieldRefPtr(v *AlertmanagerSpecInitContainersEnvValueFromFieldRefArgs) AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrInput {
	return (*alertmanagerSpecInitContainersEnvValueFromFieldRefPtrType)(v)
}

func (*alertmanagerSpecInitContainersEnvValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersEnvValueFromFieldRef)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersEnvValueFromFieldRefPtrType) ToAlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput() AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput {
	return i.ToAlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersEnvValueFromFieldRefPtrType) ToAlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type AlertmanagerSpecInitContainersEnvValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersEnvValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersEnvValueFromFieldRef)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersEnvValueFromFieldRefOutput) ToAlertmanagerSpecInitContainersEnvValueFromFieldRefOutput() AlertmanagerSpecInitContainersEnvValueFromFieldRefOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvValueFromFieldRefOutput) ToAlertmanagerSpecInitContainersEnvValueFromFieldRefOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromFieldRefOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvValueFromFieldRefOutput) ToAlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput() AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput {
	return o.ToAlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersEnvValueFromFieldRefOutput) ToAlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvValueFromFieldRef) *AlertmanagerSpecInitContainersEnvValueFromFieldRef {
		return &v
	}).(AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o AlertmanagerSpecInitContainersEnvValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o AlertmanagerSpecInitContainersEnvValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersEnvValueFromFieldRef)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput) ToAlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput() AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput) ToAlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput) Elem() AlertmanagerSpecInitContainersEnvValueFromFieldRefOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersEnvValueFromFieldRef) AlertmanagerSpecInitContainersEnvValueFromFieldRef {
		return *v
	}).(AlertmanagerSpecInitContainersEnvValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersEnvValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersEnvValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type AlertmanagerSpecInitContainersEnvValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *string `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefInput is an input type that accepts AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefArgs and AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefInput` via:
//
//          AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefArgs{...}
type AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutput() AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutput
	ToAlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutputWithContext(context.Context) AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.StringPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefArgs) ToAlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutput() AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutput {
	return i.ToAlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefArgs) ToAlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutput)
}

func (i AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefArgs) ToAlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput() AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput {
	return i.ToAlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefArgs) ToAlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutput).ToAlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrInput is an input type that accepts AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefArgs, AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtr and AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrInput` via:
//
//          AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput() AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput
	ToAlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput
}

type alertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrType AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefArgs

func AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtr(v *AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefArgs) AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrInput {
	return (*alertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrType)(v)
}

func (*alertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrType) ToAlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput() AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput {
	return i.ToAlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrType) ToAlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutput) ToAlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutput() AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutput) ToAlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutput) ToAlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput() AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput {
	return o.ToAlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutput) ToAlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvValueFromResourceFieldRef) *AlertmanagerSpecInitContainersEnvValueFromResourceFieldRef {
		return &v
	}).(AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvValueFromResourceFieldRef) *string { return v.Divisor }).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput) ToAlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput() AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput) ToAlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput) Elem() AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersEnvValueFromResourceFieldRef) AlertmanagerSpecInitContainersEnvValueFromResourceFieldRef {
		return *v
	}).(AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersEnvValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersEnvValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersEnvValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type AlertmanagerSpecInitContainersEnvValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefInput is an input type that accepts AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefArgs and AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefInput` via:
//
//          AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefArgs{...}
type AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutput() AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutput
	ToAlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutputWithContext(context.Context) AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefArgs) ToAlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutput() AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutput {
	return i.ToAlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefArgs) ToAlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutput)
}

func (i AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefArgs) ToAlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput() AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput {
	return i.ToAlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefArgs) ToAlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutput).ToAlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrInput is an input type that accepts AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefArgs, AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtr and AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrInput` via:
//
//          AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput() AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput
	ToAlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput
}

type alertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrType AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefArgs

func AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtr(v *AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefArgs) AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrInput {
	return (*alertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrType)(v)
}

func (*alertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrType) ToAlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput() AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput {
	return i.ToAlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrType) ToAlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutput) ToAlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutput() AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutput) ToAlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutput) ToAlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput() AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput {
	return o.ToAlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutput) ToAlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvValueFromSecretKeyRef) *AlertmanagerSpecInitContainersEnvValueFromSecretKeyRef {
		return &v
	}).(AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersEnvValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput) ToAlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput() AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput) ToAlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput) Elem() AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersEnvValueFromSecretKeyRef) AlertmanagerSpecInitContainersEnvValueFromSecretKeyRef {
		return *v
	}).(AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersEnvValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersEnvValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersEnvValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Actions that the management system should take in response to container lifecycle events. Cannot be updated.
type AlertmanagerSpecInitContainersLifecycle struct {
	// PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
	PostStart *AlertmanagerSpecInitContainersLifecyclePostStart `pulumi:"postStart"`
	// PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
	PreStop *AlertmanagerSpecInitContainersLifecyclePreStop `pulumi:"preStop"`
}

// AlertmanagerSpecInitContainersLifecycleInput is an input type that accepts AlertmanagerSpecInitContainersLifecycleArgs and AlertmanagerSpecInitContainersLifecycleOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecycleInput` via:
//
//          AlertmanagerSpecInitContainersLifecycleArgs{...}
type AlertmanagerSpecInitContainersLifecycleInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecycleOutput() AlertmanagerSpecInitContainersLifecycleOutput
	ToAlertmanagerSpecInitContainersLifecycleOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecycleOutput
}

// Actions that the management system should take in response to container lifecycle events. Cannot be updated.
type AlertmanagerSpecInitContainersLifecycleArgs struct {
	// PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
	PostStart AlertmanagerSpecInitContainersLifecyclePostStartPtrInput `pulumi:"postStart"`
	// PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
	PreStop AlertmanagerSpecInitContainersLifecyclePreStopPtrInput `pulumi:"preStop"`
}

func (AlertmanagerSpecInitContainersLifecycleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecycle)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersLifecycleArgs) ToAlertmanagerSpecInitContainersLifecycleOutput() AlertmanagerSpecInitContainersLifecycleOutput {
	return i.ToAlertmanagerSpecInitContainersLifecycleOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecycleArgs) ToAlertmanagerSpecInitContainersLifecycleOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecycleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecycleOutput)
}

func (i AlertmanagerSpecInitContainersLifecycleArgs) ToAlertmanagerSpecInitContainersLifecyclePtrOutput() AlertmanagerSpecInitContainersLifecyclePtrOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecycleArgs) ToAlertmanagerSpecInitContainersLifecyclePtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecycleOutput).ToAlertmanagerSpecInitContainersLifecyclePtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersLifecyclePtrInput is an input type that accepts AlertmanagerSpecInitContainersLifecycleArgs, AlertmanagerSpecInitContainersLifecyclePtr and AlertmanagerSpecInitContainersLifecyclePtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePtrInput` via:
//
//          AlertmanagerSpecInitContainersLifecycleArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersLifecyclePtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePtrOutput() AlertmanagerSpecInitContainersLifecyclePtrOutput
	ToAlertmanagerSpecInitContainersLifecyclePtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePtrOutput
}

type alertmanagerSpecInitContainersLifecyclePtrType AlertmanagerSpecInitContainersLifecycleArgs

func AlertmanagerSpecInitContainersLifecyclePtr(v *AlertmanagerSpecInitContainersLifecycleArgs) AlertmanagerSpecInitContainersLifecyclePtrInput {
	return (*alertmanagerSpecInitContainersLifecyclePtrType)(v)
}

func (*alertmanagerSpecInitContainersLifecyclePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLifecycle)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersLifecyclePtrType) ToAlertmanagerSpecInitContainersLifecyclePtrOutput() AlertmanagerSpecInitContainersLifecyclePtrOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersLifecyclePtrType) ToAlertmanagerSpecInitContainersLifecyclePtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePtrOutput)
}

// Actions that the management system should take in response to container lifecycle events. Cannot be updated.
type AlertmanagerSpecInitContainersLifecycleOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecycleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecycle)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecycleOutput) ToAlertmanagerSpecInitContainersLifecycleOutput() AlertmanagerSpecInitContainersLifecycleOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecycleOutput) ToAlertmanagerSpecInitContainersLifecycleOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecycleOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecycleOutput) ToAlertmanagerSpecInitContainersLifecyclePtrOutput() AlertmanagerSpecInitContainersLifecyclePtrOutput {
	return o.ToAlertmanagerSpecInitContainersLifecyclePtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersLifecycleOutput) ToAlertmanagerSpecInitContainersLifecyclePtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecycle) *AlertmanagerSpecInitContainersLifecycle {
		return &v
	}).(AlertmanagerSpecInitContainersLifecyclePtrOutput)
}

// PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
func (o AlertmanagerSpecInitContainersLifecycleOutput) PostStart() AlertmanagerSpecInitContainersLifecyclePostStartPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecycle) *AlertmanagerSpecInitContainersLifecyclePostStart {
		return v.PostStart
	}).(AlertmanagerSpecInitContainersLifecyclePostStartPtrOutput)
}

// PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
func (o AlertmanagerSpecInitContainersLifecycleOutput) PreStop() AlertmanagerSpecInitContainersLifecyclePreStopPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecycle) *AlertmanagerSpecInitContainersLifecyclePreStop {
		return v.PreStop
	}).(AlertmanagerSpecInitContainersLifecyclePreStopPtrOutput)
}

type AlertmanagerSpecInitContainersLifecyclePtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLifecycle)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePtrOutput) ToAlertmanagerSpecInitContainersLifecyclePtrOutput() AlertmanagerSpecInitContainersLifecyclePtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePtrOutput) ToAlertmanagerSpecInitContainersLifecyclePtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePtrOutput) Elem() AlertmanagerSpecInitContainersLifecycleOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecycle) AlertmanagerSpecInitContainersLifecycle { return *v }).(AlertmanagerSpecInitContainersLifecycleOutput)
}

// PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
func (o AlertmanagerSpecInitContainersLifecyclePtrOutput) PostStart() AlertmanagerSpecInitContainersLifecyclePostStartPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecycle) *AlertmanagerSpecInitContainersLifecyclePostStart {
		if v == nil {
			return nil
		}
		return v.PostStart
	}).(AlertmanagerSpecInitContainersLifecyclePostStartPtrOutput)
}

// PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
func (o AlertmanagerSpecInitContainersLifecyclePtrOutput) PreStop() AlertmanagerSpecInitContainersLifecyclePreStopPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecycle) *AlertmanagerSpecInitContainersLifecyclePreStop {
		if v == nil {
			return nil
		}
		return v.PreStop
	}).(AlertmanagerSpecInitContainersLifecyclePreStopPtrOutput)
}

// PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
type AlertmanagerSpecInitContainersLifecyclePostStart struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec *AlertmanagerSpecInitContainersLifecyclePostStartExec `pulumi:"exec"`
	// HTTPGet specifies the http request to perform.
	HttpGet *AlertmanagerSpecInitContainersLifecyclePostStartHttpGet `pulumi:"httpGet"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
	TcpSocket *AlertmanagerSpecInitContainersLifecyclePostStartTcpSocket `pulumi:"tcpSocket"`
}

// AlertmanagerSpecInitContainersLifecyclePostStartInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePostStartArgs and AlertmanagerSpecInitContainersLifecyclePostStartOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePostStartInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePostStartArgs{...}
type AlertmanagerSpecInitContainersLifecyclePostStartInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePostStartOutput() AlertmanagerSpecInitContainersLifecyclePostStartOutput
	ToAlertmanagerSpecInitContainersLifecyclePostStartOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePostStartOutput
}

// PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
type AlertmanagerSpecInitContainersLifecyclePostStartArgs struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec AlertmanagerSpecInitContainersLifecyclePostStartExecPtrInput `pulumi:"exec"`
	// HTTPGet specifies the http request to perform.
	HttpGet AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrInput `pulumi:"httpGet"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
	TcpSocket AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrInput `pulumi:"tcpSocket"`
}

func (AlertmanagerSpecInitContainersLifecyclePostStartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePostStart)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartArgs) ToAlertmanagerSpecInitContainersLifecyclePostStartOutput() AlertmanagerSpecInitContainersLifecyclePostStartOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePostStartOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartArgs) ToAlertmanagerSpecInitContainersLifecyclePostStartOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePostStartOutput)
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartArgs) ToAlertmanagerSpecInitContainersLifecyclePostStartPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePostStartPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartArgs) ToAlertmanagerSpecInitContainersLifecyclePostStartPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePostStartOutput).ToAlertmanagerSpecInitContainersLifecyclePostStartPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersLifecyclePostStartPtrInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePostStartArgs, AlertmanagerSpecInitContainersLifecyclePostStartPtr and AlertmanagerSpecInitContainersLifecyclePostStartPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePostStartPtrInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePostStartArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersLifecyclePostStartPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePostStartPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartPtrOutput
	ToAlertmanagerSpecInitContainersLifecyclePostStartPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePostStartPtrOutput
}

type alertmanagerSpecInitContainersLifecyclePostStartPtrType AlertmanagerSpecInitContainersLifecyclePostStartArgs

func AlertmanagerSpecInitContainersLifecyclePostStartPtr(v *AlertmanagerSpecInitContainersLifecyclePostStartArgs) AlertmanagerSpecInitContainersLifecyclePostStartPtrInput {
	return (*alertmanagerSpecInitContainersLifecyclePostStartPtrType)(v)
}

func (*alertmanagerSpecInitContainersLifecyclePostStartPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLifecyclePostStart)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersLifecyclePostStartPtrType) ToAlertmanagerSpecInitContainersLifecyclePostStartPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePostStartPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersLifecyclePostStartPtrType) ToAlertmanagerSpecInitContainersLifecyclePostStartPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePostStartPtrOutput)
}

// PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
type AlertmanagerSpecInitContainersLifecyclePostStartOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePostStartOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePostStart)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartOutput() AlertmanagerSpecInitContainersLifecyclePostStartOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartPtrOutput {
	return o.ToAlertmanagerSpecInitContainersLifecyclePostStartPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePostStart) *AlertmanagerSpecInitContainersLifecyclePostStart {
		return &v
	}).(AlertmanagerSpecInitContainersLifecyclePostStartPtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
func (o AlertmanagerSpecInitContainersLifecyclePostStartOutput) Exec() AlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePostStart) *AlertmanagerSpecInitContainersLifecyclePostStartExec {
		return v.Exec
	}).(AlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o AlertmanagerSpecInitContainersLifecyclePostStartOutput) HttpGet() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePostStart) *AlertmanagerSpecInitContainersLifecyclePostStartHttpGet {
		return v.HttpGet
	}).(AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
func (o AlertmanagerSpecInitContainersLifecyclePostStartOutput) TcpSocket() AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePostStart) *AlertmanagerSpecInitContainersLifecyclePostStartTcpSocket {
		return v.TcpSocket
	}).(AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput)
}

type AlertmanagerSpecInitContainersLifecyclePostStartPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePostStartPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLifecyclePostStart)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartPtrOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartPtrOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartPtrOutput) Elem() AlertmanagerSpecInitContainersLifecyclePostStartOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePostStart) AlertmanagerSpecInitContainersLifecyclePostStart {
		return *v
	}).(AlertmanagerSpecInitContainersLifecyclePostStartOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
func (o AlertmanagerSpecInitContainersLifecyclePostStartPtrOutput) Exec() AlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePostStart) *AlertmanagerSpecInitContainersLifecyclePostStartExec {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(AlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o AlertmanagerSpecInitContainersLifecyclePostStartPtrOutput) HttpGet() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePostStart) *AlertmanagerSpecInitContainersLifecyclePostStartHttpGet {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
func (o AlertmanagerSpecInitContainersLifecyclePostStartPtrOutput) TcpSocket() AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePostStart) *AlertmanagerSpecInitContainersLifecyclePostStartTcpSocket {
		if v == nil {
			return nil
		}
		return v.TcpSocket
	}).(AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecInitContainersLifecyclePostStartExec struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command []string `pulumi:"command"`
}

// AlertmanagerSpecInitContainersLifecyclePostStartExecInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePostStartExecArgs and AlertmanagerSpecInitContainersLifecyclePostStartExecOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePostStartExecInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePostStartExecArgs{...}
type AlertmanagerSpecInitContainersLifecyclePostStartExecInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePostStartExecOutput() AlertmanagerSpecInitContainersLifecyclePostStartExecOutput
	ToAlertmanagerSpecInitContainersLifecyclePostStartExecOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePostStartExecOutput
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecInitContainersLifecyclePostStartExecArgs struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command pulumi.StringArrayInput `pulumi:"command"`
}

func (AlertmanagerSpecInitContainersLifecyclePostStartExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePostStartExec)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartExecArgs) ToAlertmanagerSpecInitContainersLifecyclePostStartExecOutput() AlertmanagerSpecInitContainersLifecyclePostStartExecOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePostStartExecOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartExecArgs) ToAlertmanagerSpecInitContainersLifecyclePostStartExecOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePostStartExecOutput)
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartExecArgs) ToAlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartExecArgs) ToAlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePostStartExecOutput).ToAlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersLifecyclePostStartExecPtrInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePostStartExecArgs, AlertmanagerSpecInitContainersLifecyclePostStartExecPtr and AlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePostStartExecPtrInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePostStartExecArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersLifecyclePostStartExecPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput
	ToAlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput
}

type alertmanagerSpecInitContainersLifecyclePostStartExecPtrType AlertmanagerSpecInitContainersLifecyclePostStartExecArgs

func AlertmanagerSpecInitContainersLifecyclePostStartExecPtr(v *AlertmanagerSpecInitContainersLifecyclePostStartExecArgs) AlertmanagerSpecInitContainersLifecyclePostStartExecPtrInput {
	return (*alertmanagerSpecInitContainersLifecyclePostStartExecPtrType)(v)
}

func (*alertmanagerSpecInitContainersLifecyclePostStartExecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLifecyclePostStartExec)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersLifecyclePostStartExecPtrType) ToAlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersLifecyclePostStartExecPtrType) ToAlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecInitContainersLifecyclePostStartExecOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePostStartExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePostStartExec)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartExecOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartExecOutput() AlertmanagerSpecInitContainersLifecyclePostStartExecOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartExecOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartExecOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartExecOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartExecOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput {
	return o.ToAlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartExecOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePostStartExec) *AlertmanagerSpecInitContainersLifecyclePostStartExec {
		return &v
	}).(AlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput)
}

// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o AlertmanagerSpecInitContainersLifecyclePostStartExecOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePostStartExec) []string { return v.Command }).(pulumi.StringArrayOutput)
}

type AlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLifecyclePostStartExec)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput) Elem() AlertmanagerSpecInitContainersLifecyclePostStartExecOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePostStartExec) AlertmanagerSpecInitContainersLifecyclePostStartExec {
		return *v
	}).(AlertmanagerSpecInitContainersLifecyclePostStartExecOutput)
}

// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o AlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePostStartExec) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecInitContainersLifecyclePostStartHttpGet struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeaders `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path *string `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPort `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `pulumi:"scheme"`
}

// AlertmanagerSpecInitContainersLifecyclePostStartHttpGetInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePostStartHttpGetArgs and AlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePostStartHttpGetInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePostStartHttpGetArgs{...}
type AlertmanagerSpecInitContainersLifecyclePostStartHttpGetInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutput() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutput
	ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutput
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecInitContainersLifecyclePostStartHttpGetArgs struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayInput `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortInput `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (AlertmanagerSpecInitContainersLifecyclePostStartHttpGetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePostStartHttpGet)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartHttpGetArgs) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutput() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartHttpGetArgs) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutput)
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartHttpGetArgs) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartHttpGetArgs) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutput).ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePostStartHttpGetArgs, AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtr and AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePostStartHttpGetArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput
	ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput
}

type alertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrType AlertmanagerSpecInitContainersLifecyclePostStartHttpGetArgs

func AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtr(v *AlertmanagerSpecInitContainersLifecyclePostStartHttpGetArgs) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrInput {
	return (*alertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrType)(v)
}

func (*alertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLifecyclePostStartHttpGet)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrType) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrType) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput)
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePostStartHttpGet)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutput() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput {
	return o.ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePostStartHttpGet) *AlertmanagerSpecInitContainersLifecyclePostStartHttpGet {
		return &v
	}).(AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePostStartHttpGet) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutput) HttpHeaders() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePostStartHttpGet) []AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeaders {
		return v.HttpHeaders
	}).(AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePostStartHttpGet) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutput) Port() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePostStartHttpGet) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPort {
		return v.Port
	}).(AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePostStartHttpGet) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLifecyclePostStartHttpGet)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput) Elem() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePostStartHttpGet) AlertmanagerSpecInitContainersLifecyclePostStartHttpGet {
		return *v
	}).(AlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePostStartHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput) HttpHeaders() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePostStartHttpGet) []AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeaders {
		if v == nil {
			return nil
		}
		return v.HttpHeaders
	}).(AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePostStartHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput) Port() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePostStartHttpGet) *AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPort {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePostStartHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeaders struct {
	// The header field name
	Name string `pulumi:"name"`
	// The header field value
	Value string `pulumi:"value"`
}

// AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs and AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs{...}
type AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersOutput() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersOutput
	ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersOutput
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs struct {
	// The header field name
	Name pulumi.StringInput `pulumi:"name"`
	// The header field value
	Value pulumi.StringInput `pulumi:"value"`
}

func (AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeaders)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersOutput() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersOutput)
}

// AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArray and AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArray{ AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs{...} }
type AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput
	ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput
}

type AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArray []AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersInput

func (AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeaders)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArray) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArray) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeaders)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersOutput() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersOutput {
	return o
}

// The header field name
func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeaders) string { return v.Name }).(pulumi.StringOutput)
}

// The header field value
func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeaders) string { return v.Value }).(pulumi.StringOutput)
}

type AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeaders)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeaders {
		return vs[0].([]AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeaders)[vs[1].(int)]
	}).(AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersOutput)
}

type AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPort struct {
}

// AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortArgs and AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortArgs{...}
type AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortOutput() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortOutput
	ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortOutput
}

type AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortArgs struct {
}

func (AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPort)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortArgs) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortOutput() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortArgs) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortOutput)
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortArgs) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortArgs) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortOutput).ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortArgs, AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtr and AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutput
	ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutput
}

type alertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrType AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortArgs

func AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtr(v *AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortArgs) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrInput {
	return (*alertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrType)(v)
}

func (*alertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPort)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrType) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrType) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutput)
}

type AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPort)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortOutput() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutput {
	return o.ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPort) *AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPort {
		return &v
	}).(AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutput)
}

type AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPort)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutput) Elem() AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPort) AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPort {
		return *v
	}).(AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecInitContainersLifecyclePostStartTcpSocket struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPort `pulumi:"port"`
}

// AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketArgs and AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketArgs{...}
type AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketOutput() AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketOutput
	ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketOutput
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketArgs struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortInput `pulumi:"port"`
}

func (AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePostStartTcpSocket)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketArgs) ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketOutput() AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketArgs) ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketOutput)
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketArgs) ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketArgs) ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketOutput).ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketArgs, AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtr and AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput
	ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput
}

type alertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrType AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketArgs

func AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtr(v *AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketArgs) AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrInput {
	return (*alertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrType)(v)
}

func (*alertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLifecyclePostStartTcpSocket)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrType) ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrType) ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePostStartTcpSocket)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketOutput() AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput {
	return o.ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePostStartTcpSocket) *AlertmanagerSpecInitContainersLifecyclePostStartTcpSocket {
		return &v
	}).(AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePostStartTcpSocket) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketOutput) Port() AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePostStartTcpSocket) AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPort {
		return v.Port
	}).(AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortOutput)
}

type AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLifecyclePostStartTcpSocket)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput) Elem() AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePostStartTcpSocket) AlertmanagerSpecInitContainersLifecyclePostStartTcpSocket {
		return *v
	}).(AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePostStartTcpSocket) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput) Port() AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePostStartTcpSocket) *AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPort {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutput)
}

type AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPort struct {
}

// AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortArgs and AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortArgs{...}
type AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortOutput() AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortOutput
	ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortOutput
}

type AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortArgs struct {
}

func (AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPort)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortArgs) ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortOutput() AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortArgs) ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortOutput)
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortArgs) ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortArgs) ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortOutput).ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortArgs, AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtr and AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutput
	ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutput
}

type alertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrType AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortArgs

func AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtr(v *AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortArgs) AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrInput {
	return (*alertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrType)(v)
}

func (*alertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPort)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrType) ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrType) ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutput)
}

type AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPort)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortOutput() AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutput {
	return o.ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPort) *AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPort {
		return &v
	}).(AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutput)
}

type AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPort)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutput() AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutput) ToAlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutput) Elem() AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPort) AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPort {
		return *v
	}).(AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortOutput)
}

// PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
type AlertmanagerSpecInitContainersLifecyclePreStop struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec *AlertmanagerSpecInitContainersLifecyclePreStopExec `pulumi:"exec"`
	// HTTPGet specifies the http request to perform.
	HttpGet *AlertmanagerSpecInitContainersLifecyclePreStopHttpGet `pulumi:"httpGet"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
	TcpSocket *AlertmanagerSpecInitContainersLifecyclePreStopTcpSocket `pulumi:"tcpSocket"`
}

// AlertmanagerSpecInitContainersLifecyclePreStopInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePreStopArgs and AlertmanagerSpecInitContainersLifecyclePreStopOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePreStopInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePreStopArgs{...}
type AlertmanagerSpecInitContainersLifecyclePreStopInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePreStopOutput() AlertmanagerSpecInitContainersLifecyclePreStopOutput
	ToAlertmanagerSpecInitContainersLifecyclePreStopOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePreStopOutput
}

// PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
type AlertmanagerSpecInitContainersLifecyclePreStopArgs struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec AlertmanagerSpecInitContainersLifecyclePreStopExecPtrInput `pulumi:"exec"`
	// HTTPGet specifies the http request to perform.
	HttpGet AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrInput `pulumi:"httpGet"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
	TcpSocket AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrInput `pulumi:"tcpSocket"`
}

func (AlertmanagerSpecInitContainersLifecyclePreStopArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePreStop)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopArgs) ToAlertmanagerSpecInitContainersLifecyclePreStopOutput() AlertmanagerSpecInitContainersLifecyclePreStopOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePreStopOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopArgs) ToAlertmanagerSpecInitContainersLifecyclePreStopOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePreStopOutput)
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopArgs) ToAlertmanagerSpecInitContainersLifecyclePreStopPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePreStopPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopArgs) ToAlertmanagerSpecInitContainersLifecyclePreStopPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePreStopOutput).ToAlertmanagerSpecInitContainersLifecyclePreStopPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersLifecyclePreStopPtrInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePreStopArgs, AlertmanagerSpecInitContainersLifecyclePreStopPtr and AlertmanagerSpecInitContainersLifecyclePreStopPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePreStopPtrInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePreStopArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersLifecyclePreStopPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePreStopPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopPtrOutput
	ToAlertmanagerSpecInitContainersLifecyclePreStopPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePreStopPtrOutput
}

type alertmanagerSpecInitContainersLifecyclePreStopPtrType AlertmanagerSpecInitContainersLifecyclePreStopArgs

func AlertmanagerSpecInitContainersLifecyclePreStopPtr(v *AlertmanagerSpecInitContainersLifecyclePreStopArgs) AlertmanagerSpecInitContainersLifecyclePreStopPtrInput {
	return (*alertmanagerSpecInitContainersLifecyclePreStopPtrType)(v)
}

func (*alertmanagerSpecInitContainersLifecyclePreStopPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLifecyclePreStop)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersLifecyclePreStopPtrType) ToAlertmanagerSpecInitContainersLifecyclePreStopPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePreStopPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersLifecyclePreStopPtrType) ToAlertmanagerSpecInitContainersLifecyclePreStopPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePreStopPtrOutput)
}

// PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
type AlertmanagerSpecInitContainersLifecyclePreStopOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePreStopOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePreStop)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopOutput() AlertmanagerSpecInitContainersLifecyclePreStopOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopPtrOutput {
	return o.ToAlertmanagerSpecInitContainersLifecyclePreStopPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePreStop) *AlertmanagerSpecInitContainersLifecyclePreStop {
		return &v
	}).(AlertmanagerSpecInitContainersLifecyclePreStopPtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
func (o AlertmanagerSpecInitContainersLifecyclePreStopOutput) Exec() AlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePreStop) *AlertmanagerSpecInitContainersLifecyclePreStopExec {
		return v.Exec
	}).(AlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o AlertmanagerSpecInitContainersLifecyclePreStopOutput) HttpGet() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePreStop) *AlertmanagerSpecInitContainersLifecyclePreStopHttpGet {
		return v.HttpGet
	}).(AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
func (o AlertmanagerSpecInitContainersLifecyclePreStopOutput) TcpSocket() AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePreStop) *AlertmanagerSpecInitContainersLifecyclePreStopTcpSocket {
		return v.TcpSocket
	}).(AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput)
}

type AlertmanagerSpecInitContainersLifecyclePreStopPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePreStopPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLifecyclePreStop)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopPtrOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopPtrOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopPtrOutput) Elem() AlertmanagerSpecInitContainersLifecyclePreStopOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePreStop) AlertmanagerSpecInitContainersLifecyclePreStop {
		return *v
	}).(AlertmanagerSpecInitContainersLifecyclePreStopOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
func (o AlertmanagerSpecInitContainersLifecyclePreStopPtrOutput) Exec() AlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePreStop) *AlertmanagerSpecInitContainersLifecyclePreStopExec {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(AlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o AlertmanagerSpecInitContainersLifecyclePreStopPtrOutput) HttpGet() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePreStop) *AlertmanagerSpecInitContainersLifecyclePreStopHttpGet {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
func (o AlertmanagerSpecInitContainersLifecyclePreStopPtrOutput) TcpSocket() AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePreStop) *AlertmanagerSpecInitContainersLifecyclePreStopTcpSocket {
		if v == nil {
			return nil
		}
		return v.TcpSocket
	}).(AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecInitContainersLifecyclePreStopExec struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command []string `pulumi:"command"`
}

// AlertmanagerSpecInitContainersLifecyclePreStopExecInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePreStopExecArgs and AlertmanagerSpecInitContainersLifecyclePreStopExecOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePreStopExecInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePreStopExecArgs{...}
type AlertmanagerSpecInitContainersLifecyclePreStopExecInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePreStopExecOutput() AlertmanagerSpecInitContainersLifecyclePreStopExecOutput
	ToAlertmanagerSpecInitContainersLifecyclePreStopExecOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePreStopExecOutput
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecInitContainersLifecyclePreStopExecArgs struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command pulumi.StringArrayInput `pulumi:"command"`
}

func (AlertmanagerSpecInitContainersLifecyclePreStopExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePreStopExec)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopExecArgs) ToAlertmanagerSpecInitContainersLifecyclePreStopExecOutput() AlertmanagerSpecInitContainersLifecyclePreStopExecOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePreStopExecOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopExecArgs) ToAlertmanagerSpecInitContainersLifecyclePreStopExecOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePreStopExecOutput)
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopExecArgs) ToAlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopExecArgs) ToAlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePreStopExecOutput).ToAlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersLifecyclePreStopExecPtrInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePreStopExecArgs, AlertmanagerSpecInitContainersLifecyclePreStopExecPtr and AlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePreStopExecPtrInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePreStopExecArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersLifecyclePreStopExecPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput
	ToAlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput
}

type alertmanagerSpecInitContainersLifecyclePreStopExecPtrType AlertmanagerSpecInitContainersLifecyclePreStopExecArgs

func AlertmanagerSpecInitContainersLifecyclePreStopExecPtr(v *AlertmanagerSpecInitContainersLifecyclePreStopExecArgs) AlertmanagerSpecInitContainersLifecyclePreStopExecPtrInput {
	return (*alertmanagerSpecInitContainersLifecyclePreStopExecPtrType)(v)
}

func (*alertmanagerSpecInitContainersLifecyclePreStopExecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLifecyclePreStopExec)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersLifecyclePreStopExecPtrType) ToAlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersLifecyclePreStopExecPtrType) ToAlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecInitContainersLifecyclePreStopExecOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePreStopExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePreStopExec)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopExecOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopExecOutput() AlertmanagerSpecInitContainersLifecyclePreStopExecOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopExecOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopExecOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopExecOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopExecOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput {
	return o.ToAlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopExecOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePreStopExec) *AlertmanagerSpecInitContainersLifecyclePreStopExec {
		return &v
	}).(AlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput)
}

// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o AlertmanagerSpecInitContainersLifecyclePreStopExecOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePreStopExec) []string { return v.Command }).(pulumi.StringArrayOutput)
}

type AlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLifecyclePreStopExec)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput) Elem() AlertmanagerSpecInitContainersLifecyclePreStopExecOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePreStopExec) AlertmanagerSpecInitContainersLifecyclePreStopExec {
		return *v
	}).(AlertmanagerSpecInitContainersLifecyclePreStopExecOutput)
}

// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o AlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePreStopExec) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecInitContainersLifecyclePreStopHttpGet struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeaders `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path *string `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPort `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `pulumi:"scheme"`
}

// AlertmanagerSpecInitContainersLifecyclePreStopHttpGetInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePreStopHttpGetArgs and AlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePreStopHttpGetInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePreStopHttpGetArgs{...}
type AlertmanagerSpecInitContainersLifecyclePreStopHttpGetInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutput() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutput
	ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutput
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecInitContainersLifecyclePreStopHttpGetArgs struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayInput `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortInput `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (AlertmanagerSpecInitContainersLifecyclePreStopHttpGetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePreStopHttpGet)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopHttpGetArgs) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutput() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopHttpGetArgs) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutput)
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopHttpGetArgs) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopHttpGetArgs) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutput).ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePreStopHttpGetArgs, AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtr and AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePreStopHttpGetArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput
	ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput
}

type alertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrType AlertmanagerSpecInitContainersLifecyclePreStopHttpGetArgs

func AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtr(v *AlertmanagerSpecInitContainersLifecyclePreStopHttpGetArgs) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrInput {
	return (*alertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrType)(v)
}

func (*alertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLifecyclePreStopHttpGet)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrType) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrType) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput)
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePreStopHttpGet)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutput() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput {
	return o.ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePreStopHttpGet) *AlertmanagerSpecInitContainersLifecyclePreStopHttpGet {
		return &v
	}).(AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePreStopHttpGet) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutput) HttpHeaders() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePreStopHttpGet) []AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeaders {
		return v.HttpHeaders
	}).(AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePreStopHttpGet) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutput) Port() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePreStopHttpGet) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPort {
		return v.Port
	}).(AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePreStopHttpGet) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLifecyclePreStopHttpGet)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput) Elem() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePreStopHttpGet) AlertmanagerSpecInitContainersLifecyclePreStopHttpGet {
		return *v
	}).(AlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePreStopHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput) HttpHeaders() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePreStopHttpGet) []AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeaders {
		if v == nil {
			return nil
		}
		return v.HttpHeaders
	}).(AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePreStopHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput) Port() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePreStopHttpGet) *AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPort {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePreStopHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeaders struct {
	// The header field name
	Name string `pulumi:"name"`
	// The header field value
	Value string `pulumi:"value"`
}

// AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs and AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs{...}
type AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersOutput() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersOutput
	ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersOutput
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs struct {
	// The header field name
	Name pulumi.StringInput `pulumi:"name"`
	// The header field value
	Value pulumi.StringInput `pulumi:"value"`
}

func (AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeaders)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersOutput() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersOutput)
}

// AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArray and AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArray{ AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs{...} }
type AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput
	ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput
}

type AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArray []AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersInput

func (AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeaders)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArray) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArray) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeaders)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersOutput() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersOutput {
	return o
}

// The header field name
func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeaders) string { return v.Name }).(pulumi.StringOutput)
}

// The header field value
func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeaders) string { return v.Value }).(pulumi.StringOutput)
}

type AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeaders)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeaders {
		return vs[0].([]AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeaders)[vs[1].(int)]
	}).(AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersOutput)
}

type AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPort struct {
}

// AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortArgs and AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortArgs{...}
type AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortOutput() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortOutput
	ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortOutput
}

type AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortArgs struct {
}

func (AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPort)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortArgs) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortOutput() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortArgs) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortOutput)
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortArgs) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortArgs) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortOutput).ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortArgs, AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtr and AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutput
	ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutput
}

type alertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrType AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortArgs

func AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtr(v *AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortArgs) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrInput {
	return (*alertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrType)(v)
}

func (*alertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPort)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrType) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrType) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutput)
}

type AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPort)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortOutput() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutput {
	return o.ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPort) *AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPort {
		return &v
	}).(AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutput)
}

type AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPort)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutput) Elem() AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPort) AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPort {
		return *v
	}).(AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecInitContainersLifecyclePreStopTcpSocket struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPort `pulumi:"port"`
}

// AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketArgs and AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketArgs{...}
type AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketOutput() AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketOutput
	ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketOutput
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketArgs struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortInput `pulumi:"port"`
}

func (AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePreStopTcpSocket)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketArgs) ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketOutput() AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketArgs) ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketOutput)
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketArgs) ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketArgs) ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketOutput).ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketArgs, AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtr and AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput
	ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput
}

type alertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrType AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketArgs

func AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtr(v *AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketArgs) AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrInput {
	return (*alertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrType)(v)
}

func (*alertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLifecyclePreStopTcpSocket)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrType) ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrType) ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePreStopTcpSocket)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketOutput() AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput {
	return o.ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePreStopTcpSocket) *AlertmanagerSpecInitContainersLifecyclePreStopTcpSocket {
		return &v
	}).(AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePreStopTcpSocket) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketOutput) Port() AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePreStopTcpSocket) AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPort {
		return v.Port
	}).(AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortOutput)
}

type AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLifecyclePreStopTcpSocket)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput) Elem() AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePreStopTcpSocket) AlertmanagerSpecInitContainersLifecyclePreStopTcpSocket {
		return *v
	}).(AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePreStopTcpSocket) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput) Port() AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePreStopTcpSocket) *AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPort {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutput)
}

type AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPort struct {
}

// AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortArgs and AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortArgs{...}
type AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortOutput() AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortOutput
	ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortOutput
}

type AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortArgs struct {
}

func (AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPort)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortArgs) ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortOutput() AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortArgs) ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortOutput)
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortArgs) ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortArgs) ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortOutput).ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrInput is an input type that accepts AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortArgs, AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtr and AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrInput` via:
//
//          AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutput
	ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutput
}

type alertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrType AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortArgs

func AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtr(v *AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortArgs) AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrInput {
	return (*alertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrType)(v)
}

func (*alertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPort)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrType) ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrType) ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutput)
}

type AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPort)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortOutput() AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutput {
	return o.ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPort) *AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPort {
		return &v
	}).(AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutput)
}

type AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPort)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutput() AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutput) ToAlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutput) Elem() AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPort) AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPort {
		return *v
	}).(AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortOutput)
}

// Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
type AlertmanagerSpecInitContainersLivenessProbe struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec *AlertmanagerSpecInitContainersLivenessProbeExec `pulumi:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// HTTPGet specifies the http request to perform.
	HttpGet *AlertmanagerSpecInitContainersLivenessProbeHttpGet `pulumi:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
	TcpSocket *AlertmanagerSpecInitContainersLivenessProbeTcpSocket `pulumi:"tcpSocket"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// AlertmanagerSpecInitContainersLivenessProbeInput is an input type that accepts AlertmanagerSpecInitContainersLivenessProbeArgs and AlertmanagerSpecInitContainersLivenessProbeOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLivenessProbeInput` via:
//
//          AlertmanagerSpecInitContainersLivenessProbeArgs{...}
type AlertmanagerSpecInitContainersLivenessProbeInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLivenessProbeOutput() AlertmanagerSpecInitContainersLivenessProbeOutput
	ToAlertmanagerSpecInitContainersLivenessProbeOutputWithContext(context.Context) AlertmanagerSpecInitContainersLivenessProbeOutput
}

// Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
type AlertmanagerSpecInitContainersLivenessProbeArgs struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec AlertmanagerSpecInitContainersLivenessProbeExecPtrInput `pulumi:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// HTTPGet specifies the http request to perform.
	HttpGet AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrInput `pulumi:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
	TcpSocket AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrInput `pulumi:"tcpSocket"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (AlertmanagerSpecInitContainersLivenessProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLivenessProbe)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersLivenessProbeArgs) ToAlertmanagerSpecInitContainersLivenessProbeOutput() AlertmanagerSpecInitContainersLivenessProbeOutput {
	return i.ToAlertmanagerSpecInitContainersLivenessProbeOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLivenessProbeArgs) ToAlertmanagerSpecInitContainersLivenessProbeOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLivenessProbeOutput)
}

func (i AlertmanagerSpecInitContainersLivenessProbeArgs) ToAlertmanagerSpecInitContainersLivenessProbePtrOutput() AlertmanagerSpecInitContainersLivenessProbePtrOutput {
	return i.ToAlertmanagerSpecInitContainersLivenessProbePtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLivenessProbeArgs) ToAlertmanagerSpecInitContainersLivenessProbePtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLivenessProbeOutput).ToAlertmanagerSpecInitContainersLivenessProbePtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersLivenessProbePtrInput is an input type that accepts AlertmanagerSpecInitContainersLivenessProbeArgs, AlertmanagerSpecInitContainersLivenessProbePtr and AlertmanagerSpecInitContainersLivenessProbePtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLivenessProbePtrInput` via:
//
//          AlertmanagerSpecInitContainersLivenessProbeArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersLivenessProbePtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLivenessProbePtrOutput() AlertmanagerSpecInitContainersLivenessProbePtrOutput
	ToAlertmanagerSpecInitContainersLivenessProbePtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersLivenessProbePtrOutput
}

type alertmanagerSpecInitContainersLivenessProbePtrType AlertmanagerSpecInitContainersLivenessProbeArgs

func AlertmanagerSpecInitContainersLivenessProbePtr(v *AlertmanagerSpecInitContainersLivenessProbeArgs) AlertmanagerSpecInitContainersLivenessProbePtrInput {
	return (*alertmanagerSpecInitContainersLivenessProbePtrType)(v)
}

func (*alertmanagerSpecInitContainersLivenessProbePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLivenessProbe)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersLivenessProbePtrType) ToAlertmanagerSpecInitContainersLivenessProbePtrOutput() AlertmanagerSpecInitContainersLivenessProbePtrOutput {
	return i.ToAlertmanagerSpecInitContainersLivenessProbePtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersLivenessProbePtrType) ToAlertmanagerSpecInitContainersLivenessProbePtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLivenessProbePtrOutput)
}

// Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
type AlertmanagerSpecInitContainersLivenessProbeOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLivenessProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLivenessProbe)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLivenessProbeOutput) ToAlertmanagerSpecInitContainersLivenessProbeOutput() AlertmanagerSpecInitContainersLivenessProbeOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLivenessProbeOutput) ToAlertmanagerSpecInitContainersLivenessProbeOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLivenessProbeOutput) ToAlertmanagerSpecInitContainersLivenessProbePtrOutput() AlertmanagerSpecInitContainersLivenessProbePtrOutput {
	return o.ToAlertmanagerSpecInitContainersLivenessProbePtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersLivenessProbeOutput) ToAlertmanagerSpecInitContainersLivenessProbePtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLivenessProbe) *AlertmanagerSpecInitContainersLivenessProbe {
		return &v
	}).(AlertmanagerSpecInitContainersLivenessProbePtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
func (o AlertmanagerSpecInitContainersLivenessProbeOutput) Exec() AlertmanagerSpecInitContainersLivenessProbeExecPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLivenessProbe) *AlertmanagerSpecInitContainersLivenessProbeExec {
		return v.Exec
	}).(AlertmanagerSpecInitContainersLivenessProbeExecPtrOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (o AlertmanagerSpecInitContainersLivenessProbeOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLivenessProbe) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o AlertmanagerSpecInitContainersLivenessProbeOutput) HttpGet() AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLivenessProbe) *AlertmanagerSpecInitContainersLivenessProbeHttpGet {
		return v.HttpGet
	}).(AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput)
}

// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecInitContainersLivenessProbeOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLivenessProbe) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
func (o AlertmanagerSpecInitContainersLivenessProbeOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLivenessProbe) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
func (o AlertmanagerSpecInitContainersLivenessProbeOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLivenessProbe) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
func (o AlertmanagerSpecInitContainersLivenessProbeOutput) TcpSocket() AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLivenessProbe) *AlertmanagerSpecInitContainersLivenessProbeTcpSocket {
		return v.TcpSocket
	}).(AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput)
}

// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecInitContainersLivenessProbeOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLivenessProbe) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type AlertmanagerSpecInitContainersLivenessProbePtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLivenessProbePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLivenessProbe)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLivenessProbePtrOutput) ToAlertmanagerSpecInitContainersLivenessProbePtrOutput() AlertmanagerSpecInitContainersLivenessProbePtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLivenessProbePtrOutput) ToAlertmanagerSpecInitContainersLivenessProbePtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbePtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLivenessProbePtrOutput) Elem() AlertmanagerSpecInitContainersLivenessProbeOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLivenessProbe) AlertmanagerSpecInitContainersLivenessProbe {
		return *v
	}).(AlertmanagerSpecInitContainersLivenessProbeOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
func (o AlertmanagerSpecInitContainersLivenessProbePtrOutput) Exec() AlertmanagerSpecInitContainersLivenessProbeExecPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLivenessProbe) *AlertmanagerSpecInitContainersLivenessProbeExec {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(AlertmanagerSpecInitContainersLivenessProbeExecPtrOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (o AlertmanagerSpecInitContainersLivenessProbePtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o AlertmanagerSpecInitContainersLivenessProbePtrOutput) HttpGet() AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLivenessProbe) *AlertmanagerSpecInitContainersLivenessProbeHttpGet {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput)
}

// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecInitContainersLivenessProbePtrOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.InitialDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
func (o AlertmanagerSpecInitContainersLivenessProbePtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
func (o AlertmanagerSpecInitContainersLivenessProbePtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
func (o AlertmanagerSpecInitContainersLivenessProbePtrOutput) TcpSocket() AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLivenessProbe) *AlertmanagerSpecInitContainersLivenessProbeTcpSocket {
		if v == nil {
			return nil
		}
		return v.TcpSocket
	}).(AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput)
}

// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecInitContainersLivenessProbePtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecInitContainersLivenessProbeExec struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command []string `pulumi:"command"`
}

// AlertmanagerSpecInitContainersLivenessProbeExecInput is an input type that accepts AlertmanagerSpecInitContainersLivenessProbeExecArgs and AlertmanagerSpecInitContainersLivenessProbeExecOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLivenessProbeExecInput` via:
//
//          AlertmanagerSpecInitContainersLivenessProbeExecArgs{...}
type AlertmanagerSpecInitContainersLivenessProbeExecInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLivenessProbeExecOutput() AlertmanagerSpecInitContainersLivenessProbeExecOutput
	ToAlertmanagerSpecInitContainersLivenessProbeExecOutputWithContext(context.Context) AlertmanagerSpecInitContainersLivenessProbeExecOutput
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecInitContainersLivenessProbeExecArgs struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command pulumi.StringArrayInput `pulumi:"command"`
}

func (AlertmanagerSpecInitContainersLivenessProbeExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLivenessProbeExec)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersLivenessProbeExecArgs) ToAlertmanagerSpecInitContainersLivenessProbeExecOutput() AlertmanagerSpecInitContainersLivenessProbeExecOutput {
	return i.ToAlertmanagerSpecInitContainersLivenessProbeExecOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLivenessProbeExecArgs) ToAlertmanagerSpecInitContainersLivenessProbeExecOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLivenessProbeExecOutput)
}

func (i AlertmanagerSpecInitContainersLivenessProbeExecArgs) ToAlertmanagerSpecInitContainersLivenessProbeExecPtrOutput() AlertmanagerSpecInitContainersLivenessProbeExecPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLivenessProbeExecPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLivenessProbeExecArgs) ToAlertmanagerSpecInitContainersLivenessProbeExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLivenessProbeExecOutput).ToAlertmanagerSpecInitContainersLivenessProbeExecPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersLivenessProbeExecPtrInput is an input type that accepts AlertmanagerSpecInitContainersLivenessProbeExecArgs, AlertmanagerSpecInitContainersLivenessProbeExecPtr and AlertmanagerSpecInitContainersLivenessProbeExecPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLivenessProbeExecPtrInput` via:
//
//          AlertmanagerSpecInitContainersLivenessProbeExecArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersLivenessProbeExecPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLivenessProbeExecPtrOutput() AlertmanagerSpecInitContainersLivenessProbeExecPtrOutput
	ToAlertmanagerSpecInitContainersLivenessProbeExecPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersLivenessProbeExecPtrOutput
}

type alertmanagerSpecInitContainersLivenessProbeExecPtrType AlertmanagerSpecInitContainersLivenessProbeExecArgs

func AlertmanagerSpecInitContainersLivenessProbeExecPtr(v *AlertmanagerSpecInitContainersLivenessProbeExecArgs) AlertmanagerSpecInitContainersLivenessProbeExecPtrInput {
	return (*alertmanagerSpecInitContainersLivenessProbeExecPtrType)(v)
}

func (*alertmanagerSpecInitContainersLivenessProbeExecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLivenessProbeExec)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersLivenessProbeExecPtrType) ToAlertmanagerSpecInitContainersLivenessProbeExecPtrOutput() AlertmanagerSpecInitContainersLivenessProbeExecPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLivenessProbeExecPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersLivenessProbeExecPtrType) ToAlertmanagerSpecInitContainersLivenessProbeExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLivenessProbeExecPtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecInitContainersLivenessProbeExecOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLivenessProbeExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLivenessProbeExec)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLivenessProbeExecOutput) ToAlertmanagerSpecInitContainersLivenessProbeExecOutput() AlertmanagerSpecInitContainersLivenessProbeExecOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLivenessProbeExecOutput) ToAlertmanagerSpecInitContainersLivenessProbeExecOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeExecOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLivenessProbeExecOutput) ToAlertmanagerSpecInitContainersLivenessProbeExecPtrOutput() AlertmanagerSpecInitContainersLivenessProbeExecPtrOutput {
	return o.ToAlertmanagerSpecInitContainersLivenessProbeExecPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersLivenessProbeExecOutput) ToAlertmanagerSpecInitContainersLivenessProbeExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeExecPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLivenessProbeExec) *AlertmanagerSpecInitContainersLivenessProbeExec {
		return &v
	}).(AlertmanagerSpecInitContainersLivenessProbeExecPtrOutput)
}

// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o AlertmanagerSpecInitContainersLivenessProbeExecOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLivenessProbeExec) []string { return v.Command }).(pulumi.StringArrayOutput)
}

type AlertmanagerSpecInitContainersLivenessProbeExecPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLivenessProbeExecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLivenessProbeExec)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLivenessProbeExecPtrOutput) ToAlertmanagerSpecInitContainersLivenessProbeExecPtrOutput() AlertmanagerSpecInitContainersLivenessProbeExecPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLivenessProbeExecPtrOutput) ToAlertmanagerSpecInitContainersLivenessProbeExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeExecPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLivenessProbeExecPtrOutput) Elem() AlertmanagerSpecInitContainersLivenessProbeExecOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLivenessProbeExec) AlertmanagerSpecInitContainersLivenessProbeExec {
		return *v
	}).(AlertmanagerSpecInitContainersLivenessProbeExecOutput)
}

// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o AlertmanagerSpecInitContainersLivenessProbeExecPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLivenessProbeExec) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecInitContainersLivenessProbeHttpGet struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeaders `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path *string `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecInitContainersLivenessProbeHttpGetPort `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `pulumi:"scheme"`
}

// AlertmanagerSpecInitContainersLivenessProbeHttpGetInput is an input type that accepts AlertmanagerSpecInitContainersLivenessProbeHttpGetArgs and AlertmanagerSpecInitContainersLivenessProbeHttpGetOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLivenessProbeHttpGetInput` via:
//
//          AlertmanagerSpecInitContainersLivenessProbeHttpGetArgs{...}
type AlertmanagerSpecInitContainersLivenessProbeHttpGetInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLivenessProbeHttpGetOutput() AlertmanagerSpecInitContainersLivenessProbeHttpGetOutput
	ToAlertmanagerSpecInitContainersLivenessProbeHttpGetOutputWithContext(context.Context) AlertmanagerSpecInitContainersLivenessProbeHttpGetOutput
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecInitContainersLivenessProbeHttpGetArgs struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayInput `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecInitContainersLivenessProbeHttpGetPortInput `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (AlertmanagerSpecInitContainersLivenessProbeHttpGetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLivenessProbeHttpGet)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersLivenessProbeHttpGetArgs) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetOutput() AlertmanagerSpecInitContainersLivenessProbeHttpGetOutput {
	return i.ToAlertmanagerSpecInitContainersLivenessProbeHttpGetOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLivenessProbeHttpGetArgs) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeHttpGetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLivenessProbeHttpGetOutput)
}

func (i AlertmanagerSpecInitContainersLivenessProbeHttpGetArgs) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput() AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLivenessProbeHttpGetArgs) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLivenessProbeHttpGetOutput).ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrInput is an input type that accepts AlertmanagerSpecInitContainersLivenessProbeHttpGetArgs, AlertmanagerSpecInitContainersLivenessProbeHttpGetPtr and AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrInput` via:
//
//          AlertmanagerSpecInitContainersLivenessProbeHttpGetArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput() AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput
	ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput
}

type alertmanagerSpecInitContainersLivenessProbeHttpGetPtrType AlertmanagerSpecInitContainersLivenessProbeHttpGetArgs

func AlertmanagerSpecInitContainersLivenessProbeHttpGetPtr(v *AlertmanagerSpecInitContainersLivenessProbeHttpGetArgs) AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrInput {
	return (*alertmanagerSpecInitContainersLivenessProbeHttpGetPtrType)(v)
}

func (*alertmanagerSpecInitContainersLivenessProbeHttpGetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLivenessProbeHttpGet)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersLivenessProbeHttpGetPtrType) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput() AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersLivenessProbeHttpGetPtrType) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput)
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecInitContainersLivenessProbeHttpGetOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLivenessProbeHttpGetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLivenessProbeHttpGet)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetOutput) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetOutput() AlertmanagerSpecInitContainersLivenessProbeHttpGetOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetOutput) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeHttpGetOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetOutput) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput() AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput {
	return o.ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetOutput) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLivenessProbeHttpGet) *AlertmanagerSpecInitContainersLivenessProbeHttpGet {
		return &v
	}).(AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLivenessProbeHttpGet) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetOutput) HttpHeaders() AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLivenessProbeHttpGet) []AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeaders {
		return v.HttpHeaders
	}).(AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLivenessProbeHttpGet) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetOutput) Port() AlertmanagerSpecInitContainersLivenessProbeHttpGetPortOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLivenessProbeHttpGet) AlertmanagerSpecInitContainersLivenessProbeHttpGetPort {
		return v.Port
	}).(AlertmanagerSpecInitContainersLivenessProbeHttpGetPortOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLivenessProbeHttpGet) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLivenessProbeHttpGet)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput() AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput) Elem() AlertmanagerSpecInitContainersLivenessProbeHttpGetOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLivenessProbeHttpGet) AlertmanagerSpecInitContainersLivenessProbeHttpGet {
		return *v
	}).(AlertmanagerSpecInitContainersLivenessProbeHttpGetOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLivenessProbeHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput) HttpHeaders() AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLivenessProbeHttpGet) []AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeaders {
		if v == nil {
			return nil
		}
		return v.HttpHeaders
	}).(AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLivenessProbeHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput) Port() AlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLivenessProbeHttpGet) *AlertmanagerSpecInitContainersLivenessProbeHttpGetPort {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(AlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLivenessProbeHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeaders struct {
	// The header field name
	Name string `pulumi:"name"`
	// The header field value
	Value string `pulumi:"value"`
}

// AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersInput is an input type that accepts AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs and AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersInput` via:
//
//          AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs{...}
type AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersOutput() AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersOutput
	ToAlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersOutputWithContext(context.Context) AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersOutput
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs struct {
	// The header field name
	Name pulumi.StringInput `pulumi:"name"`
	// The header field value
	Value pulumi.StringInput `pulumi:"value"`
}

func (AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersOutput() AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersOutput {
	return i.ToAlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersOutput)
}

// AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayInput is an input type that accepts AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArray and AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayInput` via:
//
//          AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArray{ AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs{...} }
type AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayOutput() AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayOutput
	ToAlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayOutputWithContext(context.Context) AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayOutput
}

type AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArray []AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersInput

func (AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArray) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayOutput() AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayOutput {
	return i.ToAlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArray) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersOutput) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersOutput() AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersOutput) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersOutput {
	return o
}

// The header field name
func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeaders) string { return v.Name }).(pulumi.StringOutput)
}

// The header field value
func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeaders) string { return v.Value }).(pulumi.StringOutput)
}

type AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayOutput) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayOutput() AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayOutput) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeaders {
		return vs[0].([]AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeaders)[vs[1].(int)]
	}).(AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersOutput)
}

type AlertmanagerSpecInitContainersLivenessProbeHttpGetPort struct {
}

// AlertmanagerSpecInitContainersLivenessProbeHttpGetPortInput is an input type that accepts AlertmanagerSpecInitContainersLivenessProbeHttpGetPortArgs and AlertmanagerSpecInitContainersLivenessProbeHttpGetPortOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLivenessProbeHttpGetPortInput` via:
//
//          AlertmanagerSpecInitContainersLivenessProbeHttpGetPortArgs{...}
type AlertmanagerSpecInitContainersLivenessProbeHttpGetPortInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPortOutput() AlertmanagerSpecInitContainersLivenessProbeHttpGetPortOutput
	ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPortOutputWithContext(context.Context) AlertmanagerSpecInitContainersLivenessProbeHttpGetPortOutput
}

type AlertmanagerSpecInitContainersLivenessProbeHttpGetPortArgs struct {
}

func (AlertmanagerSpecInitContainersLivenessProbeHttpGetPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLivenessProbeHttpGetPort)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersLivenessProbeHttpGetPortArgs) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPortOutput() AlertmanagerSpecInitContainersLivenessProbeHttpGetPortOutput {
	return i.ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPortOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLivenessProbeHttpGetPortArgs) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPortOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeHttpGetPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLivenessProbeHttpGetPortOutput)
}

func (i AlertmanagerSpecInitContainersLivenessProbeHttpGetPortArgs) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutput() AlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLivenessProbeHttpGetPortArgs) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLivenessProbeHttpGetPortOutput).ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrInput is an input type that accepts AlertmanagerSpecInitContainersLivenessProbeHttpGetPortArgs, AlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtr and AlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrInput` via:
//
//          AlertmanagerSpecInitContainersLivenessProbeHttpGetPortArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutput() AlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutput
	ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutput
}

type alertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrType AlertmanagerSpecInitContainersLivenessProbeHttpGetPortArgs

func AlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtr(v *AlertmanagerSpecInitContainersLivenessProbeHttpGetPortArgs) AlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrInput {
	return (*alertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrType)(v)
}

func (*alertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLivenessProbeHttpGetPort)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrType) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutput() AlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrType) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutput)
}

type AlertmanagerSpecInitContainersLivenessProbeHttpGetPortOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLivenessProbeHttpGetPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLivenessProbeHttpGetPort)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetPortOutput) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPortOutput() AlertmanagerSpecInitContainersLivenessProbeHttpGetPortOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetPortOutput) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPortOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeHttpGetPortOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetPortOutput) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutput() AlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutput {
	return o.ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetPortOutput) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLivenessProbeHttpGetPort) *AlertmanagerSpecInitContainersLivenessProbeHttpGetPort {
		return &v
	}).(AlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutput)
}

type AlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLivenessProbeHttpGetPort)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutput) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutput() AlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutput) ToAlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutput) Elem() AlertmanagerSpecInitContainersLivenessProbeHttpGetPortOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLivenessProbeHttpGetPort) AlertmanagerSpecInitContainersLivenessProbeHttpGetPort {
		return *v
	}).(AlertmanagerSpecInitContainersLivenessProbeHttpGetPortOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecInitContainersLivenessProbeTcpSocket struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecInitContainersLivenessProbeTcpSocketPort `pulumi:"port"`
}

// AlertmanagerSpecInitContainersLivenessProbeTcpSocketInput is an input type that accepts AlertmanagerSpecInitContainersLivenessProbeTcpSocketArgs and AlertmanagerSpecInitContainersLivenessProbeTcpSocketOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLivenessProbeTcpSocketInput` via:
//
//          AlertmanagerSpecInitContainersLivenessProbeTcpSocketArgs{...}
type AlertmanagerSpecInitContainersLivenessProbeTcpSocketInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketOutput() AlertmanagerSpecInitContainersLivenessProbeTcpSocketOutput
	ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketOutputWithContext(context.Context) AlertmanagerSpecInitContainersLivenessProbeTcpSocketOutput
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecInitContainersLivenessProbeTcpSocketArgs struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortInput `pulumi:"port"`
}

func (AlertmanagerSpecInitContainersLivenessProbeTcpSocketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLivenessProbeTcpSocket)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersLivenessProbeTcpSocketArgs) ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketOutput() AlertmanagerSpecInitContainersLivenessProbeTcpSocketOutput {
	return i.ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLivenessProbeTcpSocketArgs) ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeTcpSocketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLivenessProbeTcpSocketOutput)
}

func (i AlertmanagerSpecInitContainersLivenessProbeTcpSocketArgs) ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput() AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLivenessProbeTcpSocketArgs) ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLivenessProbeTcpSocketOutput).ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrInput is an input type that accepts AlertmanagerSpecInitContainersLivenessProbeTcpSocketArgs, AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtr and AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrInput` via:
//
//          AlertmanagerSpecInitContainersLivenessProbeTcpSocketArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput() AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput
	ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput
}

type alertmanagerSpecInitContainersLivenessProbeTcpSocketPtrType AlertmanagerSpecInitContainersLivenessProbeTcpSocketArgs

func AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtr(v *AlertmanagerSpecInitContainersLivenessProbeTcpSocketArgs) AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrInput {
	return (*alertmanagerSpecInitContainersLivenessProbeTcpSocketPtrType)(v)
}

func (*alertmanagerSpecInitContainersLivenessProbeTcpSocketPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLivenessProbeTcpSocket)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersLivenessProbeTcpSocketPtrType) ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput() AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersLivenessProbeTcpSocketPtrType) ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecInitContainersLivenessProbeTcpSocketOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLivenessProbeTcpSocketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLivenessProbeTcpSocket)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLivenessProbeTcpSocketOutput) ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketOutput() AlertmanagerSpecInitContainersLivenessProbeTcpSocketOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLivenessProbeTcpSocketOutput) ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeTcpSocketOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLivenessProbeTcpSocketOutput) ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput() AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput {
	return o.ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersLivenessProbeTcpSocketOutput) ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLivenessProbeTcpSocket) *AlertmanagerSpecInitContainersLivenessProbeTcpSocket {
		return &v
	}).(AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o AlertmanagerSpecInitContainersLivenessProbeTcpSocketOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLivenessProbeTcpSocket) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecInitContainersLivenessProbeTcpSocketOutput) Port() AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLivenessProbeTcpSocket) AlertmanagerSpecInitContainersLivenessProbeTcpSocketPort {
		return v.Port
	}).(AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortOutput)
}

type AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLivenessProbeTcpSocket)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput) ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput() AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput) ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput) Elem() AlertmanagerSpecInitContainersLivenessProbeTcpSocketOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLivenessProbeTcpSocket) AlertmanagerSpecInitContainersLivenessProbeTcpSocket {
		return *v
	}).(AlertmanagerSpecInitContainersLivenessProbeTcpSocketOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLivenessProbeTcpSocket) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput) Port() AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLivenessProbeTcpSocket) *AlertmanagerSpecInitContainersLivenessProbeTcpSocketPort {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutput)
}

type AlertmanagerSpecInitContainersLivenessProbeTcpSocketPort struct {
}

// AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortInput is an input type that accepts AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortArgs and AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortInput` via:
//
//          AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortArgs{...}
type AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPortOutput() AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortOutput
	ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPortOutputWithContext(context.Context) AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortOutput
}

type AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortArgs struct {
}

func (AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLivenessProbeTcpSocketPort)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortArgs) ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPortOutput() AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortOutput {
	return i.ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPortOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortArgs) ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPortOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortOutput)
}

func (i AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortArgs) ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutput() AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortArgs) ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortOutput).ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrInput is an input type that accepts AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortArgs, AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtr and AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrInput` via:
//
//          AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutput() AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutput
	ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutput
}

type alertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrType AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortArgs

func AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtr(v *AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortArgs) AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrInput {
	return (*alertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrType)(v)
}

func (*alertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLivenessProbeTcpSocketPort)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrType) ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutput() AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutput {
	return i.ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrType) ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutput)
}

type AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersLivenessProbeTcpSocketPort)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortOutput) ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPortOutput() AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortOutput) ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPortOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortOutput) ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutput() AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutput {
	return o.ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortOutput) ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersLivenessProbeTcpSocketPort) *AlertmanagerSpecInitContainersLivenessProbeTcpSocketPort {
		return &v
	}).(AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutput)
}

type AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersLivenessProbeTcpSocketPort)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutput) ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutput() AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutput) ToAlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutput) Elem() AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersLivenessProbeTcpSocketPort) AlertmanagerSpecInitContainersLivenessProbeTcpSocketPort {
		return *v
	}).(AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortOutput)
}

// ContainerPort represents a network port in a single container.
type AlertmanagerSpecInitContainersPorts struct {
	// Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
	ContainerPort int `pulumi:"containerPort"`
	// What host IP to bind the external port to.
	HostIP *string `pulumi:"hostIP"`
	// Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
	HostPort *int `pulumi:"hostPort"`
	// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
	Name *string `pulumi:"name"`
	// Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
	Protocol *string `pulumi:"protocol"`
}

// AlertmanagerSpecInitContainersPortsInput is an input type that accepts AlertmanagerSpecInitContainersPortsArgs and AlertmanagerSpecInitContainersPortsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersPortsInput` via:
//
//          AlertmanagerSpecInitContainersPortsArgs{...}
type AlertmanagerSpecInitContainersPortsInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersPortsOutput() AlertmanagerSpecInitContainersPortsOutput
	ToAlertmanagerSpecInitContainersPortsOutputWithContext(context.Context) AlertmanagerSpecInitContainersPortsOutput
}

// ContainerPort represents a network port in a single container.
type AlertmanagerSpecInitContainersPortsArgs struct {
	// Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
	ContainerPort pulumi.IntInput `pulumi:"containerPort"`
	// What host IP to bind the external port to.
	HostIP pulumi.StringPtrInput `pulumi:"hostIP"`
	// Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
	HostPort pulumi.IntPtrInput `pulumi:"hostPort"`
	// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (AlertmanagerSpecInitContainersPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersPorts)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersPortsArgs) ToAlertmanagerSpecInitContainersPortsOutput() AlertmanagerSpecInitContainersPortsOutput {
	return i.ToAlertmanagerSpecInitContainersPortsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersPortsArgs) ToAlertmanagerSpecInitContainersPortsOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersPortsOutput)
}

// AlertmanagerSpecInitContainersPortsArrayInput is an input type that accepts AlertmanagerSpecInitContainersPortsArray and AlertmanagerSpecInitContainersPortsArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersPortsArrayInput` via:
//
//          AlertmanagerSpecInitContainersPortsArray{ AlertmanagerSpecInitContainersPortsArgs{...} }
type AlertmanagerSpecInitContainersPortsArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersPortsArrayOutput() AlertmanagerSpecInitContainersPortsArrayOutput
	ToAlertmanagerSpecInitContainersPortsArrayOutputWithContext(context.Context) AlertmanagerSpecInitContainersPortsArrayOutput
}

type AlertmanagerSpecInitContainersPortsArray []AlertmanagerSpecInitContainersPortsInput

func (AlertmanagerSpecInitContainersPortsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecInitContainersPorts)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersPortsArray) ToAlertmanagerSpecInitContainersPortsArrayOutput() AlertmanagerSpecInitContainersPortsArrayOutput {
	return i.ToAlertmanagerSpecInitContainersPortsArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersPortsArray) ToAlertmanagerSpecInitContainersPortsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersPortsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersPortsArrayOutput)
}

// ContainerPort represents a network port in a single container.
type AlertmanagerSpecInitContainersPortsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersPorts)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersPortsOutput) ToAlertmanagerSpecInitContainersPortsOutput() AlertmanagerSpecInitContainersPortsOutput {
	return o
}

func (o AlertmanagerSpecInitContainersPortsOutput) ToAlertmanagerSpecInitContainersPortsOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersPortsOutput {
	return o
}

// Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
func (o AlertmanagerSpecInitContainersPortsOutput) ContainerPort() pulumi.IntOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersPorts) int { return v.ContainerPort }).(pulumi.IntOutput)
}

// What host IP to bind the external port to.
func (o AlertmanagerSpecInitContainersPortsOutput) HostIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersPorts) *string { return v.HostIP }).(pulumi.StringPtrOutput)
}

// Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
func (o AlertmanagerSpecInitContainersPortsOutput) HostPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersPorts) *int { return v.HostPort }).(pulumi.IntPtrOutput)
}

// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
func (o AlertmanagerSpecInitContainersPortsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersPorts) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
func (o AlertmanagerSpecInitContainersPortsOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersPorts) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecInitContainersPortsArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersPortsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecInitContainersPorts)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersPortsArrayOutput) ToAlertmanagerSpecInitContainersPortsArrayOutput() AlertmanagerSpecInitContainersPortsArrayOutput {
	return o
}

func (o AlertmanagerSpecInitContainersPortsArrayOutput) ToAlertmanagerSpecInitContainersPortsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersPortsArrayOutput {
	return o
}

func (o AlertmanagerSpecInitContainersPortsArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecInitContainersPortsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecInitContainersPorts {
		return vs[0].([]AlertmanagerSpecInitContainersPorts)[vs[1].(int)]
	}).(AlertmanagerSpecInitContainersPortsOutput)
}

// Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
type AlertmanagerSpecInitContainersReadinessProbe struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec *AlertmanagerSpecInitContainersReadinessProbeExec `pulumi:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// HTTPGet specifies the http request to perform.
	HttpGet *AlertmanagerSpecInitContainersReadinessProbeHttpGet `pulumi:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
	TcpSocket *AlertmanagerSpecInitContainersReadinessProbeTcpSocket `pulumi:"tcpSocket"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// AlertmanagerSpecInitContainersReadinessProbeInput is an input type that accepts AlertmanagerSpecInitContainersReadinessProbeArgs and AlertmanagerSpecInitContainersReadinessProbeOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersReadinessProbeInput` via:
//
//          AlertmanagerSpecInitContainersReadinessProbeArgs{...}
type AlertmanagerSpecInitContainersReadinessProbeInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersReadinessProbeOutput() AlertmanagerSpecInitContainersReadinessProbeOutput
	ToAlertmanagerSpecInitContainersReadinessProbeOutputWithContext(context.Context) AlertmanagerSpecInitContainersReadinessProbeOutput
}

// Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
type AlertmanagerSpecInitContainersReadinessProbeArgs struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec AlertmanagerSpecInitContainersReadinessProbeExecPtrInput `pulumi:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// HTTPGet specifies the http request to perform.
	HttpGet AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrInput `pulumi:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
	TcpSocket AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrInput `pulumi:"tcpSocket"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (AlertmanagerSpecInitContainersReadinessProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersReadinessProbe)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersReadinessProbeArgs) ToAlertmanagerSpecInitContainersReadinessProbeOutput() AlertmanagerSpecInitContainersReadinessProbeOutput {
	return i.ToAlertmanagerSpecInitContainersReadinessProbeOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersReadinessProbeArgs) ToAlertmanagerSpecInitContainersReadinessProbeOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersReadinessProbeOutput)
}

func (i AlertmanagerSpecInitContainersReadinessProbeArgs) ToAlertmanagerSpecInitContainersReadinessProbePtrOutput() AlertmanagerSpecInitContainersReadinessProbePtrOutput {
	return i.ToAlertmanagerSpecInitContainersReadinessProbePtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersReadinessProbeArgs) ToAlertmanagerSpecInitContainersReadinessProbePtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersReadinessProbeOutput).ToAlertmanagerSpecInitContainersReadinessProbePtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersReadinessProbePtrInput is an input type that accepts AlertmanagerSpecInitContainersReadinessProbeArgs, AlertmanagerSpecInitContainersReadinessProbePtr and AlertmanagerSpecInitContainersReadinessProbePtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersReadinessProbePtrInput` via:
//
//          AlertmanagerSpecInitContainersReadinessProbeArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersReadinessProbePtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersReadinessProbePtrOutput() AlertmanagerSpecInitContainersReadinessProbePtrOutput
	ToAlertmanagerSpecInitContainersReadinessProbePtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersReadinessProbePtrOutput
}

type alertmanagerSpecInitContainersReadinessProbePtrType AlertmanagerSpecInitContainersReadinessProbeArgs

func AlertmanagerSpecInitContainersReadinessProbePtr(v *AlertmanagerSpecInitContainersReadinessProbeArgs) AlertmanagerSpecInitContainersReadinessProbePtrInput {
	return (*alertmanagerSpecInitContainersReadinessProbePtrType)(v)
}

func (*alertmanagerSpecInitContainersReadinessProbePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersReadinessProbe)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersReadinessProbePtrType) ToAlertmanagerSpecInitContainersReadinessProbePtrOutput() AlertmanagerSpecInitContainersReadinessProbePtrOutput {
	return i.ToAlertmanagerSpecInitContainersReadinessProbePtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersReadinessProbePtrType) ToAlertmanagerSpecInitContainersReadinessProbePtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersReadinessProbePtrOutput)
}

// Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
type AlertmanagerSpecInitContainersReadinessProbeOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersReadinessProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersReadinessProbe)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersReadinessProbeOutput) ToAlertmanagerSpecInitContainersReadinessProbeOutput() AlertmanagerSpecInitContainersReadinessProbeOutput {
	return o
}

func (o AlertmanagerSpecInitContainersReadinessProbeOutput) ToAlertmanagerSpecInitContainersReadinessProbeOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeOutput {
	return o
}

func (o AlertmanagerSpecInitContainersReadinessProbeOutput) ToAlertmanagerSpecInitContainersReadinessProbePtrOutput() AlertmanagerSpecInitContainersReadinessProbePtrOutput {
	return o.ToAlertmanagerSpecInitContainersReadinessProbePtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersReadinessProbeOutput) ToAlertmanagerSpecInitContainersReadinessProbePtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersReadinessProbe) *AlertmanagerSpecInitContainersReadinessProbe {
		return &v
	}).(AlertmanagerSpecInitContainersReadinessProbePtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
func (o AlertmanagerSpecInitContainersReadinessProbeOutput) Exec() AlertmanagerSpecInitContainersReadinessProbeExecPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersReadinessProbe) *AlertmanagerSpecInitContainersReadinessProbeExec {
		return v.Exec
	}).(AlertmanagerSpecInitContainersReadinessProbeExecPtrOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (o AlertmanagerSpecInitContainersReadinessProbeOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersReadinessProbe) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o AlertmanagerSpecInitContainersReadinessProbeOutput) HttpGet() AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersReadinessProbe) *AlertmanagerSpecInitContainersReadinessProbeHttpGet {
		return v.HttpGet
	}).(AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput)
}

// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecInitContainersReadinessProbeOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersReadinessProbe) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
func (o AlertmanagerSpecInitContainersReadinessProbeOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersReadinessProbe) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
func (o AlertmanagerSpecInitContainersReadinessProbeOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersReadinessProbe) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
func (o AlertmanagerSpecInitContainersReadinessProbeOutput) TcpSocket() AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersReadinessProbe) *AlertmanagerSpecInitContainersReadinessProbeTcpSocket {
		return v.TcpSocket
	}).(AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput)
}

// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecInitContainersReadinessProbeOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersReadinessProbe) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type AlertmanagerSpecInitContainersReadinessProbePtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersReadinessProbePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersReadinessProbe)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersReadinessProbePtrOutput) ToAlertmanagerSpecInitContainersReadinessProbePtrOutput() AlertmanagerSpecInitContainersReadinessProbePtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersReadinessProbePtrOutput) ToAlertmanagerSpecInitContainersReadinessProbePtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbePtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersReadinessProbePtrOutput) Elem() AlertmanagerSpecInitContainersReadinessProbeOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersReadinessProbe) AlertmanagerSpecInitContainersReadinessProbe {
		return *v
	}).(AlertmanagerSpecInitContainersReadinessProbeOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
func (o AlertmanagerSpecInitContainersReadinessProbePtrOutput) Exec() AlertmanagerSpecInitContainersReadinessProbeExecPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersReadinessProbe) *AlertmanagerSpecInitContainersReadinessProbeExec {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(AlertmanagerSpecInitContainersReadinessProbeExecPtrOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (o AlertmanagerSpecInitContainersReadinessProbePtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o AlertmanagerSpecInitContainersReadinessProbePtrOutput) HttpGet() AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersReadinessProbe) *AlertmanagerSpecInitContainersReadinessProbeHttpGet {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput)
}

// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecInitContainersReadinessProbePtrOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.InitialDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
func (o AlertmanagerSpecInitContainersReadinessProbePtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
func (o AlertmanagerSpecInitContainersReadinessProbePtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
func (o AlertmanagerSpecInitContainersReadinessProbePtrOutput) TcpSocket() AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersReadinessProbe) *AlertmanagerSpecInitContainersReadinessProbeTcpSocket {
		if v == nil {
			return nil
		}
		return v.TcpSocket
	}).(AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput)
}

// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecInitContainersReadinessProbePtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecInitContainersReadinessProbeExec struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command []string `pulumi:"command"`
}

// AlertmanagerSpecInitContainersReadinessProbeExecInput is an input type that accepts AlertmanagerSpecInitContainersReadinessProbeExecArgs and AlertmanagerSpecInitContainersReadinessProbeExecOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersReadinessProbeExecInput` via:
//
//          AlertmanagerSpecInitContainersReadinessProbeExecArgs{...}
type AlertmanagerSpecInitContainersReadinessProbeExecInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersReadinessProbeExecOutput() AlertmanagerSpecInitContainersReadinessProbeExecOutput
	ToAlertmanagerSpecInitContainersReadinessProbeExecOutputWithContext(context.Context) AlertmanagerSpecInitContainersReadinessProbeExecOutput
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecInitContainersReadinessProbeExecArgs struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command pulumi.StringArrayInput `pulumi:"command"`
}

func (AlertmanagerSpecInitContainersReadinessProbeExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersReadinessProbeExec)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersReadinessProbeExecArgs) ToAlertmanagerSpecInitContainersReadinessProbeExecOutput() AlertmanagerSpecInitContainersReadinessProbeExecOutput {
	return i.ToAlertmanagerSpecInitContainersReadinessProbeExecOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersReadinessProbeExecArgs) ToAlertmanagerSpecInitContainersReadinessProbeExecOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersReadinessProbeExecOutput)
}

func (i AlertmanagerSpecInitContainersReadinessProbeExecArgs) ToAlertmanagerSpecInitContainersReadinessProbeExecPtrOutput() AlertmanagerSpecInitContainersReadinessProbeExecPtrOutput {
	return i.ToAlertmanagerSpecInitContainersReadinessProbeExecPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersReadinessProbeExecArgs) ToAlertmanagerSpecInitContainersReadinessProbeExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersReadinessProbeExecOutput).ToAlertmanagerSpecInitContainersReadinessProbeExecPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersReadinessProbeExecPtrInput is an input type that accepts AlertmanagerSpecInitContainersReadinessProbeExecArgs, AlertmanagerSpecInitContainersReadinessProbeExecPtr and AlertmanagerSpecInitContainersReadinessProbeExecPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersReadinessProbeExecPtrInput` via:
//
//          AlertmanagerSpecInitContainersReadinessProbeExecArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersReadinessProbeExecPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersReadinessProbeExecPtrOutput() AlertmanagerSpecInitContainersReadinessProbeExecPtrOutput
	ToAlertmanagerSpecInitContainersReadinessProbeExecPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersReadinessProbeExecPtrOutput
}

type alertmanagerSpecInitContainersReadinessProbeExecPtrType AlertmanagerSpecInitContainersReadinessProbeExecArgs

func AlertmanagerSpecInitContainersReadinessProbeExecPtr(v *AlertmanagerSpecInitContainersReadinessProbeExecArgs) AlertmanagerSpecInitContainersReadinessProbeExecPtrInput {
	return (*alertmanagerSpecInitContainersReadinessProbeExecPtrType)(v)
}

func (*alertmanagerSpecInitContainersReadinessProbeExecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersReadinessProbeExec)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersReadinessProbeExecPtrType) ToAlertmanagerSpecInitContainersReadinessProbeExecPtrOutput() AlertmanagerSpecInitContainersReadinessProbeExecPtrOutput {
	return i.ToAlertmanagerSpecInitContainersReadinessProbeExecPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersReadinessProbeExecPtrType) ToAlertmanagerSpecInitContainersReadinessProbeExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersReadinessProbeExecPtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecInitContainersReadinessProbeExecOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersReadinessProbeExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersReadinessProbeExec)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersReadinessProbeExecOutput) ToAlertmanagerSpecInitContainersReadinessProbeExecOutput() AlertmanagerSpecInitContainersReadinessProbeExecOutput {
	return o
}

func (o AlertmanagerSpecInitContainersReadinessProbeExecOutput) ToAlertmanagerSpecInitContainersReadinessProbeExecOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeExecOutput {
	return o
}

func (o AlertmanagerSpecInitContainersReadinessProbeExecOutput) ToAlertmanagerSpecInitContainersReadinessProbeExecPtrOutput() AlertmanagerSpecInitContainersReadinessProbeExecPtrOutput {
	return o.ToAlertmanagerSpecInitContainersReadinessProbeExecPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersReadinessProbeExecOutput) ToAlertmanagerSpecInitContainersReadinessProbeExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeExecPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersReadinessProbeExec) *AlertmanagerSpecInitContainersReadinessProbeExec {
		return &v
	}).(AlertmanagerSpecInitContainersReadinessProbeExecPtrOutput)
}

// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o AlertmanagerSpecInitContainersReadinessProbeExecOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersReadinessProbeExec) []string { return v.Command }).(pulumi.StringArrayOutput)
}

type AlertmanagerSpecInitContainersReadinessProbeExecPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersReadinessProbeExecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersReadinessProbeExec)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersReadinessProbeExecPtrOutput) ToAlertmanagerSpecInitContainersReadinessProbeExecPtrOutput() AlertmanagerSpecInitContainersReadinessProbeExecPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersReadinessProbeExecPtrOutput) ToAlertmanagerSpecInitContainersReadinessProbeExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeExecPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersReadinessProbeExecPtrOutput) Elem() AlertmanagerSpecInitContainersReadinessProbeExecOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersReadinessProbeExec) AlertmanagerSpecInitContainersReadinessProbeExec {
		return *v
	}).(AlertmanagerSpecInitContainersReadinessProbeExecOutput)
}

// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o AlertmanagerSpecInitContainersReadinessProbeExecPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersReadinessProbeExec) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecInitContainersReadinessProbeHttpGet struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeaders `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path *string `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecInitContainersReadinessProbeHttpGetPort `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `pulumi:"scheme"`
}

// AlertmanagerSpecInitContainersReadinessProbeHttpGetInput is an input type that accepts AlertmanagerSpecInitContainersReadinessProbeHttpGetArgs and AlertmanagerSpecInitContainersReadinessProbeHttpGetOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersReadinessProbeHttpGetInput` via:
//
//          AlertmanagerSpecInitContainersReadinessProbeHttpGetArgs{...}
type AlertmanagerSpecInitContainersReadinessProbeHttpGetInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersReadinessProbeHttpGetOutput() AlertmanagerSpecInitContainersReadinessProbeHttpGetOutput
	ToAlertmanagerSpecInitContainersReadinessProbeHttpGetOutputWithContext(context.Context) AlertmanagerSpecInitContainersReadinessProbeHttpGetOutput
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecInitContainersReadinessProbeHttpGetArgs struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayInput `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecInitContainersReadinessProbeHttpGetPortInput `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (AlertmanagerSpecInitContainersReadinessProbeHttpGetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersReadinessProbeHttpGet)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersReadinessProbeHttpGetArgs) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetOutput() AlertmanagerSpecInitContainersReadinessProbeHttpGetOutput {
	return i.ToAlertmanagerSpecInitContainersReadinessProbeHttpGetOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersReadinessProbeHttpGetArgs) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeHttpGetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersReadinessProbeHttpGetOutput)
}

func (i AlertmanagerSpecInitContainersReadinessProbeHttpGetArgs) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput() AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput {
	return i.ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersReadinessProbeHttpGetArgs) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersReadinessProbeHttpGetOutput).ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrInput is an input type that accepts AlertmanagerSpecInitContainersReadinessProbeHttpGetArgs, AlertmanagerSpecInitContainersReadinessProbeHttpGetPtr and AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrInput` via:
//
//          AlertmanagerSpecInitContainersReadinessProbeHttpGetArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput() AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput
	ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput
}

type alertmanagerSpecInitContainersReadinessProbeHttpGetPtrType AlertmanagerSpecInitContainersReadinessProbeHttpGetArgs

func AlertmanagerSpecInitContainersReadinessProbeHttpGetPtr(v *AlertmanagerSpecInitContainersReadinessProbeHttpGetArgs) AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrInput {
	return (*alertmanagerSpecInitContainersReadinessProbeHttpGetPtrType)(v)
}

func (*alertmanagerSpecInitContainersReadinessProbeHttpGetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersReadinessProbeHttpGet)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersReadinessProbeHttpGetPtrType) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput() AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput {
	return i.ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersReadinessProbeHttpGetPtrType) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput)
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecInitContainersReadinessProbeHttpGetOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersReadinessProbeHttpGetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersReadinessProbeHttpGet)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetOutput) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetOutput() AlertmanagerSpecInitContainersReadinessProbeHttpGetOutput {
	return o
}

func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetOutput) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeHttpGetOutput {
	return o
}

func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetOutput) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput() AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput {
	return o.ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetOutput) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersReadinessProbeHttpGet) *AlertmanagerSpecInitContainersReadinessProbeHttpGet {
		return &v
	}).(AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersReadinessProbeHttpGet) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetOutput) HttpHeaders() AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersReadinessProbeHttpGet) []AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeaders {
		return v.HttpHeaders
	}).(AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersReadinessProbeHttpGet) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetOutput) Port() AlertmanagerSpecInitContainersReadinessProbeHttpGetPortOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersReadinessProbeHttpGet) AlertmanagerSpecInitContainersReadinessProbeHttpGetPort {
		return v.Port
	}).(AlertmanagerSpecInitContainersReadinessProbeHttpGetPortOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersReadinessProbeHttpGet) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersReadinessProbeHttpGet)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput() AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput) Elem() AlertmanagerSpecInitContainersReadinessProbeHttpGetOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersReadinessProbeHttpGet) AlertmanagerSpecInitContainersReadinessProbeHttpGet {
		return *v
	}).(AlertmanagerSpecInitContainersReadinessProbeHttpGetOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersReadinessProbeHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput) HttpHeaders() AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersReadinessProbeHttpGet) []AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeaders {
		if v == nil {
			return nil
		}
		return v.HttpHeaders
	}).(AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersReadinessProbeHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput) Port() AlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersReadinessProbeHttpGet) *AlertmanagerSpecInitContainersReadinessProbeHttpGetPort {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(AlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersReadinessProbeHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeaders struct {
	// The header field name
	Name string `pulumi:"name"`
	// The header field value
	Value string `pulumi:"value"`
}

// AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersInput is an input type that accepts AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs and AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersInput` via:
//
//          AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs{...}
type AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput() AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput
	ToAlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutputWithContext(context.Context) AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs struct {
	// The header field name
	Name pulumi.StringInput `pulumi:"name"`
	// The header field value
	Value pulumi.StringInput `pulumi:"value"`
}

func (AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput() AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput {
	return i.ToAlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput)
}

// AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayInput is an input type that accepts AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArray and AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayInput` via:
//
//          AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArray{ AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs{...} }
type AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput() AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput
	ToAlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutputWithContext(context.Context) AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput
}

type AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArray []AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersInput

func (AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArray) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput() AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput {
	return i.ToAlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArray) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput() AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput {
	return o
}

func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput {
	return o
}

// The header field name
func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeaders) string { return v.Name }).(pulumi.StringOutput)
}

// The header field value
func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeaders) string { return v.Value }).(pulumi.StringOutput)
}

type AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput() AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput {
	return o
}

func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput {
	return o
}

func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeaders {
		return vs[0].([]AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeaders)[vs[1].(int)]
	}).(AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput)
}

type AlertmanagerSpecInitContainersReadinessProbeHttpGetPort struct {
}

// AlertmanagerSpecInitContainersReadinessProbeHttpGetPortInput is an input type that accepts AlertmanagerSpecInitContainersReadinessProbeHttpGetPortArgs and AlertmanagerSpecInitContainersReadinessProbeHttpGetPortOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersReadinessProbeHttpGetPortInput` via:
//
//          AlertmanagerSpecInitContainersReadinessProbeHttpGetPortArgs{...}
type AlertmanagerSpecInitContainersReadinessProbeHttpGetPortInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPortOutput() AlertmanagerSpecInitContainersReadinessProbeHttpGetPortOutput
	ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPortOutputWithContext(context.Context) AlertmanagerSpecInitContainersReadinessProbeHttpGetPortOutput
}

type AlertmanagerSpecInitContainersReadinessProbeHttpGetPortArgs struct {
}

func (AlertmanagerSpecInitContainersReadinessProbeHttpGetPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersReadinessProbeHttpGetPort)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersReadinessProbeHttpGetPortArgs) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPortOutput() AlertmanagerSpecInitContainersReadinessProbeHttpGetPortOutput {
	return i.ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPortOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersReadinessProbeHttpGetPortArgs) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPortOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeHttpGetPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersReadinessProbeHttpGetPortOutput)
}

func (i AlertmanagerSpecInitContainersReadinessProbeHttpGetPortArgs) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutput() AlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutput {
	return i.ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersReadinessProbeHttpGetPortArgs) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersReadinessProbeHttpGetPortOutput).ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrInput is an input type that accepts AlertmanagerSpecInitContainersReadinessProbeHttpGetPortArgs, AlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtr and AlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrInput` via:
//
//          AlertmanagerSpecInitContainersReadinessProbeHttpGetPortArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutput() AlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutput
	ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutput
}

type alertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrType AlertmanagerSpecInitContainersReadinessProbeHttpGetPortArgs

func AlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtr(v *AlertmanagerSpecInitContainersReadinessProbeHttpGetPortArgs) AlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrInput {
	return (*alertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrType)(v)
}

func (*alertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersReadinessProbeHttpGetPort)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrType) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutput() AlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutput {
	return i.ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrType) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutput)
}

type AlertmanagerSpecInitContainersReadinessProbeHttpGetPortOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersReadinessProbeHttpGetPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersReadinessProbeHttpGetPort)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetPortOutput) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPortOutput() AlertmanagerSpecInitContainersReadinessProbeHttpGetPortOutput {
	return o
}

func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetPortOutput) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPortOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeHttpGetPortOutput {
	return o
}

func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetPortOutput) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutput() AlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutput {
	return o.ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetPortOutput) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersReadinessProbeHttpGetPort) *AlertmanagerSpecInitContainersReadinessProbeHttpGetPort {
		return &v
	}).(AlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutput)
}

type AlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersReadinessProbeHttpGetPort)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutput) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutput() AlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutput) ToAlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutput) Elem() AlertmanagerSpecInitContainersReadinessProbeHttpGetPortOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersReadinessProbeHttpGetPort) AlertmanagerSpecInitContainersReadinessProbeHttpGetPort {
		return *v
	}).(AlertmanagerSpecInitContainersReadinessProbeHttpGetPortOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecInitContainersReadinessProbeTcpSocket struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecInitContainersReadinessProbeTcpSocketPort `pulumi:"port"`
}

// AlertmanagerSpecInitContainersReadinessProbeTcpSocketInput is an input type that accepts AlertmanagerSpecInitContainersReadinessProbeTcpSocketArgs and AlertmanagerSpecInitContainersReadinessProbeTcpSocketOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersReadinessProbeTcpSocketInput` via:
//
//          AlertmanagerSpecInitContainersReadinessProbeTcpSocketArgs{...}
type AlertmanagerSpecInitContainersReadinessProbeTcpSocketInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketOutput() AlertmanagerSpecInitContainersReadinessProbeTcpSocketOutput
	ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketOutputWithContext(context.Context) AlertmanagerSpecInitContainersReadinessProbeTcpSocketOutput
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecInitContainersReadinessProbeTcpSocketArgs struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortInput `pulumi:"port"`
}

func (AlertmanagerSpecInitContainersReadinessProbeTcpSocketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersReadinessProbeTcpSocket)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersReadinessProbeTcpSocketArgs) ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketOutput() AlertmanagerSpecInitContainersReadinessProbeTcpSocketOutput {
	return i.ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersReadinessProbeTcpSocketArgs) ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeTcpSocketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersReadinessProbeTcpSocketOutput)
}

func (i AlertmanagerSpecInitContainersReadinessProbeTcpSocketArgs) ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput() AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput {
	return i.ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersReadinessProbeTcpSocketArgs) ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersReadinessProbeTcpSocketOutput).ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrInput is an input type that accepts AlertmanagerSpecInitContainersReadinessProbeTcpSocketArgs, AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtr and AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrInput` via:
//
//          AlertmanagerSpecInitContainersReadinessProbeTcpSocketArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput() AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput
	ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput
}

type alertmanagerSpecInitContainersReadinessProbeTcpSocketPtrType AlertmanagerSpecInitContainersReadinessProbeTcpSocketArgs

func AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtr(v *AlertmanagerSpecInitContainersReadinessProbeTcpSocketArgs) AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrInput {
	return (*alertmanagerSpecInitContainersReadinessProbeTcpSocketPtrType)(v)
}

func (*alertmanagerSpecInitContainersReadinessProbeTcpSocketPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersReadinessProbeTcpSocket)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersReadinessProbeTcpSocketPtrType) ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput() AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput {
	return i.ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersReadinessProbeTcpSocketPtrType) ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecInitContainersReadinessProbeTcpSocketOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersReadinessProbeTcpSocketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersReadinessProbeTcpSocket)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersReadinessProbeTcpSocketOutput) ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketOutput() AlertmanagerSpecInitContainersReadinessProbeTcpSocketOutput {
	return o
}

func (o AlertmanagerSpecInitContainersReadinessProbeTcpSocketOutput) ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeTcpSocketOutput {
	return o
}

func (o AlertmanagerSpecInitContainersReadinessProbeTcpSocketOutput) ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput() AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput {
	return o.ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersReadinessProbeTcpSocketOutput) ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersReadinessProbeTcpSocket) *AlertmanagerSpecInitContainersReadinessProbeTcpSocket {
		return &v
	}).(AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o AlertmanagerSpecInitContainersReadinessProbeTcpSocketOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersReadinessProbeTcpSocket) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecInitContainersReadinessProbeTcpSocketOutput) Port() AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersReadinessProbeTcpSocket) AlertmanagerSpecInitContainersReadinessProbeTcpSocketPort {
		return v.Port
	}).(AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortOutput)
}

type AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersReadinessProbeTcpSocket)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput) ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput() AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput) ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput) Elem() AlertmanagerSpecInitContainersReadinessProbeTcpSocketOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersReadinessProbeTcpSocket) AlertmanagerSpecInitContainersReadinessProbeTcpSocket {
		return *v
	}).(AlertmanagerSpecInitContainersReadinessProbeTcpSocketOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersReadinessProbeTcpSocket) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput) Port() AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersReadinessProbeTcpSocket) *AlertmanagerSpecInitContainersReadinessProbeTcpSocketPort {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutput)
}

type AlertmanagerSpecInitContainersReadinessProbeTcpSocketPort struct {
}

// AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortInput is an input type that accepts AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortArgs and AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortInput` via:
//
//          AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortArgs{...}
type AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPortOutput() AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortOutput
	ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPortOutputWithContext(context.Context) AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortOutput
}

type AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortArgs struct {
}

func (AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersReadinessProbeTcpSocketPort)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortArgs) ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPortOutput() AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortOutput {
	return i.ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPortOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortArgs) ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPortOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortOutput)
}

func (i AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortArgs) ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutput() AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutput {
	return i.ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortArgs) ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortOutput).ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrInput is an input type that accepts AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortArgs, AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtr and AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrInput` via:
//
//          AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutput() AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutput
	ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutput
}

type alertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrType AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortArgs

func AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtr(v *AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortArgs) AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrInput {
	return (*alertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrType)(v)
}

func (*alertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersReadinessProbeTcpSocketPort)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrType) ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutput() AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutput {
	return i.ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrType) ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutput)
}

type AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersReadinessProbeTcpSocketPort)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortOutput) ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPortOutput() AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortOutput {
	return o
}

func (o AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortOutput) ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPortOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortOutput {
	return o
}

func (o AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortOutput) ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutput() AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutput {
	return o.ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortOutput) ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersReadinessProbeTcpSocketPort) *AlertmanagerSpecInitContainersReadinessProbeTcpSocketPort {
		return &v
	}).(AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutput)
}

type AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersReadinessProbeTcpSocketPort)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutput) ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutput() AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutput) ToAlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutput) Elem() AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersReadinessProbeTcpSocketPort) AlertmanagerSpecInitContainersReadinessProbeTcpSocketPort {
		return *v
	}).(AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortOutput)
}

// Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecInitContainersResources struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits map[string]string `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests map[string]string `pulumi:"requests"`
}

// AlertmanagerSpecInitContainersResourcesInput is an input type that accepts AlertmanagerSpecInitContainersResourcesArgs and AlertmanagerSpecInitContainersResourcesOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersResourcesInput` via:
//
//          AlertmanagerSpecInitContainersResourcesArgs{...}
type AlertmanagerSpecInitContainersResourcesInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersResourcesOutput() AlertmanagerSpecInitContainersResourcesOutput
	ToAlertmanagerSpecInitContainersResourcesOutputWithContext(context.Context) AlertmanagerSpecInitContainersResourcesOutput
}

// Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecInitContainersResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits pulumi.StringMapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests pulumi.StringMapInput `pulumi:"requests"`
}

func (AlertmanagerSpecInitContainersResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersResources)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersResourcesArgs) ToAlertmanagerSpecInitContainersResourcesOutput() AlertmanagerSpecInitContainersResourcesOutput {
	return i.ToAlertmanagerSpecInitContainersResourcesOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersResourcesArgs) ToAlertmanagerSpecInitContainersResourcesOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersResourcesOutput)
}

func (i AlertmanagerSpecInitContainersResourcesArgs) ToAlertmanagerSpecInitContainersResourcesPtrOutput() AlertmanagerSpecInitContainersResourcesPtrOutput {
	return i.ToAlertmanagerSpecInitContainersResourcesPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersResourcesArgs) ToAlertmanagerSpecInitContainersResourcesPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersResourcesOutput).ToAlertmanagerSpecInitContainersResourcesPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersResourcesPtrInput is an input type that accepts AlertmanagerSpecInitContainersResourcesArgs, AlertmanagerSpecInitContainersResourcesPtr and AlertmanagerSpecInitContainersResourcesPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersResourcesPtrInput` via:
//
//          AlertmanagerSpecInitContainersResourcesArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersResourcesPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersResourcesPtrOutput() AlertmanagerSpecInitContainersResourcesPtrOutput
	ToAlertmanagerSpecInitContainersResourcesPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersResourcesPtrOutput
}

type alertmanagerSpecInitContainersResourcesPtrType AlertmanagerSpecInitContainersResourcesArgs

func AlertmanagerSpecInitContainersResourcesPtr(v *AlertmanagerSpecInitContainersResourcesArgs) AlertmanagerSpecInitContainersResourcesPtrInput {
	return (*alertmanagerSpecInitContainersResourcesPtrType)(v)
}

func (*alertmanagerSpecInitContainersResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersResources)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersResourcesPtrType) ToAlertmanagerSpecInitContainersResourcesPtrOutput() AlertmanagerSpecInitContainersResourcesPtrOutput {
	return i.ToAlertmanagerSpecInitContainersResourcesPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersResourcesPtrType) ToAlertmanagerSpecInitContainersResourcesPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersResourcesPtrOutput)
}

// Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecInitContainersResourcesOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersResources)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersResourcesOutput) ToAlertmanagerSpecInitContainersResourcesOutput() AlertmanagerSpecInitContainersResourcesOutput {
	return o
}

func (o AlertmanagerSpecInitContainersResourcesOutput) ToAlertmanagerSpecInitContainersResourcesOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersResourcesOutput {
	return o
}

func (o AlertmanagerSpecInitContainersResourcesOutput) ToAlertmanagerSpecInitContainersResourcesPtrOutput() AlertmanagerSpecInitContainersResourcesPtrOutput {
	return o.ToAlertmanagerSpecInitContainersResourcesPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersResourcesOutput) ToAlertmanagerSpecInitContainersResourcesPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersResourcesPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersResources) *AlertmanagerSpecInitContainersResources {
		return &v
	}).(AlertmanagerSpecInitContainersResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o AlertmanagerSpecInitContainersResourcesOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersResources) map[string]string { return v.Limits }).(pulumi.StringMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o AlertmanagerSpecInitContainersResourcesOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersResources) map[string]string { return v.Requests }).(pulumi.StringMapOutput)
}

type AlertmanagerSpecInitContainersResourcesPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersResources)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersResourcesPtrOutput) ToAlertmanagerSpecInitContainersResourcesPtrOutput() AlertmanagerSpecInitContainersResourcesPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersResourcesPtrOutput) ToAlertmanagerSpecInitContainersResourcesPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersResourcesPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersResourcesPtrOutput) Elem() AlertmanagerSpecInitContainersResourcesOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersResources) AlertmanagerSpecInitContainersResources { return *v }).(AlertmanagerSpecInitContainersResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o AlertmanagerSpecInitContainersResourcesPtrOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersResources) map[string]string {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.StringMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o AlertmanagerSpecInitContainersResourcesPtrOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersResources) map[string]string {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.StringMapOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecInitContainersResourcesLimits struct {
}

// AlertmanagerSpecInitContainersResourcesLimitsInput is an input type that accepts AlertmanagerSpecInitContainersResourcesLimitsArgs and AlertmanagerSpecInitContainersResourcesLimitsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersResourcesLimitsInput` via:
//
//          AlertmanagerSpecInitContainersResourcesLimitsArgs{...}
type AlertmanagerSpecInitContainersResourcesLimitsInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersResourcesLimitsOutput() AlertmanagerSpecInitContainersResourcesLimitsOutput
	ToAlertmanagerSpecInitContainersResourcesLimitsOutputWithContext(context.Context) AlertmanagerSpecInitContainersResourcesLimitsOutput
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecInitContainersResourcesLimitsArgs struct {
}

func (AlertmanagerSpecInitContainersResourcesLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersResourcesLimits)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersResourcesLimitsArgs) ToAlertmanagerSpecInitContainersResourcesLimitsOutput() AlertmanagerSpecInitContainersResourcesLimitsOutput {
	return i.ToAlertmanagerSpecInitContainersResourcesLimitsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersResourcesLimitsArgs) ToAlertmanagerSpecInitContainersResourcesLimitsOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersResourcesLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersResourcesLimitsOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecInitContainersResourcesLimitsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersResourcesLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersResourcesLimits)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersResourcesLimitsOutput) ToAlertmanagerSpecInitContainersResourcesLimitsOutput() AlertmanagerSpecInitContainersResourcesLimitsOutput {
	return o
}

func (o AlertmanagerSpecInitContainersResourcesLimitsOutput) ToAlertmanagerSpecInitContainersResourcesLimitsOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersResourcesLimitsOutput {
	return o
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecInitContainersResourcesRequests struct {
}

// AlertmanagerSpecInitContainersResourcesRequestsInput is an input type that accepts AlertmanagerSpecInitContainersResourcesRequestsArgs and AlertmanagerSpecInitContainersResourcesRequestsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersResourcesRequestsInput` via:
//
//          AlertmanagerSpecInitContainersResourcesRequestsArgs{...}
type AlertmanagerSpecInitContainersResourcesRequestsInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersResourcesRequestsOutput() AlertmanagerSpecInitContainersResourcesRequestsOutput
	ToAlertmanagerSpecInitContainersResourcesRequestsOutputWithContext(context.Context) AlertmanagerSpecInitContainersResourcesRequestsOutput
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecInitContainersResourcesRequestsArgs struct {
}

func (AlertmanagerSpecInitContainersResourcesRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersResourcesRequests)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersResourcesRequestsArgs) ToAlertmanagerSpecInitContainersResourcesRequestsOutput() AlertmanagerSpecInitContainersResourcesRequestsOutput {
	return i.ToAlertmanagerSpecInitContainersResourcesRequestsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersResourcesRequestsArgs) ToAlertmanagerSpecInitContainersResourcesRequestsOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersResourcesRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersResourcesRequestsOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecInitContainersResourcesRequestsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersResourcesRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersResourcesRequests)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersResourcesRequestsOutput) ToAlertmanagerSpecInitContainersResourcesRequestsOutput() AlertmanagerSpecInitContainersResourcesRequestsOutput {
	return o
}

func (o AlertmanagerSpecInitContainersResourcesRequestsOutput) ToAlertmanagerSpecInitContainersResourcesRequestsOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersResourcesRequestsOutput {
	return o
}

// Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
type AlertmanagerSpecInitContainersSecurityContext struct {
	// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
	AllowPrivilegeEscalation *bool `pulumi:"allowPrivilegeEscalation"`
	// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
	Capabilities *AlertmanagerSpecInitContainersSecurityContextCapabilities `pulumi:"capabilities"`
	// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
	Privileged *bool `pulumi:"privileged"`
	// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
	ProcMount *string `pulumi:"procMount"`
	// Whether this container has a read-only root filesystem. Default is false.
	ReadOnlyRootFilesystem *bool `pulumi:"readOnlyRootFilesystem"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsGroup *int `pulumi:"runAsGroup"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot *bool `pulumi:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUser *int `pulumi:"runAsUser"`
	// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	SeLinuxOptions *AlertmanagerSpecInitContainersSecurityContextSeLinuxOptions `pulumi:"seLinuxOptions"`
	// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	WindowsOptions *AlertmanagerSpecInitContainersSecurityContextWindowsOptions `pulumi:"windowsOptions"`
}

// AlertmanagerSpecInitContainersSecurityContextInput is an input type that accepts AlertmanagerSpecInitContainersSecurityContextArgs and AlertmanagerSpecInitContainersSecurityContextOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersSecurityContextInput` via:
//
//          AlertmanagerSpecInitContainersSecurityContextArgs{...}
type AlertmanagerSpecInitContainersSecurityContextInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersSecurityContextOutput() AlertmanagerSpecInitContainersSecurityContextOutput
	ToAlertmanagerSpecInitContainersSecurityContextOutputWithContext(context.Context) AlertmanagerSpecInitContainersSecurityContextOutput
}

// Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
type AlertmanagerSpecInitContainersSecurityContextArgs struct {
	// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
	AllowPrivilegeEscalation pulumi.BoolPtrInput `pulumi:"allowPrivilegeEscalation"`
	// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
	Capabilities AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrInput `pulumi:"capabilities"`
	// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
	Privileged pulumi.BoolPtrInput `pulumi:"privileged"`
	// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
	ProcMount pulumi.StringPtrInput `pulumi:"procMount"`
	// Whether this container has a read-only root filesystem. Default is false.
	ReadOnlyRootFilesystem pulumi.BoolPtrInput `pulumi:"readOnlyRootFilesystem"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsGroup pulumi.IntPtrInput `pulumi:"runAsGroup"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot pulumi.BoolPtrInput `pulumi:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUser pulumi.IntPtrInput `pulumi:"runAsUser"`
	// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	SeLinuxOptions AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrInput `pulumi:"seLinuxOptions"`
	// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	WindowsOptions AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrInput `pulumi:"windowsOptions"`
}

func (AlertmanagerSpecInitContainersSecurityContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersSecurityContext)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersSecurityContextArgs) ToAlertmanagerSpecInitContainersSecurityContextOutput() AlertmanagerSpecInitContainersSecurityContextOutput {
	return i.ToAlertmanagerSpecInitContainersSecurityContextOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersSecurityContextArgs) ToAlertmanagerSpecInitContainersSecurityContextOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersSecurityContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersSecurityContextOutput)
}

func (i AlertmanagerSpecInitContainersSecurityContextArgs) ToAlertmanagerSpecInitContainersSecurityContextPtrOutput() AlertmanagerSpecInitContainersSecurityContextPtrOutput {
	return i.ToAlertmanagerSpecInitContainersSecurityContextPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersSecurityContextArgs) ToAlertmanagerSpecInitContainersSecurityContextPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersSecurityContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersSecurityContextOutput).ToAlertmanagerSpecInitContainersSecurityContextPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersSecurityContextPtrInput is an input type that accepts AlertmanagerSpecInitContainersSecurityContextArgs, AlertmanagerSpecInitContainersSecurityContextPtr and AlertmanagerSpecInitContainersSecurityContextPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersSecurityContextPtrInput` via:
//
//          AlertmanagerSpecInitContainersSecurityContextArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersSecurityContextPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersSecurityContextPtrOutput() AlertmanagerSpecInitContainersSecurityContextPtrOutput
	ToAlertmanagerSpecInitContainersSecurityContextPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersSecurityContextPtrOutput
}

type alertmanagerSpecInitContainersSecurityContextPtrType AlertmanagerSpecInitContainersSecurityContextArgs

func AlertmanagerSpecInitContainersSecurityContextPtr(v *AlertmanagerSpecInitContainersSecurityContextArgs) AlertmanagerSpecInitContainersSecurityContextPtrInput {
	return (*alertmanagerSpecInitContainersSecurityContextPtrType)(v)
}

func (*alertmanagerSpecInitContainersSecurityContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersSecurityContext)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersSecurityContextPtrType) ToAlertmanagerSpecInitContainersSecurityContextPtrOutput() AlertmanagerSpecInitContainersSecurityContextPtrOutput {
	return i.ToAlertmanagerSpecInitContainersSecurityContextPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersSecurityContextPtrType) ToAlertmanagerSpecInitContainersSecurityContextPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersSecurityContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersSecurityContextPtrOutput)
}

// Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
type AlertmanagerSpecInitContainersSecurityContextOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersSecurityContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersSecurityContext)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersSecurityContextOutput) ToAlertmanagerSpecInitContainersSecurityContextOutput() AlertmanagerSpecInitContainersSecurityContextOutput {
	return o
}

func (o AlertmanagerSpecInitContainersSecurityContextOutput) ToAlertmanagerSpecInitContainersSecurityContextOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersSecurityContextOutput {
	return o
}

func (o AlertmanagerSpecInitContainersSecurityContextOutput) ToAlertmanagerSpecInitContainersSecurityContextPtrOutput() AlertmanagerSpecInitContainersSecurityContextPtrOutput {
	return o.ToAlertmanagerSpecInitContainersSecurityContextPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersSecurityContextOutput) ToAlertmanagerSpecInitContainersSecurityContextPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersSecurityContextPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersSecurityContext) *AlertmanagerSpecInitContainersSecurityContext {
		return &v
	}).(AlertmanagerSpecInitContainersSecurityContextPtrOutput)
}

// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
func (o AlertmanagerSpecInitContainersSecurityContextOutput) AllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersSecurityContext) *bool { return v.AllowPrivilegeEscalation }).(pulumi.BoolPtrOutput)
}

// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
func (o AlertmanagerSpecInitContainersSecurityContextOutput) Capabilities() AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersSecurityContext) *AlertmanagerSpecInitContainersSecurityContextCapabilities {
		return v.Capabilities
	}).(AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput)
}

// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
func (o AlertmanagerSpecInitContainersSecurityContextOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersSecurityContext) *bool { return v.Privileged }).(pulumi.BoolPtrOutput)
}

// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
func (o AlertmanagerSpecInitContainersSecurityContextOutput) ProcMount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersSecurityContext) *string { return v.ProcMount }).(pulumi.StringPtrOutput)
}

// Whether this container has a read-only root filesystem. Default is false.
func (o AlertmanagerSpecInitContainersSecurityContextOutput) ReadOnlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersSecurityContext) *bool { return v.ReadOnlyRootFilesystem }).(pulumi.BoolPtrOutput)
}

// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o AlertmanagerSpecInitContainersSecurityContextOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersSecurityContext) *int { return v.RunAsGroup }).(pulumi.IntPtrOutput)
}

// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o AlertmanagerSpecInitContainersSecurityContextOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersSecurityContext) *bool { return v.RunAsNonRoot }).(pulumi.BoolPtrOutput)
}

// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o AlertmanagerSpecInitContainersSecurityContextOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersSecurityContext) *int { return v.RunAsUser }).(pulumi.IntPtrOutput)
}

// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o AlertmanagerSpecInitContainersSecurityContextOutput) SeLinuxOptions() AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersSecurityContext) *AlertmanagerSpecInitContainersSecurityContextSeLinuxOptions {
		return v.SeLinuxOptions
	}).(AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o AlertmanagerSpecInitContainersSecurityContextOutput) WindowsOptions() AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersSecurityContext) *AlertmanagerSpecInitContainersSecurityContextWindowsOptions {
		return v.WindowsOptions
	}).(AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput)
}

type AlertmanagerSpecInitContainersSecurityContextPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersSecurityContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersSecurityContext)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersSecurityContextPtrOutput) ToAlertmanagerSpecInitContainersSecurityContextPtrOutput() AlertmanagerSpecInitContainersSecurityContextPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersSecurityContextPtrOutput) ToAlertmanagerSpecInitContainersSecurityContextPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersSecurityContextPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersSecurityContextPtrOutput) Elem() AlertmanagerSpecInitContainersSecurityContextOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersSecurityContext) AlertmanagerSpecInitContainersSecurityContext {
		return *v
	}).(AlertmanagerSpecInitContainersSecurityContextOutput)
}

// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
func (o AlertmanagerSpecInitContainersSecurityContextPtrOutput) AllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersSecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPrivilegeEscalation
	}).(pulumi.BoolPtrOutput)
}

// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
func (o AlertmanagerSpecInitContainersSecurityContextPtrOutput) Capabilities() AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersSecurityContext) *AlertmanagerSpecInitContainersSecurityContextCapabilities {
		if v == nil {
			return nil
		}
		return v.Capabilities
	}).(AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput)
}

// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
func (o AlertmanagerSpecInitContainersSecurityContextPtrOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersSecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.Privileged
	}).(pulumi.BoolPtrOutput)
}

// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
func (o AlertmanagerSpecInitContainersSecurityContextPtrOutput) ProcMount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersSecurityContext) *string {
		if v == nil {
			return nil
		}
		return v.ProcMount
	}).(pulumi.StringPtrOutput)
}

// Whether this container has a read-only root filesystem. Default is false.
func (o AlertmanagerSpecInitContainersSecurityContextPtrOutput) ReadOnlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersSecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnlyRootFilesystem
	}).(pulumi.BoolPtrOutput)
}

// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o AlertmanagerSpecInitContainersSecurityContextPtrOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersSecurityContext) *int {
		if v == nil {
			return nil
		}
		return v.RunAsGroup
	}).(pulumi.IntPtrOutput)
}

// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o AlertmanagerSpecInitContainersSecurityContextPtrOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersSecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.RunAsNonRoot
	}).(pulumi.BoolPtrOutput)
}

// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o AlertmanagerSpecInitContainersSecurityContextPtrOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersSecurityContext) *int {
		if v == nil {
			return nil
		}
		return v.RunAsUser
	}).(pulumi.IntPtrOutput)
}

// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o AlertmanagerSpecInitContainersSecurityContextPtrOutput) SeLinuxOptions() AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersSecurityContext) *AlertmanagerSpecInitContainersSecurityContextSeLinuxOptions {
		if v == nil {
			return nil
		}
		return v.SeLinuxOptions
	}).(AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o AlertmanagerSpecInitContainersSecurityContextPtrOutput) WindowsOptions() AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersSecurityContext) *AlertmanagerSpecInitContainersSecurityContextWindowsOptions {
		if v == nil {
			return nil
		}
		return v.WindowsOptions
	}).(AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput)
}

// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
type AlertmanagerSpecInitContainersSecurityContextCapabilities struct {
	// Added capabilities
	Add []string `pulumi:"add"`
	// Removed capabilities
	Drop []string `pulumi:"drop"`
}

// AlertmanagerSpecInitContainersSecurityContextCapabilitiesInput is an input type that accepts AlertmanagerSpecInitContainersSecurityContextCapabilitiesArgs and AlertmanagerSpecInitContainersSecurityContextCapabilitiesOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersSecurityContextCapabilitiesInput` via:
//
//          AlertmanagerSpecInitContainersSecurityContextCapabilitiesArgs{...}
type AlertmanagerSpecInitContainersSecurityContextCapabilitiesInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersSecurityContextCapabilitiesOutput() AlertmanagerSpecInitContainersSecurityContextCapabilitiesOutput
	ToAlertmanagerSpecInitContainersSecurityContextCapabilitiesOutputWithContext(context.Context) AlertmanagerSpecInitContainersSecurityContextCapabilitiesOutput
}

// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
type AlertmanagerSpecInitContainersSecurityContextCapabilitiesArgs struct {
	// Added capabilities
	Add pulumi.StringArrayInput `pulumi:"add"`
	// Removed capabilities
	Drop pulumi.StringArrayInput `pulumi:"drop"`
}

func (AlertmanagerSpecInitContainersSecurityContextCapabilitiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersSecurityContextCapabilities)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersSecurityContextCapabilitiesArgs) ToAlertmanagerSpecInitContainersSecurityContextCapabilitiesOutput() AlertmanagerSpecInitContainersSecurityContextCapabilitiesOutput {
	return i.ToAlertmanagerSpecInitContainersSecurityContextCapabilitiesOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersSecurityContextCapabilitiesArgs) ToAlertmanagerSpecInitContainersSecurityContextCapabilitiesOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersSecurityContextCapabilitiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersSecurityContextCapabilitiesOutput)
}

func (i AlertmanagerSpecInitContainersSecurityContextCapabilitiesArgs) ToAlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput() AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput {
	return i.ToAlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersSecurityContextCapabilitiesArgs) ToAlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersSecurityContextCapabilitiesOutput).ToAlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrInput is an input type that accepts AlertmanagerSpecInitContainersSecurityContextCapabilitiesArgs, AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtr and AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrInput` via:
//
//          AlertmanagerSpecInitContainersSecurityContextCapabilitiesArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput() AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput
	ToAlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput
}

type alertmanagerSpecInitContainersSecurityContextCapabilitiesPtrType AlertmanagerSpecInitContainersSecurityContextCapabilitiesArgs

func AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtr(v *AlertmanagerSpecInitContainersSecurityContextCapabilitiesArgs) AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrInput {
	return (*alertmanagerSpecInitContainersSecurityContextCapabilitiesPtrType)(v)
}

func (*alertmanagerSpecInitContainersSecurityContextCapabilitiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersSecurityContextCapabilities)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersSecurityContextCapabilitiesPtrType) ToAlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput() AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput {
	return i.ToAlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersSecurityContextCapabilitiesPtrType) ToAlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput)
}

// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
type AlertmanagerSpecInitContainersSecurityContextCapabilitiesOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersSecurityContextCapabilitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersSecurityContextCapabilities)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersSecurityContextCapabilitiesOutput) ToAlertmanagerSpecInitContainersSecurityContextCapabilitiesOutput() AlertmanagerSpecInitContainersSecurityContextCapabilitiesOutput {
	return o
}

func (o AlertmanagerSpecInitContainersSecurityContextCapabilitiesOutput) ToAlertmanagerSpecInitContainersSecurityContextCapabilitiesOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersSecurityContextCapabilitiesOutput {
	return o
}

func (o AlertmanagerSpecInitContainersSecurityContextCapabilitiesOutput) ToAlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput() AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput {
	return o.ToAlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersSecurityContextCapabilitiesOutput) ToAlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersSecurityContextCapabilities) *AlertmanagerSpecInitContainersSecurityContextCapabilities {
		return &v
	}).(AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput)
}

// Added capabilities
func (o AlertmanagerSpecInitContainersSecurityContextCapabilitiesOutput) Add() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersSecurityContextCapabilities) []string { return v.Add }).(pulumi.StringArrayOutput)
}

// Removed capabilities
func (o AlertmanagerSpecInitContainersSecurityContextCapabilitiesOutput) Drop() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersSecurityContextCapabilities) []string { return v.Drop }).(pulumi.StringArrayOutput)
}

type AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersSecurityContextCapabilities)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput) ToAlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput() AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput) ToAlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput) Elem() AlertmanagerSpecInitContainersSecurityContextCapabilitiesOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersSecurityContextCapabilities) AlertmanagerSpecInitContainersSecurityContextCapabilities {
		return *v
	}).(AlertmanagerSpecInitContainersSecurityContextCapabilitiesOutput)
}

// Added capabilities
func (o AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput) Add() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersSecurityContextCapabilities) []string {
		if v == nil {
			return nil
		}
		return v.Add
	}).(pulumi.StringArrayOutput)
}

// Removed capabilities
func (o AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput) Drop() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersSecurityContextCapabilities) []string {
		if v == nil {
			return nil
		}
		return v.Drop
	}).(pulumi.StringArrayOutput)
}

// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
type AlertmanagerSpecInitContainersSecurityContextSeLinuxOptions struct {
	// Level is SELinux level label that applies to the container.
	Level *string `pulumi:"level"`
	// Role is a SELinux role label that applies to the container.
	Role *string `pulumi:"role"`
	// Type is a SELinux type label that applies to the container.
	Type *string `pulumi:"type"`
	// User is a SELinux user label that applies to the container.
	User *string `pulumi:"user"`
}

// AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsInput is an input type that accepts AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsArgs and AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsInput` via:
//
//          AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsArgs{...}
type AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutput() AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutput
	ToAlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutputWithContext(context.Context) AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutput
}

// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
type AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsArgs struct {
	// Level is SELinux level label that applies to the container.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// Role is a SELinux role label that applies to the container.
	Role pulumi.StringPtrInput `pulumi:"role"`
	// Type is a SELinux type label that applies to the container.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// User is a SELinux user label that applies to the container.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsArgs) ToAlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutput() AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutput {
	return i.ToAlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsArgs) ToAlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutput)
}

func (i AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsArgs) ToAlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput() AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput {
	return i.ToAlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsArgs) ToAlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutput).ToAlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrInput is an input type that accepts AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsArgs, AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtr and AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrInput` via:
//
//          AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput() AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput
	ToAlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput
}

type alertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrType AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsArgs

func AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtr(v *AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsArgs) AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrInput {
	return (*alertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrType)(v)
}

func (*alertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrType) ToAlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput() AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput {
	return i.ToAlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrType) ToAlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput)
}

// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
type AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutput) ToAlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutput() AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutput {
	return o
}

func (o AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutput) ToAlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutput {
	return o
}

func (o AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutput) ToAlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput() AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput {
	return o.ToAlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutput) ToAlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersSecurityContextSeLinuxOptions) *AlertmanagerSpecInitContainersSecurityContextSeLinuxOptions {
		return &v
	}).(AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput)
}

// Level is SELinux level label that applies to the container.
func (o AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersSecurityContextSeLinuxOptions) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// Role is a SELinux role label that applies to the container.
func (o AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersSecurityContextSeLinuxOptions) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// Type is a SELinux type label that applies to the container.
func (o AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersSecurityContextSeLinuxOptions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// User is a SELinux user label that applies to the container.
func (o AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersSecurityContextSeLinuxOptions) *string { return v.User }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput) ToAlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput() AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput) ToAlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput) Elem() AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersSecurityContextSeLinuxOptions) AlertmanagerSpecInitContainersSecurityContextSeLinuxOptions {
		return *v
	}).(AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutput)
}

// Level is SELinux level label that applies to the container.
func (o AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.StringPtrOutput)
}

// Role is a SELinux role label that applies to the container.
func (o AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

// Type is a SELinux type label that applies to the container.
func (o AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// User is a SELinux user label that applies to the container.
func (o AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
type AlertmanagerSpecInitContainersSecurityContextWindowsOptions struct {
	// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
	GmsaCredentialSpec *string `pulumi:"gmsaCredentialSpec"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
	GmsaCredentialSpecName *string `pulumi:"gmsaCredentialSpecName"`
	// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. This field is beta-level and may be disabled with the WindowsRunAsUserName feature flag.
	RunAsUserName *string `pulumi:"runAsUserName"`
}

// AlertmanagerSpecInitContainersSecurityContextWindowsOptionsInput is an input type that accepts AlertmanagerSpecInitContainersSecurityContextWindowsOptionsArgs and AlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersSecurityContextWindowsOptionsInput` via:
//
//          AlertmanagerSpecInitContainersSecurityContextWindowsOptionsArgs{...}
type AlertmanagerSpecInitContainersSecurityContextWindowsOptionsInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutput() AlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutput
	ToAlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutputWithContext(context.Context) AlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutput
}

// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
type AlertmanagerSpecInitContainersSecurityContextWindowsOptionsArgs struct {
	// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
	GmsaCredentialSpec pulumi.StringPtrInput `pulumi:"gmsaCredentialSpec"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
	GmsaCredentialSpecName pulumi.StringPtrInput `pulumi:"gmsaCredentialSpecName"`
	// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. This field is beta-level and may be disabled with the WindowsRunAsUserName feature flag.
	RunAsUserName pulumi.StringPtrInput `pulumi:"runAsUserName"`
}

func (AlertmanagerSpecInitContainersSecurityContextWindowsOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersSecurityContextWindowsOptions)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersSecurityContextWindowsOptionsArgs) ToAlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutput() AlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutput {
	return i.ToAlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersSecurityContextWindowsOptionsArgs) ToAlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutput)
}

func (i AlertmanagerSpecInitContainersSecurityContextWindowsOptionsArgs) ToAlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput() AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput {
	return i.ToAlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersSecurityContextWindowsOptionsArgs) ToAlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutput).ToAlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrInput is an input type that accepts AlertmanagerSpecInitContainersSecurityContextWindowsOptionsArgs, AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtr and AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrInput` via:
//
//          AlertmanagerSpecInitContainersSecurityContextWindowsOptionsArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput() AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput
	ToAlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput
}

type alertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrType AlertmanagerSpecInitContainersSecurityContextWindowsOptionsArgs

func AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtr(v *AlertmanagerSpecInitContainersSecurityContextWindowsOptionsArgs) AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrInput {
	return (*alertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrType)(v)
}

func (*alertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersSecurityContextWindowsOptions)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrType) ToAlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput() AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput {
	return i.ToAlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrType) ToAlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
type AlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersSecurityContextWindowsOptions)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutput) ToAlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutput() AlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutput {
	return o
}

func (o AlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutput) ToAlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutput {
	return o
}

func (o AlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutput) ToAlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput() AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput {
	return o.ToAlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutput) ToAlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersSecurityContextWindowsOptions) *AlertmanagerSpecInitContainersSecurityContextWindowsOptions {
		return &v
	}).(AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput)
}

// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
func (o AlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutput) GmsaCredentialSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersSecurityContextWindowsOptions) *string {
		return v.GmsaCredentialSpec
	}).(pulumi.StringPtrOutput)
}

// GMSACredentialSpecName is the name of the GMSA credential spec to use. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
func (o AlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutput) GmsaCredentialSpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersSecurityContextWindowsOptions) *string {
		return v.GmsaCredentialSpecName
	}).(pulumi.StringPtrOutput)
}

// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. This field is beta-level and may be disabled with the WindowsRunAsUserName feature flag.
func (o AlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutput) RunAsUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersSecurityContextWindowsOptions) *string { return v.RunAsUserName }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersSecurityContextWindowsOptions)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput) ToAlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput() AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput) ToAlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput) Elem() AlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersSecurityContextWindowsOptions) AlertmanagerSpecInitContainersSecurityContextWindowsOptions {
		return *v
	}).(AlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutput)
}

// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
func (o AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput) GmsaCredentialSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersSecurityContextWindowsOptions) *string {
		if v == nil {
			return nil
		}
		return v.GmsaCredentialSpec
	}).(pulumi.StringPtrOutput)
}

// GMSACredentialSpecName is the name of the GMSA credential spec to use. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
func (o AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput) GmsaCredentialSpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersSecurityContextWindowsOptions) *string {
		if v == nil {
			return nil
		}
		return v.GmsaCredentialSpecName
	}).(pulumi.StringPtrOutput)
}

// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. This field is beta-level and may be disabled with the WindowsRunAsUserName feature flag.
func (o AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput) RunAsUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersSecurityContextWindowsOptions) *string {
		if v == nil {
			return nil
		}
		return v.RunAsUserName
	}).(pulumi.StringPtrOutput)
}

// StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
type AlertmanagerSpecInitContainersStartupProbe struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec *AlertmanagerSpecInitContainersStartupProbeExec `pulumi:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// HTTPGet specifies the http request to perform.
	HttpGet *AlertmanagerSpecInitContainersStartupProbeHttpGet `pulumi:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
	TcpSocket *AlertmanagerSpecInitContainersStartupProbeTcpSocket `pulumi:"tcpSocket"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// AlertmanagerSpecInitContainersStartupProbeInput is an input type that accepts AlertmanagerSpecInitContainersStartupProbeArgs and AlertmanagerSpecInitContainersStartupProbeOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersStartupProbeInput` via:
//
//          AlertmanagerSpecInitContainersStartupProbeArgs{...}
type AlertmanagerSpecInitContainersStartupProbeInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersStartupProbeOutput() AlertmanagerSpecInitContainersStartupProbeOutput
	ToAlertmanagerSpecInitContainersStartupProbeOutputWithContext(context.Context) AlertmanagerSpecInitContainersStartupProbeOutput
}

// StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
type AlertmanagerSpecInitContainersStartupProbeArgs struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec AlertmanagerSpecInitContainersStartupProbeExecPtrInput `pulumi:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// HTTPGet specifies the http request to perform.
	HttpGet AlertmanagerSpecInitContainersStartupProbeHttpGetPtrInput `pulumi:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
	TcpSocket AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrInput `pulumi:"tcpSocket"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (AlertmanagerSpecInitContainersStartupProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersStartupProbe)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersStartupProbeArgs) ToAlertmanagerSpecInitContainersStartupProbeOutput() AlertmanagerSpecInitContainersStartupProbeOutput {
	return i.ToAlertmanagerSpecInitContainersStartupProbeOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersStartupProbeArgs) ToAlertmanagerSpecInitContainersStartupProbeOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersStartupProbeOutput)
}

func (i AlertmanagerSpecInitContainersStartupProbeArgs) ToAlertmanagerSpecInitContainersStartupProbePtrOutput() AlertmanagerSpecInitContainersStartupProbePtrOutput {
	return i.ToAlertmanagerSpecInitContainersStartupProbePtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersStartupProbeArgs) ToAlertmanagerSpecInitContainersStartupProbePtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersStartupProbeOutput).ToAlertmanagerSpecInitContainersStartupProbePtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersStartupProbePtrInput is an input type that accepts AlertmanagerSpecInitContainersStartupProbeArgs, AlertmanagerSpecInitContainersStartupProbePtr and AlertmanagerSpecInitContainersStartupProbePtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersStartupProbePtrInput` via:
//
//          AlertmanagerSpecInitContainersStartupProbeArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersStartupProbePtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersStartupProbePtrOutput() AlertmanagerSpecInitContainersStartupProbePtrOutput
	ToAlertmanagerSpecInitContainersStartupProbePtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersStartupProbePtrOutput
}

type alertmanagerSpecInitContainersStartupProbePtrType AlertmanagerSpecInitContainersStartupProbeArgs

func AlertmanagerSpecInitContainersStartupProbePtr(v *AlertmanagerSpecInitContainersStartupProbeArgs) AlertmanagerSpecInitContainersStartupProbePtrInput {
	return (*alertmanagerSpecInitContainersStartupProbePtrType)(v)
}

func (*alertmanagerSpecInitContainersStartupProbePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersStartupProbe)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersStartupProbePtrType) ToAlertmanagerSpecInitContainersStartupProbePtrOutput() AlertmanagerSpecInitContainersStartupProbePtrOutput {
	return i.ToAlertmanagerSpecInitContainersStartupProbePtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersStartupProbePtrType) ToAlertmanagerSpecInitContainersStartupProbePtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersStartupProbePtrOutput)
}

// StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
type AlertmanagerSpecInitContainersStartupProbeOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersStartupProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersStartupProbe)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersStartupProbeOutput) ToAlertmanagerSpecInitContainersStartupProbeOutput() AlertmanagerSpecInitContainersStartupProbeOutput {
	return o
}

func (o AlertmanagerSpecInitContainersStartupProbeOutput) ToAlertmanagerSpecInitContainersStartupProbeOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeOutput {
	return o
}

func (o AlertmanagerSpecInitContainersStartupProbeOutput) ToAlertmanagerSpecInitContainersStartupProbePtrOutput() AlertmanagerSpecInitContainersStartupProbePtrOutput {
	return o.ToAlertmanagerSpecInitContainersStartupProbePtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersStartupProbeOutput) ToAlertmanagerSpecInitContainersStartupProbePtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersStartupProbe) *AlertmanagerSpecInitContainersStartupProbe {
		return &v
	}).(AlertmanagerSpecInitContainersStartupProbePtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
func (o AlertmanagerSpecInitContainersStartupProbeOutput) Exec() AlertmanagerSpecInitContainersStartupProbeExecPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersStartupProbe) *AlertmanagerSpecInitContainersStartupProbeExec {
		return v.Exec
	}).(AlertmanagerSpecInitContainersStartupProbeExecPtrOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (o AlertmanagerSpecInitContainersStartupProbeOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersStartupProbe) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o AlertmanagerSpecInitContainersStartupProbeOutput) HttpGet() AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersStartupProbe) *AlertmanagerSpecInitContainersStartupProbeHttpGet {
		return v.HttpGet
	}).(AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput)
}

// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecInitContainersStartupProbeOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersStartupProbe) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
func (o AlertmanagerSpecInitContainersStartupProbeOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersStartupProbe) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
func (o AlertmanagerSpecInitContainersStartupProbeOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersStartupProbe) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
func (o AlertmanagerSpecInitContainersStartupProbeOutput) TcpSocket() AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersStartupProbe) *AlertmanagerSpecInitContainersStartupProbeTcpSocket {
		return v.TcpSocket
	}).(AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput)
}

// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecInitContainersStartupProbeOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersStartupProbe) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type AlertmanagerSpecInitContainersStartupProbePtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersStartupProbePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersStartupProbe)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersStartupProbePtrOutput) ToAlertmanagerSpecInitContainersStartupProbePtrOutput() AlertmanagerSpecInitContainersStartupProbePtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersStartupProbePtrOutput) ToAlertmanagerSpecInitContainersStartupProbePtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbePtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersStartupProbePtrOutput) Elem() AlertmanagerSpecInitContainersStartupProbeOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersStartupProbe) AlertmanagerSpecInitContainersStartupProbe {
		return *v
	}).(AlertmanagerSpecInitContainersStartupProbeOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
func (o AlertmanagerSpecInitContainersStartupProbePtrOutput) Exec() AlertmanagerSpecInitContainersStartupProbeExecPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersStartupProbe) *AlertmanagerSpecInitContainersStartupProbeExec {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(AlertmanagerSpecInitContainersStartupProbeExecPtrOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (o AlertmanagerSpecInitContainersStartupProbePtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersStartupProbe) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o AlertmanagerSpecInitContainersStartupProbePtrOutput) HttpGet() AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersStartupProbe) *AlertmanagerSpecInitContainersStartupProbeHttpGet {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput)
}

// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecInitContainersStartupProbePtrOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersStartupProbe) *int {
		if v == nil {
			return nil
		}
		return v.InitialDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
func (o AlertmanagerSpecInitContainersStartupProbePtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersStartupProbe) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
func (o AlertmanagerSpecInitContainersStartupProbePtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersStartupProbe) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
func (o AlertmanagerSpecInitContainersStartupProbePtrOutput) TcpSocket() AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersStartupProbe) *AlertmanagerSpecInitContainersStartupProbeTcpSocket {
		if v == nil {
			return nil
		}
		return v.TcpSocket
	}).(AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput)
}

// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o AlertmanagerSpecInitContainersStartupProbePtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersStartupProbe) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecInitContainersStartupProbeExec struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command []string `pulumi:"command"`
}

// AlertmanagerSpecInitContainersStartupProbeExecInput is an input type that accepts AlertmanagerSpecInitContainersStartupProbeExecArgs and AlertmanagerSpecInitContainersStartupProbeExecOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersStartupProbeExecInput` via:
//
//          AlertmanagerSpecInitContainersStartupProbeExecArgs{...}
type AlertmanagerSpecInitContainersStartupProbeExecInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersStartupProbeExecOutput() AlertmanagerSpecInitContainersStartupProbeExecOutput
	ToAlertmanagerSpecInitContainersStartupProbeExecOutputWithContext(context.Context) AlertmanagerSpecInitContainersStartupProbeExecOutput
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecInitContainersStartupProbeExecArgs struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command pulumi.StringArrayInput `pulumi:"command"`
}

func (AlertmanagerSpecInitContainersStartupProbeExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersStartupProbeExec)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersStartupProbeExecArgs) ToAlertmanagerSpecInitContainersStartupProbeExecOutput() AlertmanagerSpecInitContainersStartupProbeExecOutput {
	return i.ToAlertmanagerSpecInitContainersStartupProbeExecOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersStartupProbeExecArgs) ToAlertmanagerSpecInitContainersStartupProbeExecOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersStartupProbeExecOutput)
}

func (i AlertmanagerSpecInitContainersStartupProbeExecArgs) ToAlertmanagerSpecInitContainersStartupProbeExecPtrOutput() AlertmanagerSpecInitContainersStartupProbeExecPtrOutput {
	return i.ToAlertmanagerSpecInitContainersStartupProbeExecPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersStartupProbeExecArgs) ToAlertmanagerSpecInitContainersStartupProbeExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersStartupProbeExecOutput).ToAlertmanagerSpecInitContainersStartupProbeExecPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersStartupProbeExecPtrInput is an input type that accepts AlertmanagerSpecInitContainersStartupProbeExecArgs, AlertmanagerSpecInitContainersStartupProbeExecPtr and AlertmanagerSpecInitContainersStartupProbeExecPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersStartupProbeExecPtrInput` via:
//
//          AlertmanagerSpecInitContainersStartupProbeExecArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersStartupProbeExecPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersStartupProbeExecPtrOutput() AlertmanagerSpecInitContainersStartupProbeExecPtrOutput
	ToAlertmanagerSpecInitContainersStartupProbeExecPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersStartupProbeExecPtrOutput
}

type alertmanagerSpecInitContainersStartupProbeExecPtrType AlertmanagerSpecInitContainersStartupProbeExecArgs

func AlertmanagerSpecInitContainersStartupProbeExecPtr(v *AlertmanagerSpecInitContainersStartupProbeExecArgs) AlertmanagerSpecInitContainersStartupProbeExecPtrInput {
	return (*alertmanagerSpecInitContainersStartupProbeExecPtrType)(v)
}

func (*alertmanagerSpecInitContainersStartupProbeExecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersStartupProbeExec)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersStartupProbeExecPtrType) ToAlertmanagerSpecInitContainersStartupProbeExecPtrOutput() AlertmanagerSpecInitContainersStartupProbeExecPtrOutput {
	return i.ToAlertmanagerSpecInitContainersStartupProbeExecPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersStartupProbeExecPtrType) ToAlertmanagerSpecInitContainersStartupProbeExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersStartupProbeExecPtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
type AlertmanagerSpecInitContainersStartupProbeExecOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersStartupProbeExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersStartupProbeExec)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersStartupProbeExecOutput) ToAlertmanagerSpecInitContainersStartupProbeExecOutput() AlertmanagerSpecInitContainersStartupProbeExecOutput {
	return o
}

func (o AlertmanagerSpecInitContainersStartupProbeExecOutput) ToAlertmanagerSpecInitContainersStartupProbeExecOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeExecOutput {
	return o
}

func (o AlertmanagerSpecInitContainersStartupProbeExecOutput) ToAlertmanagerSpecInitContainersStartupProbeExecPtrOutput() AlertmanagerSpecInitContainersStartupProbeExecPtrOutput {
	return o.ToAlertmanagerSpecInitContainersStartupProbeExecPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersStartupProbeExecOutput) ToAlertmanagerSpecInitContainersStartupProbeExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeExecPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersStartupProbeExec) *AlertmanagerSpecInitContainersStartupProbeExec {
		return &v
	}).(AlertmanagerSpecInitContainersStartupProbeExecPtrOutput)
}

// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o AlertmanagerSpecInitContainersStartupProbeExecOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersStartupProbeExec) []string { return v.Command }).(pulumi.StringArrayOutput)
}

type AlertmanagerSpecInitContainersStartupProbeExecPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersStartupProbeExecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersStartupProbeExec)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersStartupProbeExecPtrOutput) ToAlertmanagerSpecInitContainersStartupProbeExecPtrOutput() AlertmanagerSpecInitContainersStartupProbeExecPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersStartupProbeExecPtrOutput) ToAlertmanagerSpecInitContainersStartupProbeExecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeExecPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersStartupProbeExecPtrOutput) Elem() AlertmanagerSpecInitContainersStartupProbeExecOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersStartupProbeExec) AlertmanagerSpecInitContainersStartupProbeExec {
		return *v
	}).(AlertmanagerSpecInitContainersStartupProbeExecOutput)
}

// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o AlertmanagerSpecInitContainersStartupProbeExecPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersStartupProbeExec) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecInitContainersStartupProbeHttpGet struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeaders `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path *string `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecInitContainersStartupProbeHttpGetPort `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `pulumi:"scheme"`
}

// AlertmanagerSpecInitContainersStartupProbeHttpGetInput is an input type that accepts AlertmanagerSpecInitContainersStartupProbeHttpGetArgs and AlertmanagerSpecInitContainersStartupProbeHttpGetOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersStartupProbeHttpGetInput` via:
//
//          AlertmanagerSpecInitContainersStartupProbeHttpGetArgs{...}
type AlertmanagerSpecInitContainersStartupProbeHttpGetInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersStartupProbeHttpGetOutput() AlertmanagerSpecInitContainersStartupProbeHttpGetOutput
	ToAlertmanagerSpecInitContainersStartupProbeHttpGetOutputWithContext(context.Context) AlertmanagerSpecInitContainersStartupProbeHttpGetOutput
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecInitContainersStartupProbeHttpGetArgs struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayInput `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecInitContainersStartupProbeHttpGetPortInput `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (AlertmanagerSpecInitContainersStartupProbeHttpGetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersStartupProbeHttpGet)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersStartupProbeHttpGetArgs) ToAlertmanagerSpecInitContainersStartupProbeHttpGetOutput() AlertmanagerSpecInitContainersStartupProbeHttpGetOutput {
	return i.ToAlertmanagerSpecInitContainersStartupProbeHttpGetOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersStartupProbeHttpGetArgs) ToAlertmanagerSpecInitContainersStartupProbeHttpGetOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeHttpGetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersStartupProbeHttpGetOutput)
}

func (i AlertmanagerSpecInitContainersStartupProbeHttpGetArgs) ToAlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput() AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput {
	return i.ToAlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersStartupProbeHttpGetArgs) ToAlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersStartupProbeHttpGetOutput).ToAlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersStartupProbeHttpGetPtrInput is an input type that accepts AlertmanagerSpecInitContainersStartupProbeHttpGetArgs, AlertmanagerSpecInitContainersStartupProbeHttpGetPtr and AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersStartupProbeHttpGetPtrInput` via:
//
//          AlertmanagerSpecInitContainersStartupProbeHttpGetArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersStartupProbeHttpGetPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput() AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput
	ToAlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput
}

type alertmanagerSpecInitContainersStartupProbeHttpGetPtrType AlertmanagerSpecInitContainersStartupProbeHttpGetArgs

func AlertmanagerSpecInitContainersStartupProbeHttpGetPtr(v *AlertmanagerSpecInitContainersStartupProbeHttpGetArgs) AlertmanagerSpecInitContainersStartupProbeHttpGetPtrInput {
	return (*alertmanagerSpecInitContainersStartupProbeHttpGetPtrType)(v)
}

func (*alertmanagerSpecInitContainersStartupProbeHttpGetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersStartupProbeHttpGet)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersStartupProbeHttpGetPtrType) ToAlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput() AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput {
	return i.ToAlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersStartupProbeHttpGetPtrType) ToAlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput)
}

// HTTPGet specifies the http request to perform.
type AlertmanagerSpecInitContainersStartupProbeHttpGetOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersStartupProbeHttpGetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersStartupProbeHttpGet)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersStartupProbeHttpGetOutput) ToAlertmanagerSpecInitContainersStartupProbeHttpGetOutput() AlertmanagerSpecInitContainersStartupProbeHttpGetOutput {
	return o
}

func (o AlertmanagerSpecInitContainersStartupProbeHttpGetOutput) ToAlertmanagerSpecInitContainersStartupProbeHttpGetOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeHttpGetOutput {
	return o
}

func (o AlertmanagerSpecInitContainersStartupProbeHttpGetOutput) ToAlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput() AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput {
	return o.ToAlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersStartupProbeHttpGetOutput) ToAlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersStartupProbeHttpGet) *AlertmanagerSpecInitContainersStartupProbeHttpGet {
		return &v
	}).(AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o AlertmanagerSpecInitContainersStartupProbeHttpGetOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersStartupProbeHttpGet) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o AlertmanagerSpecInitContainersStartupProbeHttpGetOutput) HttpHeaders() AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersStartupProbeHttpGet) []AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeaders {
		return v.HttpHeaders
	}).(AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o AlertmanagerSpecInitContainersStartupProbeHttpGetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersStartupProbeHttpGet) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecInitContainersStartupProbeHttpGetOutput) Port() AlertmanagerSpecInitContainersStartupProbeHttpGetPortOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersStartupProbeHttpGet) AlertmanagerSpecInitContainersStartupProbeHttpGetPort {
		return v.Port
	}).(AlertmanagerSpecInitContainersStartupProbeHttpGetPortOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o AlertmanagerSpecInitContainersStartupProbeHttpGetOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersStartupProbeHttpGet) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersStartupProbeHttpGet)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput) ToAlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput() AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput) ToAlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput) Elem() AlertmanagerSpecInitContainersStartupProbeHttpGetOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersStartupProbeHttpGet) AlertmanagerSpecInitContainersStartupProbeHttpGet {
		return *v
	}).(AlertmanagerSpecInitContainersStartupProbeHttpGetOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersStartupProbeHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput) HttpHeaders() AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersStartupProbeHttpGet) []AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeaders {
		if v == nil {
			return nil
		}
		return v.HttpHeaders
	}).(AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersStartupProbeHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput) Port() AlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersStartupProbeHttpGet) *AlertmanagerSpecInitContainersStartupProbeHttpGetPort {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(AlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersStartupProbeHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeaders struct {
	// The header field name
	Name string `pulumi:"name"`
	// The header field value
	Value string `pulumi:"value"`
}

// AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersInput is an input type that accepts AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArgs and AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersInput` via:
//
//          AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArgs{...}
type AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput() AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput
	ToAlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersOutputWithContext(context.Context) AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArgs struct {
	// The header field name
	Name pulumi.StringInput `pulumi:"name"`
	// The header field value
	Value pulumi.StringInput `pulumi:"value"`
}

func (AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArgs) ToAlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput() AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput {
	return i.ToAlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArgs) ToAlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput)
}

// AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayInput is an input type that accepts AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArray and AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayInput` via:
//
//          AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArray{ AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArgs{...} }
type AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput() AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput
	ToAlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutputWithContext(context.Context) AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput
}

type AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArray []AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersInput

func (AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArray) ToAlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput() AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput {
	return i.ToAlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArray) ToAlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput) ToAlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput() AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput {
	return o
}

func (o AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput) ToAlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput {
	return o
}

// The header field name
func (o AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeaders) string { return v.Name }).(pulumi.StringOutput)
}

// The header field value
func (o AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeaders) string { return v.Value }).(pulumi.StringOutput)
}

type AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput) ToAlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput() AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput {
	return o
}

func (o AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput) ToAlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput {
	return o
}

func (o AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeaders {
		return vs[0].([]AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeaders)[vs[1].(int)]
	}).(AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput)
}

type AlertmanagerSpecInitContainersStartupProbeHttpGetPort struct {
}

// AlertmanagerSpecInitContainersStartupProbeHttpGetPortInput is an input type that accepts AlertmanagerSpecInitContainersStartupProbeHttpGetPortArgs and AlertmanagerSpecInitContainersStartupProbeHttpGetPortOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersStartupProbeHttpGetPortInput` via:
//
//          AlertmanagerSpecInitContainersStartupProbeHttpGetPortArgs{...}
type AlertmanagerSpecInitContainersStartupProbeHttpGetPortInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersStartupProbeHttpGetPortOutput() AlertmanagerSpecInitContainersStartupProbeHttpGetPortOutput
	ToAlertmanagerSpecInitContainersStartupProbeHttpGetPortOutputWithContext(context.Context) AlertmanagerSpecInitContainersStartupProbeHttpGetPortOutput
}

type AlertmanagerSpecInitContainersStartupProbeHttpGetPortArgs struct {
}

func (AlertmanagerSpecInitContainersStartupProbeHttpGetPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersStartupProbeHttpGetPort)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersStartupProbeHttpGetPortArgs) ToAlertmanagerSpecInitContainersStartupProbeHttpGetPortOutput() AlertmanagerSpecInitContainersStartupProbeHttpGetPortOutput {
	return i.ToAlertmanagerSpecInitContainersStartupProbeHttpGetPortOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersStartupProbeHttpGetPortArgs) ToAlertmanagerSpecInitContainersStartupProbeHttpGetPortOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeHttpGetPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersStartupProbeHttpGetPortOutput)
}

func (i AlertmanagerSpecInitContainersStartupProbeHttpGetPortArgs) ToAlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutput() AlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutput {
	return i.ToAlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersStartupProbeHttpGetPortArgs) ToAlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersStartupProbeHttpGetPortOutput).ToAlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrInput is an input type that accepts AlertmanagerSpecInitContainersStartupProbeHttpGetPortArgs, AlertmanagerSpecInitContainersStartupProbeHttpGetPortPtr and AlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrInput` via:
//
//          AlertmanagerSpecInitContainersStartupProbeHttpGetPortArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutput() AlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutput
	ToAlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutput
}

type alertmanagerSpecInitContainersStartupProbeHttpGetPortPtrType AlertmanagerSpecInitContainersStartupProbeHttpGetPortArgs

func AlertmanagerSpecInitContainersStartupProbeHttpGetPortPtr(v *AlertmanagerSpecInitContainersStartupProbeHttpGetPortArgs) AlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrInput {
	return (*alertmanagerSpecInitContainersStartupProbeHttpGetPortPtrType)(v)
}

func (*alertmanagerSpecInitContainersStartupProbeHttpGetPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersStartupProbeHttpGetPort)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersStartupProbeHttpGetPortPtrType) ToAlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutput() AlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutput {
	return i.ToAlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersStartupProbeHttpGetPortPtrType) ToAlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutput)
}

type AlertmanagerSpecInitContainersStartupProbeHttpGetPortOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersStartupProbeHttpGetPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersStartupProbeHttpGetPort)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersStartupProbeHttpGetPortOutput) ToAlertmanagerSpecInitContainersStartupProbeHttpGetPortOutput() AlertmanagerSpecInitContainersStartupProbeHttpGetPortOutput {
	return o
}

func (o AlertmanagerSpecInitContainersStartupProbeHttpGetPortOutput) ToAlertmanagerSpecInitContainersStartupProbeHttpGetPortOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeHttpGetPortOutput {
	return o
}

func (o AlertmanagerSpecInitContainersStartupProbeHttpGetPortOutput) ToAlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutput() AlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutput {
	return o.ToAlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersStartupProbeHttpGetPortOutput) ToAlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersStartupProbeHttpGetPort) *AlertmanagerSpecInitContainersStartupProbeHttpGetPort {
		return &v
	}).(AlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutput)
}

type AlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersStartupProbeHttpGetPort)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutput) ToAlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutput() AlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutput) ToAlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutput) Elem() AlertmanagerSpecInitContainersStartupProbeHttpGetPortOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersStartupProbeHttpGetPort) AlertmanagerSpecInitContainersStartupProbeHttpGetPort {
		return *v
	}).(AlertmanagerSpecInitContainersStartupProbeHttpGetPortOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecInitContainersStartupProbeTcpSocket struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecInitContainersStartupProbeTcpSocketPort `pulumi:"port"`
}

// AlertmanagerSpecInitContainersStartupProbeTcpSocketInput is an input type that accepts AlertmanagerSpecInitContainersStartupProbeTcpSocketArgs and AlertmanagerSpecInitContainersStartupProbeTcpSocketOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersStartupProbeTcpSocketInput` via:
//
//          AlertmanagerSpecInitContainersStartupProbeTcpSocketArgs{...}
type AlertmanagerSpecInitContainersStartupProbeTcpSocketInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersStartupProbeTcpSocketOutput() AlertmanagerSpecInitContainersStartupProbeTcpSocketOutput
	ToAlertmanagerSpecInitContainersStartupProbeTcpSocketOutputWithContext(context.Context) AlertmanagerSpecInitContainersStartupProbeTcpSocketOutput
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecInitContainersStartupProbeTcpSocketArgs struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port AlertmanagerSpecInitContainersStartupProbeTcpSocketPortInput `pulumi:"port"`
}

func (AlertmanagerSpecInitContainersStartupProbeTcpSocketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersStartupProbeTcpSocket)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersStartupProbeTcpSocketArgs) ToAlertmanagerSpecInitContainersStartupProbeTcpSocketOutput() AlertmanagerSpecInitContainersStartupProbeTcpSocketOutput {
	return i.ToAlertmanagerSpecInitContainersStartupProbeTcpSocketOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersStartupProbeTcpSocketArgs) ToAlertmanagerSpecInitContainersStartupProbeTcpSocketOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeTcpSocketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersStartupProbeTcpSocketOutput)
}

func (i AlertmanagerSpecInitContainersStartupProbeTcpSocketArgs) ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput() AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput {
	return i.ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersStartupProbeTcpSocketArgs) ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersStartupProbeTcpSocketOutput).ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrInput is an input type that accepts AlertmanagerSpecInitContainersStartupProbeTcpSocketArgs, AlertmanagerSpecInitContainersStartupProbeTcpSocketPtr and AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrInput` via:
//
//          AlertmanagerSpecInitContainersStartupProbeTcpSocketArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput() AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput
	ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput
}

type alertmanagerSpecInitContainersStartupProbeTcpSocketPtrType AlertmanagerSpecInitContainersStartupProbeTcpSocketArgs

func AlertmanagerSpecInitContainersStartupProbeTcpSocketPtr(v *AlertmanagerSpecInitContainersStartupProbeTcpSocketArgs) AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrInput {
	return (*alertmanagerSpecInitContainersStartupProbeTcpSocketPtrType)(v)
}

func (*alertmanagerSpecInitContainersStartupProbeTcpSocketPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersStartupProbeTcpSocket)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersStartupProbeTcpSocketPtrType) ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput() AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput {
	return i.ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersStartupProbeTcpSocketPtrType) ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type AlertmanagerSpecInitContainersStartupProbeTcpSocketOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersStartupProbeTcpSocketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersStartupProbeTcpSocket)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersStartupProbeTcpSocketOutput) ToAlertmanagerSpecInitContainersStartupProbeTcpSocketOutput() AlertmanagerSpecInitContainersStartupProbeTcpSocketOutput {
	return o
}

func (o AlertmanagerSpecInitContainersStartupProbeTcpSocketOutput) ToAlertmanagerSpecInitContainersStartupProbeTcpSocketOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeTcpSocketOutput {
	return o
}

func (o AlertmanagerSpecInitContainersStartupProbeTcpSocketOutput) ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput() AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput {
	return o.ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersStartupProbeTcpSocketOutput) ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersStartupProbeTcpSocket) *AlertmanagerSpecInitContainersStartupProbeTcpSocket {
		return &v
	}).(AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o AlertmanagerSpecInitContainersStartupProbeTcpSocketOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersStartupProbeTcpSocket) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecInitContainersStartupProbeTcpSocketOutput) Port() AlertmanagerSpecInitContainersStartupProbeTcpSocketPortOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersStartupProbeTcpSocket) AlertmanagerSpecInitContainersStartupProbeTcpSocketPort {
		return v.Port
	}).(AlertmanagerSpecInitContainersStartupProbeTcpSocketPortOutput)
}

type AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersStartupProbeTcpSocket)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput) ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput() AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput) ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput) Elem() AlertmanagerSpecInitContainersStartupProbeTcpSocketOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersStartupProbeTcpSocket) AlertmanagerSpecInitContainersStartupProbeTcpSocket {
		return *v
	}).(AlertmanagerSpecInitContainersStartupProbeTcpSocketOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersStartupProbeTcpSocket) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput) Port() AlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersStartupProbeTcpSocket) *AlertmanagerSpecInitContainersStartupProbeTcpSocketPort {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(AlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutput)
}

type AlertmanagerSpecInitContainersStartupProbeTcpSocketPort struct {
}

// AlertmanagerSpecInitContainersStartupProbeTcpSocketPortInput is an input type that accepts AlertmanagerSpecInitContainersStartupProbeTcpSocketPortArgs and AlertmanagerSpecInitContainersStartupProbeTcpSocketPortOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersStartupProbeTcpSocketPortInput` via:
//
//          AlertmanagerSpecInitContainersStartupProbeTcpSocketPortArgs{...}
type AlertmanagerSpecInitContainersStartupProbeTcpSocketPortInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPortOutput() AlertmanagerSpecInitContainersStartupProbeTcpSocketPortOutput
	ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPortOutputWithContext(context.Context) AlertmanagerSpecInitContainersStartupProbeTcpSocketPortOutput
}

type AlertmanagerSpecInitContainersStartupProbeTcpSocketPortArgs struct {
}

func (AlertmanagerSpecInitContainersStartupProbeTcpSocketPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersStartupProbeTcpSocketPort)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersStartupProbeTcpSocketPortArgs) ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPortOutput() AlertmanagerSpecInitContainersStartupProbeTcpSocketPortOutput {
	return i.ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPortOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersStartupProbeTcpSocketPortArgs) ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPortOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeTcpSocketPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersStartupProbeTcpSocketPortOutput)
}

func (i AlertmanagerSpecInitContainersStartupProbeTcpSocketPortArgs) ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutput() AlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutput {
	return i.ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersStartupProbeTcpSocketPortArgs) ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersStartupProbeTcpSocketPortOutput).ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutputWithContext(ctx)
}

// AlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrInput is an input type that accepts AlertmanagerSpecInitContainersStartupProbeTcpSocketPortArgs, AlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtr and AlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrInput` via:
//
//          AlertmanagerSpecInitContainersStartupProbeTcpSocketPortArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutput() AlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutput
	ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutputWithContext(context.Context) AlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutput
}

type alertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrType AlertmanagerSpecInitContainersStartupProbeTcpSocketPortArgs

func AlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtr(v *AlertmanagerSpecInitContainersStartupProbeTcpSocketPortArgs) AlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrInput {
	return (*alertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrType)(v)
}

func (*alertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersStartupProbeTcpSocketPort)(nil)).Elem()
}

func (i *alertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrType) ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutput() AlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutput {
	return i.ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrType) ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutput)
}

type AlertmanagerSpecInitContainersStartupProbeTcpSocketPortOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersStartupProbeTcpSocketPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersStartupProbeTcpSocketPort)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersStartupProbeTcpSocketPortOutput) ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPortOutput() AlertmanagerSpecInitContainersStartupProbeTcpSocketPortOutput {
	return o
}

func (o AlertmanagerSpecInitContainersStartupProbeTcpSocketPortOutput) ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPortOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeTcpSocketPortOutput {
	return o
}

func (o AlertmanagerSpecInitContainersStartupProbeTcpSocketPortOutput) ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutput() AlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutput {
	return o.ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecInitContainersStartupProbeTcpSocketPortOutput) ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersStartupProbeTcpSocketPort) *AlertmanagerSpecInitContainersStartupProbeTcpSocketPort {
		return &v
	}).(AlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutput)
}

type AlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecInitContainersStartupProbeTcpSocketPort)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutput) ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutput() AlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutput) ToAlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutput {
	return o
}

func (o AlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutput) Elem() AlertmanagerSpecInitContainersStartupProbeTcpSocketPortOutput {
	return o.ApplyT(func(v *AlertmanagerSpecInitContainersStartupProbeTcpSocketPort) AlertmanagerSpecInitContainersStartupProbeTcpSocketPort {
		return *v
	}).(AlertmanagerSpecInitContainersStartupProbeTcpSocketPortOutput)
}

// volumeDevice describes a mapping of a raw block device within a container.
type AlertmanagerSpecInitContainersVolumeDevices struct {
	// devicePath is the path inside of the container that the device will be mapped to.
	DevicePath string `pulumi:"devicePath"`
	// name must match the name of a persistentVolumeClaim in the pod
	Name string `pulumi:"name"`
}

// AlertmanagerSpecInitContainersVolumeDevicesInput is an input type that accepts AlertmanagerSpecInitContainersVolumeDevicesArgs and AlertmanagerSpecInitContainersVolumeDevicesOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersVolumeDevicesInput` via:
//
//          AlertmanagerSpecInitContainersVolumeDevicesArgs{...}
type AlertmanagerSpecInitContainersVolumeDevicesInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersVolumeDevicesOutput() AlertmanagerSpecInitContainersVolumeDevicesOutput
	ToAlertmanagerSpecInitContainersVolumeDevicesOutputWithContext(context.Context) AlertmanagerSpecInitContainersVolumeDevicesOutput
}

// volumeDevice describes a mapping of a raw block device within a container.
type AlertmanagerSpecInitContainersVolumeDevicesArgs struct {
	// devicePath is the path inside of the container that the device will be mapped to.
	DevicePath pulumi.StringInput `pulumi:"devicePath"`
	// name must match the name of a persistentVolumeClaim in the pod
	Name pulumi.StringInput `pulumi:"name"`
}

func (AlertmanagerSpecInitContainersVolumeDevicesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersVolumeDevices)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersVolumeDevicesArgs) ToAlertmanagerSpecInitContainersVolumeDevicesOutput() AlertmanagerSpecInitContainersVolumeDevicesOutput {
	return i.ToAlertmanagerSpecInitContainersVolumeDevicesOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersVolumeDevicesArgs) ToAlertmanagerSpecInitContainersVolumeDevicesOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersVolumeDevicesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersVolumeDevicesOutput)
}

// AlertmanagerSpecInitContainersVolumeDevicesArrayInput is an input type that accepts AlertmanagerSpecInitContainersVolumeDevicesArray and AlertmanagerSpecInitContainersVolumeDevicesArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersVolumeDevicesArrayInput` via:
//
//          AlertmanagerSpecInitContainersVolumeDevicesArray{ AlertmanagerSpecInitContainersVolumeDevicesArgs{...} }
type AlertmanagerSpecInitContainersVolumeDevicesArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersVolumeDevicesArrayOutput() AlertmanagerSpecInitContainersVolumeDevicesArrayOutput
	ToAlertmanagerSpecInitContainersVolumeDevicesArrayOutputWithContext(context.Context) AlertmanagerSpecInitContainersVolumeDevicesArrayOutput
}

type AlertmanagerSpecInitContainersVolumeDevicesArray []AlertmanagerSpecInitContainersVolumeDevicesInput

func (AlertmanagerSpecInitContainersVolumeDevicesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecInitContainersVolumeDevices)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersVolumeDevicesArray) ToAlertmanagerSpecInitContainersVolumeDevicesArrayOutput() AlertmanagerSpecInitContainersVolumeDevicesArrayOutput {
	return i.ToAlertmanagerSpecInitContainersVolumeDevicesArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersVolumeDevicesArray) ToAlertmanagerSpecInitContainersVolumeDevicesArrayOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersVolumeDevicesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersVolumeDevicesArrayOutput)
}

// volumeDevice describes a mapping of a raw block device within a container.
type AlertmanagerSpecInitContainersVolumeDevicesOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersVolumeDevicesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersVolumeDevices)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersVolumeDevicesOutput) ToAlertmanagerSpecInitContainersVolumeDevicesOutput() AlertmanagerSpecInitContainersVolumeDevicesOutput {
	return o
}

func (o AlertmanagerSpecInitContainersVolumeDevicesOutput) ToAlertmanagerSpecInitContainersVolumeDevicesOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersVolumeDevicesOutput {
	return o
}

// devicePath is the path inside of the container that the device will be mapped to.
func (o AlertmanagerSpecInitContainersVolumeDevicesOutput) DevicePath() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersVolumeDevices) string { return v.DevicePath }).(pulumi.StringOutput)
}

// name must match the name of a persistentVolumeClaim in the pod
func (o AlertmanagerSpecInitContainersVolumeDevicesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersVolumeDevices) string { return v.Name }).(pulumi.StringOutput)
}

type AlertmanagerSpecInitContainersVolumeDevicesArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersVolumeDevicesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecInitContainersVolumeDevices)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersVolumeDevicesArrayOutput) ToAlertmanagerSpecInitContainersVolumeDevicesArrayOutput() AlertmanagerSpecInitContainersVolumeDevicesArrayOutput {
	return o
}

func (o AlertmanagerSpecInitContainersVolumeDevicesArrayOutput) ToAlertmanagerSpecInitContainersVolumeDevicesArrayOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersVolumeDevicesArrayOutput {
	return o
}

func (o AlertmanagerSpecInitContainersVolumeDevicesArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecInitContainersVolumeDevicesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecInitContainersVolumeDevices {
		return vs[0].([]AlertmanagerSpecInitContainersVolumeDevices)[vs[1].(int)]
	}).(AlertmanagerSpecInitContainersVolumeDevicesOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type AlertmanagerSpecInitContainersVolumeMounts struct {
	// Path within the container at which the volume should be mounted.  Must not contain ':'.
	MountPath string `pulumi:"mountPath"`
	// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
	MountPropagation *string `pulumi:"mountPropagation"`
	// This must match the Name of a Volume.
	Name string `pulumi:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
	ReadOnly *bool `pulumi:"readOnly"`
	// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath *string `pulumi:"subPath"`
	// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr *string `pulumi:"subPathExpr"`
}

// AlertmanagerSpecInitContainersVolumeMountsInput is an input type that accepts AlertmanagerSpecInitContainersVolumeMountsArgs and AlertmanagerSpecInitContainersVolumeMountsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersVolumeMountsInput` via:
//
//          AlertmanagerSpecInitContainersVolumeMountsArgs{...}
type AlertmanagerSpecInitContainersVolumeMountsInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersVolumeMountsOutput() AlertmanagerSpecInitContainersVolumeMountsOutput
	ToAlertmanagerSpecInitContainersVolumeMountsOutputWithContext(context.Context) AlertmanagerSpecInitContainersVolumeMountsOutput
}

// VolumeMount describes a mounting of a Volume within a container.
type AlertmanagerSpecInitContainersVolumeMountsArgs struct {
	// Path within the container at which the volume should be mounted.  Must not contain ':'.
	MountPath pulumi.StringInput `pulumi:"mountPath"`
	// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
	MountPropagation pulumi.StringPtrInput `pulumi:"mountPropagation"`
	// This must match the Name of a Volume.
	Name pulumi.StringInput `pulumi:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath pulumi.StringPtrInput `pulumi:"subPath"`
	// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr pulumi.StringPtrInput `pulumi:"subPathExpr"`
}

func (AlertmanagerSpecInitContainersVolumeMountsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersVolumeMounts)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersVolumeMountsArgs) ToAlertmanagerSpecInitContainersVolumeMountsOutput() AlertmanagerSpecInitContainersVolumeMountsOutput {
	return i.ToAlertmanagerSpecInitContainersVolumeMountsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersVolumeMountsArgs) ToAlertmanagerSpecInitContainersVolumeMountsOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersVolumeMountsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersVolumeMountsOutput)
}

// AlertmanagerSpecInitContainersVolumeMountsArrayInput is an input type that accepts AlertmanagerSpecInitContainersVolumeMountsArray and AlertmanagerSpecInitContainersVolumeMountsArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecInitContainersVolumeMountsArrayInput` via:
//
//          AlertmanagerSpecInitContainersVolumeMountsArray{ AlertmanagerSpecInitContainersVolumeMountsArgs{...} }
type AlertmanagerSpecInitContainersVolumeMountsArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecInitContainersVolumeMountsArrayOutput() AlertmanagerSpecInitContainersVolumeMountsArrayOutput
	ToAlertmanagerSpecInitContainersVolumeMountsArrayOutputWithContext(context.Context) AlertmanagerSpecInitContainersVolumeMountsArrayOutput
}

type AlertmanagerSpecInitContainersVolumeMountsArray []AlertmanagerSpecInitContainersVolumeMountsInput

func (AlertmanagerSpecInitContainersVolumeMountsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecInitContainersVolumeMounts)(nil)).Elem()
}

func (i AlertmanagerSpecInitContainersVolumeMountsArray) ToAlertmanagerSpecInitContainersVolumeMountsArrayOutput() AlertmanagerSpecInitContainersVolumeMountsArrayOutput {
	return i.ToAlertmanagerSpecInitContainersVolumeMountsArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecInitContainersVolumeMountsArray) ToAlertmanagerSpecInitContainersVolumeMountsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersVolumeMountsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecInitContainersVolumeMountsArrayOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type AlertmanagerSpecInitContainersVolumeMountsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersVolumeMountsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecInitContainersVolumeMounts)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersVolumeMountsOutput) ToAlertmanagerSpecInitContainersVolumeMountsOutput() AlertmanagerSpecInitContainersVolumeMountsOutput {
	return o
}

func (o AlertmanagerSpecInitContainersVolumeMountsOutput) ToAlertmanagerSpecInitContainersVolumeMountsOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersVolumeMountsOutput {
	return o
}

// Path within the container at which the volume should be mounted.  Must not contain ':'.
func (o AlertmanagerSpecInitContainersVolumeMountsOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersVolumeMounts) string { return v.MountPath }).(pulumi.StringOutput)
}

// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
func (o AlertmanagerSpecInitContainersVolumeMountsOutput) MountPropagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersVolumeMounts) *string { return v.MountPropagation }).(pulumi.StringPtrOutput)
}

// This must match the Name of a Volume.
func (o AlertmanagerSpecInitContainersVolumeMountsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersVolumeMounts) string { return v.Name }).(pulumi.StringOutput)
}

// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
func (o AlertmanagerSpecInitContainersVolumeMountsOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersVolumeMounts) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
func (o AlertmanagerSpecInitContainersVolumeMountsOutput) SubPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersVolumeMounts) *string { return v.SubPath }).(pulumi.StringPtrOutput)
}

// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
func (o AlertmanagerSpecInitContainersVolumeMountsOutput) SubPathExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecInitContainersVolumeMounts) *string { return v.SubPathExpr }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecInitContainersVolumeMountsArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecInitContainersVolumeMountsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecInitContainersVolumeMounts)(nil)).Elem()
}

func (o AlertmanagerSpecInitContainersVolumeMountsArrayOutput) ToAlertmanagerSpecInitContainersVolumeMountsArrayOutput() AlertmanagerSpecInitContainersVolumeMountsArrayOutput {
	return o
}

func (o AlertmanagerSpecInitContainersVolumeMountsArrayOutput) ToAlertmanagerSpecInitContainersVolumeMountsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecInitContainersVolumeMountsArrayOutput {
	return o
}

func (o AlertmanagerSpecInitContainersVolumeMountsArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecInitContainersVolumeMountsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecInitContainersVolumeMounts {
		return vs[0].([]AlertmanagerSpecInitContainersVolumeMounts)[vs[1].(int)]
	}).(AlertmanagerSpecInitContainersVolumeMountsOutput)
}

// Define which Nodes the Pods are scheduled on.
type AlertmanagerSpecNodeSelector struct {
}

// AlertmanagerSpecNodeSelectorInput is an input type that accepts AlertmanagerSpecNodeSelectorArgs and AlertmanagerSpecNodeSelectorOutput values.
// You can construct a concrete instance of `AlertmanagerSpecNodeSelectorInput` via:
//
//          AlertmanagerSpecNodeSelectorArgs{...}
type AlertmanagerSpecNodeSelectorInput interface {
	pulumi.Input

	ToAlertmanagerSpecNodeSelectorOutput() AlertmanagerSpecNodeSelectorOutput
	ToAlertmanagerSpecNodeSelectorOutputWithContext(context.Context) AlertmanagerSpecNodeSelectorOutput
}

// Define which Nodes the Pods are scheduled on.
type AlertmanagerSpecNodeSelectorArgs struct {
}

func (AlertmanagerSpecNodeSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecNodeSelector)(nil)).Elem()
}

func (i AlertmanagerSpecNodeSelectorArgs) ToAlertmanagerSpecNodeSelectorOutput() AlertmanagerSpecNodeSelectorOutput {
	return i.ToAlertmanagerSpecNodeSelectorOutputWithContext(context.Background())
}

func (i AlertmanagerSpecNodeSelectorArgs) ToAlertmanagerSpecNodeSelectorOutputWithContext(ctx context.Context) AlertmanagerSpecNodeSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecNodeSelectorOutput)
}

// Define which Nodes the Pods are scheduled on.
type AlertmanagerSpecNodeSelectorOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecNodeSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecNodeSelector)(nil)).Elem()
}

func (o AlertmanagerSpecNodeSelectorOutput) ToAlertmanagerSpecNodeSelectorOutput() AlertmanagerSpecNodeSelectorOutput {
	return o
}

func (o AlertmanagerSpecNodeSelectorOutput) ToAlertmanagerSpecNodeSelectorOutputWithContext(ctx context.Context) AlertmanagerSpecNodeSelectorOutput {
	return o
}

// PodMetadata configures Labels and Annotations which are propagated to the alertmanager pods.
type AlertmanagerSpecPodMetadata struct {
	// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
	Annotations map[string]string `pulumi:"annotations"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
	Labels map[string]string `pulumi:"labels"`
}

// AlertmanagerSpecPodMetadataInput is an input type that accepts AlertmanagerSpecPodMetadataArgs and AlertmanagerSpecPodMetadataOutput values.
// You can construct a concrete instance of `AlertmanagerSpecPodMetadataInput` via:
//
//          AlertmanagerSpecPodMetadataArgs{...}
type AlertmanagerSpecPodMetadataInput interface {
	pulumi.Input

	ToAlertmanagerSpecPodMetadataOutput() AlertmanagerSpecPodMetadataOutput
	ToAlertmanagerSpecPodMetadataOutputWithContext(context.Context) AlertmanagerSpecPodMetadataOutput
}

// PodMetadata configures Labels and Annotations which are propagated to the alertmanager pods.
type AlertmanagerSpecPodMetadataArgs struct {
	// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (AlertmanagerSpecPodMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecPodMetadata)(nil)).Elem()
}

func (i AlertmanagerSpecPodMetadataArgs) ToAlertmanagerSpecPodMetadataOutput() AlertmanagerSpecPodMetadataOutput {
	return i.ToAlertmanagerSpecPodMetadataOutputWithContext(context.Background())
}

func (i AlertmanagerSpecPodMetadataArgs) ToAlertmanagerSpecPodMetadataOutputWithContext(ctx context.Context) AlertmanagerSpecPodMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecPodMetadataOutput)
}

func (i AlertmanagerSpecPodMetadataArgs) ToAlertmanagerSpecPodMetadataPtrOutput() AlertmanagerSpecPodMetadataPtrOutput {
	return i.ToAlertmanagerSpecPodMetadataPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecPodMetadataArgs) ToAlertmanagerSpecPodMetadataPtrOutputWithContext(ctx context.Context) AlertmanagerSpecPodMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecPodMetadataOutput).ToAlertmanagerSpecPodMetadataPtrOutputWithContext(ctx)
}

// AlertmanagerSpecPodMetadataPtrInput is an input type that accepts AlertmanagerSpecPodMetadataArgs, AlertmanagerSpecPodMetadataPtr and AlertmanagerSpecPodMetadataPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecPodMetadataPtrInput` via:
//
//          AlertmanagerSpecPodMetadataArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecPodMetadataPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecPodMetadataPtrOutput() AlertmanagerSpecPodMetadataPtrOutput
	ToAlertmanagerSpecPodMetadataPtrOutputWithContext(context.Context) AlertmanagerSpecPodMetadataPtrOutput
}

type alertmanagerSpecPodMetadataPtrType AlertmanagerSpecPodMetadataArgs

func AlertmanagerSpecPodMetadataPtr(v *AlertmanagerSpecPodMetadataArgs) AlertmanagerSpecPodMetadataPtrInput {
	return (*alertmanagerSpecPodMetadataPtrType)(v)
}

func (*alertmanagerSpecPodMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecPodMetadata)(nil)).Elem()
}

func (i *alertmanagerSpecPodMetadataPtrType) ToAlertmanagerSpecPodMetadataPtrOutput() AlertmanagerSpecPodMetadataPtrOutput {
	return i.ToAlertmanagerSpecPodMetadataPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecPodMetadataPtrType) ToAlertmanagerSpecPodMetadataPtrOutputWithContext(ctx context.Context) AlertmanagerSpecPodMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecPodMetadataPtrOutput)
}

// PodMetadata configures Labels and Annotations which are propagated to the alertmanager pods.
type AlertmanagerSpecPodMetadataOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecPodMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecPodMetadata)(nil)).Elem()
}

func (o AlertmanagerSpecPodMetadataOutput) ToAlertmanagerSpecPodMetadataOutput() AlertmanagerSpecPodMetadataOutput {
	return o
}

func (o AlertmanagerSpecPodMetadataOutput) ToAlertmanagerSpecPodMetadataOutputWithContext(ctx context.Context) AlertmanagerSpecPodMetadataOutput {
	return o
}

func (o AlertmanagerSpecPodMetadataOutput) ToAlertmanagerSpecPodMetadataPtrOutput() AlertmanagerSpecPodMetadataPtrOutput {
	return o.ToAlertmanagerSpecPodMetadataPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecPodMetadataOutput) ToAlertmanagerSpecPodMetadataPtrOutputWithContext(ctx context.Context) AlertmanagerSpecPodMetadataPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecPodMetadata) *AlertmanagerSpecPodMetadata {
		return &v
	}).(AlertmanagerSpecPodMetadataPtrOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
func (o AlertmanagerSpecPodMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertmanagerSpecPodMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
func (o AlertmanagerSpecPodMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertmanagerSpecPodMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type AlertmanagerSpecPodMetadataPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecPodMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecPodMetadata)(nil)).Elem()
}

func (o AlertmanagerSpecPodMetadataPtrOutput) ToAlertmanagerSpecPodMetadataPtrOutput() AlertmanagerSpecPodMetadataPtrOutput {
	return o
}

func (o AlertmanagerSpecPodMetadataPtrOutput) ToAlertmanagerSpecPodMetadataPtrOutputWithContext(ctx context.Context) AlertmanagerSpecPodMetadataPtrOutput {
	return o
}

func (o AlertmanagerSpecPodMetadataPtrOutput) Elem() AlertmanagerSpecPodMetadataOutput {
	return o.ApplyT(func(v *AlertmanagerSpecPodMetadata) AlertmanagerSpecPodMetadata { return *v }).(AlertmanagerSpecPodMetadataOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
func (o AlertmanagerSpecPodMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertmanagerSpecPodMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
func (o AlertmanagerSpecPodMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertmanagerSpecPodMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
type AlertmanagerSpecPodMetadataAnnotations struct {
}

// AlertmanagerSpecPodMetadataAnnotationsInput is an input type that accepts AlertmanagerSpecPodMetadataAnnotationsArgs and AlertmanagerSpecPodMetadataAnnotationsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecPodMetadataAnnotationsInput` via:
//
//          AlertmanagerSpecPodMetadataAnnotationsArgs{...}
type AlertmanagerSpecPodMetadataAnnotationsInput interface {
	pulumi.Input

	ToAlertmanagerSpecPodMetadataAnnotationsOutput() AlertmanagerSpecPodMetadataAnnotationsOutput
	ToAlertmanagerSpecPodMetadataAnnotationsOutputWithContext(context.Context) AlertmanagerSpecPodMetadataAnnotationsOutput
}

// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
type AlertmanagerSpecPodMetadataAnnotationsArgs struct {
}

func (AlertmanagerSpecPodMetadataAnnotationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecPodMetadataAnnotations)(nil)).Elem()
}

func (i AlertmanagerSpecPodMetadataAnnotationsArgs) ToAlertmanagerSpecPodMetadataAnnotationsOutput() AlertmanagerSpecPodMetadataAnnotationsOutput {
	return i.ToAlertmanagerSpecPodMetadataAnnotationsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecPodMetadataAnnotationsArgs) ToAlertmanagerSpecPodMetadataAnnotationsOutputWithContext(ctx context.Context) AlertmanagerSpecPodMetadataAnnotationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecPodMetadataAnnotationsOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
type AlertmanagerSpecPodMetadataAnnotationsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecPodMetadataAnnotationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecPodMetadataAnnotations)(nil)).Elem()
}

func (o AlertmanagerSpecPodMetadataAnnotationsOutput) ToAlertmanagerSpecPodMetadataAnnotationsOutput() AlertmanagerSpecPodMetadataAnnotationsOutput {
	return o
}

func (o AlertmanagerSpecPodMetadataAnnotationsOutput) ToAlertmanagerSpecPodMetadataAnnotationsOutputWithContext(ctx context.Context) AlertmanagerSpecPodMetadataAnnotationsOutput {
	return o
}

// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
type AlertmanagerSpecPodMetadataLabels struct {
}

// AlertmanagerSpecPodMetadataLabelsInput is an input type that accepts AlertmanagerSpecPodMetadataLabelsArgs and AlertmanagerSpecPodMetadataLabelsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecPodMetadataLabelsInput` via:
//
//          AlertmanagerSpecPodMetadataLabelsArgs{...}
type AlertmanagerSpecPodMetadataLabelsInput interface {
	pulumi.Input

	ToAlertmanagerSpecPodMetadataLabelsOutput() AlertmanagerSpecPodMetadataLabelsOutput
	ToAlertmanagerSpecPodMetadataLabelsOutputWithContext(context.Context) AlertmanagerSpecPodMetadataLabelsOutput
}

// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
type AlertmanagerSpecPodMetadataLabelsArgs struct {
}

func (AlertmanagerSpecPodMetadataLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecPodMetadataLabels)(nil)).Elem()
}

func (i AlertmanagerSpecPodMetadataLabelsArgs) ToAlertmanagerSpecPodMetadataLabelsOutput() AlertmanagerSpecPodMetadataLabelsOutput {
	return i.ToAlertmanagerSpecPodMetadataLabelsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecPodMetadataLabelsArgs) ToAlertmanagerSpecPodMetadataLabelsOutputWithContext(ctx context.Context) AlertmanagerSpecPodMetadataLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecPodMetadataLabelsOutput)
}

// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
type AlertmanagerSpecPodMetadataLabelsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecPodMetadataLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecPodMetadataLabels)(nil)).Elem()
}

func (o AlertmanagerSpecPodMetadataLabelsOutput) ToAlertmanagerSpecPodMetadataLabelsOutput() AlertmanagerSpecPodMetadataLabelsOutput {
	return o
}

func (o AlertmanagerSpecPodMetadataLabelsOutput) ToAlertmanagerSpecPodMetadataLabelsOutputWithContext(ctx context.Context) AlertmanagerSpecPodMetadataLabelsOutput {
	return o
}

// Define resources requests and limits for single Pods.
type AlertmanagerSpecResources struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits map[string]string `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests map[string]string `pulumi:"requests"`
}

// AlertmanagerSpecResourcesInput is an input type that accepts AlertmanagerSpecResourcesArgs and AlertmanagerSpecResourcesOutput values.
// You can construct a concrete instance of `AlertmanagerSpecResourcesInput` via:
//
//          AlertmanagerSpecResourcesArgs{...}
type AlertmanagerSpecResourcesInput interface {
	pulumi.Input

	ToAlertmanagerSpecResourcesOutput() AlertmanagerSpecResourcesOutput
	ToAlertmanagerSpecResourcesOutputWithContext(context.Context) AlertmanagerSpecResourcesOutput
}

// Define resources requests and limits for single Pods.
type AlertmanagerSpecResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits pulumi.StringMapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests pulumi.StringMapInput `pulumi:"requests"`
}

func (AlertmanagerSpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecResources)(nil)).Elem()
}

func (i AlertmanagerSpecResourcesArgs) ToAlertmanagerSpecResourcesOutput() AlertmanagerSpecResourcesOutput {
	return i.ToAlertmanagerSpecResourcesOutputWithContext(context.Background())
}

func (i AlertmanagerSpecResourcesArgs) ToAlertmanagerSpecResourcesOutputWithContext(ctx context.Context) AlertmanagerSpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecResourcesOutput)
}

func (i AlertmanagerSpecResourcesArgs) ToAlertmanagerSpecResourcesPtrOutput() AlertmanagerSpecResourcesPtrOutput {
	return i.ToAlertmanagerSpecResourcesPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecResourcesArgs) ToAlertmanagerSpecResourcesPtrOutputWithContext(ctx context.Context) AlertmanagerSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecResourcesOutput).ToAlertmanagerSpecResourcesPtrOutputWithContext(ctx)
}

// AlertmanagerSpecResourcesPtrInput is an input type that accepts AlertmanagerSpecResourcesArgs, AlertmanagerSpecResourcesPtr and AlertmanagerSpecResourcesPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecResourcesPtrInput` via:
//
//          AlertmanagerSpecResourcesArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecResourcesPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecResourcesPtrOutput() AlertmanagerSpecResourcesPtrOutput
	ToAlertmanagerSpecResourcesPtrOutputWithContext(context.Context) AlertmanagerSpecResourcesPtrOutput
}

type alertmanagerSpecResourcesPtrType AlertmanagerSpecResourcesArgs

func AlertmanagerSpecResourcesPtr(v *AlertmanagerSpecResourcesArgs) AlertmanagerSpecResourcesPtrInput {
	return (*alertmanagerSpecResourcesPtrType)(v)
}

func (*alertmanagerSpecResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecResources)(nil)).Elem()
}

func (i *alertmanagerSpecResourcesPtrType) ToAlertmanagerSpecResourcesPtrOutput() AlertmanagerSpecResourcesPtrOutput {
	return i.ToAlertmanagerSpecResourcesPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecResourcesPtrType) ToAlertmanagerSpecResourcesPtrOutputWithContext(ctx context.Context) AlertmanagerSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecResourcesPtrOutput)
}

// Define resources requests and limits for single Pods.
type AlertmanagerSpecResourcesOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecResources)(nil)).Elem()
}

func (o AlertmanagerSpecResourcesOutput) ToAlertmanagerSpecResourcesOutput() AlertmanagerSpecResourcesOutput {
	return o
}

func (o AlertmanagerSpecResourcesOutput) ToAlertmanagerSpecResourcesOutputWithContext(ctx context.Context) AlertmanagerSpecResourcesOutput {
	return o
}

func (o AlertmanagerSpecResourcesOutput) ToAlertmanagerSpecResourcesPtrOutput() AlertmanagerSpecResourcesPtrOutput {
	return o.ToAlertmanagerSpecResourcesPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecResourcesOutput) ToAlertmanagerSpecResourcesPtrOutputWithContext(ctx context.Context) AlertmanagerSpecResourcesPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecResources) *AlertmanagerSpecResources {
		return &v
	}).(AlertmanagerSpecResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o AlertmanagerSpecResourcesOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertmanagerSpecResources) map[string]string { return v.Limits }).(pulumi.StringMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o AlertmanagerSpecResourcesOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertmanagerSpecResources) map[string]string { return v.Requests }).(pulumi.StringMapOutput)
}

type AlertmanagerSpecResourcesPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecResources)(nil)).Elem()
}

func (o AlertmanagerSpecResourcesPtrOutput) ToAlertmanagerSpecResourcesPtrOutput() AlertmanagerSpecResourcesPtrOutput {
	return o
}

func (o AlertmanagerSpecResourcesPtrOutput) ToAlertmanagerSpecResourcesPtrOutputWithContext(ctx context.Context) AlertmanagerSpecResourcesPtrOutput {
	return o
}

func (o AlertmanagerSpecResourcesPtrOutput) Elem() AlertmanagerSpecResourcesOutput {
	return o.ApplyT(func(v *AlertmanagerSpecResources) AlertmanagerSpecResources { return *v }).(AlertmanagerSpecResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o AlertmanagerSpecResourcesPtrOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertmanagerSpecResources) map[string]string {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.StringMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o AlertmanagerSpecResourcesPtrOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertmanagerSpecResources) map[string]string {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.StringMapOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecResourcesLimits struct {
}

// AlertmanagerSpecResourcesLimitsInput is an input type that accepts AlertmanagerSpecResourcesLimitsArgs and AlertmanagerSpecResourcesLimitsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecResourcesLimitsInput` via:
//
//          AlertmanagerSpecResourcesLimitsArgs{...}
type AlertmanagerSpecResourcesLimitsInput interface {
	pulumi.Input

	ToAlertmanagerSpecResourcesLimitsOutput() AlertmanagerSpecResourcesLimitsOutput
	ToAlertmanagerSpecResourcesLimitsOutputWithContext(context.Context) AlertmanagerSpecResourcesLimitsOutput
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecResourcesLimitsArgs struct {
}

func (AlertmanagerSpecResourcesLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecResourcesLimits)(nil)).Elem()
}

func (i AlertmanagerSpecResourcesLimitsArgs) ToAlertmanagerSpecResourcesLimitsOutput() AlertmanagerSpecResourcesLimitsOutput {
	return i.ToAlertmanagerSpecResourcesLimitsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecResourcesLimitsArgs) ToAlertmanagerSpecResourcesLimitsOutputWithContext(ctx context.Context) AlertmanagerSpecResourcesLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecResourcesLimitsOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecResourcesLimitsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecResourcesLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecResourcesLimits)(nil)).Elem()
}

func (o AlertmanagerSpecResourcesLimitsOutput) ToAlertmanagerSpecResourcesLimitsOutput() AlertmanagerSpecResourcesLimitsOutput {
	return o
}

func (o AlertmanagerSpecResourcesLimitsOutput) ToAlertmanagerSpecResourcesLimitsOutputWithContext(ctx context.Context) AlertmanagerSpecResourcesLimitsOutput {
	return o
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecResourcesRequests struct {
}

// AlertmanagerSpecResourcesRequestsInput is an input type that accepts AlertmanagerSpecResourcesRequestsArgs and AlertmanagerSpecResourcesRequestsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecResourcesRequestsInput` via:
//
//          AlertmanagerSpecResourcesRequestsArgs{...}
type AlertmanagerSpecResourcesRequestsInput interface {
	pulumi.Input

	ToAlertmanagerSpecResourcesRequestsOutput() AlertmanagerSpecResourcesRequestsOutput
	ToAlertmanagerSpecResourcesRequestsOutputWithContext(context.Context) AlertmanagerSpecResourcesRequestsOutput
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecResourcesRequestsArgs struct {
}

func (AlertmanagerSpecResourcesRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecResourcesRequests)(nil)).Elem()
}

func (i AlertmanagerSpecResourcesRequestsArgs) ToAlertmanagerSpecResourcesRequestsOutput() AlertmanagerSpecResourcesRequestsOutput {
	return i.ToAlertmanagerSpecResourcesRequestsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecResourcesRequestsArgs) ToAlertmanagerSpecResourcesRequestsOutputWithContext(ctx context.Context) AlertmanagerSpecResourcesRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecResourcesRequestsOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecResourcesRequestsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecResourcesRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecResourcesRequests)(nil)).Elem()
}

func (o AlertmanagerSpecResourcesRequestsOutput) ToAlertmanagerSpecResourcesRequestsOutput() AlertmanagerSpecResourcesRequestsOutput {
	return o
}

func (o AlertmanagerSpecResourcesRequestsOutput) ToAlertmanagerSpecResourcesRequestsOutputWithContext(ctx context.Context) AlertmanagerSpecResourcesRequestsOutput {
	return o
}

// SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.
type AlertmanagerSpecSecurityContext struct {
	// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
	//  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
	//      If unset, the Kubelet will not modify the ownership and permissions of any volume.
	FsGroup *int `pulumi:"fsGroup"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
	RunAsGroup *int `pulumi:"runAsGroup"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot *bool `pulumi:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
	RunAsUser *int `pulumi:"runAsUser"`
	// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
	SeLinuxOptions *AlertmanagerSpecSecurityContextSeLinuxOptions `pulumi:"seLinuxOptions"`
	// A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.
	SupplementalGroups []int `pulumi:"supplementalGroups"`
	// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.
	Sysctls []AlertmanagerSpecSecurityContextSysctls `pulumi:"sysctls"`
	// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	WindowsOptions *AlertmanagerSpecSecurityContextWindowsOptions `pulumi:"windowsOptions"`
}

// AlertmanagerSpecSecurityContextInput is an input type that accepts AlertmanagerSpecSecurityContextArgs and AlertmanagerSpecSecurityContextOutput values.
// You can construct a concrete instance of `AlertmanagerSpecSecurityContextInput` via:
//
//          AlertmanagerSpecSecurityContextArgs{...}
type AlertmanagerSpecSecurityContextInput interface {
	pulumi.Input

	ToAlertmanagerSpecSecurityContextOutput() AlertmanagerSpecSecurityContextOutput
	ToAlertmanagerSpecSecurityContextOutputWithContext(context.Context) AlertmanagerSpecSecurityContextOutput
}

// SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.
type AlertmanagerSpecSecurityContextArgs struct {
	// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
	//  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
	//      If unset, the Kubelet will not modify the ownership and permissions of any volume.
	FsGroup pulumi.IntPtrInput `pulumi:"fsGroup"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
	RunAsGroup pulumi.IntPtrInput `pulumi:"runAsGroup"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot pulumi.BoolPtrInput `pulumi:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
	RunAsUser pulumi.IntPtrInput `pulumi:"runAsUser"`
	// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
	SeLinuxOptions AlertmanagerSpecSecurityContextSeLinuxOptionsPtrInput `pulumi:"seLinuxOptions"`
	// A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.
	SupplementalGroups pulumi.IntArrayInput `pulumi:"supplementalGroups"`
	// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.
	Sysctls AlertmanagerSpecSecurityContextSysctlsArrayInput `pulumi:"sysctls"`
	// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	WindowsOptions AlertmanagerSpecSecurityContextWindowsOptionsPtrInput `pulumi:"windowsOptions"`
}

func (AlertmanagerSpecSecurityContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecSecurityContext)(nil)).Elem()
}

func (i AlertmanagerSpecSecurityContextArgs) ToAlertmanagerSpecSecurityContextOutput() AlertmanagerSpecSecurityContextOutput {
	return i.ToAlertmanagerSpecSecurityContextOutputWithContext(context.Background())
}

func (i AlertmanagerSpecSecurityContextArgs) ToAlertmanagerSpecSecurityContextOutputWithContext(ctx context.Context) AlertmanagerSpecSecurityContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecSecurityContextOutput)
}

func (i AlertmanagerSpecSecurityContextArgs) ToAlertmanagerSpecSecurityContextPtrOutput() AlertmanagerSpecSecurityContextPtrOutput {
	return i.ToAlertmanagerSpecSecurityContextPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecSecurityContextArgs) ToAlertmanagerSpecSecurityContextPtrOutputWithContext(ctx context.Context) AlertmanagerSpecSecurityContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecSecurityContextOutput).ToAlertmanagerSpecSecurityContextPtrOutputWithContext(ctx)
}

// AlertmanagerSpecSecurityContextPtrInput is an input type that accepts AlertmanagerSpecSecurityContextArgs, AlertmanagerSpecSecurityContextPtr and AlertmanagerSpecSecurityContextPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecSecurityContextPtrInput` via:
//
//          AlertmanagerSpecSecurityContextArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecSecurityContextPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecSecurityContextPtrOutput() AlertmanagerSpecSecurityContextPtrOutput
	ToAlertmanagerSpecSecurityContextPtrOutputWithContext(context.Context) AlertmanagerSpecSecurityContextPtrOutput
}

type alertmanagerSpecSecurityContextPtrType AlertmanagerSpecSecurityContextArgs

func AlertmanagerSpecSecurityContextPtr(v *AlertmanagerSpecSecurityContextArgs) AlertmanagerSpecSecurityContextPtrInput {
	return (*alertmanagerSpecSecurityContextPtrType)(v)
}

func (*alertmanagerSpecSecurityContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecSecurityContext)(nil)).Elem()
}

func (i *alertmanagerSpecSecurityContextPtrType) ToAlertmanagerSpecSecurityContextPtrOutput() AlertmanagerSpecSecurityContextPtrOutput {
	return i.ToAlertmanagerSpecSecurityContextPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecSecurityContextPtrType) ToAlertmanagerSpecSecurityContextPtrOutputWithContext(ctx context.Context) AlertmanagerSpecSecurityContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecSecurityContextPtrOutput)
}

// SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.
type AlertmanagerSpecSecurityContextOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecSecurityContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecSecurityContext)(nil)).Elem()
}

func (o AlertmanagerSpecSecurityContextOutput) ToAlertmanagerSpecSecurityContextOutput() AlertmanagerSpecSecurityContextOutput {
	return o
}

func (o AlertmanagerSpecSecurityContextOutput) ToAlertmanagerSpecSecurityContextOutputWithContext(ctx context.Context) AlertmanagerSpecSecurityContextOutput {
	return o
}

func (o AlertmanagerSpecSecurityContextOutput) ToAlertmanagerSpecSecurityContextPtrOutput() AlertmanagerSpecSecurityContextPtrOutput {
	return o.ToAlertmanagerSpecSecurityContextPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecSecurityContextOutput) ToAlertmanagerSpecSecurityContextPtrOutputWithContext(ctx context.Context) AlertmanagerSpecSecurityContextPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecSecurityContext) *AlertmanagerSpecSecurityContext {
		return &v
	}).(AlertmanagerSpecSecurityContextPtrOutput)
}

// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
//  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
//      If unset, the Kubelet will not modify the ownership and permissions of any volume.
func (o AlertmanagerSpecSecurityContextOutput) FsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecSecurityContext) *int { return v.FsGroup }).(pulumi.IntPtrOutput)
}

// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
func (o AlertmanagerSpecSecurityContextOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecSecurityContext) *int { return v.RunAsGroup }).(pulumi.IntPtrOutput)
}

// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o AlertmanagerSpecSecurityContextOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecSecurityContext) *bool { return v.RunAsNonRoot }).(pulumi.BoolPtrOutput)
}

// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
func (o AlertmanagerSpecSecurityContextOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecSecurityContext) *int { return v.RunAsUser }).(pulumi.IntPtrOutput)
}

// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
func (o AlertmanagerSpecSecurityContextOutput) SeLinuxOptions() AlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecSecurityContext) *AlertmanagerSpecSecurityContextSeLinuxOptions {
		return v.SeLinuxOptions
	}).(AlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput)
}

// A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.
func (o AlertmanagerSpecSecurityContextOutput) SupplementalGroups() pulumi.IntArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecSecurityContext) []int { return v.SupplementalGroups }).(pulumi.IntArrayOutput)
}

// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.
func (o AlertmanagerSpecSecurityContextOutput) Sysctls() AlertmanagerSpecSecurityContextSysctlsArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecSecurityContext) []AlertmanagerSpecSecurityContextSysctls { return v.Sysctls }).(AlertmanagerSpecSecurityContextSysctlsArrayOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o AlertmanagerSpecSecurityContextOutput) WindowsOptions() AlertmanagerSpecSecurityContextWindowsOptionsPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecSecurityContext) *AlertmanagerSpecSecurityContextWindowsOptions {
		return v.WindowsOptions
	}).(AlertmanagerSpecSecurityContextWindowsOptionsPtrOutput)
}

type AlertmanagerSpecSecurityContextPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecSecurityContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecSecurityContext)(nil)).Elem()
}

func (o AlertmanagerSpecSecurityContextPtrOutput) ToAlertmanagerSpecSecurityContextPtrOutput() AlertmanagerSpecSecurityContextPtrOutput {
	return o
}

func (o AlertmanagerSpecSecurityContextPtrOutput) ToAlertmanagerSpecSecurityContextPtrOutputWithContext(ctx context.Context) AlertmanagerSpecSecurityContextPtrOutput {
	return o
}

func (o AlertmanagerSpecSecurityContextPtrOutput) Elem() AlertmanagerSpecSecurityContextOutput {
	return o.ApplyT(func(v *AlertmanagerSpecSecurityContext) AlertmanagerSpecSecurityContext { return *v }).(AlertmanagerSpecSecurityContextOutput)
}

// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
//  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
//      If unset, the Kubelet will not modify the ownership and permissions of any volume.
func (o AlertmanagerSpecSecurityContextPtrOutput) FsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecSecurityContext) *int {
		if v == nil {
			return nil
		}
		return v.FsGroup
	}).(pulumi.IntPtrOutput)
}

// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
func (o AlertmanagerSpecSecurityContextPtrOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecSecurityContext) *int {
		if v == nil {
			return nil
		}
		return v.RunAsGroup
	}).(pulumi.IntPtrOutput)
}

// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o AlertmanagerSpecSecurityContextPtrOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecSecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.RunAsNonRoot
	}).(pulumi.BoolPtrOutput)
}

// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
func (o AlertmanagerSpecSecurityContextPtrOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecSecurityContext) *int {
		if v == nil {
			return nil
		}
		return v.RunAsUser
	}).(pulumi.IntPtrOutput)
}

// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
func (o AlertmanagerSpecSecurityContextPtrOutput) SeLinuxOptions() AlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecSecurityContext) *AlertmanagerSpecSecurityContextSeLinuxOptions {
		if v == nil {
			return nil
		}
		return v.SeLinuxOptions
	}).(AlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput)
}

// A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.
func (o AlertmanagerSpecSecurityContextPtrOutput) SupplementalGroups() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecSecurityContext) []int {
		if v == nil {
			return nil
		}
		return v.SupplementalGroups
	}).(pulumi.IntArrayOutput)
}

// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.
func (o AlertmanagerSpecSecurityContextPtrOutput) Sysctls() AlertmanagerSpecSecurityContextSysctlsArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecSecurityContext) []AlertmanagerSpecSecurityContextSysctls {
		if v == nil {
			return nil
		}
		return v.Sysctls
	}).(AlertmanagerSpecSecurityContextSysctlsArrayOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o AlertmanagerSpecSecurityContextPtrOutput) WindowsOptions() AlertmanagerSpecSecurityContextWindowsOptionsPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecSecurityContext) *AlertmanagerSpecSecurityContextWindowsOptions {
		if v == nil {
			return nil
		}
		return v.WindowsOptions
	}).(AlertmanagerSpecSecurityContextWindowsOptionsPtrOutput)
}

// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
type AlertmanagerSpecSecurityContextSeLinuxOptions struct {
	// Level is SELinux level label that applies to the container.
	Level *string `pulumi:"level"`
	// Role is a SELinux role label that applies to the container.
	Role *string `pulumi:"role"`
	// Type is a SELinux type label that applies to the container.
	Type *string `pulumi:"type"`
	// User is a SELinux user label that applies to the container.
	User *string `pulumi:"user"`
}

// AlertmanagerSpecSecurityContextSeLinuxOptionsInput is an input type that accepts AlertmanagerSpecSecurityContextSeLinuxOptionsArgs and AlertmanagerSpecSecurityContextSeLinuxOptionsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecSecurityContextSeLinuxOptionsInput` via:
//
//          AlertmanagerSpecSecurityContextSeLinuxOptionsArgs{...}
type AlertmanagerSpecSecurityContextSeLinuxOptionsInput interface {
	pulumi.Input

	ToAlertmanagerSpecSecurityContextSeLinuxOptionsOutput() AlertmanagerSpecSecurityContextSeLinuxOptionsOutput
	ToAlertmanagerSpecSecurityContextSeLinuxOptionsOutputWithContext(context.Context) AlertmanagerSpecSecurityContextSeLinuxOptionsOutput
}

// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
type AlertmanagerSpecSecurityContextSeLinuxOptionsArgs struct {
	// Level is SELinux level label that applies to the container.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// Role is a SELinux role label that applies to the container.
	Role pulumi.StringPtrInput `pulumi:"role"`
	// Type is a SELinux type label that applies to the container.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// User is a SELinux user label that applies to the container.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (AlertmanagerSpecSecurityContextSeLinuxOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (i AlertmanagerSpecSecurityContextSeLinuxOptionsArgs) ToAlertmanagerSpecSecurityContextSeLinuxOptionsOutput() AlertmanagerSpecSecurityContextSeLinuxOptionsOutput {
	return i.ToAlertmanagerSpecSecurityContextSeLinuxOptionsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecSecurityContextSeLinuxOptionsArgs) ToAlertmanagerSpecSecurityContextSeLinuxOptionsOutputWithContext(ctx context.Context) AlertmanagerSpecSecurityContextSeLinuxOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecSecurityContextSeLinuxOptionsOutput)
}

func (i AlertmanagerSpecSecurityContextSeLinuxOptionsArgs) ToAlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput() AlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput {
	return i.ToAlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecSecurityContextSeLinuxOptionsArgs) ToAlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecSecurityContextSeLinuxOptionsOutput).ToAlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx)
}

// AlertmanagerSpecSecurityContextSeLinuxOptionsPtrInput is an input type that accepts AlertmanagerSpecSecurityContextSeLinuxOptionsArgs, AlertmanagerSpecSecurityContextSeLinuxOptionsPtr and AlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecSecurityContextSeLinuxOptionsPtrInput` via:
//
//          AlertmanagerSpecSecurityContextSeLinuxOptionsArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecSecurityContextSeLinuxOptionsPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput() AlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput
	ToAlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Context) AlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput
}

type alertmanagerSpecSecurityContextSeLinuxOptionsPtrType AlertmanagerSpecSecurityContextSeLinuxOptionsArgs

func AlertmanagerSpecSecurityContextSeLinuxOptionsPtr(v *AlertmanagerSpecSecurityContextSeLinuxOptionsArgs) AlertmanagerSpecSecurityContextSeLinuxOptionsPtrInput {
	return (*alertmanagerSpecSecurityContextSeLinuxOptionsPtrType)(v)
}

func (*alertmanagerSpecSecurityContextSeLinuxOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (i *alertmanagerSpecSecurityContextSeLinuxOptionsPtrType) ToAlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput() AlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput {
	return i.ToAlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecSecurityContextSeLinuxOptionsPtrType) ToAlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput)
}

// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
type AlertmanagerSpecSecurityContextSeLinuxOptionsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecSecurityContextSeLinuxOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (o AlertmanagerSpecSecurityContextSeLinuxOptionsOutput) ToAlertmanagerSpecSecurityContextSeLinuxOptionsOutput() AlertmanagerSpecSecurityContextSeLinuxOptionsOutput {
	return o
}

func (o AlertmanagerSpecSecurityContextSeLinuxOptionsOutput) ToAlertmanagerSpecSecurityContextSeLinuxOptionsOutputWithContext(ctx context.Context) AlertmanagerSpecSecurityContextSeLinuxOptionsOutput {
	return o
}

func (o AlertmanagerSpecSecurityContextSeLinuxOptionsOutput) ToAlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput() AlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput {
	return o.ToAlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecSecurityContextSeLinuxOptionsOutput) ToAlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecSecurityContextSeLinuxOptions) *AlertmanagerSpecSecurityContextSeLinuxOptions {
		return &v
	}).(AlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput)
}

// Level is SELinux level label that applies to the container.
func (o AlertmanagerSpecSecurityContextSeLinuxOptionsOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecSecurityContextSeLinuxOptions) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// Role is a SELinux role label that applies to the container.
func (o AlertmanagerSpecSecurityContextSeLinuxOptionsOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecSecurityContextSeLinuxOptions) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// Type is a SELinux type label that applies to the container.
func (o AlertmanagerSpecSecurityContextSeLinuxOptionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecSecurityContextSeLinuxOptions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// User is a SELinux user label that applies to the container.
func (o AlertmanagerSpecSecurityContextSeLinuxOptionsOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecSecurityContextSeLinuxOptions) *string { return v.User }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (o AlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput) ToAlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput() AlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput {
	return o
}

func (o AlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput) ToAlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput {
	return o
}

func (o AlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput) Elem() AlertmanagerSpecSecurityContextSeLinuxOptionsOutput {
	return o.ApplyT(func(v *AlertmanagerSpecSecurityContextSeLinuxOptions) AlertmanagerSpecSecurityContextSeLinuxOptions {
		return *v
	}).(AlertmanagerSpecSecurityContextSeLinuxOptionsOutput)
}

// Level is SELinux level label that applies to the container.
func (o AlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.StringPtrOutput)
}

// Role is a SELinux role label that applies to the container.
func (o AlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

// Type is a SELinux type label that applies to the container.
func (o AlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// User is a SELinux user label that applies to the container.
func (o AlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// Sysctl defines a kernel parameter to be set
type AlertmanagerSpecSecurityContextSysctls struct {
	// Name of a property to set
	Name string `pulumi:"name"`
	// Value of a property to set
	Value string `pulumi:"value"`
}

// AlertmanagerSpecSecurityContextSysctlsInput is an input type that accepts AlertmanagerSpecSecurityContextSysctlsArgs and AlertmanagerSpecSecurityContextSysctlsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecSecurityContextSysctlsInput` via:
//
//          AlertmanagerSpecSecurityContextSysctlsArgs{...}
type AlertmanagerSpecSecurityContextSysctlsInput interface {
	pulumi.Input

	ToAlertmanagerSpecSecurityContextSysctlsOutput() AlertmanagerSpecSecurityContextSysctlsOutput
	ToAlertmanagerSpecSecurityContextSysctlsOutputWithContext(context.Context) AlertmanagerSpecSecurityContextSysctlsOutput
}

// Sysctl defines a kernel parameter to be set
type AlertmanagerSpecSecurityContextSysctlsArgs struct {
	// Name of a property to set
	Name pulumi.StringInput `pulumi:"name"`
	// Value of a property to set
	Value pulumi.StringInput `pulumi:"value"`
}

func (AlertmanagerSpecSecurityContextSysctlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecSecurityContextSysctls)(nil)).Elem()
}

func (i AlertmanagerSpecSecurityContextSysctlsArgs) ToAlertmanagerSpecSecurityContextSysctlsOutput() AlertmanagerSpecSecurityContextSysctlsOutput {
	return i.ToAlertmanagerSpecSecurityContextSysctlsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecSecurityContextSysctlsArgs) ToAlertmanagerSpecSecurityContextSysctlsOutputWithContext(ctx context.Context) AlertmanagerSpecSecurityContextSysctlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecSecurityContextSysctlsOutput)
}

// AlertmanagerSpecSecurityContextSysctlsArrayInput is an input type that accepts AlertmanagerSpecSecurityContextSysctlsArray and AlertmanagerSpecSecurityContextSysctlsArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecSecurityContextSysctlsArrayInput` via:
//
//          AlertmanagerSpecSecurityContextSysctlsArray{ AlertmanagerSpecSecurityContextSysctlsArgs{...} }
type AlertmanagerSpecSecurityContextSysctlsArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecSecurityContextSysctlsArrayOutput() AlertmanagerSpecSecurityContextSysctlsArrayOutput
	ToAlertmanagerSpecSecurityContextSysctlsArrayOutputWithContext(context.Context) AlertmanagerSpecSecurityContextSysctlsArrayOutput
}

type AlertmanagerSpecSecurityContextSysctlsArray []AlertmanagerSpecSecurityContextSysctlsInput

func (AlertmanagerSpecSecurityContextSysctlsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecSecurityContextSysctls)(nil)).Elem()
}

func (i AlertmanagerSpecSecurityContextSysctlsArray) ToAlertmanagerSpecSecurityContextSysctlsArrayOutput() AlertmanagerSpecSecurityContextSysctlsArrayOutput {
	return i.ToAlertmanagerSpecSecurityContextSysctlsArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecSecurityContextSysctlsArray) ToAlertmanagerSpecSecurityContextSysctlsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecSecurityContextSysctlsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecSecurityContextSysctlsArrayOutput)
}

// Sysctl defines a kernel parameter to be set
type AlertmanagerSpecSecurityContextSysctlsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecSecurityContextSysctlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecSecurityContextSysctls)(nil)).Elem()
}

func (o AlertmanagerSpecSecurityContextSysctlsOutput) ToAlertmanagerSpecSecurityContextSysctlsOutput() AlertmanagerSpecSecurityContextSysctlsOutput {
	return o
}

func (o AlertmanagerSpecSecurityContextSysctlsOutput) ToAlertmanagerSpecSecurityContextSysctlsOutputWithContext(ctx context.Context) AlertmanagerSpecSecurityContextSysctlsOutput {
	return o
}

// Name of a property to set
func (o AlertmanagerSpecSecurityContextSysctlsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecSecurityContextSysctls) string { return v.Name }).(pulumi.StringOutput)
}

// Value of a property to set
func (o AlertmanagerSpecSecurityContextSysctlsOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecSecurityContextSysctls) string { return v.Value }).(pulumi.StringOutput)
}

type AlertmanagerSpecSecurityContextSysctlsArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecSecurityContextSysctlsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecSecurityContextSysctls)(nil)).Elem()
}

func (o AlertmanagerSpecSecurityContextSysctlsArrayOutput) ToAlertmanagerSpecSecurityContextSysctlsArrayOutput() AlertmanagerSpecSecurityContextSysctlsArrayOutput {
	return o
}

func (o AlertmanagerSpecSecurityContextSysctlsArrayOutput) ToAlertmanagerSpecSecurityContextSysctlsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecSecurityContextSysctlsArrayOutput {
	return o
}

func (o AlertmanagerSpecSecurityContextSysctlsArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecSecurityContextSysctlsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecSecurityContextSysctls {
		return vs[0].([]AlertmanagerSpecSecurityContextSysctls)[vs[1].(int)]
	}).(AlertmanagerSpecSecurityContextSysctlsOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
type AlertmanagerSpecSecurityContextWindowsOptions struct {
	// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
	GmsaCredentialSpec *string `pulumi:"gmsaCredentialSpec"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
	GmsaCredentialSpecName *string `pulumi:"gmsaCredentialSpecName"`
	// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. This field is beta-level and may be disabled with the WindowsRunAsUserName feature flag.
	RunAsUserName *string `pulumi:"runAsUserName"`
}

// AlertmanagerSpecSecurityContextWindowsOptionsInput is an input type that accepts AlertmanagerSpecSecurityContextWindowsOptionsArgs and AlertmanagerSpecSecurityContextWindowsOptionsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecSecurityContextWindowsOptionsInput` via:
//
//          AlertmanagerSpecSecurityContextWindowsOptionsArgs{...}
type AlertmanagerSpecSecurityContextWindowsOptionsInput interface {
	pulumi.Input

	ToAlertmanagerSpecSecurityContextWindowsOptionsOutput() AlertmanagerSpecSecurityContextWindowsOptionsOutput
	ToAlertmanagerSpecSecurityContextWindowsOptionsOutputWithContext(context.Context) AlertmanagerSpecSecurityContextWindowsOptionsOutput
}

// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
type AlertmanagerSpecSecurityContextWindowsOptionsArgs struct {
	// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
	GmsaCredentialSpec pulumi.StringPtrInput `pulumi:"gmsaCredentialSpec"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
	GmsaCredentialSpecName pulumi.StringPtrInput `pulumi:"gmsaCredentialSpecName"`
	// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. This field is beta-level and may be disabled with the WindowsRunAsUserName feature flag.
	RunAsUserName pulumi.StringPtrInput `pulumi:"runAsUserName"`
}

func (AlertmanagerSpecSecurityContextWindowsOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecSecurityContextWindowsOptions)(nil)).Elem()
}

func (i AlertmanagerSpecSecurityContextWindowsOptionsArgs) ToAlertmanagerSpecSecurityContextWindowsOptionsOutput() AlertmanagerSpecSecurityContextWindowsOptionsOutput {
	return i.ToAlertmanagerSpecSecurityContextWindowsOptionsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecSecurityContextWindowsOptionsArgs) ToAlertmanagerSpecSecurityContextWindowsOptionsOutputWithContext(ctx context.Context) AlertmanagerSpecSecurityContextWindowsOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecSecurityContextWindowsOptionsOutput)
}

func (i AlertmanagerSpecSecurityContextWindowsOptionsArgs) ToAlertmanagerSpecSecurityContextWindowsOptionsPtrOutput() AlertmanagerSpecSecurityContextWindowsOptionsPtrOutput {
	return i.ToAlertmanagerSpecSecurityContextWindowsOptionsPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecSecurityContextWindowsOptionsArgs) ToAlertmanagerSpecSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecSecurityContextWindowsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecSecurityContextWindowsOptionsOutput).ToAlertmanagerSpecSecurityContextWindowsOptionsPtrOutputWithContext(ctx)
}

// AlertmanagerSpecSecurityContextWindowsOptionsPtrInput is an input type that accepts AlertmanagerSpecSecurityContextWindowsOptionsArgs, AlertmanagerSpecSecurityContextWindowsOptionsPtr and AlertmanagerSpecSecurityContextWindowsOptionsPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecSecurityContextWindowsOptionsPtrInput` via:
//
//          AlertmanagerSpecSecurityContextWindowsOptionsArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecSecurityContextWindowsOptionsPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecSecurityContextWindowsOptionsPtrOutput() AlertmanagerSpecSecurityContextWindowsOptionsPtrOutput
	ToAlertmanagerSpecSecurityContextWindowsOptionsPtrOutputWithContext(context.Context) AlertmanagerSpecSecurityContextWindowsOptionsPtrOutput
}

type alertmanagerSpecSecurityContextWindowsOptionsPtrType AlertmanagerSpecSecurityContextWindowsOptionsArgs

func AlertmanagerSpecSecurityContextWindowsOptionsPtr(v *AlertmanagerSpecSecurityContextWindowsOptionsArgs) AlertmanagerSpecSecurityContextWindowsOptionsPtrInput {
	return (*alertmanagerSpecSecurityContextWindowsOptionsPtrType)(v)
}

func (*alertmanagerSpecSecurityContextWindowsOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecSecurityContextWindowsOptions)(nil)).Elem()
}

func (i *alertmanagerSpecSecurityContextWindowsOptionsPtrType) ToAlertmanagerSpecSecurityContextWindowsOptionsPtrOutput() AlertmanagerSpecSecurityContextWindowsOptionsPtrOutput {
	return i.ToAlertmanagerSpecSecurityContextWindowsOptionsPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecSecurityContextWindowsOptionsPtrType) ToAlertmanagerSpecSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecSecurityContextWindowsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecSecurityContextWindowsOptionsPtrOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
type AlertmanagerSpecSecurityContextWindowsOptionsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecSecurityContextWindowsOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecSecurityContextWindowsOptions)(nil)).Elem()
}

func (o AlertmanagerSpecSecurityContextWindowsOptionsOutput) ToAlertmanagerSpecSecurityContextWindowsOptionsOutput() AlertmanagerSpecSecurityContextWindowsOptionsOutput {
	return o
}

func (o AlertmanagerSpecSecurityContextWindowsOptionsOutput) ToAlertmanagerSpecSecurityContextWindowsOptionsOutputWithContext(ctx context.Context) AlertmanagerSpecSecurityContextWindowsOptionsOutput {
	return o
}

func (o AlertmanagerSpecSecurityContextWindowsOptionsOutput) ToAlertmanagerSpecSecurityContextWindowsOptionsPtrOutput() AlertmanagerSpecSecurityContextWindowsOptionsPtrOutput {
	return o.ToAlertmanagerSpecSecurityContextWindowsOptionsPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecSecurityContextWindowsOptionsOutput) ToAlertmanagerSpecSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecSecurityContextWindowsOptionsPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecSecurityContextWindowsOptions) *AlertmanagerSpecSecurityContextWindowsOptions {
		return &v
	}).(AlertmanagerSpecSecurityContextWindowsOptionsPtrOutput)
}

// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
func (o AlertmanagerSpecSecurityContextWindowsOptionsOutput) GmsaCredentialSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecSecurityContextWindowsOptions) *string { return v.GmsaCredentialSpec }).(pulumi.StringPtrOutput)
}

// GMSACredentialSpecName is the name of the GMSA credential spec to use. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
func (o AlertmanagerSpecSecurityContextWindowsOptionsOutput) GmsaCredentialSpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecSecurityContextWindowsOptions) *string { return v.GmsaCredentialSpecName }).(pulumi.StringPtrOutput)
}

// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. This field is beta-level and may be disabled with the WindowsRunAsUserName feature flag.
func (o AlertmanagerSpecSecurityContextWindowsOptionsOutput) RunAsUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecSecurityContextWindowsOptions) *string { return v.RunAsUserName }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecSecurityContextWindowsOptionsPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecSecurityContextWindowsOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecSecurityContextWindowsOptions)(nil)).Elem()
}

func (o AlertmanagerSpecSecurityContextWindowsOptionsPtrOutput) ToAlertmanagerSpecSecurityContextWindowsOptionsPtrOutput() AlertmanagerSpecSecurityContextWindowsOptionsPtrOutput {
	return o
}

func (o AlertmanagerSpecSecurityContextWindowsOptionsPtrOutput) ToAlertmanagerSpecSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecSecurityContextWindowsOptionsPtrOutput {
	return o
}

func (o AlertmanagerSpecSecurityContextWindowsOptionsPtrOutput) Elem() AlertmanagerSpecSecurityContextWindowsOptionsOutput {
	return o.ApplyT(func(v *AlertmanagerSpecSecurityContextWindowsOptions) AlertmanagerSpecSecurityContextWindowsOptions {
		return *v
	}).(AlertmanagerSpecSecurityContextWindowsOptionsOutput)
}

// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
func (o AlertmanagerSpecSecurityContextWindowsOptionsPtrOutput) GmsaCredentialSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecSecurityContextWindowsOptions) *string {
		if v == nil {
			return nil
		}
		return v.GmsaCredentialSpec
	}).(pulumi.StringPtrOutput)
}

// GMSACredentialSpecName is the name of the GMSA credential spec to use. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.
func (o AlertmanagerSpecSecurityContextWindowsOptionsPtrOutput) GmsaCredentialSpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecSecurityContextWindowsOptions) *string {
		if v == nil {
			return nil
		}
		return v.GmsaCredentialSpecName
	}).(pulumi.StringPtrOutput)
}

// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. This field is beta-level and may be disabled with the WindowsRunAsUserName feature flag.
func (o AlertmanagerSpecSecurityContextWindowsOptionsPtrOutput) RunAsUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecSecurityContextWindowsOptions) *string {
		if v == nil {
			return nil
		}
		return v.RunAsUserName
	}).(pulumi.StringPtrOutput)
}

// Storage is the definition of how storage will be used by the Alertmanager instances.
type AlertmanagerSpecStorage struct {
	// EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
	EmptyDir *AlertmanagerSpecStorageEmptyDir `pulumi:"emptyDir"`
	// A PVC spec to be used by the Prometheus StatefulSets.
	VolumeClaimTemplate *AlertmanagerSpecStorageVolumeClaimTemplate `pulumi:"volumeClaimTemplate"`
}

// AlertmanagerSpecStorageInput is an input type that accepts AlertmanagerSpecStorageArgs and AlertmanagerSpecStorageOutput values.
// You can construct a concrete instance of `AlertmanagerSpecStorageInput` via:
//
//          AlertmanagerSpecStorageArgs{...}
type AlertmanagerSpecStorageInput interface {
	pulumi.Input

	ToAlertmanagerSpecStorageOutput() AlertmanagerSpecStorageOutput
	ToAlertmanagerSpecStorageOutputWithContext(context.Context) AlertmanagerSpecStorageOutput
}

// Storage is the definition of how storage will be used by the Alertmanager instances.
type AlertmanagerSpecStorageArgs struct {
	// EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
	EmptyDir AlertmanagerSpecStorageEmptyDirPtrInput `pulumi:"emptyDir"`
	// A PVC spec to be used by the Prometheus StatefulSets.
	VolumeClaimTemplate AlertmanagerSpecStorageVolumeClaimTemplatePtrInput `pulumi:"volumeClaimTemplate"`
}

func (AlertmanagerSpecStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorage)(nil)).Elem()
}

func (i AlertmanagerSpecStorageArgs) ToAlertmanagerSpecStorageOutput() AlertmanagerSpecStorageOutput {
	return i.ToAlertmanagerSpecStorageOutputWithContext(context.Background())
}

func (i AlertmanagerSpecStorageArgs) ToAlertmanagerSpecStorageOutputWithContext(ctx context.Context) AlertmanagerSpecStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageOutput)
}

func (i AlertmanagerSpecStorageArgs) ToAlertmanagerSpecStoragePtrOutput() AlertmanagerSpecStoragePtrOutput {
	return i.ToAlertmanagerSpecStoragePtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecStorageArgs) ToAlertmanagerSpecStoragePtrOutputWithContext(ctx context.Context) AlertmanagerSpecStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageOutput).ToAlertmanagerSpecStoragePtrOutputWithContext(ctx)
}

// AlertmanagerSpecStoragePtrInput is an input type that accepts AlertmanagerSpecStorageArgs, AlertmanagerSpecStoragePtr and AlertmanagerSpecStoragePtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecStoragePtrInput` via:
//
//          AlertmanagerSpecStorageArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecStoragePtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecStoragePtrOutput() AlertmanagerSpecStoragePtrOutput
	ToAlertmanagerSpecStoragePtrOutputWithContext(context.Context) AlertmanagerSpecStoragePtrOutput
}

type alertmanagerSpecStoragePtrType AlertmanagerSpecStorageArgs

func AlertmanagerSpecStoragePtr(v *AlertmanagerSpecStorageArgs) AlertmanagerSpecStoragePtrInput {
	return (*alertmanagerSpecStoragePtrType)(v)
}

func (*alertmanagerSpecStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecStorage)(nil)).Elem()
}

func (i *alertmanagerSpecStoragePtrType) ToAlertmanagerSpecStoragePtrOutput() AlertmanagerSpecStoragePtrOutput {
	return i.ToAlertmanagerSpecStoragePtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecStoragePtrType) ToAlertmanagerSpecStoragePtrOutputWithContext(ctx context.Context) AlertmanagerSpecStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStoragePtrOutput)
}

// Storage is the definition of how storage will be used by the Alertmanager instances.
type AlertmanagerSpecStorageOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorage)(nil)).Elem()
}

func (o AlertmanagerSpecStorageOutput) ToAlertmanagerSpecStorageOutput() AlertmanagerSpecStorageOutput {
	return o
}

func (o AlertmanagerSpecStorageOutput) ToAlertmanagerSpecStorageOutputWithContext(ctx context.Context) AlertmanagerSpecStorageOutput {
	return o
}

func (o AlertmanagerSpecStorageOutput) ToAlertmanagerSpecStoragePtrOutput() AlertmanagerSpecStoragePtrOutput {
	return o.ToAlertmanagerSpecStoragePtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecStorageOutput) ToAlertmanagerSpecStoragePtrOutputWithContext(ctx context.Context) AlertmanagerSpecStoragePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorage) *AlertmanagerSpecStorage {
		return &v
	}).(AlertmanagerSpecStoragePtrOutput)
}

// EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
func (o AlertmanagerSpecStorageOutput) EmptyDir() AlertmanagerSpecStorageEmptyDirPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorage) *AlertmanagerSpecStorageEmptyDir { return v.EmptyDir }).(AlertmanagerSpecStorageEmptyDirPtrOutput)
}

// A PVC spec to be used by the Prometheus StatefulSets.
func (o AlertmanagerSpecStorageOutput) VolumeClaimTemplate() AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorage) *AlertmanagerSpecStorageVolumeClaimTemplate {
		return v.VolumeClaimTemplate
	}).(AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput)
}

type AlertmanagerSpecStoragePtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecStorage)(nil)).Elem()
}

func (o AlertmanagerSpecStoragePtrOutput) ToAlertmanagerSpecStoragePtrOutput() AlertmanagerSpecStoragePtrOutput {
	return o
}

func (o AlertmanagerSpecStoragePtrOutput) ToAlertmanagerSpecStoragePtrOutputWithContext(ctx context.Context) AlertmanagerSpecStoragePtrOutput {
	return o
}

func (o AlertmanagerSpecStoragePtrOutput) Elem() AlertmanagerSpecStorageOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorage) AlertmanagerSpecStorage { return *v }).(AlertmanagerSpecStorageOutput)
}

// EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
func (o AlertmanagerSpecStoragePtrOutput) EmptyDir() AlertmanagerSpecStorageEmptyDirPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorage) *AlertmanagerSpecStorageEmptyDir {
		if v == nil {
			return nil
		}
		return v.EmptyDir
	}).(AlertmanagerSpecStorageEmptyDirPtrOutput)
}

// A PVC spec to be used by the Prometheus StatefulSets.
func (o AlertmanagerSpecStoragePtrOutput) VolumeClaimTemplate() AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorage) *AlertmanagerSpecStorageVolumeClaimTemplate {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput)
}

// EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
type AlertmanagerSpecStorageEmptyDir struct {
	// What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	Medium *string `pulumi:"medium"`
	// Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
	SizeLimit *string `pulumi:"sizeLimit"`
}

// AlertmanagerSpecStorageEmptyDirInput is an input type that accepts AlertmanagerSpecStorageEmptyDirArgs and AlertmanagerSpecStorageEmptyDirOutput values.
// You can construct a concrete instance of `AlertmanagerSpecStorageEmptyDirInput` via:
//
//          AlertmanagerSpecStorageEmptyDirArgs{...}
type AlertmanagerSpecStorageEmptyDirInput interface {
	pulumi.Input

	ToAlertmanagerSpecStorageEmptyDirOutput() AlertmanagerSpecStorageEmptyDirOutput
	ToAlertmanagerSpecStorageEmptyDirOutputWithContext(context.Context) AlertmanagerSpecStorageEmptyDirOutput
}

// EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
type AlertmanagerSpecStorageEmptyDirArgs struct {
	// What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	Medium pulumi.StringPtrInput `pulumi:"medium"`
	// Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
	SizeLimit pulumi.StringPtrInput `pulumi:"sizeLimit"`
}

func (AlertmanagerSpecStorageEmptyDirArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageEmptyDir)(nil)).Elem()
}

func (i AlertmanagerSpecStorageEmptyDirArgs) ToAlertmanagerSpecStorageEmptyDirOutput() AlertmanagerSpecStorageEmptyDirOutput {
	return i.ToAlertmanagerSpecStorageEmptyDirOutputWithContext(context.Background())
}

func (i AlertmanagerSpecStorageEmptyDirArgs) ToAlertmanagerSpecStorageEmptyDirOutputWithContext(ctx context.Context) AlertmanagerSpecStorageEmptyDirOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageEmptyDirOutput)
}

func (i AlertmanagerSpecStorageEmptyDirArgs) ToAlertmanagerSpecStorageEmptyDirPtrOutput() AlertmanagerSpecStorageEmptyDirPtrOutput {
	return i.ToAlertmanagerSpecStorageEmptyDirPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecStorageEmptyDirArgs) ToAlertmanagerSpecStorageEmptyDirPtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageEmptyDirPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageEmptyDirOutput).ToAlertmanagerSpecStorageEmptyDirPtrOutputWithContext(ctx)
}

// AlertmanagerSpecStorageEmptyDirPtrInput is an input type that accepts AlertmanagerSpecStorageEmptyDirArgs, AlertmanagerSpecStorageEmptyDirPtr and AlertmanagerSpecStorageEmptyDirPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecStorageEmptyDirPtrInput` via:
//
//          AlertmanagerSpecStorageEmptyDirArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecStorageEmptyDirPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecStorageEmptyDirPtrOutput() AlertmanagerSpecStorageEmptyDirPtrOutput
	ToAlertmanagerSpecStorageEmptyDirPtrOutputWithContext(context.Context) AlertmanagerSpecStorageEmptyDirPtrOutput
}

type alertmanagerSpecStorageEmptyDirPtrType AlertmanagerSpecStorageEmptyDirArgs

func AlertmanagerSpecStorageEmptyDirPtr(v *AlertmanagerSpecStorageEmptyDirArgs) AlertmanagerSpecStorageEmptyDirPtrInput {
	return (*alertmanagerSpecStorageEmptyDirPtrType)(v)
}

func (*alertmanagerSpecStorageEmptyDirPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecStorageEmptyDir)(nil)).Elem()
}

func (i *alertmanagerSpecStorageEmptyDirPtrType) ToAlertmanagerSpecStorageEmptyDirPtrOutput() AlertmanagerSpecStorageEmptyDirPtrOutput {
	return i.ToAlertmanagerSpecStorageEmptyDirPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecStorageEmptyDirPtrType) ToAlertmanagerSpecStorageEmptyDirPtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageEmptyDirPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageEmptyDirPtrOutput)
}

// EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
type AlertmanagerSpecStorageEmptyDirOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecStorageEmptyDirOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageEmptyDir)(nil)).Elem()
}

func (o AlertmanagerSpecStorageEmptyDirOutput) ToAlertmanagerSpecStorageEmptyDirOutput() AlertmanagerSpecStorageEmptyDirOutput {
	return o
}

func (o AlertmanagerSpecStorageEmptyDirOutput) ToAlertmanagerSpecStorageEmptyDirOutputWithContext(ctx context.Context) AlertmanagerSpecStorageEmptyDirOutput {
	return o
}

func (o AlertmanagerSpecStorageEmptyDirOutput) ToAlertmanagerSpecStorageEmptyDirPtrOutput() AlertmanagerSpecStorageEmptyDirPtrOutput {
	return o.ToAlertmanagerSpecStorageEmptyDirPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecStorageEmptyDirOutput) ToAlertmanagerSpecStorageEmptyDirPtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageEmptyDirPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageEmptyDir) *AlertmanagerSpecStorageEmptyDir {
		return &v
	}).(AlertmanagerSpecStorageEmptyDirPtrOutput)
}

// What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o AlertmanagerSpecStorageEmptyDirOutput) Medium() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageEmptyDir) *string { return v.Medium }).(pulumi.StringPtrOutput)
}

// Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
func (o AlertmanagerSpecStorageEmptyDirOutput) SizeLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageEmptyDir) *string { return v.SizeLimit }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecStorageEmptyDirPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecStorageEmptyDirPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecStorageEmptyDir)(nil)).Elem()
}

func (o AlertmanagerSpecStorageEmptyDirPtrOutput) ToAlertmanagerSpecStorageEmptyDirPtrOutput() AlertmanagerSpecStorageEmptyDirPtrOutput {
	return o
}

func (o AlertmanagerSpecStorageEmptyDirPtrOutput) ToAlertmanagerSpecStorageEmptyDirPtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageEmptyDirPtrOutput {
	return o
}

func (o AlertmanagerSpecStorageEmptyDirPtrOutput) Elem() AlertmanagerSpecStorageEmptyDirOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageEmptyDir) AlertmanagerSpecStorageEmptyDir { return *v }).(AlertmanagerSpecStorageEmptyDirOutput)
}

// What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o AlertmanagerSpecStorageEmptyDirPtrOutput) Medium() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageEmptyDir) *string {
		if v == nil {
			return nil
		}
		return v.Medium
	}).(pulumi.StringPtrOutput)
}

// Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
func (o AlertmanagerSpecStorageEmptyDirPtrOutput) SizeLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageEmptyDir) *string {
		if v == nil {
			return nil
		}
		return v.SizeLimit
	}).(pulumi.StringPtrOutput)
}

// A PVC spec to be used by the Prometheus StatefulSets.
type AlertmanagerSpecStorageVolumeClaimTemplate struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata map[string]interface{} `pulumi:"metadata"`
	// Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	Spec *AlertmanagerSpecStorageVolumeClaimTemplateSpec `pulumi:"spec"`
	// Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	Status *AlertmanagerSpecStorageVolumeClaimTemplateStatus `pulumi:"status"`
}

// AlertmanagerSpecStorageVolumeClaimTemplateInput is an input type that accepts AlertmanagerSpecStorageVolumeClaimTemplateArgs and AlertmanagerSpecStorageVolumeClaimTemplateOutput values.
// You can construct a concrete instance of `AlertmanagerSpecStorageVolumeClaimTemplateInput` via:
//
//          AlertmanagerSpecStorageVolumeClaimTemplateArgs{...}
type AlertmanagerSpecStorageVolumeClaimTemplateInput interface {
	pulumi.Input

	ToAlertmanagerSpecStorageVolumeClaimTemplateOutput() AlertmanagerSpecStorageVolumeClaimTemplateOutput
	ToAlertmanagerSpecStorageVolumeClaimTemplateOutputWithContext(context.Context) AlertmanagerSpecStorageVolumeClaimTemplateOutput
}

// A PVC spec to be used by the Prometheus StatefulSets.
type AlertmanagerSpecStorageVolumeClaimTemplateArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	Spec AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrInput `pulumi:"spec"`
	// Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	Status AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrInput `pulumi:"status"`
}

func (AlertmanagerSpecStorageVolumeClaimTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageVolumeClaimTemplate)(nil)).Elem()
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateOutput() AlertmanagerSpecStorageVolumeClaimTemplateOutput {
	return i.ToAlertmanagerSpecStorageVolumeClaimTemplateOutputWithContext(context.Background())
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageVolumeClaimTemplateOutput)
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateArgs) ToAlertmanagerSpecStorageVolumeClaimTemplatePtrOutput() AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput {
	return i.ToAlertmanagerSpecStorageVolumeClaimTemplatePtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateArgs) ToAlertmanagerSpecStorageVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageVolumeClaimTemplateOutput).ToAlertmanagerSpecStorageVolumeClaimTemplatePtrOutputWithContext(ctx)
}

// AlertmanagerSpecStorageVolumeClaimTemplatePtrInput is an input type that accepts AlertmanagerSpecStorageVolumeClaimTemplateArgs, AlertmanagerSpecStorageVolumeClaimTemplatePtr and AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecStorageVolumeClaimTemplatePtrInput` via:
//
//          AlertmanagerSpecStorageVolumeClaimTemplateArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecStorageVolumeClaimTemplatePtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecStorageVolumeClaimTemplatePtrOutput() AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput
	ToAlertmanagerSpecStorageVolumeClaimTemplatePtrOutputWithContext(context.Context) AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput
}

type alertmanagerSpecStorageVolumeClaimTemplatePtrType AlertmanagerSpecStorageVolumeClaimTemplateArgs

func AlertmanagerSpecStorageVolumeClaimTemplatePtr(v *AlertmanagerSpecStorageVolumeClaimTemplateArgs) AlertmanagerSpecStorageVolumeClaimTemplatePtrInput {
	return (*alertmanagerSpecStorageVolumeClaimTemplatePtrType)(v)
}

func (*alertmanagerSpecStorageVolumeClaimTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecStorageVolumeClaimTemplate)(nil)).Elem()
}

func (i *alertmanagerSpecStorageVolumeClaimTemplatePtrType) ToAlertmanagerSpecStorageVolumeClaimTemplatePtrOutput() AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput {
	return i.ToAlertmanagerSpecStorageVolumeClaimTemplatePtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecStorageVolumeClaimTemplatePtrType) ToAlertmanagerSpecStorageVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput)
}

// A PVC spec to be used by the Prometheus StatefulSets.
type AlertmanagerSpecStorageVolumeClaimTemplateOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecStorageVolumeClaimTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageVolumeClaimTemplate)(nil)).Elem()
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateOutput() AlertmanagerSpecStorageVolumeClaimTemplateOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateOutput) ToAlertmanagerSpecStorageVolumeClaimTemplatePtrOutput() AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput {
	return o.ToAlertmanagerSpecStorageVolumeClaimTemplatePtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateOutput) ToAlertmanagerSpecStorageVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplate) *AlertmanagerSpecStorageVolumeClaimTemplate {
		return &v
	}).(AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput)
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o AlertmanagerSpecStorageVolumeClaimTemplateOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplate) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o AlertmanagerSpecStorageVolumeClaimTemplateOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplate) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o AlertmanagerSpecStorageVolumeClaimTemplateOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplate) map[string]interface{} { return v.Metadata }).(pulumi.MapOutput)
}

// Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o AlertmanagerSpecStorageVolumeClaimTemplateOutput) Spec() AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplate) *AlertmanagerSpecStorageVolumeClaimTemplateSpec {
		return v.Spec
	}).(AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput)
}

// Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o AlertmanagerSpecStorageVolumeClaimTemplateOutput) Status() AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplate) *AlertmanagerSpecStorageVolumeClaimTemplateStatus {
		return v.Status
	}).(AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput)
}

type AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecStorageVolumeClaimTemplate)(nil)).Elem()
}

func (o AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput) ToAlertmanagerSpecStorageVolumeClaimTemplatePtrOutput() AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput) ToAlertmanagerSpecStorageVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput) Elem() AlertmanagerSpecStorageVolumeClaimTemplateOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplate) AlertmanagerSpecStorageVolumeClaimTemplate {
		return *v
	}).(AlertmanagerSpecStorageVolumeClaimTemplateOutput)
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplate) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplate) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.MapOutput)
}

// Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput) Spec() AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplate) *AlertmanagerSpecStorageVolumeClaimTemplateSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput)
}

// Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput) Status() AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplate) *AlertmanagerSpecStorageVolumeClaimTemplateStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
type AlertmanagerSpecStorageVolumeClaimTemplateMetadata struct {
}

// AlertmanagerSpecStorageVolumeClaimTemplateMetadataInput is an input type that accepts AlertmanagerSpecStorageVolumeClaimTemplateMetadataArgs and AlertmanagerSpecStorageVolumeClaimTemplateMetadataOutput values.
// You can construct a concrete instance of `AlertmanagerSpecStorageVolumeClaimTemplateMetadataInput` via:
//
//          AlertmanagerSpecStorageVolumeClaimTemplateMetadataArgs{...}
type AlertmanagerSpecStorageVolumeClaimTemplateMetadataInput interface {
	pulumi.Input

	ToAlertmanagerSpecStorageVolumeClaimTemplateMetadataOutput() AlertmanagerSpecStorageVolumeClaimTemplateMetadataOutput
	ToAlertmanagerSpecStorageVolumeClaimTemplateMetadataOutputWithContext(context.Context) AlertmanagerSpecStorageVolumeClaimTemplateMetadataOutput
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
type AlertmanagerSpecStorageVolumeClaimTemplateMetadataArgs struct {
}

func (AlertmanagerSpecStorageVolumeClaimTemplateMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageVolumeClaimTemplateMetadata)(nil)).Elem()
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateMetadataArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateMetadataOutput() AlertmanagerSpecStorageVolumeClaimTemplateMetadataOutput {
	return i.ToAlertmanagerSpecStorageVolumeClaimTemplateMetadataOutputWithContext(context.Background())
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateMetadataArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateMetadataOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageVolumeClaimTemplateMetadataOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
type AlertmanagerSpecStorageVolumeClaimTemplateMetadataOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecStorageVolumeClaimTemplateMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageVolumeClaimTemplateMetadata)(nil)).Elem()
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateMetadataOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateMetadataOutput() AlertmanagerSpecStorageVolumeClaimTemplateMetadataOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateMetadataOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateMetadataOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateMetadataOutput {
	return o
}

// Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type AlertmanagerSpecStorageVolumeClaimTemplateSpec struct {
	// AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes []string `pulumi:"accessModes"`
	// This field requires the VolumeSnapshotDataSource alpha feature gate to be enabled and currently VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot data source, it will create a new volume and data will be restored to the volume at the same time. If the provisioner does not support VolumeSnapshot data source, volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
	DataSource *AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSource `pulumi:"dataSource"`
	// Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources *AlertmanagerSpecStorageVolumeClaimTemplateSpecResources `pulumi:"resources"`
	// A label query over volumes to consider for binding.
	Selector *AlertmanagerSpecStorageVolumeClaimTemplateSpecSelector `pulumi:"selector"`
	// Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName *string `pulumi:"storageClassName"`
	// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature.
	VolumeMode *string `pulumi:"volumeMode"`
	// VolumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName *string `pulumi:"volumeName"`
}

// AlertmanagerSpecStorageVolumeClaimTemplateSpecInput is an input type that accepts AlertmanagerSpecStorageVolumeClaimTemplateSpecArgs and AlertmanagerSpecStorageVolumeClaimTemplateSpecOutput values.
// You can construct a concrete instance of `AlertmanagerSpecStorageVolumeClaimTemplateSpecInput` via:
//
//          AlertmanagerSpecStorageVolumeClaimTemplateSpecArgs{...}
type AlertmanagerSpecStorageVolumeClaimTemplateSpecInput interface {
	pulumi.Input

	ToAlertmanagerSpecStorageVolumeClaimTemplateSpecOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecOutput
	ToAlertmanagerSpecStorageVolumeClaimTemplateSpecOutputWithContext(context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecOutput
}

// Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type AlertmanagerSpecStorageVolumeClaimTemplateSpecArgs struct {
	// AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes pulumi.StringArrayInput `pulumi:"accessModes"`
	// This field requires the VolumeSnapshotDataSource alpha feature gate to be enabled and currently VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot data source, it will create a new volume and data will be restored to the volume at the same time. If the provisioner does not support VolumeSnapshot data source, volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
	DataSource AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrInput `pulumi:"dataSource"`
	// Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrInput `pulumi:"resources"`
	// A label query over volumes to consider for binding.
	Selector AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrInput `pulumi:"selector"`
	// Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName pulumi.StringPtrInput `pulumi:"storageClassName"`
	// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature.
	VolumeMode pulumi.StringPtrInput `pulumi:"volumeMode"`
	// VolumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (AlertmanagerSpecStorageVolumeClaimTemplateSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageVolumeClaimTemplateSpec)(nil)).Elem()
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateSpecArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecOutput {
	return i.ToAlertmanagerSpecStorageVolumeClaimTemplateSpecOutputWithContext(context.Background())
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateSpecArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageVolumeClaimTemplateSpecOutput)
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateSpecArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return i.ToAlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateSpecArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageVolumeClaimTemplateSpecOutput).ToAlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutputWithContext(ctx)
}

// AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrInput is an input type that accepts AlertmanagerSpecStorageVolumeClaimTemplateSpecArgs, AlertmanagerSpecStorageVolumeClaimTemplateSpecPtr and AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrInput` via:
//
//          AlertmanagerSpecStorageVolumeClaimTemplateSpecArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput
	ToAlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutputWithContext(context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput
}

type alertmanagerSpecStorageVolumeClaimTemplateSpecPtrType AlertmanagerSpecStorageVolumeClaimTemplateSpecArgs

func AlertmanagerSpecStorageVolumeClaimTemplateSpecPtr(v *AlertmanagerSpecStorageVolumeClaimTemplateSpecArgs) AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrInput {
	return (*alertmanagerSpecStorageVolumeClaimTemplateSpecPtrType)(v)
}

func (*alertmanagerSpecStorageVolumeClaimTemplateSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecStorageVolumeClaimTemplateSpec)(nil)).Elem()
}

func (i *alertmanagerSpecStorageVolumeClaimTemplateSpecPtrType) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return i.ToAlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecStorageVolumeClaimTemplateSpecPtrType) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput)
}

// Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type AlertmanagerSpecStorageVolumeClaimTemplateSpecOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecStorageVolumeClaimTemplateSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageVolumeClaimTemplateSpec)(nil)).Elem()
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return o.ToAlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateSpec) *AlertmanagerSpecStorageVolumeClaimTemplateSpec {
		return &v
	}).(AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput)
}

// AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateSpec) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

// This field requires the VolumeSnapshotDataSource alpha feature gate to be enabled and currently VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot data source, it will create a new volume and data will be restored to the volume at the same time. If the provisioner does not support VolumeSnapshot data source, volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecOutput) DataSource() AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateSpec) *AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSource {
		return v.DataSource
	}).(AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput)
}

// Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecOutput) Resources() AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateSpec) *AlertmanagerSpecStorageVolumeClaimTemplateSpecResources {
		return v.Resources
	}).(AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput)
}

// A label query over volumes to consider for binding.
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecOutput) Selector() AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateSpec) *AlertmanagerSpecStorageVolumeClaimTemplateSpecSelector {
		return v.Selector
	}).(AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput)
}

// Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateSpec) *string { return v.StorageClassName }).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature.
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateSpec) *string { return v.VolumeMode }).(pulumi.StringPtrOutput)
}

// VolumeName is the binding reference to the PersistentVolume backing this claim.
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateSpec) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecStorageVolumeClaimTemplateSpec)(nil)).Elem()
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput) Elem() AlertmanagerSpecStorageVolumeClaimTemplateSpecOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplateSpec) AlertmanagerSpecStorageVolumeClaimTemplateSpec {
		return *v
	}).(AlertmanagerSpecStorageVolumeClaimTemplateSpecOutput)
}

// AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplateSpec) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

// This field requires the VolumeSnapshotDataSource alpha feature gate to be enabled and currently VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot data source, it will create a new volume and data will be restored to the volume at the same time. If the provisioner does not support VolumeSnapshot data source, volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput) DataSource() AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplateSpec) *AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSource {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput)
}

// Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput) Resources() AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplateSpec) *AlertmanagerSpecStorageVolumeClaimTemplateSpecResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput)
}

// A label query over volumes to consider for binding.
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput) Selector() AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplateSpec) *AlertmanagerSpecStorageVolumeClaimTemplateSpecSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput)
}

// Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.StorageClassName
	}).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature.
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeMode
	}).(pulumi.StringPtrOutput)
}

// VolumeName is the binding reference to the PersistentVolume backing this claim.
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// This field requires the VolumeSnapshotDataSource alpha feature gate to be enabled and currently VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot data source, it will create a new volume and data will be restored to the volume at the same time. If the provisioner does not support VolumeSnapshot data source, volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
type AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSource struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name string `pulumi:"name"`
}

// AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceInput is an input type that accepts AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceArgs and AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutput values.
// You can construct a concrete instance of `AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceInput` via:
//
//          AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceArgs{...}
type AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceInput interface {
	pulumi.Input

	ToAlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutput
	ToAlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutputWithContext(context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutput
}

// This field requires the VolumeSnapshotDataSource alpha feature gate to be enabled and currently VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot data source, it will create a new volume and data will be restored to the volume at the same time. If the provisioner does not support VolumeSnapshot data source, volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
type AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceArgs struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringInput `pulumi:"name"`
}

func (AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSource)(nil)).Elem()
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutput {
	return i.ToAlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutputWithContext(context.Background())
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutput)
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return i.ToAlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutput).ToAlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx)
}

// AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrInput is an input type that accepts AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceArgs, AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtr and AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrInput` via:
//
//          AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput
	ToAlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput
}

type alertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrType AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceArgs

func AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtr(v *AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceArgs) AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrInput {
	return (*alertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrType)(v)
}

func (*alertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSource)(nil)).Elem()
}

func (i *alertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrType) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return i.ToAlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrType) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput)
}

// This field requires the VolumeSnapshotDataSource alpha feature gate to be enabled and currently VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot data source, it will create a new volume and data will be restored to the volume at the same time. If the provisioner does not support VolumeSnapshot data source, volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
type AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSource)(nil)).Elem()
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o.ToAlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSource) *AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSource {
		return &v
	}).(AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSource) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSource) string { return v.Kind }).(pulumi.StringOutput)
}

// Name is the name of resource being referenced
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSource) string { return v.Name }).(pulumi.StringOutput)
}

type AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSource)(nil)).Elem()
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput) Elem() AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSource) AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSource {
		return *v
	}).(AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSource) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type AlertmanagerSpecStorageVolumeClaimTemplateSpecResources struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits map[string]string `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests map[string]string `pulumi:"requests"`
}

// AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesInput is an input type that accepts AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesArgs and AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesOutput values.
// You can construct a concrete instance of `AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesInput` via:
//
//          AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesArgs{...}
type AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesInput interface {
	pulumi.Input

	ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesOutput
	ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesOutputWithContext(context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesOutput
}

// Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits pulumi.StringMapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests pulumi.StringMapInput `pulumi:"requests"`
}

func (AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageVolumeClaimTemplateSpecResources)(nil)).Elem()
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesOutput {
	return i.ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesOutputWithContext(context.Background())
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesOutput)
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return i.ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesOutput).ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx)
}

// AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrInput is an input type that accepts AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesArgs, AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtr and AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrInput` via:
//
//          AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput
	ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutputWithContext(context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput
}

type alertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrType AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesArgs

func AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtr(v *AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesArgs) AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrInput {
	return (*alertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrType)(v)
}

func (*alertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecStorageVolumeClaimTemplateSpecResources)(nil)).Elem()
}

func (i *alertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrType) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return i.ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrType) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput)
}

// Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageVolumeClaimTemplateSpecResources)(nil)).Elem()
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return o.ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateSpecResources) *AlertmanagerSpecStorageVolumeClaimTemplateSpecResources {
		return &v
	}).(AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateSpecResources) map[string]string { return v.Limits }).(pulumi.StringMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateSpecResources) map[string]string { return v.Requests }).(pulumi.StringMapOutput)
}

type AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecStorageVolumeClaimTemplateSpecResources)(nil)).Elem()
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput) Elem() AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplateSpecResources) AlertmanagerSpecStorageVolumeClaimTemplateSpecResources {
		return *v
	}).(AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplateSpecResources) map[string]string {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.StringMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplateSpecResources) map[string]string {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.StringMapOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimits struct {
}

// AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsInput is an input type that accepts AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsArgs and AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsInput` via:
//
//          AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsArgs{...}
type AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsInput interface {
	pulumi.Input

	ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsOutput
	ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsOutputWithContext(context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsOutput
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsArgs struct {
}

func (AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimits)(nil)).Elem()
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsOutput {
	return i.ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimits)(nil)).Elem()
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsOutput {
	return o
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequests struct {
}

// AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsInput is an input type that accepts AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsArgs and AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsInput` via:
//
//          AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsArgs{...}
type AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsInput interface {
	pulumi.Input

	ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsOutput
	ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsOutputWithContext(context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsOutput
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsArgs struct {
}

func (AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequests)(nil)).Elem()
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsOutput {
	return i.ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
type AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequests)(nil)).Elem()
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsOutput {
	return o
}

// A label query over volumes to consider for binding.
type AlertmanagerSpecStorageVolumeClaimTemplateSpecSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorInput is an input type that accepts AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorArgs and AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorOutput values.
// You can construct a concrete instance of `AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorInput` via:
//
//          AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorArgs{...}
type AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorInput interface {
	pulumi.Input

	ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorOutput
	ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorOutputWithContext(context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorOutput
}

// A label query over volumes to consider for binding.
type AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageVolumeClaimTemplateSpecSelector)(nil)).Elem()
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorOutput {
	return i.ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorOutputWithContext(context.Background())
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorOutput)
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return i.ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorOutput).ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx)
}

// AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrInput is an input type that accepts AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorArgs, AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtr and AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrInput` via:
//
//          AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput
	ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutputWithContext(context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput
}

type alertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrType AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorArgs

func AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtr(v *AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorArgs) AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrInput {
	return (*alertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrType)(v)
}

func (*alertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecStorageVolumeClaimTemplateSpecSelector)(nil)).Elem()
}

func (i *alertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrType) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return i.ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrType) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput)
}

// A label query over volumes to consider for binding.
type AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageVolumeClaimTemplateSpecSelector)(nil)).Elem()
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return o.ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateSpecSelector) *AlertmanagerSpecStorageVolumeClaimTemplateSpecSelector {
		return &v
	}).(AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorOutput) MatchExpressions() AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateSpecSelector) []AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions {
		return v.MatchExpressions
	}).(AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateSpecSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecStorageVolumeClaimTemplateSpecSelector)(nil)).Elem()
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput) Elem() AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplateSpecSelector) AlertmanagerSpecStorageVolumeClaimTemplateSpecSelector {
		return *v
	}).(AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput) MatchExpressions() AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplateSpecSelector) []AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplateSpecSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsInput is an input type that accepts AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArgs and AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsInput` via:
//
//          AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArgs{...}
type AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput
	ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutputWithContext(context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return i.ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput)
}

// AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput is an input type that accepts AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArray and AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput` via:
//
//          AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArray{ AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArgs{...} }
type AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput
	ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutputWithContext(context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput
}

type AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArray []AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsInput

func (AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArray) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return i.ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArray) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions {
		return vs[0].([]AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions)[vs[1].(int)]
	}).(AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabels struct {
}

// AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsInput is an input type that accepts AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsArgs and AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsInput` via:
//
//          AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsArgs{...}
type AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsInput interface {
	pulumi.Input

	ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsOutput
	ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsOutputWithContext(context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsOutput
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsArgs struct {
}

func (AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabels)(nil)).Elem()
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsOutput {
	return i.ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabels)(nil)).Elem()
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsOutput() AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsOutput {
	return o
}

// Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type AlertmanagerSpecStorageVolumeClaimTemplateStatus struct {
	// AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes []string `pulumi:"accessModes"`
	// Represents the actual resources of the underlying volume.
	Capacity map[string]string `pulumi:"capacity"`
	// Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
	Conditions []AlertmanagerSpecStorageVolumeClaimTemplateStatusConditions `pulumi:"conditions"`
	// Phase represents the current phase of PersistentVolumeClaim.
	Phase *string `pulumi:"phase"`
}

// AlertmanagerSpecStorageVolumeClaimTemplateStatusInput is an input type that accepts AlertmanagerSpecStorageVolumeClaimTemplateStatusArgs and AlertmanagerSpecStorageVolumeClaimTemplateStatusOutput values.
// You can construct a concrete instance of `AlertmanagerSpecStorageVolumeClaimTemplateStatusInput` via:
//
//          AlertmanagerSpecStorageVolumeClaimTemplateStatusArgs{...}
type AlertmanagerSpecStorageVolumeClaimTemplateStatusInput interface {
	pulumi.Input

	ToAlertmanagerSpecStorageVolumeClaimTemplateStatusOutput() AlertmanagerSpecStorageVolumeClaimTemplateStatusOutput
	ToAlertmanagerSpecStorageVolumeClaimTemplateStatusOutputWithContext(context.Context) AlertmanagerSpecStorageVolumeClaimTemplateStatusOutput
}

// Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type AlertmanagerSpecStorageVolumeClaimTemplateStatusArgs struct {
	// AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes pulumi.StringArrayInput `pulumi:"accessModes"`
	// Represents the actual resources of the underlying volume.
	Capacity pulumi.StringMapInput `pulumi:"capacity"`
	// Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
	Conditions AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayInput `pulumi:"conditions"`
	// Phase represents the current phase of PersistentVolumeClaim.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
}

func (AlertmanagerSpecStorageVolumeClaimTemplateStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageVolumeClaimTemplateStatus)(nil)).Elem()
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateStatusArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateStatusOutput() AlertmanagerSpecStorageVolumeClaimTemplateStatusOutput {
	return i.ToAlertmanagerSpecStorageVolumeClaimTemplateStatusOutputWithContext(context.Background())
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateStatusArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateStatusOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageVolumeClaimTemplateStatusOutput)
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateStatusArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput() AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return i.ToAlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateStatusArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageVolumeClaimTemplateStatusOutput).ToAlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutputWithContext(ctx)
}

// AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrInput is an input type that accepts AlertmanagerSpecStorageVolumeClaimTemplateStatusArgs, AlertmanagerSpecStorageVolumeClaimTemplateStatusPtr and AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrInput` via:
//
//          AlertmanagerSpecStorageVolumeClaimTemplateStatusArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput() AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput
	ToAlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutputWithContext(context.Context) AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput
}

type alertmanagerSpecStorageVolumeClaimTemplateStatusPtrType AlertmanagerSpecStorageVolumeClaimTemplateStatusArgs

func AlertmanagerSpecStorageVolumeClaimTemplateStatusPtr(v *AlertmanagerSpecStorageVolumeClaimTemplateStatusArgs) AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrInput {
	return (*alertmanagerSpecStorageVolumeClaimTemplateStatusPtrType)(v)
}

func (*alertmanagerSpecStorageVolumeClaimTemplateStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecStorageVolumeClaimTemplateStatus)(nil)).Elem()
}

func (i *alertmanagerSpecStorageVolumeClaimTemplateStatusPtrType) ToAlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput() AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return i.ToAlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecStorageVolumeClaimTemplateStatusPtrType) ToAlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput)
}

// Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type AlertmanagerSpecStorageVolumeClaimTemplateStatusOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecStorageVolumeClaimTemplateStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageVolumeClaimTemplateStatus)(nil)).Elem()
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateStatusOutput() AlertmanagerSpecStorageVolumeClaimTemplateStatusOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateStatusOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateStatusOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput() AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return o.ToAlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateStatus) *AlertmanagerSpecStorageVolumeClaimTemplateStatus {
		return &v
	}).(AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput)
}

// AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateStatus) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

// Represents the actual resources of the underlying volume.
func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusOutput) Capacity() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateStatus) map[string]string { return v.Capacity }).(pulumi.StringMapOutput)
}

// Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusOutput) Conditions() AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateStatus) []AlertmanagerSpecStorageVolumeClaimTemplateStatusConditions {
		return v.Conditions
	}).(AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput)
}

// Phase represents the current phase of PersistentVolumeClaim.
func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecStorageVolumeClaimTemplateStatus)(nil)).Elem()
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput() AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput) Elem() AlertmanagerSpecStorageVolumeClaimTemplateStatusOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplateStatus) AlertmanagerSpecStorageVolumeClaimTemplateStatus {
		return *v
	}).(AlertmanagerSpecStorageVolumeClaimTemplateStatusOutput)
}

// AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplateStatus) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

// Represents the actual resources of the underlying volume.
func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput) Capacity() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplateStatus) map[string]string {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.StringMapOutput)
}

// Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput) Conditions() AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplateStatus) []AlertmanagerSpecStorageVolumeClaimTemplateStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput)
}

// Phase represents the current phase of PersistentVolumeClaim.
func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecStorageVolumeClaimTemplateStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// Represents the actual resources of the underlying volume.
type AlertmanagerSpecStorageVolumeClaimTemplateStatusCapacity struct {
}

// AlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityInput is an input type that accepts AlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityArgs and AlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityOutput values.
// You can construct a concrete instance of `AlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityInput` via:
//
//          AlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityArgs{...}
type AlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityInput interface {
	pulumi.Input

	ToAlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityOutput() AlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityOutput
	ToAlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityOutputWithContext(context.Context) AlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityOutput
}

// Represents the actual resources of the underlying volume.
type AlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityArgs struct {
}

func (AlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageVolumeClaimTemplateStatusCapacity)(nil)).Elem()
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityOutput() AlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityOutput {
	return i.ToAlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityOutputWithContext(context.Background())
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityOutput)
}

// Represents the actual resources of the underlying volume.
type AlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageVolumeClaimTemplateStatusCapacity)(nil)).Elem()
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityOutput() AlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityOutput {
	return o
}

// PersistentVolumeClaimCondition contails details about state of pvc
type AlertmanagerSpecStorageVolumeClaimTemplateStatusConditions struct {
	// Last time we probed the condition.
	LastProbeTime *string `pulumi:"lastProbeTime"`
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details about last transition.
	Message *string `pulumi:"message"`
	// Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
	Reason *string `pulumi:"reason"`
	Status string  `pulumi:"status"`
	// PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type
	Type string `pulumi:"type"`
}

// AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsInput is an input type that accepts AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArgs and AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsInput` via:
//
//          AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArgs{...}
type AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsInput interface {
	pulumi.Input

	ToAlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutput() AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutput
	ToAlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutputWithContext(context.Context) AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutput
}

// PersistentVolumeClaimCondition contails details about state of pvc
type AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArgs struct {
	// Last time we probed the condition.
	LastProbeTime pulumi.StringPtrInput `pulumi:"lastProbeTime"`
	// Last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details about last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	Status pulumi.StringInput    `pulumi:"status"`
	// PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type
	Type pulumi.StringInput `pulumi:"type"`
}

func (AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageVolumeClaimTemplateStatusConditions)(nil)).Elem()
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutput() AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutput {
	return i.ToAlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArgs) ToAlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutput)
}

// AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayInput is an input type that accepts AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArray and AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayInput` via:
//
//          AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArray{ AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArgs{...} }
type AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput() AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput
	ToAlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutputWithContext(context.Context) AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput
}

type AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArray []AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsInput

func (AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecStorageVolumeClaimTemplateStatusConditions)(nil)).Elem()
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArray) ToAlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput() AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput {
	return i.ToAlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArray) ToAlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput)
}

// PersistentVolumeClaimCondition contails details about state of pvc
type AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecStorageVolumeClaimTemplateStatusConditions)(nil)).Elem()
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutput() AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutput {
	return o
}

// Last time we probed the condition.
func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutput) LastProbeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateStatusConditions) *string { return v.LastProbeTime }).(pulumi.StringPtrOutput)
}

// Last time the condition transitioned from one status to another.
func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateStatusConditions) *string {
		return v.LastTransitionTime
	}).(pulumi.StringPtrOutput)
}

// Human-readable message indicating details about last transition.
func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type
func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecStorageVolumeClaimTemplateStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecStorageVolumeClaimTemplateStatusConditions)(nil)).Elem()
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput() AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput) ToAlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput {
	return o
}

func (o AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecStorageVolumeClaimTemplateStatusConditions {
		return vs[0].([]AlertmanagerSpecStorageVolumeClaimTemplateStatusConditions)[vs[1].(int)]
	}).(AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type AlertmanagerSpecTolerations struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// AlertmanagerSpecTolerationsInput is an input type that accepts AlertmanagerSpecTolerationsArgs and AlertmanagerSpecTolerationsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecTolerationsInput` via:
//
//          AlertmanagerSpecTolerationsArgs{...}
type AlertmanagerSpecTolerationsInput interface {
	pulumi.Input

	ToAlertmanagerSpecTolerationsOutput() AlertmanagerSpecTolerationsOutput
	ToAlertmanagerSpecTolerationsOutputWithContext(context.Context) AlertmanagerSpecTolerationsOutput
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type AlertmanagerSpecTolerationsArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (AlertmanagerSpecTolerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecTolerations)(nil)).Elem()
}

func (i AlertmanagerSpecTolerationsArgs) ToAlertmanagerSpecTolerationsOutput() AlertmanagerSpecTolerationsOutput {
	return i.ToAlertmanagerSpecTolerationsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecTolerationsArgs) ToAlertmanagerSpecTolerationsOutputWithContext(ctx context.Context) AlertmanagerSpecTolerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecTolerationsOutput)
}

// AlertmanagerSpecTolerationsArrayInput is an input type that accepts AlertmanagerSpecTolerationsArray and AlertmanagerSpecTolerationsArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecTolerationsArrayInput` via:
//
//          AlertmanagerSpecTolerationsArray{ AlertmanagerSpecTolerationsArgs{...} }
type AlertmanagerSpecTolerationsArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecTolerationsArrayOutput() AlertmanagerSpecTolerationsArrayOutput
	ToAlertmanagerSpecTolerationsArrayOutputWithContext(context.Context) AlertmanagerSpecTolerationsArrayOutput
}

type AlertmanagerSpecTolerationsArray []AlertmanagerSpecTolerationsInput

func (AlertmanagerSpecTolerationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecTolerations)(nil)).Elem()
}

func (i AlertmanagerSpecTolerationsArray) ToAlertmanagerSpecTolerationsArrayOutput() AlertmanagerSpecTolerationsArrayOutput {
	return i.ToAlertmanagerSpecTolerationsArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecTolerationsArray) ToAlertmanagerSpecTolerationsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecTolerationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecTolerationsArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type AlertmanagerSpecTolerationsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecTolerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecTolerations)(nil)).Elem()
}

func (o AlertmanagerSpecTolerationsOutput) ToAlertmanagerSpecTolerationsOutput() AlertmanagerSpecTolerationsOutput {
	return o
}

func (o AlertmanagerSpecTolerationsOutput) ToAlertmanagerSpecTolerationsOutputWithContext(ctx context.Context) AlertmanagerSpecTolerationsOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o AlertmanagerSpecTolerationsOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecTolerations) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o AlertmanagerSpecTolerationsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecTolerations) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
func (o AlertmanagerSpecTolerationsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecTolerations) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
func (o AlertmanagerSpecTolerationsOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecTolerations) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o AlertmanagerSpecTolerationsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecTolerations) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecTolerationsArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecTolerationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecTolerations)(nil)).Elem()
}

func (o AlertmanagerSpecTolerationsArrayOutput) ToAlertmanagerSpecTolerationsArrayOutput() AlertmanagerSpecTolerationsArrayOutput {
	return o
}

func (o AlertmanagerSpecTolerationsArrayOutput) ToAlertmanagerSpecTolerationsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecTolerationsArrayOutput {
	return o
}

func (o AlertmanagerSpecTolerationsArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecTolerationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecTolerations {
		return vs[0].([]AlertmanagerSpecTolerations)[vs[1].(int)]
	}).(AlertmanagerSpecTolerationsOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type AlertmanagerSpecVolumeMounts struct {
	// Path within the container at which the volume should be mounted.  Must not contain ':'.
	MountPath string `pulumi:"mountPath"`
	// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
	MountPropagation *string `pulumi:"mountPropagation"`
	// This must match the Name of a Volume.
	Name string `pulumi:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
	ReadOnly *bool `pulumi:"readOnly"`
	// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath *string `pulumi:"subPath"`
	// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr *string `pulumi:"subPathExpr"`
}

// AlertmanagerSpecVolumeMountsInput is an input type that accepts AlertmanagerSpecVolumeMountsArgs and AlertmanagerSpecVolumeMountsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumeMountsInput` via:
//
//          AlertmanagerSpecVolumeMountsArgs{...}
type AlertmanagerSpecVolumeMountsInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumeMountsOutput() AlertmanagerSpecVolumeMountsOutput
	ToAlertmanagerSpecVolumeMountsOutputWithContext(context.Context) AlertmanagerSpecVolumeMountsOutput
}

// VolumeMount describes a mounting of a Volume within a container.
type AlertmanagerSpecVolumeMountsArgs struct {
	// Path within the container at which the volume should be mounted.  Must not contain ':'.
	MountPath pulumi.StringInput `pulumi:"mountPath"`
	// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
	MountPropagation pulumi.StringPtrInput `pulumi:"mountPropagation"`
	// This must match the Name of a Volume.
	Name pulumi.StringInput `pulumi:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath pulumi.StringPtrInput `pulumi:"subPath"`
	// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr pulumi.StringPtrInput `pulumi:"subPathExpr"`
}

func (AlertmanagerSpecVolumeMountsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumeMounts)(nil)).Elem()
}

func (i AlertmanagerSpecVolumeMountsArgs) ToAlertmanagerSpecVolumeMountsOutput() AlertmanagerSpecVolumeMountsOutput {
	return i.ToAlertmanagerSpecVolumeMountsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumeMountsArgs) ToAlertmanagerSpecVolumeMountsOutputWithContext(ctx context.Context) AlertmanagerSpecVolumeMountsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumeMountsOutput)
}

// AlertmanagerSpecVolumeMountsArrayInput is an input type that accepts AlertmanagerSpecVolumeMountsArray and AlertmanagerSpecVolumeMountsArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumeMountsArrayInput` via:
//
//          AlertmanagerSpecVolumeMountsArray{ AlertmanagerSpecVolumeMountsArgs{...} }
type AlertmanagerSpecVolumeMountsArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumeMountsArrayOutput() AlertmanagerSpecVolumeMountsArrayOutput
	ToAlertmanagerSpecVolumeMountsArrayOutputWithContext(context.Context) AlertmanagerSpecVolumeMountsArrayOutput
}

type AlertmanagerSpecVolumeMountsArray []AlertmanagerSpecVolumeMountsInput

func (AlertmanagerSpecVolumeMountsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecVolumeMounts)(nil)).Elem()
}

func (i AlertmanagerSpecVolumeMountsArray) ToAlertmanagerSpecVolumeMountsArrayOutput() AlertmanagerSpecVolumeMountsArrayOutput {
	return i.ToAlertmanagerSpecVolumeMountsArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumeMountsArray) ToAlertmanagerSpecVolumeMountsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecVolumeMountsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumeMountsArrayOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type AlertmanagerSpecVolumeMountsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumeMountsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumeMounts)(nil)).Elem()
}

func (o AlertmanagerSpecVolumeMountsOutput) ToAlertmanagerSpecVolumeMountsOutput() AlertmanagerSpecVolumeMountsOutput {
	return o
}

func (o AlertmanagerSpecVolumeMountsOutput) ToAlertmanagerSpecVolumeMountsOutputWithContext(ctx context.Context) AlertmanagerSpecVolumeMountsOutput {
	return o
}

// Path within the container at which the volume should be mounted.  Must not contain ':'.
func (o AlertmanagerSpecVolumeMountsOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumeMounts) string { return v.MountPath }).(pulumi.StringOutput)
}

// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
func (o AlertmanagerSpecVolumeMountsOutput) MountPropagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumeMounts) *string { return v.MountPropagation }).(pulumi.StringPtrOutput)
}

// This must match the Name of a Volume.
func (o AlertmanagerSpecVolumeMountsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumeMounts) string { return v.Name }).(pulumi.StringOutput)
}

// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
func (o AlertmanagerSpecVolumeMountsOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumeMounts) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
func (o AlertmanagerSpecVolumeMountsOutput) SubPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumeMounts) *string { return v.SubPath }).(pulumi.StringPtrOutput)
}

// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
func (o AlertmanagerSpecVolumeMountsOutput) SubPathExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumeMounts) *string { return v.SubPathExpr }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecVolumeMountsArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumeMountsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecVolumeMounts)(nil)).Elem()
}

func (o AlertmanagerSpecVolumeMountsArrayOutput) ToAlertmanagerSpecVolumeMountsArrayOutput() AlertmanagerSpecVolumeMountsArrayOutput {
	return o
}

func (o AlertmanagerSpecVolumeMountsArrayOutput) ToAlertmanagerSpecVolumeMountsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecVolumeMountsArrayOutput {
	return o
}

func (o AlertmanagerSpecVolumeMountsArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecVolumeMountsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecVolumeMounts {
		return vs[0].([]AlertmanagerSpecVolumeMounts)[vs[1].(int)]
	}).(AlertmanagerSpecVolumeMountsOutput)
}

// Volume represents a named volume in a pod that may be accessed by any container in the pod.
type AlertmanagerSpecVolumes struct {
	// AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	AwsElasticBlockStore *AlertmanagerSpecVolumesAwsElasticBlockStore `pulumi:"awsElasticBlockStore"`
	// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
	AzureDisk *AlertmanagerSpecVolumesAzureDisk `pulumi:"azureDisk"`
	// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
	AzureFile *AlertmanagerSpecVolumesAzureFile `pulumi:"azureFile"`
	// CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
	Cephfs *AlertmanagerSpecVolumesCephfs `pulumi:"cephfs"`
	// Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	Cinder *AlertmanagerSpecVolumesCinder `pulumi:"cinder"`
	// ConfigMap represents a configMap that should populate this volume
	ConfigMap *AlertmanagerSpecVolumesConfigMap `pulumi:"configMap"`
	// CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).
	Csi *AlertmanagerSpecVolumesCsi `pulumi:"csi"`
	// DownwardAPI represents downward API about the pod that should populate this volume
	DownwardAPI *AlertmanagerSpecVolumesDownwardAPI `pulumi:"downwardAPI"`
	// EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	EmptyDir *AlertmanagerSpecVolumesEmptyDir `pulumi:"emptyDir"`
	// FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
	Fc *AlertmanagerSpecVolumesFc `pulumi:"fc"`
	// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
	FlexVolume *AlertmanagerSpecVolumesFlexVolume `pulumi:"flexVolume"`
	// Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
	Flocker *AlertmanagerSpecVolumesFlocker `pulumi:"flocker"`
	// GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	GcePersistentDisk *AlertmanagerSpecVolumesGcePersistentDisk `pulumi:"gcePersistentDisk"`
	// GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
	GitRepo *AlertmanagerSpecVolumesGitRepo `pulumi:"gitRepo"`
	// Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
	Glusterfs *AlertmanagerSpecVolumesGlusterfs `pulumi:"glusterfs"`
	// HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
	HostPath *AlertmanagerSpecVolumesHostPath `pulumi:"hostPath"`
	// ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
	Iscsi *AlertmanagerSpecVolumesIscsi `pulumi:"iscsi"`
	// Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name string `pulumi:"name"`
	// NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Nfs *AlertmanagerSpecVolumesNfs `pulumi:"nfs"`
	// PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	PersistentVolumeClaim *AlertmanagerSpecVolumesPersistentVolumeClaim `pulumi:"persistentVolumeClaim"`
	// PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
	PhotonPersistentDisk *AlertmanagerSpecVolumesPhotonPersistentDisk `pulumi:"photonPersistentDisk"`
	// PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
	PortworxVolume *AlertmanagerSpecVolumesPortworxVolume `pulumi:"portworxVolume"`
	// Items for all in one resources secrets, configmaps, and downward API
	Projected *AlertmanagerSpecVolumesProjected `pulumi:"projected"`
	// Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
	Quobyte *AlertmanagerSpecVolumesQuobyte `pulumi:"quobyte"`
	// RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
	Rbd *AlertmanagerSpecVolumesRbd `pulumi:"rbd"`
	// ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
	ScaleIO *AlertmanagerSpecVolumesScaleIO `pulumi:"scaleIO"`
	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	Secret *AlertmanagerSpecVolumesSecret `pulumi:"secret"`
	// StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
	Storageos *AlertmanagerSpecVolumesStorageos `pulumi:"storageos"`
	// VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
	VsphereVolume *AlertmanagerSpecVolumesVsphereVolume `pulumi:"vsphereVolume"`
}

// AlertmanagerSpecVolumesInput is an input type that accepts AlertmanagerSpecVolumesArgs and AlertmanagerSpecVolumesOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesInput` via:
//
//          AlertmanagerSpecVolumesArgs{...}
type AlertmanagerSpecVolumesInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesOutput() AlertmanagerSpecVolumesOutput
	ToAlertmanagerSpecVolumesOutputWithContext(context.Context) AlertmanagerSpecVolumesOutput
}

// Volume represents a named volume in a pod that may be accessed by any container in the pod.
type AlertmanagerSpecVolumesArgs struct {
	// AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	AwsElasticBlockStore AlertmanagerSpecVolumesAwsElasticBlockStorePtrInput `pulumi:"awsElasticBlockStore"`
	// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
	AzureDisk AlertmanagerSpecVolumesAzureDiskPtrInput `pulumi:"azureDisk"`
	// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
	AzureFile AlertmanagerSpecVolumesAzureFilePtrInput `pulumi:"azureFile"`
	// CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
	Cephfs AlertmanagerSpecVolumesCephfsPtrInput `pulumi:"cephfs"`
	// Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	Cinder AlertmanagerSpecVolumesCinderPtrInput `pulumi:"cinder"`
	// ConfigMap represents a configMap that should populate this volume
	ConfigMap AlertmanagerSpecVolumesConfigMapPtrInput `pulumi:"configMap"`
	// CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).
	Csi AlertmanagerSpecVolumesCsiPtrInput `pulumi:"csi"`
	// DownwardAPI represents downward API about the pod that should populate this volume
	DownwardAPI AlertmanagerSpecVolumesDownwardAPIPtrInput `pulumi:"downwardAPI"`
	// EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	EmptyDir AlertmanagerSpecVolumesEmptyDirPtrInput `pulumi:"emptyDir"`
	// FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
	Fc AlertmanagerSpecVolumesFcPtrInput `pulumi:"fc"`
	// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
	FlexVolume AlertmanagerSpecVolumesFlexVolumePtrInput `pulumi:"flexVolume"`
	// Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
	Flocker AlertmanagerSpecVolumesFlockerPtrInput `pulumi:"flocker"`
	// GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	GcePersistentDisk AlertmanagerSpecVolumesGcePersistentDiskPtrInput `pulumi:"gcePersistentDisk"`
	// GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
	GitRepo AlertmanagerSpecVolumesGitRepoPtrInput `pulumi:"gitRepo"`
	// Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
	Glusterfs AlertmanagerSpecVolumesGlusterfsPtrInput `pulumi:"glusterfs"`
	// HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
	HostPath AlertmanagerSpecVolumesHostPathPtrInput `pulumi:"hostPath"`
	// ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
	Iscsi AlertmanagerSpecVolumesIscsiPtrInput `pulumi:"iscsi"`
	// Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringInput `pulumi:"name"`
	// NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Nfs AlertmanagerSpecVolumesNfsPtrInput `pulumi:"nfs"`
	// PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	PersistentVolumeClaim AlertmanagerSpecVolumesPersistentVolumeClaimPtrInput `pulumi:"persistentVolumeClaim"`
	// PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
	PhotonPersistentDisk AlertmanagerSpecVolumesPhotonPersistentDiskPtrInput `pulumi:"photonPersistentDisk"`
	// PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
	PortworxVolume AlertmanagerSpecVolumesPortworxVolumePtrInput `pulumi:"portworxVolume"`
	// Items for all in one resources secrets, configmaps, and downward API
	Projected AlertmanagerSpecVolumesProjectedPtrInput `pulumi:"projected"`
	// Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
	Quobyte AlertmanagerSpecVolumesQuobytePtrInput `pulumi:"quobyte"`
	// RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
	Rbd AlertmanagerSpecVolumesRbdPtrInput `pulumi:"rbd"`
	// ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
	ScaleIO AlertmanagerSpecVolumesScaleIOPtrInput `pulumi:"scaleIO"`
	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	Secret AlertmanagerSpecVolumesSecretPtrInput `pulumi:"secret"`
	// StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
	Storageos AlertmanagerSpecVolumesStorageosPtrInput `pulumi:"storageos"`
	// VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
	VsphereVolume AlertmanagerSpecVolumesVsphereVolumePtrInput `pulumi:"vsphereVolume"`
}

func (AlertmanagerSpecVolumesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumes)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesArgs) ToAlertmanagerSpecVolumesOutput() AlertmanagerSpecVolumesOutput {
	return i.ToAlertmanagerSpecVolumesOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesArgs) ToAlertmanagerSpecVolumesOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesOutput)
}

// AlertmanagerSpecVolumesArrayInput is an input type that accepts AlertmanagerSpecVolumesArray and AlertmanagerSpecVolumesArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesArrayInput` via:
//
//          AlertmanagerSpecVolumesArray{ AlertmanagerSpecVolumesArgs{...} }
type AlertmanagerSpecVolumesArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesArrayOutput() AlertmanagerSpecVolumesArrayOutput
	ToAlertmanagerSpecVolumesArrayOutputWithContext(context.Context) AlertmanagerSpecVolumesArrayOutput
}

type AlertmanagerSpecVolumesArray []AlertmanagerSpecVolumesInput

func (AlertmanagerSpecVolumesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecVolumes)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesArray) ToAlertmanagerSpecVolumesArrayOutput() AlertmanagerSpecVolumesArrayOutput {
	return i.ToAlertmanagerSpecVolumesArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesArray) ToAlertmanagerSpecVolumesArrayOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesArrayOutput)
}

// Volume represents a named volume in a pod that may be accessed by any container in the pod.
type AlertmanagerSpecVolumesOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumes)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesOutput) ToAlertmanagerSpecVolumesOutput() AlertmanagerSpecVolumesOutput {
	return o
}

func (o AlertmanagerSpecVolumesOutput) ToAlertmanagerSpecVolumesOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesOutput {
	return o
}

// AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o AlertmanagerSpecVolumesOutput) AwsElasticBlockStore() AlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesAwsElasticBlockStore {
		return v.AwsElasticBlockStore
	}).(AlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput)
}

// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
func (o AlertmanagerSpecVolumesOutput) AzureDisk() AlertmanagerSpecVolumesAzureDiskPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesAzureDisk { return v.AzureDisk }).(AlertmanagerSpecVolumesAzureDiskPtrOutput)
}

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
func (o AlertmanagerSpecVolumesOutput) AzureFile() AlertmanagerSpecVolumesAzureFilePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesAzureFile { return v.AzureFile }).(AlertmanagerSpecVolumesAzureFilePtrOutput)
}

// CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
func (o AlertmanagerSpecVolumesOutput) Cephfs() AlertmanagerSpecVolumesCephfsPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesCephfs { return v.Cephfs }).(AlertmanagerSpecVolumesCephfsPtrOutput)
}

// Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o AlertmanagerSpecVolumesOutput) Cinder() AlertmanagerSpecVolumesCinderPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesCinder { return v.Cinder }).(AlertmanagerSpecVolumesCinderPtrOutput)
}

// ConfigMap represents a configMap that should populate this volume
func (o AlertmanagerSpecVolumesOutput) ConfigMap() AlertmanagerSpecVolumesConfigMapPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesConfigMap { return v.ConfigMap }).(AlertmanagerSpecVolumesConfigMapPtrOutput)
}

// CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).
func (o AlertmanagerSpecVolumesOutput) Csi() AlertmanagerSpecVolumesCsiPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesCsi { return v.Csi }).(AlertmanagerSpecVolumesCsiPtrOutput)
}

// DownwardAPI represents downward API about the pod that should populate this volume
func (o AlertmanagerSpecVolumesOutput) DownwardAPI() AlertmanagerSpecVolumesDownwardAPIPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesDownwardAPI { return v.DownwardAPI }).(AlertmanagerSpecVolumesDownwardAPIPtrOutput)
}

// EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o AlertmanagerSpecVolumesOutput) EmptyDir() AlertmanagerSpecVolumesEmptyDirPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesEmptyDir { return v.EmptyDir }).(AlertmanagerSpecVolumesEmptyDirPtrOutput)
}

// FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
func (o AlertmanagerSpecVolumesOutput) Fc() AlertmanagerSpecVolumesFcPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesFc { return v.Fc }).(AlertmanagerSpecVolumesFcPtrOutput)
}

// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
func (o AlertmanagerSpecVolumesOutput) FlexVolume() AlertmanagerSpecVolumesFlexVolumePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesFlexVolume { return v.FlexVolume }).(AlertmanagerSpecVolumesFlexVolumePtrOutput)
}

// Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
func (o AlertmanagerSpecVolumesOutput) Flocker() AlertmanagerSpecVolumesFlockerPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesFlocker { return v.Flocker }).(AlertmanagerSpecVolumesFlockerPtrOutput)
}

// GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o AlertmanagerSpecVolumesOutput) GcePersistentDisk() AlertmanagerSpecVolumesGcePersistentDiskPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesGcePersistentDisk { return v.GcePersistentDisk }).(AlertmanagerSpecVolumesGcePersistentDiskPtrOutput)
}

// GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
func (o AlertmanagerSpecVolumesOutput) GitRepo() AlertmanagerSpecVolumesGitRepoPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesGitRepo { return v.GitRepo }).(AlertmanagerSpecVolumesGitRepoPtrOutput)
}

// Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
func (o AlertmanagerSpecVolumesOutput) Glusterfs() AlertmanagerSpecVolumesGlusterfsPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesGlusterfs { return v.Glusterfs }).(AlertmanagerSpecVolumesGlusterfsPtrOutput)
}

// HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
func (o AlertmanagerSpecVolumesOutput) HostPath() AlertmanagerSpecVolumesHostPathPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesHostPath { return v.HostPath }).(AlertmanagerSpecVolumesHostPathPtrOutput)
}

// ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
func (o AlertmanagerSpecVolumesOutput) Iscsi() AlertmanagerSpecVolumesIscsiPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesIscsi { return v.Iscsi }).(AlertmanagerSpecVolumesIscsiPtrOutput)
}

// Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o AlertmanagerSpecVolumesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) string { return v.Name }).(pulumi.StringOutput)
}

// NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o AlertmanagerSpecVolumesOutput) Nfs() AlertmanagerSpecVolumesNfsPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesNfs { return v.Nfs }).(AlertmanagerSpecVolumesNfsPtrOutput)
}

// PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o AlertmanagerSpecVolumesOutput) PersistentVolumeClaim() AlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesPersistentVolumeClaim {
		return v.PersistentVolumeClaim
	}).(AlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput)
}

// PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
func (o AlertmanagerSpecVolumesOutput) PhotonPersistentDisk() AlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesPhotonPersistentDisk {
		return v.PhotonPersistentDisk
	}).(AlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput)
}

// PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
func (o AlertmanagerSpecVolumesOutput) PortworxVolume() AlertmanagerSpecVolumesPortworxVolumePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesPortworxVolume { return v.PortworxVolume }).(AlertmanagerSpecVolumesPortworxVolumePtrOutput)
}

// Items for all in one resources secrets, configmaps, and downward API
func (o AlertmanagerSpecVolumesOutput) Projected() AlertmanagerSpecVolumesProjectedPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesProjected { return v.Projected }).(AlertmanagerSpecVolumesProjectedPtrOutput)
}

// Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
func (o AlertmanagerSpecVolumesOutput) Quobyte() AlertmanagerSpecVolumesQuobytePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesQuobyte { return v.Quobyte }).(AlertmanagerSpecVolumesQuobytePtrOutput)
}

// RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
func (o AlertmanagerSpecVolumesOutput) Rbd() AlertmanagerSpecVolumesRbdPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesRbd { return v.Rbd }).(AlertmanagerSpecVolumesRbdPtrOutput)
}

// ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
func (o AlertmanagerSpecVolumesOutput) ScaleIO() AlertmanagerSpecVolumesScaleIOPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesScaleIO { return v.ScaleIO }).(AlertmanagerSpecVolumesScaleIOPtrOutput)
}

// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (o AlertmanagerSpecVolumesOutput) Secret() AlertmanagerSpecVolumesSecretPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesSecret { return v.Secret }).(AlertmanagerSpecVolumesSecretPtrOutput)
}

// StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
func (o AlertmanagerSpecVolumesOutput) Storageos() AlertmanagerSpecVolumesStorageosPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesStorageos { return v.Storageos }).(AlertmanagerSpecVolumesStorageosPtrOutput)
}

// VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
func (o AlertmanagerSpecVolumesOutput) VsphereVolume() AlertmanagerSpecVolumesVsphereVolumePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumes) *AlertmanagerSpecVolumesVsphereVolume { return v.VsphereVolume }).(AlertmanagerSpecVolumesVsphereVolumePtrOutput)
}

type AlertmanagerSpecVolumesArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecVolumes)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesArrayOutput) ToAlertmanagerSpecVolumesArrayOutput() AlertmanagerSpecVolumesArrayOutput {
	return o
}

func (o AlertmanagerSpecVolumesArrayOutput) ToAlertmanagerSpecVolumesArrayOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesArrayOutput {
	return o
}

func (o AlertmanagerSpecVolumesArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecVolumesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecVolumes {
		return vs[0].([]AlertmanagerSpecVolumes)[vs[1].(int)]
	}).(AlertmanagerSpecVolumesOutput)
}

// AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
type AlertmanagerSpecVolumesAwsElasticBlockStore struct {
	// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType *string `pulumi:"fsType"`
	// The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
	Partition *int `pulumi:"partition"`
	// Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	ReadOnly *bool `pulumi:"readOnly"`
	// Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	VolumeID string `pulumi:"volumeID"`
}

// AlertmanagerSpecVolumesAwsElasticBlockStoreInput is an input type that accepts AlertmanagerSpecVolumesAwsElasticBlockStoreArgs and AlertmanagerSpecVolumesAwsElasticBlockStoreOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesAwsElasticBlockStoreInput` via:
//
//          AlertmanagerSpecVolumesAwsElasticBlockStoreArgs{...}
type AlertmanagerSpecVolumesAwsElasticBlockStoreInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesAwsElasticBlockStoreOutput() AlertmanagerSpecVolumesAwsElasticBlockStoreOutput
	ToAlertmanagerSpecVolumesAwsElasticBlockStoreOutputWithContext(context.Context) AlertmanagerSpecVolumesAwsElasticBlockStoreOutput
}

// AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
type AlertmanagerSpecVolumesAwsElasticBlockStoreArgs struct {
	// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
	Partition pulumi.IntPtrInput `pulumi:"partition"`
	// Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	VolumeID pulumi.StringInput `pulumi:"volumeID"`
}

func (AlertmanagerSpecVolumesAwsElasticBlockStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesAwsElasticBlockStore)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesAwsElasticBlockStoreArgs) ToAlertmanagerSpecVolumesAwsElasticBlockStoreOutput() AlertmanagerSpecVolumesAwsElasticBlockStoreOutput {
	return i.ToAlertmanagerSpecVolumesAwsElasticBlockStoreOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesAwsElasticBlockStoreArgs) ToAlertmanagerSpecVolumesAwsElasticBlockStoreOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesAwsElasticBlockStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesAwsElasticBlockStoreOutput)
}

func (i AlertmanagerSpecVolumesAwsElasticBlockStoreArgs) ToAlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput() AlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput {
	return i.ToAlertmanagerSpecVolumesAwsElasticBlockStorePtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesAwsElasticBlockStoreArgs) ToAlertmanagerSpecVolumesAwsElasticBlockStorePtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesAwsElasticBlockStoreOutput).ToAlertmanagerSpecVolumesAwsElasticBlockStorePtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesAwsElasticBlockStorePtrInput is an input type that accepts AlertmanagerSpecVolumesAwsElasticBlockStoreArgs, AlertmanagerSpecVolumesAwsElasticBlockStorePtr and AlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesAwsElasticBlockStorePtrInput` via:
//
//          AlertmanagerSpecVolumesAwsElasticBlockStoreArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesAwsElasticBlockStorePtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput() AlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput
	ToAlertmanagerSpecVolumesAwsElasticBlockStorePtrOutputWithContext(context.Context) AlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput
}

type alertmanagerSpecVolumesAwsElasticBlockStorePtrType AlertmanagerSpecVolumesAwsElasticBlockStoreArgs

func AlertmanagerSpecVolumesAwsElasticBlockStorePtr(v *AlertmanagerSpecVolumesAwsElasticBlockStoreArgs) AlertmanagerSpecVolumesAwsElasticBlockStorePtrInput {
	return (*alertmanagerSpecVolumesAwsElasticBlockStorePtrType)(v)
}

func (*alertmanagerSpecVolumesAwsElasticBlockStorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesAwsElasticBlockStore)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesAwsElasticBlockStorePtrType) ToAlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput() AlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput {
	return i.ToAlertmanagerSpecVolumesAwsElasticBlockStorePtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesAwsElasticBlockStorePtrType) ToAlertmanagerSpecVolumesAwsElasticBlockStorePtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput)
}

// AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
type AlertmanagerSpecVolumesAwsElasticBlockStoreOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesAwsElasticBlockStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesAwsElasticBlockStore)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesAwsElasticBlockStoreOutput) ToAlertmanagerSpecVolumesAwsElasticBlockStoreOutput() AlertmanagerSpecVolumesAwsElasticBlockStoreOutput {
	return o
}

func (o AlertmanagerSpecVolumesAwsElasticBlockStoreOutput) ToAlertmanagerSpecVolumesAwsElasticBlockStoreOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesAwsElasticBlockStoreOutput {
	return o
}

func (o AlertmanagerSpecVolumesAwsElasticBlockStoreOutput) ToAlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput() AlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput {
	return o.ToAlertmanagerSpecVolumesAwsElasticBlockStorePtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesAwsElasticBlockStoreOutput) ToAlertmanagerSpecVolumesAwsElasticBlockStorePtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesAwsElasticBlockStore) *AlertmanagerSpecVolumesAwsElasticBlockStore {
		return &v
	}).(AlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput)
}

// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
func (o AlertmanagerSpecVolumesAwsElasticBlockStoreOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesAwsElasticBlockStore) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
func (o AlertmanagerSpecVolumesAwsElasticBlockStoreOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesAwsElasticBlockStore) *int { return v.Partition }).(pulumi.IntPtrOutput)
}

// Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o AlertmanagerSpecVolumesAwsElasticBlockStoreOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesAwsElasticBlockStore) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o AlertmanagerSpecVolumesAwsElasticBlockStoreOutput) VolumeID() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesAwsElasticBlockStore) string { return v.VolumeID }).(pulumi.StringOutput)
}

type AlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesAwsElasticBlockStore)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput) ToAlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput() AlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput) ToAlertmanagerSpecVolumesAwsElasticBlockStorePtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput) Elem() AlertmanagerSpecVolumesAwsElasticBlockStoreOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesAwsElasticBlockStore) AlertmanagerSpecVolumesAwsElasticBlockStore {
		return *v
	}).(AlertmanagerSpecVolumesAwsElasticBlockStoreOutput)
}

// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
func (o AlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesAwsElasticBlockStore) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
func (o AlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesAwsElasticBlockStore) *int {
		if v == nil {
			return nil
		}
		return v.Partition
	}).(pulumi.IntPtrOutput)
}

// Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o AlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesAwsElasticBlockStore) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o AlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesAwsElasticBlockStore) *string {
		if v == nil {
			return nil
		}
		return &v.VolumeID
	}).(pulumi.StringPtrOutput)
}

// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
type AlertmanagerSpecVolumesAzureDisk struct {
	// Host Caching mode: None, Read Only, Read Write.
	CachingMode *string `pulumi:"cachingMode"`
	// The Name of the data disk in the blob storage
	DiskName string `pulumi:"diskName"`
	// The URI the data disk in the blob storage
	DiskURI string `pulumi:"diskURI"`
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
	Kind *string `pulumi:"kind"`
	// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
}

// AlertmanagerSpecVolumesAzureDiskInput is an input type that accepts AlertmanagerSpecVolumesAzureDiskArgs and AlertmanagerSpecVolumesAzureDiskOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesAzureDiskInput` via:
//
//          AlertmanagerSpecVolumesAzureDiskArgs{...}
type AlertmanagerSpecVolumesAzureDiskInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesAzureDiskOutput() AlertmanagerSpecVolumesAzureDiskOutput
	ToAlertmanagerSpecVolumesAzureDiskOutputWithContext(context.Context) AlertmanagerSpecVolumesAzureDiskOutput
}

// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
type AlertmanagerSpecVolumesAzureDiskArgs struct {
	// Host Caching mode: None, Read Only, Read Write.
	CachingMode pulumi.StringPtrInput `pulumi:"cachingMode"`
	// The Name of the data disk in the blob storage
	DiskName pulumi.StringInput `pulumi:"diskName"`
	// The URI the data disk in the blob storage
	DiskURI pulumi.StringInput `pulumi:"diskURI"`
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (AlertmanagerSpecVolumesAzureDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesAzureDisk)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesAzureDiskArgs) ToAlertmanagerSpecVolumesAzureDiskOutput() AlertmanagerSpecVolumesAzureDiskOutput {
	return i.ToAlertmanagerSpecVolumesAzureDiskOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesAzureDiskArgs) ToAlertmanagerSpecVolumesAzureDiskOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesAzureDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesAzureDiskOutput)
}

func (i AlertmanagerSpecVolumesAzureDiskArgs) ToAlertmanagerSpecVolumesAzureDiskPtrOutput() AlertmanagerSpecVolumesAzureDiskPtrOutput {
	return i.ToAlertmanagerSpecVolumesAzureDiskPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesAzureDiskArgs) ToAlertmanagerSpecVolumesAzureDiskPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesAzureDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesAzureDiskOutput).ToAlertmanagerSpecVolumesAzureDiskPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesAzureDiskPtrInput is an input type that accepts AlertmanagerSpecVolumesAzureDiskArgs, AlertmanagerSpecVolumesAzureDiskPtr and AlertmanagerSpecVolumesAzureDiskPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesAzureDiskPtrInput` via:
//
//          AlertmanagerSpecVolumesAzureDiskArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesAzureDiskPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesAzureDiskPtrOutput() AlertmanagerSpecVolumesAzureDiskPtrOutput
	ToAlertmanagerSpecVolumesAzureDiskPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesAzureDiskPtrOutput
}

type alertmanagerSpecVolumesAzureDiskPtrType AlertmanagerSpecVolumesAzureDiskArgs

func AlertmanagerSpecVolumesAzureDiskPtr(v *AlertmanagerSpecVolumesAzureDiskArgs) AlertmanagerSpecVolumesAzureDiskPtrInput {
	return (*alertmanagerSpecVolumesAzureDiskPtrType)(v)
}

func (*alertmanagerSpecVolumesAzureDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesAzureDisk)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesAzureDiskPtrType) ToAlertmanagerSpecVolumesAzureDiskPtrOutput() AlertmanagerSpecVolumesAzureDiskPtrOutput {
	return i.ToAlertmanagerSpecVolumesAzureDiskPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesAzureDiskPtrType) ToAlertmanagerSpecVolumesAzureDiskPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesAzureDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesAzureDiskPtrOutput)
}

// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
type AlertmanagerSpecVolumesAzureDiskOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesAzureDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesAzureDisk)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesAzureDiskOutput) ToAlertmanagerSpecVolumesAzureDiskOutput() AlertmanagerSpecVolumesAzureDiskOutput {
	return o
}

func (o AlertmanagerSpecVolumesAzureDiskOutput) ToAlertmanagerSpecVolumesAzureDiskOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesAzureDiskOutput {
	return o
}

func (o AlertmanagerSpecVolumesAzureDiskOutput) ToAlertmanagerSpecVolumesAzureDiskPtrOutput() AlertmanagerSpecVolumesAzureDiskPtrOutput {
	return o.ToAlertmanagerSpecVolumesAzureDiskPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesAzureDiskOutput) ToAlertmanagerSpecVolumesAzureDiskPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesAzureDiskPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesAzureDisk) *AlertmanagerSpecVolumesAzureDisk {
		return &v
	}).(AlertmanagerSpecVolumesAzureDiskPtrOutput)
}

// Host Caching mode: None, Read Only, Read Write.
func (o AlertmanagerSpecVolumesAzureDiskOutput) CachingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesAzureDisk) *string { return v.CachingMode }).(pulumi.StringPtrOutput)
}

// The Name of the data disk in the blob storage
func (o AlertmanagerSpecVolumesAzureDiskOutput) DiskName() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesAzureDisk) string { return v.DiskName }).(pulumi.StringOutput)
}

// The URI the data disk in the blob storage
func (o AlertmanagerSpecVolumesAzureDiskOutput) DiskURI() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesAzureDisk) string { return v.DiskURI }).(pulumi.StringOutput)
}

// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o AlertmanagerSpecVolumesAzureDiskOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesAzureDisk) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
func (o AlertmanagerSpecVolumesAzureDiskOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesAzureDisk) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o AlertmanagerSpecVolumesAzureDiskOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesAzureDisk) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type AlertmanagerSpecVolumesAzureDiskPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesAzureDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesAzureDisk)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesAzureDiskPtrOutput) ToAlertmanagerSpecVolumesAzureDiskPtrOutput() AlertmanagerSpecVolumesAzureDiskPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesAzureDiskPtrOutput) ToAlertmanagerSpecVolumesAzureDiskPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesAzureDiskPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesAzureDiskPtrOutput) Elem() AlertmanagerSpecVolumesAzureDiskOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesAzureDisk) AlertmanagerSpecVolumesAzureDisk { return *v }).(AlertmanagerSpecVolumesAzureDiskOutput)
}

// Host Caching mode: None, Read Only, Read Write.
func (o AlertmanagerSpecVolumesAzureDiskPtrOutput) CachingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesAzureDisk) *string {
		if v == nil {
			return nil
		}
		return v.CachingMode
	}).(pulumi.StringPtrOutput)
}

// The Name of the data disk in the blob storage
func (o AlertmanagerSpecVolumesAzureDiskPtrOutput) DiskName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesAzureDisk) *string {
		if v == nil {
			return nil
		}
		return &v.DiskName
	}).(pulumi.StringPtrOutput)
}

// The URI the data disk in the blob storage
func (o AlertmanagerSpecVolumesAzureDiskPtrOutput) DiskURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesAzureDisk) *string {
		if v == nil {
			return nil
		}
		return &v.DiskURI
	}).(pulumi.StringPtrOutput)
}

// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o AlertmanagerSpecVolumesAzureDiskPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesAzureDisk) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
func (o AlertmanagerSpecVolumesAzureDiskPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesAzureDisk) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o AlertmanagerSpecVolumesAzureDiskPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesAzureDisk) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
type AlertmanagerSpecVolumesAzureFile struct {
	// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// the name of secret that contains Azure Storage Account Name and Key
	SecretName string `pulumi:"secretName"`
	// Share Name
	ShareName string `pulumi:"shareName"`
}

// AlertmanagerSpecVolumesAzureFileInput is an input type that accepts AlertmanagerSpecVolumesAzureFileArgs and AlertmanagerSpecVolumesAzureFileOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesAzureFileInput` via:
//
//          AlertmanagerSpecVolumesAzureFileArgs{...}
type AlertmanagerSpecVolumesAzureFileInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesAzureFileOutput() AlertmanagerSpecVolumesAzureFileOutput
	ToAlertmanagerSpecVolumesAzureFileOutputWithContext(context.Context) AlertmanagerSpecVolumesAzureFileOutput
}

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
type AlertmanagerSpecVolumesAzureFileArgs struct {
	// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// the name of secret that contains Azure Storage Account Name and Key
	SecretName pulumi.StringInput `pulumi:"secretName"`
	// Share Name
	ShareName pulumi.StringInput `pulumi:"shareName"`
}

func (AlertmanagerSpecVolumesAzureFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesAzureFile)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesAzureFileArgs) ToAlertmanagerSpecVolumesAzureFileOutput() AlertmanagerSpecVolumesAzureFileOutput {
	return i.ToAlertmanagerSpecVolumesAzureFileOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesAzureFileArgs) ToAlertmanagerSpecVolumesAzureFileOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesAzureFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesAzureFileOutput)
}

func (i AlertmanagerSpecVolumesAzureFileArgs) ToAlertmanagerSpecVolumesAzureFilePtrOutput() AlertmanagerSpecVolumesAzureFilePtrOutput {
	return i.ToAlertmanagerSpecVolumesAzureFilePtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesAzureFileArgs) ToAlertmanagerSpecVolumesAzureFilePtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesAzureFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesAzureFileOutput).ToAlertmanagerSpecVolumesAzureFilePtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesAzureFilePtrInput is an input type that accepts AlertmanagerSpecVolumesAzureFileArgs, AlertmanagerSpecVolumesAzureFilePtr and AlertmanagerSpecVolumesAzureFilePtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesAzureFilePtrInput` via:
//
//          AlertmanagerSpecVolumesAzureFileArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesAzureFilePtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesAzureFilePtrOutput() AlertmanagerSpecVolumesAzureFilePtrOutput
	ToAlertmanagerSpecVolumesAzureFilePtrOutputWithContext(context.Context) AlertmanagerSpecVolumesAzureFilePtrOutput
}

type alertmanagerSpecVolumesAzureFilePtrType AlertmanagerSpecVolumesAzureFileArgs

func AlertmanagerSpecVolumesAzureFilePtr(v *AlertmanagerSpecVolumesAzureFileArgs) AlertmanagerSpecVolumesAzureFilePtrInput {
	return (*alertmanagerSpecVolumesAzureFilePtrType)(v)
}

func (*alertmanagerSpecVolumesAzureFilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesAzureFile)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesAzureFilePtrType) ToAlertmanagerSpecVolumesAzureFilePtrOutput() AlertmanagerSpecVolumesAzureFilePtrOutput {
	return i.ToAlertmanagerSpecVolumesAzureFilePtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesAzureFilePtrType) ToAlertmanagerSpecVolumesAzureFilePtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesAzureFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesAzureFilePtrOutput)
}

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
type AlertmanagerSpecVolumesAzureFileOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesAzureFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesAzureFile)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesAzureFileOutput) ToAlertmanagerSpecVolumesAzureFileOutput() AlertmanagerSpecVolumesAzureFileOutput {
	return o
}

func (o AlertmanagerSpecVolumesAzureFileOutput) ToAlertmanagerSpecVolumesAzureFileOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesAzureFileOutput {
	return o
}

func (o AlertmanagerSpecVolumesAzureFileOutput) ToAlertmanagerSpecVolumesAzureFilePtrOutput() AlertmanagerSpecVolumesAzureFilePtrOutput {
	return o.ToAlertmanagerSpecVolumesAzureFilePtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesAzureFileOutput) ToAlertmanagerSpecVolumesAzureFilePtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesAzureFilePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesAzureFile) *AlertmanagerSpecVolumesAzureFile {
		return &v
	}).(AlertmanagerSpecVolumesAzureFilePtrOutput)
}

// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o AlertmanagerSpecVolumesAzureFileOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesAzureFile) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// the name of secret that contains Azure Storage Account Name and Key
func (o AlertmanagerSpecVolumesAzureFileOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesAzureFile) string { return v.SecretName }).(pulumi.StringOutput)
}

// Share Name
func (o AlertmanagerSpecVolumesAzureFileOutput) ShareName() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesAzureFile) string { return v.ShareName }).(pulumi.StringOutput)
}

type AlertmanagerSpecVolumesAzureFilePtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesAzureFilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesAzureFile)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesAzureFilePtrOutput) ToAlertmanagerSpecVolumesAzureFilePtrOutput() AlertmanagerSpecVolumesAzureFilePtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesAzureFilePtrOutput) ToAlertmanagerSpecVolumesAzureFilePtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesAzureFilePtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesAzureFilePtrOutput) Elem() AlertmanagerSpecVolumesAzureFileOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesAzureFile) AlertmanagerSpecVolumesAzureFile { return *v }).(AlertmanagerSpecVolumesAzureFileOutput)
}

// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o AlertmanagerSpecVolumesAzureFilePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesAzureFile) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// the name of secret that contains Azure Storage Account Name and Key
func (o AlertmanagerSpecVolumesAzureFilePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesAzureFile) *string {
		if v == nil {
			return nil
		}
		return &v.SecretName
	}).(pulumi.StringPtrOutput)
}

// Share Name
func (o AlertmanagerSpecVolumesAzureFilePtrOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesAzureFile) *string {
		if v == nil {
			return nil
		}
		return &v.ShareName
	}).(pulumi.StringPtrOutput)
}

// CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
type AlertmanagerSpecVolumesCephfs struct {
	// Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	Monitors []string `pulumi:"monitors"`
	// Optional: Used as the mounted root, rather than the full Ceph tree, default is /
	Path *string `pulumi:"path"`
	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	ReadOnly *bool `pulumi:"readOnly"`
	// Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretFile *string `pulumi:"secretFile"`
	// Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretRef *AlertmanagerSpecVolumesCephfsSecretRef `pulumi:"secretRef"`
	// Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	User *string `pulumi:"user"`
}

// AlertmanagerSpecVolumesCephfsInput is an input type that accepts AlertmanagerSpecVolumesCephfsArgs and AlertmanagerSpecVolumesCephfsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesCephfsInput` via:
//
//          AlertmanagerSpecVolumesCephfsArgs{...}
type AlertmanagerSpecVolumesCephfsInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesCephfsOutput() AlertmanagerSpecVolumesCephfsOutput
	ToAlertmanagerSpecVolumesCephfsOutputWithContext(context.Context) AlertmanagerSpecVolumesCephfsOutput
}

// CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
type AlertmanagerSpecVolumesCephfsArgs struct {
	// Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	Monitors pulumi.StringArrayInput `pulumi:"monitors"`
	// Optional: Used as the mounted root, rather than the full Ceph tree, default is /
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretFile pulumi.StringPtrInput `pulumi:"secretFile"`
	// Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretRef AlertmanagerSpecVolumesCephfsSecretRefPtrInput `pulumi:"secretRef"`
	// Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (AlertmanagerSpecVolumesCephfsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesCephfs)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesCephfsArgs) ToAlertmanagerSpecVolumesCephfsOutput() AlertmanagerSpecVolumesCephfsOutput {
	return i.ToAlertmanagerSpecVolumesCephfsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesCephfsArgs) ToAlertmanagerSpecVolumesCephfsOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCephfsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesCephfsOutput)
}

func (i AlertmanagerSpecVolumesCephfsArgs) ToAlertmanagerSpecVolumesCephfsPtrOutput() AlertmanagerSpecVolumesCephfsPtrOutput {
	return i.ToAlertmanagerSpecVolumesCephfsPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesCephfsArgs) ToAlertmanagerSpecVolumesCephfsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCephfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesCephfsOutput).ToAlertmanagerSpecVolumesCephfsPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesCephfsPtrInput is an input type that accepts AlertmanagerSpecVolumesCephfsArgs, AlertmanagerSpecVolumesCephfsPtr and AlertmanagerSpecVolumesCephfsPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesCephfsPtrInput` via:
//
//          AlertmanagerSpecVolumesCephfsArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesCephfsPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesCephfsPtrOutput() AlertmanagerSpecVolumesCephfsPtrOutput
	ToAlertmanagerSpecVolumesCephfsPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesCephfsPtrOutput
}

type alertmanagerSpecVolumesCephfsPtrType AlertmanagerSpecVolumesCephfsArgs

func AlertmanagerSpecVolumesCephfsPtr(v *AlertmanagerSpecVolumesCephfsArgs) AlertmanagerSpecVolumesCephfsPtrInput {
	return (*alertmanagerSpecVolumesCephfsPtrType)(v)
}

func (*alertmanagerSpecVolumesCephfsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesCephfs)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesCephfsPtrType) ToAlertmanagerSpecVolumesCephfsPtrOutput() AlertmanagerSpecVolumesCephfsPtrOutput {
	return i.ToAlertmanagerSpecVolumesCephfsPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesCephfsPtrType) ToAlertmanagerSpecVolumesCephfsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCephfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesCephfsPtrOutput)
}

// CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
type AlertmanagerSpecVolumesCephfsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesCephfsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesCephfs)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesCephfsOutput) ToAlertmanagerSpecVolumesCephfsOutput() AlertmanagerSpecVolumesCephfsOutput {
	return o
}

func (o AlertmanagerSpecVolumesCephfsOutput) ToAlertmanagerSpecVolumesCephfsOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCephfsOutput {
	return o
}

func (o AlertmanagerSpecVolumesCephfsOutput) ToAlertmanagerSpecVolumesCephfsPtrOutput() AlertmanagerSpecVolumesCephfsPtrOutput {
	return o.ToAlertmanagerSpecVolumesCephfsPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesCephfsOutput) ToAlertmanagerSpecVolumesCephfsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCephfsPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesCephfs) *AlertmanagerSpecVolumesCephfs {
		return &v
	}).(AlertmanagerSpecVolumesCephfsPtrOutput)
}

// Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o AlertmanagerSpecVolumesCephfsOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesCephfs) []string { return v.Monitors }).(pulumi.StringArrayOutput)
}

// Optional: Used as the mounted root, rather than the full Ceph tree, default is /
func (o AlertmanagerSpecVolumesCephfsOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesCephfs) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o AlertmanagerSpecVolumesCephfsOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesCephfs) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o AlertmanagerSpecVolumesCephfsOutput) SecretFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesCephfs) *string { return v.SecretFile }).(pulumi.StringPtrOutput)
}

// Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o AlertmanagerSpecVolumesCephfsOutput) SecretRef() AlertmanagerSpecVolumesCephfsSecretRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesCephfs) *AlertmanagerSpecVolumesCephfsSecretRef { return v.SecretRef }).(AlertmanagerSpecVolumesCephfsSecretRefPtrOutput)
}

// Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o AlertmanagerSpecVolumesCephfsOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesCephfs) *string { return v.User }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecVolumesCephfsPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesCephfsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesCephfs)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesCephfsPtrOutput) ToAlertmanagerSpecVolumesCephfsPtrOutput() AlertmanagerSpecVolumesCephfsPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesCephfsPtrOutput) ToAlertmanagerSpecVolumesCephfsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCephfsPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesCephfsPtrOutput) Elem() AlertmanagerSpecVolumesCephfsOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesCephfs) AlertmanagerSpecVolumesCephfs { return *v }).(AlertmanagerSpecVolumesCephfsOutput)
}

// Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o AlertmanagerSpecVolumesCephfsPtrOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesCephfs) []string {
		if v == nil {
			return nil
		}
		return v.Monitors
	}).(pulumi.StringArrayOutput)
}

// Optional: Used as the mounted root, rather than the full Ceph tree, default is /
func (o AlertmanagerSpecVolumesCephfsPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesCephfs) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o AlertmanagerSpecVolumesCephfsPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesCephfs) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o AlertmanagerSpecVolumesCephfsPtrOutput) SecretFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesCephfs) *string {
		if v == nil {
			return nil
		}
		return v.SecretFile
	}).(pulumi.StringPtrOutput)
}

// Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o AlertmanagerSpecVolumesCephfsPtrOutput) SecretRef() AlertmanagerSpecVolumesCephfsSecretRefPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesCephfs) *AlertmanagerSpecVolumesCephfsSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(AlertmanagerSpecVolumesCephfsSecretRefPtrOutput)
}

// Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o AlertmanagerSpecVolumesCephfsPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesCephfs) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
type AlertmanagerSpecVolumesCephfsSecretRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
}

// AlertmanagerSpecVolumesCephfsSecretRefInput is an input type that accepts AlertmanagerSpecVolumesCephfsSecretRefArgs and AlertmanagerSpecVolumesCephfsSecretRefOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesCephfsSecretRefInput` via:
//
//          AlertmanagerSpecVolumesCephfsSecretRefArgs{...}
type AlertmanagerSpecVolumesCephfsSecretRefInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesCephfsSecretRefOutput() AlertmanagerSpecVolumesCephfsSecretRefOutput
	ToAlertmanagerSpecVolumesCephfsSecretRefOutputWithContext(context.Context) AlertmanagerSpecVolumesCephfsSecretRefOutput
}

// Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
type AlertmanagerSpecVolumesCephfsSecretRefArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (AlertmanagerSpecVolumesCephfsSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesCephfsSecretRef)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesCephfsSecretRefArgs) ToAlertmanagerSpecVolumesCephfsSecretRefOutput() AlertmanagerSpecVolumesCephfsSecretRefOutput {
	return i.ToAlertmanagerSpecVolumesCephfsSecretRefOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesCephfsSecretRefArgs) ToAlertmanagerSpecVolumesCephfsSecretRefOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCephfsSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesCephfsSecretRefOutput)
}

func (i AlertmanagerSpecVolumesCephfsSecretRefArgs) ToAlertmanagerSpecVolumesCephfsSecretRefPtrOutput() AlertmanagerSpecVolumesCephfsSecretRefPtrOutput {
	return i.ToAlertmanagerSpecVolumesCephfsSecretRefPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesCephfsSecretRefArgs) ToAlertmanagerSpecVolumesCephfsSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCephfsSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesCephfsSecretRefOutput).ToAlertmanagerSpecVolumesCephfsSecretRefPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesCephfsSecretRefPtrInput is an input type that accepts AlertmanagerSpecVolumesCephfsSecretRefArgs, AlertmanagerSpecVolumesCephfsSecretRefPtr and AlertmanagerSpecVolumesCephfsSecretRefPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesCephfsSecretRefPtrInput` via:
//
//          AlertmanagerSpecVolumesCephfsSecretRefArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesCephfsSecretRefPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesCephfsSecretRefPtrOutput() AlertmanagerSpecVolumesCephfsSecretRefPtrOutput
	ToAlertmanagerSpecVolumesCephfsSecretRefPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesCephfsSecretRefPtrOutput
}

type alertmanagerSpecVolumesCephfsSecretRefPtrType AlertmanagerSpecVolumesCephfsSecretRefArgs

func AlertmanagerSpecVolumesCephfsSecretRefPtr(v *AlertmanagerSpecVolumesCephfsSecretRefArgs) AlertmanagerSpecVolumesCephfsSecretRefPtrInput {
	return (*alertmanagerSpecVolumesCephfsSecretRefPtrType)(v)
}

func (*alertmanagerSpecVolumesCephfsSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesCephfsSecretRef)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesCephfsSecretRefPtrType) ToAlertmanagerSpecVolumesCephfsSecretRefPtrOutput() AlertmanagerSpecVolumesCephfsSecretRefPtrOutput {
	return i.ToAlertmanagerSpecVolumesCephfsSecretRefPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesCephfsSecretRefPtrType) ToAlertmanagerSpecVolumesCephfsSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCephfsSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesCephfsSecretRefPtrOutput)
}

// Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
type AlertmanagerSpecVolumesCephfsSecretRefOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesCephfsSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesCephfsSecretRef)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesCephfsSecretRefOutput) ToAlertmanagerSpecVolumesCephfsSecretRefOutput() AlertmanagerSpecVolumesCephfsSecretRefOutput {
	return o
}

func (o AlertmanagerSpecVolumesCephfsSecretRefOutput) ToAlertmanagerSpecVolumesCephfsSecretRefOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCephfsSecretRefOutput {
	return o
}

func (o AlertmanagerSpecVolumesCephfsSecretRefOutput) ToAlertmanagerSpecVolumesCephfsSecretRefPtrOutput() AlertmanagerSpecVolumesCephfsSecretRefPtrOutput {
	return o.ToAlertmanagerSpecVolumesCephfsSecretRefPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesCephfsSecretRefOutput) ToAlertmanagerSpecVolumesCephfsSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCephfsSecretRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesCephfsSecretRef) *AlertmanagerSpecVolumesCephfsSecretRef {
		return &v
	}).(AlertmanagerSpecVolumesCephfsSecretRefPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecVolumesCephfsSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesCephfsSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecVolumesCephfsSecretRefPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesCephfsSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesCephfsSecretRef)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesCephfsSecretRefPtrOutput) ToAlertmanagerSpecVolumesCephfsSecretRefPtrOutput() AlertmanagerSpecVolumesCephfsSecretRefPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesCephfsSecretRefPtrOutput) ToAlertmanagerSpecVolumesCephfsSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCephfsSecretRefPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesCephfsSecretRefPtrOutput) Elem() AlertmanagerSpecVolumesCephfsSecretRefOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesCephfsSecretRef) AlertmanagerSpecVolumesCephfsSecretRef { return *v }).(AlertmanagerSpecVolumesCephfsSecretRefOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecVolumesCephfsSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesCephfsSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
type AlertmanagerSpecVolumesCinder struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	FsType *string `pulumi:"fsType"`
	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	ReadOnly *bool `pulumi:"readOnly"`
	// Optional: points to a secret object containing parameters used to connect to OpenStack.
	SecretRef *AlertmanagerSpecVolumesCinderSecretRef `pulumi:"secretRef"`
	// volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	VolumeID string `pulumi:"volumeID"`
}

// AlertmanagerSpecVolumesCinderInput is an input type that accepts AlertmanagerSpecVolumesCinderArgs and AlertmanagerSpecVolumesCinderOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesCinderInput` via:
//
//          AlertmanagerSpecVolumesCinderArgs{...}
type AlertmanagerSpecVolumesCinderInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesCinderOutput() AlertmanagerSpecVolumesCinderOutput
	ToAlertmanagerSpecVolumesCinderOutputWithContext(context.Context) AlertmanagerSpecVolumesCinderOutput
}

// Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
type AlertmanagerSpecVolumesCinderArgs struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// Optional: points to a secret object containing parameters used to connect to OpenStack.
	SecretRef AlertmanagerSpecVolumesCinderSecretRefPtrInput `pulumi:"secretRef"`
	// volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	VolumeID pulumi.StringInput `pulumi:"volumeID"`
}

func (AlertmanagerSpecVolumesCinderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesCinder)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesCinderArgs) ToAlertmanagerSpecVolumesCinderOutput() AlertmanagerSpecVolumesCinderOutput {
	return i.ToAlertmanagerSpecVolumesCinderOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesCinderArgs) ToAlertmanagerSpecVolumesCinderOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCinderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesCinderOutput)
}

func (i AlertmanagerSpecVolumesCinderArgs) ToAlertmanagerSpecVolumesCinderPtrOutput() AlertmanagerSpecVolumesCinderPtrOutput {
	return i.ToAlertmanagerSpecVolumesCinderPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesCinderArgs) ToAlertmanagerSpecVolumesCinderPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCinderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesCinderOutput).ToAlertmanagerSpecVolumesCinderPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesCinderPtrInput is an input type that accepts AlertmanagerSpecVolumesCinderArgs, AlertmanagerSpecVolumesCinderPtr and AlertmanagerSpecVolumesCinderPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesCinderPtrInput` via:
//
//          AlertmanagerSpecVolumesCinderArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesCinderPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesCinderPtrOutput() AlertmanagerSpecVolumesCinderPtrOutput
	ToAlertmanagerSpecVolumesCinderPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesCinderPtrOutput
}

type alertmanagerSpecVolumesCinderPtrType AlertmanagerSpecVolumesCinderArgs

func AlertmanagerSpecVolumesCinderPtr(v *AlertmanagerSpecVolumesCinderArgs) AlertmanagerSpecVolumesCinderPtrInput {
	return (*alertmanagerSpecVolumesCinderPtrType)(v)
}

func (*alertmanagerSpecVolumesCinderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesCinder)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesCinderPtrType) ToAlertmanagerSpecVolumesCinderPtrOutput() AlertmanagerSpecVolumesCinderPtrOutput {
	return i.ToAlertmanagerSpecVolumesCinderPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesCinderPtrType) ToAlertmanagerSpecVolumesCinderPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCinderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesCinderPtrOutput)
}

// Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
type AlertmanagerSpecVolumesCinderOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesCinderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesCinder)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesCinderOutput) ToAlertmanagerSpecVolumesCinderOutput() AlertmanagerSpecVolumesCinderOutput {
	return o
}

func (o AlertmanagerSpecVolumesCinderOutput) ToAlertmanagerSpecVolumesCinderOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCinderOutput {
	return o
}

func (o AlertmanagerSpecVolumesCinderOutput) ToAlertmanagerSpecVolumesCinderPtrOutput() AlertmanagerSpecVolumesCinderPtrOutput {
	return o.ToAlertmanagerSpecVolumesCinderPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesCinderOutput) ToAlertmanagerSpecVolumesCinderPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCinderPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesCinder) *AlertmanagerSpecVolumesCinder {
		return &v
	}).(AlertmanagerSpecVolumesCinderPtrOutput)
}

// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o AlertmanagerSpecVolumesCinderOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesCinder) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o AlertmanagerSpecVolumesCinderOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesCinder) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// Optional: points to a secret object containing parameters used to connect to OpenStack.
func (o AlertmanagerSpecVolumesCinderOutput) SecretRef() AlertmanagerSpecVolumesCinderSecretRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesCinder) *AlertmanagerSpecVolumesCinderSecretRef { return v.SecretRef }).(AlertmanagerSpecVolumesCinderSecretRefPtrOutput)
}

// volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o AlertmanagerSpecVolumesCinderOutput) VolumeID() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesCinder) string { return v.VolumeID }).(pulumi.StringOutput)
}

type AlertmanagerSpecVolumesCinderPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesCinderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesCinder)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesCinderPtrOutput) ToAlertmanagerSpecVolumesCinderPtrOutput() AlertmanagerSpecVolumesCinderPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesCinderPtrOutput) ToAlertmanagerSpecVolumesCinderPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCinderPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesCinderPtrOutput) Elem() AlertmanagerSpecVolumesCinderOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesCinder) AlertmanagerSpecVolumesCinder { return *v }).(AlertmanagerSpecVolumesCinderOutput)
}

// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o AlertmanagerSpecVolumesCinderPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesCinder) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o AlertmanagerSpecVolumesCinderPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesCinder) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// Optional: points to a secret object containing parameters used to connect to OpenStack.
func (o AlertmanagerSpecVolumesCinderPtrOutput) SecretRef() AlertmanagerSpecVolumesCinderSecretRefPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesCinder) *AlertmanagerSpecVolumesCinderSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(AlertmanagerSpecVolumesCinderSecretRefPtrOutput)
}

// volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o AlertmanagerSpecVolumesCinderPtrOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesCinder) *string {
		if v == nil {
			return nil
		}
		return &v.VolumeID
	}).(pulumi.StringPtrOutput)
}

// Optional: points to a secret object containing parameters used to connect to OpenStack.
type AlertmanagerSpecVolumesCinderSecretRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
}

// AlertmanagerSpecVolumesCinderSecretRefInput is an input type that accepts AlertmanagerSpecVolumesCinderSecretRefArgs and AlertmanagerSpecVolumesCinderSecretRefOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesCinderSecretRefInput` via:
//
//          AlertmanagerSpecVolumesCinderSecretRefArgs{...}
type AlertmanagerSpecVolumesCinderSecretRefInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesCinderSecretRefOutput() AlertmanagerSpecVolumesCinderSecretRefOutput
	ToAlertmanagerSpecVolumesCinderSecretRefOutputWithContext(context.Context) AlertmanagerSpecVolumesCinderSecretRefOutput
}

// Optional: points to a secret object containing parameters used to connect to OpenStack.
type AlertmanagerSpecVolumesCinderSecretRefArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (AlertmanagerSpecVolumesCinderSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesCinderSecretRef)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesCinderSecretRefArgs) ToAlertmanagerSpecVolumesCinderSecretRefOutput() AlertmanagerSpecVolumesCinderSecretRefOutput {
	return i.ToAlertmanagerSpecVolumesCinderSecretRefOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesCinderSecretRefArgs) ToAlertmanagerSpecVolumesCinderSecretRefOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCinderSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesCinderSecretRefOutput)
}

func (i AlertmanagerSpecVolumesCinderSecretRefArgs) ToAlertmanagerSpecVolumesCinderSecretRefPtrOutput() AlertmanagerSpecVolumesCinderSecretRefPtrOutput {
	return i.ToAlertmanagerSpecVolumesCinderSecretRefPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesCinderSecretRefArgs) ToAlertmanagerSpecVolumesCinderSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCinderSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesCinderSecretRefOutput).ToAlertmanagerSpecVolumesCinderSecretRefPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesCinderSecretRefPtrInput is an input type that accepts AlertmanagerSpecVolumesCinderSecretRefArgs, AlertmanagerSpecVolumesCinderSecretRefPtr and AlertmanagerSpecVolumesCinderSecretRefPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesCinderSecretRefPtrInput` via:
//
//          AlertmanagerSpecVolumesCinderSecretRefArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesCinderSecretRefPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesCinderSecretRefPtrOutput() AlertmanagerSpecVolumesCinderSecretRefPtrOutput
	ToAlertmanagerSpecVolumesCinderSecretRefPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesCinderSecretRefPtrOutput
}

type alertmanagerSpecVolumesCinderSecretRefPtrType AlertmanagerSpecVolumesCinderSecretRefArgs

func AlertmanagerSpecVolumesCinderSecretRefPtr(v *AlertmanagerSpecVolumesCinderSecretRefArgs) AlertmanagerSpecVolumesCinderSecretRefPtrInput {
	return (*alertmanagerSpecVolumesCinderSecretRefPtrType)(v)
}

func (*alertmanagerSpecVolumesCinderSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesCinderSecretRef)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesCinderSecretRefPtrType) ToAlertmanagerSpecVolumesCinderSecretRefPtrOutput() AlertmanagerSpecVolumesCinderSecretRefPtrOutput {
	return i.ToAlertmanagerSpecVolumesCinderSecretRefPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesCinderSecretRefPtrType) ToAlertmanagerSpecVolumesCinderSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCinderSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesCinderSecretRefPtrOutput)
}

// Optional: points to a secret object containing parameters used to connect to OpenStack.
type AlertmanagerSpecVolumesCinderSecretRefOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesCinderSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesCinderSecretRef)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesCinderSecretRefOutput) ToAlertmanagerSpecVolumesCinderSecretRefOutput() AlertmanagerSpecVolumesCinderSecretRefOutput {
	return o
}

func (o AlertmanagerSpecVolumesCinderSecretRefOutput) ToAlertmanagerSpecVolumesCinderSecretRefOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCinderSecretRefOutput {
	return o
}

func (o AlertmanagerSpecVolumesCinderSecretRefOutput) ToAlertmanagerSpecVolumesCinderSecretRefPtrOutput() AlertmanagerSpecVolumesCinderSecretRefPtrOutput {
	return o.ToAlertmanagerSpecVolumesCinderSecretRefPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesCinderSecretRefOutput) ToAlertmanagerSpecVolumesCinderSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCinderSecretRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesCinderSecretRef) *AlertmanagerSpecVolumesCinderSecretRef {
		return &v
	}).(AlertmanagerSpecVolumesCinderSecretRefPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecVolumesCinderSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesCinderSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecVolumesCinderSecretRefPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesCinderSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesCinderSecretRef)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesCinderSecretRefPtrOutput) ToAlertmanagerSpecVolumesCinderSecretRefPtrOutput() AlertmanagerSpecVolumesCinderSecretRefPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesCinderSecretRefPtrOutput) ToAlertmanagerSpecVolumesCinderSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCinderSecretRefPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesCinderSecretRefPtrOutput) Elem() AlertmanagerSpecVolumesCinderSecretRefOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesCinderSecretRef) AlertmanagerSpecVolumesCinderSecretRef { return *v }).(AlertmanagerSpecVolumesCinderSecretRefOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecVolumesCinderSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesCinderSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// ConfigMap represents a configMap that should populate this volume
type AlertmanagerSpecVolumesConfigMap struct {
	// Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []AlertmanagerSpecVolumesConfigMapItems `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its keys must be defined
	Optional *bool `pulumi:"optional"`
}

// AlertmanagerSpecVolumesConfigMapInput is an input type that accepts AlertmanagerSpecVolumesConfigMap and AlertmanagerSpecVolumesConfigMapOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesConfigMapInput` via:
//
//          AlertmanagerSpecVolumesConfigMap{ "key": AlertmanagerSpecVolumesConfigArgs{...} }
type AlertmanagerSpecVolumesConfigMapInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesConfigMapOutput() AlertmanagerSpecVolumesConfigMapOutput
	ToAlertmanagerSpecVolumesConfigMapOutputWithContext(context.Context) AlertmanagerSpecVolumesConfigMapOutput
}

// ConfigMap represents a configMap that should populate this volume
type AlertmanagerSpecVolumesConfigMapArgs struct {
	// Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items AlertmanagerSpecVolumesConfigMapItemsArrayInput `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its keys must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (AlertmanagerSpecVolumesConfigMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesConfigMap)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesConfigMapArgs) ToAlertmanagerSpecVolumesConfigMapOutput() AlertmanagerSpecVolumesConfigMapOutput {
	return i.ToAlertmanagerSpecVolumesConfigMapOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesConfigMapArgs) ToAlertmanagerSpecVolumesConfigMapOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesConfigMapOutput)
}

func (i AlertmanagerSpecVolumesConfigMapArgs) ToAlertmanagerSpecVolumesConfigMapPtrOutput() AlertmanagerSpecVolumesConfigMapPtrOutput {
	return i.ToAlertmanagerSpecVolumesConfigMapPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesConfigMapArgs) ToAlertmanagerSpecVolumesConfigMapPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesConfigMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesConfigMapOutput).ToAlertmanagerSpecVolumesConfigMapPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesConfigMapPtrInput is an input type that accepts AlertmanagerSpecVolumesConfigMapArgs, AlertmanagerSpecVolumesConfigMapPtr and AlertmanagerSpecVolumesConfigMapPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesConfigMapPtrInput` via:
//
//          AlertmanagerSpecVolumesConfigMapArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesConfigMapPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesConfigMapPtrOutput() AlertmanagerSpecVolumesConfigMapPtrOutput
	ToAlertmanagerSpecVolumesConfigMapPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesConfigMapPtrOutput
}

type alertmanagerSpecVolumesConfigMapPtrType AlertmanagerSpecVolumesConfigMapArgs

func AlertmanagerSpecVolumesConfigMapPtr(v *AlertmanagerSpecVolumesConfigMapArgs) AlertmanagerSpecVolumesConfigMapPtrInput {
	return (*alertmanagerSpecVolumesConfigMapPtrType)(v)
}

func (*alertmanagerSpecVolumesConfigMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesConfigMap)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesConfigMapPtrType) ToAlertmanagerSpecVolumesConfigMapPtrOutput() AlertmanagerSpecVolumesConfigMapPtrOutput {
	return i.ToAlertmanagerSpecVolumesConfigMapPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesConfigMapPtrType) ToAlertmanagerSpecVolumesConfigMapPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesConfigMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesConfigMapPtrOutput)
}

// ConfigMap represents a configMap that should populate this volume
type AlertmanagerSpecVolumesConfigMapOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesConfigMap)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesConfigMapOutput) ToAlertmanagerSpecVolumesConfigMapOutput() AlertmanagerSpecVolumesConfigMapOutput {
	return o
}

func (o AlertmanagerSpecVolumesConfigMapOutput) ToAlertmanagerSpecVolumesConfigMapOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesConfigMapOutput {
	return o
}

func (o AlertmanagerSpecVolumesConfigMapOutput) ToAlertmanagerSpecVolumesConfigMapPtrOutput() AlertmanagerSpecVolumesConfigMapPtrOutput {
	return o.ToAlertmanagerSpecVolumesConfigMapPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesConfigMapOutput) ToAlertmanagerSpecVolumesConfigMapPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesConfigMapPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesConfigMap) *AlertmanagerSpecVolumesConfigMap {
		return &v
	}).(AlertmanagerSpecVolumesConfigMapPtrOutput)
}

// Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o AlertmanagerSpecVolumesConfigMapOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesConfigMap) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o AlertmanagerSpecVolumesConfigMapOutput) Items() AlertmanagerSpecVolumesConfigMapItemsArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesConfigMap) []AlertmanagerSpecVolumesConfigMapItems { return v.Items }).(AlertmanagerSpecVolumesConfigMapItemsArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecVolumesConfigMapOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesConfigMap) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its keys must be defined
func (o AlertmanagerSpecVolumesConfigMapOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesConfigMap) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type AlertmanagerSpecVolumesConfigMapPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesConfigMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesConfigMap)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesConfigMapPtrOutput) ToAlertmanagerSpecVolumesConfigMapPtrOutput() AlertmanagerSpecVolumesConfigMapPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesConfigMapPtrOutput) ToAlertmanagerSpecVolumesConfigMapPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesConfigMapPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesConfigMapPtrOutput) Elem() AlertmanagerSpecVolumesConfigMapOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesConfigMap) AlertmanagerSpecVolumesConfigMap { return *v }).(AlertmanagerSpecVolumesConfigMapOutput)
}

// Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o AlertmanagerSpecVolumesConfigMapPtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesConfigMap) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o AlertmanagerSpecVolumesConfigMapPtrOutput) Items() AlertmanagerSpecVolumesConfigMapItemsArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesConfigMap) []AlertmanagerSpecVolumesConfigMapItems {
		if v == nil {
			return nil
		}
		return v.Items
	}).(AlertmanagerSpecVolumesConfigMapItemsArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecVolumesConfigMapPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesConfigMap) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its keys must be defined
func (o AlertmanagerSpecVolumesConfigMapPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesConfigMap) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Maps a string key to a path within a volume.
type AlertmanagerSpecVolumesConfigMapItems struct {
	// The key to project.
	Key string `pulumi:"key"`
	// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path string `pulumi:"path"`
}

// AlertmanagerSpecVolumesConfigMapItemsInput is an input type that accepts AlertmanagerSpecVolumesConfigMapItemsArgs and AlertmanagerSpecVolumesConfigMapItemsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesConfigMapItemsInput` via:
//
//          AlertmanagerSpecVolumesConfigMapItemsArgs{...}
type AlertmanagerSpecVolumesConfigMapItemsInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesConfigMapItemsOutput() AlertmanagerSpecVolumesConfigMapItemsOutput
	ToAlertmanagerSpecVolumesConfigMapItemsOutputWithContext(context.Context) AlertmanagerSpecVolumesConfigMapItemsOutput
}

// Maps a string key to a path within a volume.
type AlertmanagerSpecVolumesConfigMapItemsArgs struct {
	// The key to project.
	Key pulumi.StringInput `pulumi:"key"`
	// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path pulumi.StringInput `pulumi:"path"`
}

func (AlertmanagerSpecVolumesConfigMapItemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesConfigMapItems)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesConfigMapItemsArgs) ToAlertmanagerSpecVolumesConfigMapItemsOutput() AlertmanagerSpecVolumesConfigMapItemsOutput {
	return i.ToAlertmanagerSpecVolumesConfigMapItemsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesConfigMapItemsArgs) ToAlertmanagerSpecVolumesConfigMapItemsOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesConfigMapItemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesConfigMapItemsOutput)
}

// AlertmanagerSpecVolumesConfigMapItemsArrayInput is an input type that accepts AlertmanagerSpecVolumesConfigMapItemsArray and AlertmanagerSpecVolumesConfigMapItemsArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesConfigMapItemsArrayInput` via:
//
//          AlertmanagerSpecVolumesConfigMapItemsArray{ AlertmanagerSpecVolumesConfigMapItemsArgs{...} }
type AlertmanagerSpecVolumesConfigMapItemsArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesConfigMapItemsArrayOutput() AlertmanagerSpecVolumesConfigMapItemsArrayOutput
	ToAlertmanagerSpecVolumesConfigMapItemsArrayOutputWithContext(context.Context) AlertmanagerSpecVolumesConfigMapItemsArrayOutput
}

type AlertmanagerSpecVolumesConfigMapItemsArray []AlertmanagerSpecVolumesConfigMapItemsInput

func (AlertmanagerSpecVolumesConfigMapItemsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecVolumesConfigMapItems)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesConfigMapItemsArray) ToAlertmanagerSpecVolumesConfigMapItemsArrayOutput() AlertmanagerSpecVolumesConfigMapItemsArrayOutput {
	return i.ToAlertmanagerSpecVolumesConfigMapItemsArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesConfigMapItemsArray) ToAlertmanagerSpecVolumesConfigMapItemsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesConfigMapItemsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesConfigMapItemsArrayOutput)
}

// Maps a string key to a path within a volume.
type AlertmanagerSpecVolumesConfigMapItemsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesConfigMapItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesConfigMapItems)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesConfigMapItemsOutput) ToAlertmanagerSpecVolumesConfigMapItemsOutput() AlertmanagerSpecVolumesConfigMapItemsOutput {
	return o
}

func (o AlertmanagerSpecVolumesConfigMapItemsOutput) ToAlertmanagerSpecVolumesConfigMapItemsOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesConfigMapItemsOutput {
	return o
}

// The key to project.
func (o AlertmanagerSpecVolumesConfigMapItemsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesConfigMapItems) string { return v.Key }).(pulumi.StringOutput)
}

// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o AlertmanagerSpecVolumesConfigMapItemsOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesConfigMapItems) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
func (o AlertmanagerSpecVolumesConfigMapItemsOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesConfigMapItems) string { return v.Path }).(pulumi.StringOutput)
}

type AlertmanagerSpecVolumesConfigMapItemsArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesConfigMapItemsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecVolumesConfigMapItems)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesConfigMapItemsArrayOutput) ToAlertmanagerSpecVolumesConfigMapItemsArrayOutput() AlertmanagerSpecVolumesConfigMapItemsArrayOutput {
	return o
}

func (o AlertmanagerSpecVolumesConfigMapItemsArrayOutput) ToAlertmanagerSpecVolumesConfigMapItemsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesConfigMapItemsArrayOutput {
	return o
}

func (o AlertmanagerSpecVolumesConfigMapItemsArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecVolumesConfigMapItemsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecVolumesConfigMapItems {
		return vs[0].([]AlertmanagerSpecVolumesConfigMapItems)[vs[1].(int)]
	}).(AlertmanagerSpecVolumesConfigMapItemsOutput)
}

// CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).
type AlertmanagerSpecVolumesCsi struct {
	// Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
	Driver string `pulumi:"driver"`
	// Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
	FsType *string `pulumi:"fsType"`
	// NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
	NodePublishSecretRef *AlertmanagerSpecVolumesCsiNodePublishSecretRef `pulumi:"nodePublishSecretRef"`
	// Specifies a read-only configuration for the volume. Defaults to false (read/write).
	ReadOnly *bool `pulumi:"readOnly"`
	// VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
	VolumeAttributes map[string]string `pulumi:"volumeAttributes"`
}

// AlertmanagerSpecVolumesCsiInput is an input type that accepts AlertmanagerSpecVolumesCsiArgs and AlertmanagerSpecVolumesCsiOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesCsiInput` via:
//
//          AlertmanagerSpecVolumesCsiArgs{...}
type AlertmanagerSpecVolumesCsiInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesCsiOutput() AlertmanagerSpecVolumesCsiOutput
	ToAlertmanagerSpecVolumesCsiOutputWithContext(context.Context) AlertmanagerSpecVolumesCsiOutput
}

// CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).
type AlertmanagerSpecVolumesCsiArgs struct {
	// Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
	Driver pulumi.StringInput `pulumi:"driver"`
	// Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
	NodePublishSecretRef AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrInput `pulumi:"nodePublishSecretRef"`
	// Specifies a read-only configuration for the volume. Defaults to false (read/write).
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
	VolumeAttributes pulumi.StringMapInput `pulumi:"volumeAttributes"`
}

func (AlertmanagerSpecVolumesCsiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesCsi)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesCsiArgs) ToAlertmanagerSpecVolumesCsiOutput() AlertmanagerSpecVolumesCsiOutput {
	return i.ToAlertmanagerSpecVolumesCsiOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesCsiArgs) ToAlertmanagerSpecVolumesCsiOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCsiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesCsiOutput)
}

func (i AlertmanagerSpecVolumesCsiArgs) ToAlertmanagerSpecVolumesCsiPtrOutput() AlertmanagerSpecVolumesCsiPtrOutput {
	return i.ToAlertmanagerSpecVolumesCsiPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesCsiArgs) ToAlertmanagerSpecVolumesCsiPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCsiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesCsiOutput).ToAlertmanagerSpecVolumesCsiPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesCsiPtrInput is an input type that accepts AlertmanagerSpecVolumesCsiArgs, AlertmanagerSpecVolumesCsiPtr and AlertmanagerSpecVolumesCsiPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesCsiPtrInput` via:
//
//          AlertmanagerSpecVolumesCsiArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesCsiPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesCsiPtrOutput() AlertmanagerSpecVolumesCsiPtrOutput
	ToAlertmanagerSpecVolumesCsiPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesCsiPtrOutput
}

type alertmanagerSpecVolumesCsiPtrType AlertmanagerSpecVolumesCsiArgs

func AlertmanagerSpecVolumesCsiPtr(v *AlertmanagerSpecVolumesCsiArgs) AlertmanagerSpecVolumesCsiPtrInput {
	return (*alertmanagerSpecVolumesCsiPtrType)(v)
}

func (*alertmanagerSpecVolumesCsiPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesCsi)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesCsiPtrType) ToAlertmanagerSpecVolumesCsiPtrOutput() AlertmanagerSpecVolumesCsiPtrOutput {
	return i.ToAlertmanagerSpecVolumesCsiPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesCsiPtrType) ToAlertmanagerSpecVolumesCsiPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCsiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesCsiPtrOutput)
}

// CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).
type AlertmanagerSpecVolumesCsiOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesCsiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesCsi)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesCsiOutput) ToAlertmanagerSpecVolumesCsiOutput() AlertmanagerSpecVolumesCsiOutput {
	return o
}

func (o AlertmanagerSpecVolumesCsiOutput) ToAlertmanagerSpecVolumesCsiOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCsiOutput {
	return o
}

func (o AlertmanagerSpecVolumesCsiOutput) ToAlertmanagerSpecVolumesCsiPtrOutput() AlertmanagerSpecVolumesCsiPtrOutput {
	return o.ToAlertmanagerSpecVolumesCsiPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesCsiOutput) ToAlertmanagerSpecVolumesCsiPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCsiPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesCsi) *AlertmanagerSpecVolumesCsi {
		return &v
	}).(AlertmanagerSpecVolumesCsiPtrOutput)
}

// Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
func (o AlertmanagerSpecVolumesCsiOutput) Driver() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesCsi) string { return v.Driver }).(pulumi.StringOutput)
}

// Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
func (o AlertmanagerSpecVolumesCsiOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesCsi) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
func (o AlertmanagerSpecVolumesCsiOutput) NodePublishSecretRef() AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesCsi) *AlertmanagerSpecVolumesCsiNodePublishSecretRef {
		return v.NodePublishSecretRef
	}).(AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput)
}

// Specifies a read-only configuration for the volume. Defaults to false (read/write).
func (o AlertmanagerSpecVolumesCsiOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesCsi) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
func (o AlertmanagerSpecVolumesCsiOutput) VolumeAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesCsi) map[string]string { return v.VolumeAttributes }).(pulumi.StringMapOutput)
}

type AlertmanagerSpecVolumesCsiPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesCsiPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesCsi)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesCsiPtrOutput) ToAlertmanagerSpecVolumesCsiPtrOutput() AlertmanagerSpecVolumesCsiPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesCsiPtrOutput) ToAlertmanagerSpecVolumesCsiPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCsiPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesCsiPtrOutput) Elem() AlertmanagerSpecVolumesCsiOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesCsi) AlertmanagerSpecVolumesCsi { return *v }).(AlertmanagerSpecVolumesCsiOutput)
}

// Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
func (o AlertmanagerSpecVolumesCsiPtrOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesCsi) *string {
		if v == nil {
			return nil
		}
		return &v.Driver
	}).(pulumi.StringPtrOutput)
}

// Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
func (o AlertmanagerSpecVolumesCsiPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesCsi) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
func (o AlertmanagerSpecVolumesCsiPtrOutput) NodePublishSecretRef() AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesCsi) *AlertmanagerSpecVolumesCsiNodePublishSecretRef {
		if v == nil {
			return nil
		}
		return v.NodePublishSecretRef
	}).(AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput)
}

// Specifies a read-only configuration for the volume. Defaults to false (read/write).
func (o AlertmanagerSpecVolumesCsiPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesCsi) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
func (o AlertmanagerSpecVolumesCsiPtrOutput) VolumeAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesCsi) map[string]string {
		if v == nil {
			return nil
		}
		return v.VolumeAttributes
	}).(pulumi.StringMapOutput)
}

// NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
type AlertmanagerSpecVolumesCsiNodePublishSecretRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
}

// AlertmanagerSpecVolumesCsiNodePublishSecretRefInput is an input type that accepts AlertmanagerSpecVolumesCsiNodePublishSecretRefArgs and AlertmanagerSpecVolumesCsiNodePublishSecretRefOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesCsiNodePublishSecretRefInput` via:
//
//          AlertmanagerSpecVolumesCsiNodePublishSecretRefArgs{...}
type AlertmanagerSpecVolumesCsiNodePublishSecretRefInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesCsiNodePublishSecretRefOutput() AlertmanagerSpecVolumesCsiNodePublishSecretRefOutput
	ToAlertmanagerSpecVolumesCsiNodePublishSecretRefOutputWithContext(context.Context) AlertmanagerSpecVolumesCsiNodePublishSecretRefOutput
}

// NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
type AlertmanagerSpecVolumesCsiNodePublishSecretRefArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (AlertmanagerSpecVolumesCsiNodePublishSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesCsiNodePublishSecretRef)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesCsiNodePublishSecretRefArgs) ToAlertmanagerSpecVolumesCsiNodePublishSecretRefOutput() AlertmanagerSpecVolumesCsiNodePublishSecretRefOutput {
	return i.ToAlertmanagerSpecVolumesCsiNodePublishSecretRefOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesCsiNodePublishSecretRefArgs) ToAlertmanagerSpecVolumesCsiNodePublishSecretRefOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCsiNodePublishSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesCsiNodePublishSecretRefOutput)
}

func (i AlertmanagerSpecVolumesCsiNodePublishSecretRefArgs) ToAlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput() AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput {
	return i.ToAlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesCsiNodePublishSecretRefArgs) ToAlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesCsiNodePublishSecretRefOutput).ToAlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrInput is an input type that accepts AlertmanagerSpecVolumesCsiNodePublishSecretRefArgs, AlertmanagerSpecVolumesCsiNodePublishSecretRefPtr and AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrInput` via:
//
//          AlertmanagerSpecVolumesCsiNodePublishSecretRefArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput() AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput
	ToAlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput
}

type alertmanagerSpecVolumesCsiNodePublishSecretRefPtrType AlertmanagerSpecVolumesCsiNodePublishSecretRefArgs

func AlertmanagerSpecVolumesCsiNodePublishSecretRefPtr(v *AlertmanagerSpecVolumesCsiNodePublishSecretRefArgs) AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrInput {
	return (*alertmanagerSpecVolumesCsiNodePublishSecretRefPtrType)(v)
}

func (*alertmanagerSpecVolumesCsiNodePublishSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesCsiNodePublishSecretRef)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesCsiNodePublishSecretRefPtrType) ToAlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput() AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput {
	return i.ToAlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesCsiNodePublishSecretRefPtrType) ToAlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput)
}

// NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
type AlertmanagerSpecVolumesCsiNodePublishSecretRefOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesCsiNodePublishSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesCsiNodePublishSecretRef)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesCsiNodePublishSecretRefOutput) ToAlertmanagerSpecVolumesCsiNodePublishSecretRefOutput() AlertmanagerSpecVolumesCsiNodePublishSecretRefOutput {
	return o
}

func (o AlertmanagerSpecVolumesCsiNodePublishSecretRefOutput) ToAlertmanagerSpecVolumesCsiNodePublishSecretRefOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCsiNodePublishSecretRefOutput {
	return o
}

func (o AlertmanagerSpecVolumesCsiNodePublishSecretRefOutput) ToAlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput() AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput {
	return o.ToAlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesCsiNodePublishSecretRefOutput) ToAlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesCsiNodePublishSecretRef) *AlertmanagerSpecVolumesCsiNodePublishSecretRef {
		return &v
	}).(AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecVolumesCsiNodePublishSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesCsiNodePublishSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesCsiNodePublishSecretRef)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput) ToAlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput() AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput) ToAlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput) Elem() AlertmanagerSpecVolumesCsiNodePublishSecretRefOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesCsiNodePublishSecretRef) AlertmanagerSpecVolumesCsiNodePublishSecretRef {
		return *v
	}).(AlertmanagerSpecVolumesCsiNodePublishSecretRefOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesCsiNodePublishSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
type AlertmanagerSpecVolumesCsiVolumeAttributes struct {
}

// AlertmanagerSpecVolumesCsiVolumeAttributesInput is an input type that accepts AlertmanagerSpecVolumesCsiVolumeAttributesArgs and AlertmanagerSpecVolumesCsiVolumeAttributesOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesCsiVolumeAttributesInput` via:
//
//          AlertmanagerSpecVolumesCsiVolumeAttributesArgs{...}
type AlertmanagerSpecVolumesCsiVolumeAttributesInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesCsiVolumeAttributesOutput() AlertmanagerSpecVolumesCsiVolumeAttributesOutput
	ToAlertmanagerSpecVolumesCsiVolumeAttributesOutputWithContext(context.Context) AlertmanagerSpecVolumesCsiVolumeAttributesOutput
}

// VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
type AlertmanagerSpecVolumesCsiVolumeAttributesArgs struct {
}

func (AlertmanagerSpecVolumesCsiVolumeAttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesCsiVolumeAttributes)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesCsiVolumeAttributesArgs) ToAlertmanagerSpecVolumesCsiVolumeAttributesOutput() AlertmanagerSpecVolumesCsiVolumeAttributesOutput {
	return i.ToAlertmanagerSpecVolumesCsiVolumeAttributesOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesCsiVolumeAttributesArgs) ToAlertmanagerSpecVolumesCsiVolumeAttributesOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCsiVolumeAttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesCsiVolumeAttributesOutput)
}

// VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
type AlertmanagerSpecVolumesCsiVolumeAttributesOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesCsiVolumeAttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesCsiVolumeAttributes)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesCsiVolumeAttributesOutput) ToAlertmanagerSpecVolumesCsiVolumeAttributesOutput() AlertmanagerSpecVolumesCsiVolumeAttributesOutput {
	return o
}

func (o AlertmanagerSpecVolumesCsiVolumeAttributesOutput) ToAlertmanagerSpecVolumesCsiVolumeAttributesOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesCsiVolumeAttributesOutput {
	return o
}

// DownwardAPI represents downward API about the pod that should populate this volume
type AlertmanagerSpecVolumesDownwardAPI struct {
	// Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// Items is a list of downward API volume file
	Items []AlertmanagerSpecVolumesDownwardAPIItems `pulumi:"items"`
}

// AlertmanagerSpecVolumesDownwardAPIInput is an input type that accepts AlertmanagerSpecVolumesDownwardAPIArgs and AlertmanagerSpecVolumesDownwardAPIOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesDownwardAPIInput` via:
//
//          AlertmanagerSpecVolumesDownwardAPIArgs{...}
type AlertmanagerSpecVolumesDownwardAPIInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesDownwardAPIOutput() AlertmanagerSpecVolumesDownwardAPIOutput
	ToAlertmanagerSpecVolumesDownwardAPIOutputWithContext(context.Context) AlertmanagerSpecVolumesDownwardAPIOutput
}

// DownwardAPI represents downward API about the pod that should populate this volume
type AlertmanagerSpecVolumesDownwardAPIArgs struct {
	// Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// Items is a list of downward API volume file
	Items AlertmanagerSpecVolumesDownwardAPIItemsArrayInput `pulumi:"items"`
}

func (AlertmanagerSpecVolumesDownwardAPIArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesDownwardAPI)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesDownwardAPIArgs) ToAlertmanagerSpecVolumesDownwardAPIOutput() AlertmanagerSpecVolumesDownwardAPIOutput {
	return i.ToAlertmanagerSpecVolumesDownwardAPIOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesDownwardAPIArgs) ToAlertmanagerSpecVolumesDownwardAPIOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesDownwardAPIOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesDownwardAPIOutput)
}

func (i AlertmanagerSpecVolumesDownwardAPIArgs) ToAlertmanagerSpecVolumesDownwardAPIPtrOutput() AlertmanagerSpecVolumesDownwardAPIPtrOutput {
	return i.ToAlertmanagerSpecVolumesDownwardAPIPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesDownwardAPIArgs) ToAlertmanagerSpecVolumesDownwardAPIPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesDownwardAPIPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesDownwardAPIOutput).ToAlertmanagerSpecVolumesDownwardAPIPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesDownwardAPIPtrInput is an input type that accepts AlertmanagerSpecVolumesDownwardAPIArgs, AlertmanagerSpecVolumesDownwardAPIPtr and AlertmanagerSpecVolumesDownwardAPIPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesDownwardAPIPtrInput` via:
//
//          AlertmanagerSpecVolumesDownwardAPIArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesDownwardAPIPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesDownwardAPIPtrOutput() AlertmanagerSpecVolumesDownwardAPIPtrOutput
	ToAlertmanagerSpecVolumesDownwardAPIPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesDownwardAPIPtrOutput
}

type alertmanagerSpecVolumesDownwardAPIPtrType AlertmanagerSpecVolumesDownwardAPIArgs

func AlertmanagerSpecVolumesDownwardAPIPtr(v *AlertmanagerSpecVolumesDownwardAPIArgs) AlertmanagerSpecVolumesDownwardAPIPtrInput {
	return (*alertmanagerSpecVolumesDownwardAPIPtrType)(v)
}

func (*alertmanagerSpecVolumesDownwardAPIPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesDownwardAPI)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesDownwardAPIPtrType) ToAlertmanagerSpecVolumesDownwardAPIPtrOutput() AlertmanagerSpecVolumesDownwardAPIPtrOutput {
	return i.ToAlertmanagerSpecVolumesDownwardAPIPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesDownwardAPIPtrType) ToAlertmanagerSpecVolumesDownwardAPIPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesDownwardAPIPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesDownwardAPIPtrOutput)
}

// DownwardAPI represents downward API about the pod that should populate this volume
type AlertmanagerSpecVolumesDownwardAPIOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesDownwardAPIOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesDownwardAPI)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesDownwardAPIOutput) ToAlertmanagerSpecVolumesDownwardAPIOutput() AlertmanagerSpecVolumesDownwardAPIOutput {
	return o
}

func (o AlertmanagerSpecVolumesDownwardAPIOutput) ToAlertmanagerSpecVolumesDownwardAPIOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesDownwardAPIOutput {
	return o
}

func (o AlertmanagerSpecVolumesDownwardAPIOutput) ToAlertmanagerSpecVolumesDownwardAPIPtrOutput() AlertmanagerSpecVolumesDownwardAPIPtrOutput {
	return o.ToAlertmanagerSpecVolumesDownwardAPIPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesDownwardAPIOutput) ToAlertmanagerSpecVolumesDownwardAPIPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesDownwardAPIPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesDownwardAPI) *AlertmanagerSpecVolumesDownwardAPI {
		return &v
	}).(AlertmanagerSpecVolumesDownwardAPIPtrOutput)
}

// Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o AlertmanagerSpecVolumesDownwardAPIOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesDownwardAPI) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// Items is a list of downward API volume file
func (o AlertmanagerSpecVolumesDownwardAPIOutput) Items() AlertmanagerSpecVolumesDownwardAPIItemsArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesDownwardAPI) []AlertmanagerSpecVolumesDownwardAPIItems { return v.Items }).(AlertmanagerSpecVolumesDownwardAPIItemsArrayOutput)
}

type AlertmanagerSpecVolumesDownwardAPIPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesDownwardAPIPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesDownwardAPI)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesDownwardAPIPtrOutput) ToAlertmanagerSpecVolumesDownwardAPIPtrOutput() AlertmanagerSpecVolumesDownwardAPIPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesDownwardAPIPtrOutput) ToAlertmanagerSpecVolumesDownwardAPIPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesDownwardAPIPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesDownwardAPIPtrOutput) Elem() AlertmanagerSpecVolumesDownwardAPIOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesDownwardAPI) AlertmanagerSpecVolumesDownwardAPI { return *v }).(AlertmanagerSpecVolumesDownwardAPIOutput)
}

// Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o AlertmanagerSpecVolumesDownwardAPIPtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesDownwardAPI) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// Items is a list of downward API volume file
func (o AlertmanagerSpecVolumesDownwardAPIPtrOutput) Items() AlertmanagerSpecVolumesDownwardAPIItemsArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesDownwardAPI) []AlertmanagerSpecVolumesDownwardAPIItems {
		if v == nil {
			return nil
		}
		return v.Items
	}).(AlertmanagerSpecVolumesDownwardAPIItemsArrayOutput)
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type AlertmanagerSpecVolumesDownwardAPIItems struct {
	// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
	FieldRef *AlertmanagerSpecVolumesDownwardAPIItemsFieldRef `pulumi:"fieldRef"`
	// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path string `pulumi:"path"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
	ResourceFieldRef *AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRef `pulumi:"resourceFieldRef"`
}

// AlertmanagerSpecVolumesDownwardAPIItemsInput is an input type that accepts AlertmanagerSpecVolumesDownwardAPIItemsArgs and AlertmanagerSpecVolumesDownwardAPIItemsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesDownwardAPIItemsInput` via:
//
//          AlertmanagerSpecVolumesDownwardAPIItemsArgs{...}
type AlertmanagerSpecVolumesDownwardAPIItemsInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesDownwardAPIItemsOutput() AlertmanagerSpecVolumesDownwardAPIItemsOutput
	ToAlertmanagerSpecVolumesDownwardAPIItemsOutputWithContext(context.Context) AlertmanagerSpecVolumesDownwardAPIItemsOutput
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type AlertmanagerSpecVolumesDownwardAPIItemsArgs struct {
	// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
	FieldRef AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrInput `pulumi:"fieldRef"`
	// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path pulumi.StringInput `pulumi:"path"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
	ResourceFieldRef AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
}

func (AlertmanagerSpecVolumesDownwardAPIItemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesDownwardAPIItems)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesDownwardAPIItemsArgs) ToAlertmanagerSpecVolumesDownwardAPIItemsOutput() AlertmanagerSpecVolumesDownwardAPIItemsOutput {
	return i.ToAlertmanagerSpecVolumesDownwardAPIItemsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesDownwardAPIItemsArgs) ToAlertmanagerSpecVolumesDownwardAPIItemsOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesDownwardAPIItemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesDownwardAPIItemsOutput)
}

// AlertmanagerSpecVolumesDownwardAPIItemsArrayInput is an input type that accepts AlertmanagerSpecVolumesDownwardAPIItemsArray and AlertmanagerSpecVolumesDownwardAPIItemsArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesDownwardAPIItemsArrayInput` via:
//
//          AlertmanagerSpecVolumesDownwardAPIItemsArray{ AlertmanagerSpecVolumesDownwardAPIItemsArgs{...} }
type AlertmanagerSpecVolumesDownwardAPIItemsArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesDownwardAPIItemsArrayOutput() AlertmanagerSpecVolumesDownwardAPIItemsArrayOutput
	ToAlertmanagerSpecVolumesDownwardAPIItemsArrayOutputWithContext(context.Context) AlertmanagerSpecVolumesDownwardAPIItemsArrayOutput
}

type AlertmanagerSpecVolumesDownwardAPIItemsArray []AlertmanagerSpecVolumesDownwardAPIItemsInput

func (AlertmanagerSpecVolumesDownwardAPIItemsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecVolumesDownwardAPIItems)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesDownwardAPIItemsArray) ToAlertmanagerSpecVolumesDownwardAPIItemsArrayOutput() AlertmanagerSpecVolumesDownwardAPIItemsArrayOutput {
	return i.ToAlertmanagerSpecVolumesDownwardAPIItemsArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesDownwardAPIItemsArray) ToAlertmanagerSpecVolumesDownwardAPIItemsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesDownwardAPIItemsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesDownwardAPIItemsArrayOutput)
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type AlertmanagerSpecVolumesDownwardAPIItemsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesDownwardAPIItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesDownwardAPIItems)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesDownwardAPIItemsOutput) ToAlertmanagerSpecVolumesDownwardAPIItemsOutput() AlertmanagerSpecVolumesDownwardAPIItemsOutput {
	return o
}

func (o AlertmanagerSpecVolumesDownwardAPIItemsOutput) ToAlertmanagerSpecVolumesDownwardAPIItemsOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesDownwardAPIItemsOutput {
	return o
}

// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
func (o AlertmanagerSpecVolumesDownwardAPIItemsOutput) FieldRef() AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesDownwardAPIItems) *AlertmanagerSpecVolumesDownwardAPIItemsFieldRef {
		return v.FieldRef
	}).(AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput)
}

// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o AlertmanagerSpecVolumesDownwardAPIItemsOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesDownwardAPIItems) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
func (o AlertmanagerSpecVolumesDownwardAPIItemsOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesDownwardAPIItems) string { return v.Path }).(pulumi.StringOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
func (o AlertmanagerSpecVolumesDownwardAPIItemsOutput) ResourceFieldRef() AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesDownwardAPIItems) *AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRef {
		return v.ResourceFieldRef
	}).(AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput)
}

type AlertmanagerSpecVolumesDownwardAPIItemsArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesDownwardAPIItemsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecVolumesDownwardAPIItems)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesDownwardAPIItemsArrayOutput) ToAlertmanagerSpecVolumesDownwardAPIItemsArrayOutput() AlertmanagerSpecVolumesDownwardAPIItemsArrayOutput {
	return o
}

func (o AlertmanagerSpecVolumesDownwardAPIItemsArrayOutput) ToAlertmanagerSpecVolumesDownwardAPIItemsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesDownwardAPIItemsArrayOutput {
	return o
}

func (o AlertmanagerSpecVolumesDownwardAPIItemsArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecVolumesDownwardAPIItemsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecVolumesDownwardAPIItems {
		return vs[0].([]AlertmanagerSpecVolumesDownwardAPIItems)[vs[1].(int)]
	}).(AlertmanagerSpecVolumesDownwardAPIItemsOutput)
}

// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
type AlertmanagerSpecVolumesDownwardAPIItemsFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// AlertmanagerSpecVolumesDownwardAPIItemsFieldRefInput is an input type that accepts AlertmanagerSpecVolumesDownwardAPIItemsFieldRefArgs and AlertmanagerSpecVolumesDownwardAPIItemsFieldRefOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesDownwardAPIItemsFieldRefInput` via:
//
//          AlertmanagerSpecVolumesDownwardAPIItemsFieldRefArgs{...}
type AlertmanagerSpecVolumesDownwardAPIItemsFieldRefInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesDownwardAPIItemsFieldRefOutput() AlertmanagerSpecVolumesDownwardAPIItemsFieldRefOutput
	ToAlertmanagerSpecVolumesDownwardAPIItemsFieldRefOutputWithContext(context.Context) AlertmanagerSpecVolumesDownwardAPIItemsFieldRefOutput
}

// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
type AlertmanagerSpecVolumesDownwardAPIItemsFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (AlertmanagerSpecVolumesDownwardAPIItemsFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesDownwardAPIItemsFieldRef)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesDownwardAPIItemsFieldRefArgs) ToAlertmanagerSpecVolumesDownwardAPIItemsFieldRefOutput() AlertmanagerSpecVolumesDownwardAPIItemsFieldRefOutput {
	return i.ToAlertmanagerSpecVolumesDownwardAPIItemsFieldRefOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesDownwardAPIItemsFieldRefArgs) ToAlertmanagerSpecVolumesDownwardAPIItemsFieldRefOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesDownwardAPIItemsFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesDownwardAPIItemsFieldRefOutput)
}

func (i AlertmanagerSpecVolumesDownwardAPIItemsFieldRefArgs) ToAlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput() AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput {
	return i.ToAlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesDownwardAPIItemsFieldRefArgs) ToAlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesDownwardAPIItemsFieldRefOutput).ToAlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrInput is an input type that accepts AlertmanagerSpecVolumesDownwardAPIItemsFieldRefArgs, AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtr and AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrInput` via:
//
//          AlertmanagerSpecVolumesDownwardAPIItemsFieldRefArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput() AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput
	ToAlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput
}

type alertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrType AlertmanagerSpecVolumesDownwardAPIItemsFieldRefArgs

func AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtr(v *AlertmanagerSpecVolumesDownwardAPIItemsFieldRefArgs) AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrInput {
	return (*alertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrType)(v)
}

func (*alertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesDownwardAPIItemsFieldRef)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrType) ToAlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput() AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput {
	return i.ToAlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrType) ToAlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput)
}

// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
type AlertmanagerSpecVolumesDownwardAPIItemsFieldRefOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesDownwardAPIItemsFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesDownwardAPIItemsFieldRef)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesDownwardAPIItemsFieldRefOutput) ToAlertmanagerSpecVolumesDownwardAPIItemsFieldRefOutput() AlertmanagerSpecVolumesDownwardAPIItemsFieldRefOutput {
	return o
}

func (o AlertmanagerSpecVolumesDownwardAPIItemsFieldRefOutput) ToAlertmanagerSpecVolumesDownwardAPIItemsFieldRefOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesDownwardAPIItemsFieldRefOutput {
	return o
}

func (o AlertmanagerSpecVolumesDownwardAPIItemsFieldRefOutput) ToAlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput() AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput {
	return o.ToAlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesDownwardAPIItemsFieldRefOutput) ToAlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesDownwardAPIItemsFieldRef) *AlertmanagerSpecVolumesDownwardAPIItemsFieldRef {
		return &v
	}).(AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o AlertmanagerSpecVolumesDownwardAPIItemsFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesDownwardAPIItemsFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o AlertmanagerSpecVolumesDownwardAPIItemsFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesDownwardAPIItemsFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesDownwardAPIItemsFieldRef)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput) ToAlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput() AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput) ToAlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput) Elem() AlertmanagerSpecVolumesDownwardAPIItemsFieldRefOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesDownwardAPIItemsFieldRef) AlertmanagerSpecVolumesDownwardAPIItemsFieldRef {
		return *v
	}).(AlertmanagerSpecVolumesDownwardAPIItemsFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesDownwardAPIItemsFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesDownwardAPIItemsFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *string `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefInput is an input type that accepts AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefArgs and AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefInput` via:
//
//          AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefArgs{...}
type AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutput() AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutput
	ToAlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutputWithContext(context.Context) AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.StringPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRef)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefArgs) ToAlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutput() AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutput {
	return i.ToAlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefArgs) ToAlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutput)
}

func (i AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefArgs) ToAlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput() AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput {
	return i.ToAlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefArgs) ToAlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutput).ToAlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrInput is an input type that accepts AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefArgs, AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtr and AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrInput` via:
//
//          AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput() AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput
	ToAlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput
}

type alertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrType AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefArgs

func AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtr(v *AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefArgs) AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrInput {
	return (*alertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrType)(v)
}

func (*alertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRef)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrType) ToAlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput() AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput {
	return i.ToAlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrType) ToAlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRef)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutput) ToAlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutput() AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutput {
	return o
}

func (o AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutput) ToAlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutput {
	return o
}

func (o AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutput) ToAlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput() AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput {
	return o.ToAlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutput) ToAlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRef) *AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRef {
		return &v
	}).(AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRef) *string { return v.Divisor }).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRef)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput) ToAlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput() AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput) ToAlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput) Elem() AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRef) AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRef {
		return *v
	}).(AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
type AlertmanagerSpecVolumesEmptyDir struct {
	// What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	Medium *string `pulumi:"medium"`
	// Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
	SizeLimit *string `pulumi:"sizeLimit"`
}

// AlertmanagerSpecVolumesEmptyDirInput is an input type that accepts AlertmanagerSpecVolumesEmptyDirArgs and AlertmanagerSpecVolumesEmptyDirOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesEmptyDirInput` via:
//
//          AlertmanagerSpecVolumesEmptyDirArgs{...}
type AlertmanagerSpecVolumesEmptyDirInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesEmptyDirOutput() AlertmanagerSpecVolumesEmptyDirOutput
	ToAlertmanagerSpecVolumesEmptyDirOutputWithContext(context.Context) AlertmanagerSpecVolumesEmptyDirOutput
}

// EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
type AlertmanagerSpecVolumesEmptyDirArgs struct {
	// What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	Medium pulumi.StringPtrInput `pulumi:"medium"`
	// Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
	SizeLimit pulumi.StringPtrInput `pulumi:"sizeLimit"`
}

func (AlertmanagerSpecVolumesEmptyDirArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesEmptyDir)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesEmptyDirArgs) ToAlertmanagerSpecVolumesEmptyDirOutput() AlertmanagerSpecVolumesEmptyDirOutput {
	return i.ToAlertmanagerSpecVolumesEmptyDirOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesEmptyDirArgs) ToAlertmanagerSpecVolumesEmptyDirOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesEmptyDirOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesEmptyDirOutput)
}

func (i AlertmanagerSpecVolumesEmptyDirArgs) ToAlertmanagerSpecVolumesEmptyDirPtrOutput() AlertmanagerSpecVolumesEmptyDirPtrOutput {
	return i.ToAlertmanagerSpecVolumesEmptyDirPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesEmptyDirArgs) ToAlertmanagerSpecVolumesEmptyDirPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesEmptyDirPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesEmptyDirOutput).ToAlertmanagerSpecVolumesEmptyDirPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesEmptyDirPtrInput is an input type that accepts AlertmanagerSpecVolumesEmptyDirArgs, AlertmanagerSpecVolumesEmptyDirPtr and AlertmanagerSpecVolumesEmptyDirPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesEmptyDirPtrInput` via:
//
//          AlertmanagerSpecVolumesEmptyDirArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesEmptyDirPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesEmptyDirPtrOutput() AlertmanagerSpecVolumesEmptyDirPtrOutput
	ToAlertmanagerSpecVolumesEmptyDirPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesEmptyDirPtrOutput
}

type alertmanagerSpecVolumesEmptyDirPtrType AlertmanagerSpecVolumesEmptyDirArgs

func AlertmanagerSpecVolumesEmptyDirPtr(v *AlertmanagerSpecVolumesEmptyDirArgs) AlertmanagerSpecVolumesEmptyDirPtrInput {
	return (*alertmanagerSpecVolumesEmptyDirPtrType)(v)
}

func (*alertmanagerSpecVolumesEmptyDirPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesEmptyDir)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesEmptyDirPtrType) ToAlertmanagerSpecVolumesEmptyDirPtrOutput() AlertmanagerSpecVolumesEmptyDirPtrOutput {
	return i.ToAlertmanagerSpecVolumesEmptyDirPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesEmptyDirPtrType) ToAlertmanagerSpecVolumesEmptyDirPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesEmptyDirPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesEmptyDirPtrOutput)
}

// EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
type AlertmanagerSpecVolumesEmptyDirOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesEmptyDirOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesEmptyDir)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesEmptyDirOutput) ToAlertmanagerSpecVolumesEmptyDirOutput() AlertmanagerSpecVolumesEmptyDirOutput {
	return o
}

func (o AlertmanagerSpecVolumesEmptyDirOutput) ToAlertmanagerSpecVolumesEmptyDirOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesEmptyDirOutput {
	return o
}

func (o AlertmanagerSpecVolumesEmptyDirOutput) ToAlertmanagerSpecVolumesEmptyDirPtrOutput() AlertmanagerSpecVolumesEmptyDirPtrOutput {
	return o.ToAlertmanagerSpecVolumesEmptyDirPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesEmptyDirOutput) ToAlertmanagerSpecVolumesEmptyDirPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesEmptyDirPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesEmptyDir) *AlertmanagerSpecVolumesEmptyDir {
		return &v
	}).(AlertmanagerSpecVolumesEmptyDirPtrOutput)
}

// What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o AlertmanagerSpecVolumesEmptyDirOutput) Medium() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesEmptyDir) *string { return v.Medium }).(pulumi.StringPtrOutput)
}

// Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
func (o AlertmanagerSpecVolumesEmptyDirOutput) SizeLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesEmptyDir) *string { return v.SizeLimit }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecVolumesEmptyDirPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesEmptyDirPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesEmptyDir)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesEmptyDirPtrOutput) ToAlertmanagerSpecVolumesEmptyDirPtrOutput() AlertmanagerSpecVolumesEmptyDirPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesEmptyDirPtrOutput) ToAlertmanagerSpecVolumesEmptyDirPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesEmptyDirPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesEmptyDirPtrOutput) Elem() AlertmanagerSpecVolumesEmptyDirOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesEmptyDir) AlertmanagerSpecVolumesEmptyDir { return *v }).(AlertmanagerSpecVolumesEmptyDirOutput)
}

// What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o AlertmanagerSpecVolumesEmptyDirPtrOutput) Medium() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesEmptyDir) *string {
		if v == nil {
			return nil
		}
		return v.Medium
	}).(pulumi.StringPtrOutput)
}

// Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
func (o AlertmanagerSpecVolumesEmptyDirPtrOutput) SizeLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesEmptyDir) *string {
		if v == nil {
			return nil
		}
		return v.SizeLimit
	}).(pulumi.StringPtrOutput)
}

// FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
type AlertmanagerSpecVolumesFc struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType *string `pulumi:"fsType"`
	// Optional: FC target lun number
	Lun *int `pulumi:"lun"`
	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// Optional: FC target worldwide names (WWNs)
	TargetWWNs []string `pulumi:"targetWWNs"`
	// Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
	Wwids []string `pulumi:"wwids"`
}

// AlertmanagerSpecVolumesFcInput is an input type that accepts AlertmanagerSpecVolumesFcArgs and AlertmanagerSpecVolumesFcOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesFcInput` via:
//
//          AlertmanagerSpecVolumesFcArgs{...}
type AlertmanagerSpecVolumesFcInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesFcOutput() AlertmanagerSpecVolumesFcOutput
	ToAlertmanagerSpecVolumesFcOutputWithContext(context.Context) AlertmanagerSpecVolumesFcOutput
}

// FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
type AlertmanagerSpecVolumesFcArgs struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// Optional: FC target lun number
	Lun pulumi.IntPtrInput `pulumi:"lun"`
	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// Optional: FC target worldwide names (WWNs)
	TargetWWNs pulumi.StringArrayInput `pulumi:"targetWWNs"`
	// Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
	Wwids pulumi.StringArrayInput `pulumi:"wwids"`
}

func (AlertmanagerSpecVolumesFcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesFc)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesFcArgs) ToAlertmanagerSpecVolumesFcOutput() AlertmanagerSpecVolumesFcOutput {
	return i.ToAlertmanagerSpecVolumesFcOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesFcArgs) ToAlertmanagerSpecVolumesFcOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesFcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesFcOutput)
}

func (i AlertmanagerSpecVolumesFcArgs) ToAlertmanagerSpecVolumesFcPtrOutput() AlertmanagerSpecVolumesFcPtrOutput {
	return i.ToAlertmanagerSpecVolumesFcPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesFcArgs) ToAlertmanagerSpecVolumesFcPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesFcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesFcOutput).ToAlertmanagerSpecVolumesFcPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesFcPtrInput is an input type that accepts AlertmanagerSpecVolumesFcArgs, AlertmanagerSpecVolumesFcPtr and AlertmanagerSpecVolumesFcPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesFcPtrInput` via:
//
//          AlertmanagerSpecVolumesFcArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesFcPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesFcPtrOutput() AlertmanagerSpecVolumesFcPtrOutput
	ToAlertmanagerSpecVolumesFcPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesFcPtrOutput
}

type alertmanagerSpecVolumesFcPtrType AlertmanagerSpecVolumesFcArgs

func AlertmanagerSpecVolumesFcPtr(v *AlertmanagerSpecVolumesFcArgs) AlertmanagerSpecVolumesFcPtrInput {
	return (*alertmanagerSpecVolumesFcPtrType)(v)
}

func (*alertmanagerSpecVolumesFcPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesFc)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesFcPtrType) ToAlertmanagerSpecVolumesFcPtrOutput() AlertmanagerSpecVolumesFcPtrOutput {
	return i.ToAlertmanagerSpecVolumesFcPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesFcPtrType) ToAlertmanagerSpecVolumesFcPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesFcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesFcPtrOutput)
}

// FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
type AlertmanagerSpecVolumesFcOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesFcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesFc)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesFcOutput) ToAlertmanagerSpecVolumesFcOutput() AlertmanagerSpecVolumesFcOutput {
	return o
}

func (o AlertmanagerSpecVolumesFcOutput) ToAlertmanagerSpecVolumesFcOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesFcOutput {
	return o
}

func (o AlertmanagerSpecVolumesFcOutput) ToAlertmanagerSpecVolumesFcPtrOutput() AlertmanagerSpecVolumesFcPtrOutput {
	return o.ToAlertmanagerSpecVolumesFcPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesFcOutput) ToAlertmanagerSpecVolumesFcPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesFcPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesFc) *AlertmanagerSpecVolumesFc {
		return &v
	}).(AlertmanagerSpecVolumesFcPtrOutput)
}

// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
func (o AlertmanagerSpecVolumesFcOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesFc) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// Optional: FC target lun number
func (o AlertmanagerSpecVolumesFcOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesFc) *int { return v.Lun }).(pulumi.IntPtrOutput)
}

// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o AlertmanagerSpecVolumesFcOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesFc) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// Optional: FC target worldwide names (WWNs)
func (o AlertmanagerSpecVolumesFcOutput) TargetWWNs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesFc) []string { return v.TargetWWNs }).(pulumi.StringArrayOutput)
}

// Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
func (o AlertmanagerSpecVolumesFcOutput) Wwids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesFc) []string { return v.Wwids }).(pulumi.StringArrayOutput)
}

type AlertmanagerSpecVolumesFcPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesFcPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesFc)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesFcPtrOutput) ToAlertmanagerSpecVolumesFcPtrOutput() AlertmanagerSpecVolumesFcPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesFcPtrOutput) ToAlertmanagerSpecVolumesFcPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesFcPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesFcPtrOutput) Elem() AlertmanagerSpecVolumesFcOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesFc) AlertmanagerSpecVolumesFc { return *v }).(AlertmanagerSpecVolumesFcOutput)
}

// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
func (o AlertmanagerSpecVolumesFcPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesFc) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// Optional: FC target lun number
func (o AlertmanagerSpecVolumesFcPtrOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesFc) *int {
		if v == nil {
			return nil
		}
		return v.Lun
	}).(pulumi.IntPtrOutput)
}

// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o AlertmanagerSpecVolumesFcPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesFc) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// Optional: FC target worldwide names (WWNs)
func (o AlertmanagerSpecVolumesFcPtrOutput) TargetWWNs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesFc) []string {
		if v == nil {
			return nil
		}
		return v.TargetWWNs
	}).(pulumi.StringArrayOutput)
}

// Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
func (o AlertmanagerSpecVolumesFcPtrOutput) Wwids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesFc) []string {
		if v == nil {
			return nil
		}
		return v.Wwids
	}).(pulumi.StringArrayOutput)
}

// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
type AlertmanagerSpecVolumesFlexVolume struct {
	// Driver is the name of the driver to use for this volume.
	Driver string `pulumi:"driver"`
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
	FsType *string `pulumi:"fsType"`
	// Optional: Extra command options if any.
	Options map[string]string `pulumi:"options"`
	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
	SecretRef *AlertmanagerSpecVolumesFlexVolumeSecretRef `pulumi:"secretRef"`
}

// AlertmanagerSpecVolumesFlexVolumeInput is an input type that accepts AlertmanagerSpecVolumesFlexVolumeArgs and AlertmanagerSpecVolumesFlexVolumeOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesFlexVolumeInput` via:
//
//          AlertmanagerSpecVolumesFlexVolumeArgs{...}
type AlertmanagerSpecVolumesFlexVolumeInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesFlexVolumeOutput() AlertmanagerSpecVolumesFlexVolumeOutput
	ToAlertmanagerSpecVolumesFlexVolumeOutputWithContext(context.Context) AlertmanagerSpecVolumesFlexVolumeOutput
}

// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
type AlertmanagerSpecVolumesFlexVolumeArgs struct {
	// Driver is the name of the driver to use for this volume.
	Driver pulumi.StringInput `pulumi:"driver"`
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// Optional: Extra command options if any.
	Options pulumi.StringMapInput `pulumi:"options"`
	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
	SecretRef AlertmanagerSpecVolumesFlexVolumeSecretRefPtrInput `pulumi:"secretRef"`
}

func (AlertmanagerSpecVolumesFlexVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesFlexVolume)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesFlexVolumeArgs) ToAlertmanagerSpecVolumesFlexVolumeOutput() AlertmanagerSpecVolumesFlexVolumeOutput {
	return i.ToAlertmanagerSpecVolumesFlexVolumeOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesFlexVolumeArgs) ToAlertmanagerSpecVolumesFlexVolumeOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesFlexVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesFlexVolumeOutput)
}

func (i AlertmanagerSpecVolumesFlexVolumeArgs) ToAlertmanagerSpecVolumesFlexVolumePtrOutput() AlertmanagerSpecVolumesFlexVolumePtrOutput {
	return i.ToAlertmanagerSpecVolumesFlexVolumePtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesFlexVolumeArgs) ToAlertmanagerSpecVolumesFlexVolumePtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesFlexVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesFlexVolumeOutput).ToAlertmanagerSpecVolumesFlexVolumePtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesFlexVolumePtrInput is an input type that accepts AlertmanagerSpecVolumesFlexVolumeArgs, AlertmanagerSpecVolumesFlexVolumePtr and AlertmanagerSpecVolumesFlexVolumePtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesFlexVolumePtrInput` via:
//
//          AlertmanagerSpecVolumesFlexVolumeArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesFlexVolumePtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesFlexVolumePtrOutput() AlertmanagerSpecVolumesFlexVolumePtrOutput
	ToAlertmanagerSpecVolumesFlexVolumePtrOutputWithContext(context.Context) AlertmanagerSpecVolumesFlexVolumePtrOutput
}

type alertmanagerSpecVolumesFlexVolumePtrType AlertmanagerSpecVolumesFlexVolumeArgs

func AlertmanagerSpecVolumesFlexVolumePtr(v *AlertmanagerSpecVolumesFlexVolumeArgs) AlertmanagerSpecVolumesFlexVolumePtrInput {
	return (*alertmanagerSpecVolumesFlexVolumePtrType)(v)
}

func (*alertmanagerSpecVolumesFlexVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesFlexVolume)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesFlexVolumePtrType) ToAlertmanagerSpecVolumesFlexVolumePtrOutput() AlertmanagerSpecVolumesFlexVolumePtrOutput {
	return i.ToAlertmanagerSpecVolumesFlexVolumePtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesFlexVolumePtrType) ToAlertmanagerSpecVolumesFlexVolumePtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesFlexVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesFlexVolumePtrOutput)
}

// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
type AlertmanagerSpecVolumesFlexVolumeOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesFlexVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesFlexVolume)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesFlexVolumeOutput) ToAlertmanagerSpecVolumesFlexVolumeOutput() AlertmanagerSpecVolumesFlexVolumeOutput {
	return o
}

func (o AlertmanagerSpecVolumesFlexVolumeOutput) ToAlertmanagerSpecVolumesFlexVolumeOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesFlexVolumeOutput {
	return o
}

func (o AlertmanagerSpecVolumesFlexVolumeOutput) ToAlertmanagerSpecVolumesFlexVolumePtrOutput() AlertmanagerSpecVolumesFlexVolumePtrOutput {
	return o.ToAlertmanagerSpecVolumesFlexVolumePtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesFlexVolumeOutput) ToAlertmanagerSpecVolumesFlexVolumePtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesFlexVolumePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesFlexVolume) *AlertmanagerSpecVolumesFlexVolume {
		return &v
	}).(AlertmanagerSpecVolumesFlexVolumePtrOutput)
}

// Driver is the name of the driver to use for this volume.
func (o AlertmanagerSpecVolumesFlexVolumeOutput) Driver() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesFlexVolume) string { return v.Driver }).(pulumi.StringOutput)
}

// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
func (o AlertmanagerSpecVolumesFlexVolumeOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesFlexVolume) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// Optional: Extra command options if any.
func (o AlertmanagerSpecVolumesFlexVolumeOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesFlexVolume) map[string]string { return v.Options }).(pulumi.StringMapOutput)
}

// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o AlertmanagerSpecVolumesFlexVolumeOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesFlexVolume) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
func (o AlertmanagerSpecVolumesFlexVolumeOutput) SecretRef() AlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesFlexVolume) *AlertmanagerSpecVolumesFlexVolumeSecretRef {
		return v.SecretRef
	}).(AlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput)
}

type AlertmanagerSpecVolumesFlexVolumePtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesFlexVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesFlexVolume)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesFlexVolumePtrOutput) ToAlertmanagerSpecVolumesFlexVolumePtrOutput() AlertmanagerSpecVolumesFlexVolumePtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesFlexVolumePtrOutput) ToAlertmanagerSpecVolumesFlexVolumePtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesFlexVolumePtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesFlexVolumePtrOutput) Elem() AlertmanagerSpecVolumesFlexVolumeOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesFlexVolume) AlertmanagerSpecVolumesFlexVolume { return *v }).(AlertmanagerSpecVolumesFlexVolumeOutput)
}

// Driver is the name of the driver to use for this volume.
func (o AlertmanagerSpecVolumesFlexVolumePtrOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesFlexVolume) *string {
		if v == nil {
			return nil
		}
		return &v.Driver
	}).(pulumi.StringPtrOutput)
}

// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
func (o AlertmanagerSpecVolumesFlexVolumePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesFlexVolume) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// Optional: Extra command options if any.
func (o AlertmanagerSpecVolumesFlexVolumePtrOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesFlexVolume) map[string]string {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.StringMapOutput)
}

// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o AlertmanagerSpecVolumesFlexVolumePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesFlexVolume) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
func (o AlertmanagerSpecVolumesFlexVolumePtrOutput) SecretRef() AlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesFlexVolume) *AlertmanagerSpecVolumesFlexVolumeSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(AlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput)
}

// Optional: Extra command options if any.
type AlertmanagerSpecVolumesFlexVolumeOptions struct {
}

// AlertmanagerSpecVolumesFlexVolumeOptionsInput is an input type that accepts AlertmanagerSpecVolumesFlexVolumeOptionsArgs and AlertmanagerSpecVolumesFlexVolumeOptionsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesFlexVolumeOptionsInput` via:
//
//          AlertmanagerSpecVolumesFlexVolumeOptionsArgs{...}
type AlertmanagerSpecVolumesFlexVolumeOptionsInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesFlexVolumeOptionsOutput() AlertmanagerSpecVolumesFlexVolumeOptionsOutput
	ToAlertmanagerSpecVolumesFlexVolumeOptionsOutputWithContext(context.Context) AlertmanagerSpecVolumesFlexVolumeOptionsOutput
}

// Optional: Extra command options if any.
type AlertmanagerSpecVolumesFlexVolumeOptionsArgs struct {
}

func (AlertmanagerSpecVolumesFlexVolumeOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesFlexVolumeOptions)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesFlexVolumeOptionsArgs) ToAlertmanagerSpecVolumesFlexVolumeOptionsOutput() AlertmanagerSpecVolumesFlexVolumeOptionsOutput {
	return i.ToAlertmanagerSpecVolumesFlexVolumeOptionsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesFlexVolumeOptionsArgs) ToAlertmanagerSpecVolumesFlexVolumeOptionsOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesFlexVolumeOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesFlexVolumeOptionsOutput)
}

// Optional: Extra command options if any.
type AlertmanagerSpecVolumesFlexVolumeOptionsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesFlexVolumeOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesFlexVolumeOptions)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesFlexVolumeOptionsOutput) ToAlertmanagerSpecVolumesFlexVolumeOptionsOutput() AlertmanagerSpecVolumesFlexVolumeOptionsOutput {
	return o
}

func (o AlertmanagerSpecVolumesFlexVolumeOptionsOutput) ToAlertmanagerSpecVolumesFlexVolumeOptionsOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesFlexVolumeOptionsOutput {
	return o
}

// Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
type AlertmanagerSpecVolumesFlexVolumeSecretRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
}

// AlertmanagerSpecVolumesFlexVolumeSecretRefInput is an input type that accepts AlertmanagerSpecVolumesFlexVolumeSecretRefArgs and AlertmanagerSpecVolumesFlexVolumeSecretRefOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesFlexVolumeSecretRefInput` via:
//
//          AlertmanagerSpecVolumesFlexVolumeSecretRefArgs{...}
type AlertmanagerSpecVolumesFlexVolumeSecretRefInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesFlexVolumeSecretRefOutput() AlertmanagerSpecVolumesFlexVolumeSecretRefOutput
	ToAlertmanagerSpecVolumesFlexVolumeSecretRefOutputWithContext(context.Context) AlertmanagerSpecVolumesFlexVolumeSecretRefOutput
}

// Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
type AlertmanagerSpecVolumesFlexVolumeSecretRefArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (AlertmanagerSpecVolumesFlexVolumeSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesFlexVolumeSecretRef)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesFlexVolumeSecretRefArgs) ToAlertmanagerSpecVolumesFlexVolumeSecretRefOutput() AlertmanagerSpecVolumesFlexVolumeSecretRefOutput {
	return i.ToAlertmanagerSpecVolumesFlexVolumeSecretRefOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesFlexVolumeSecretRefArgs) ToAlertmanagerSpecVolumesFlexVolumeSecretRefOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesFlexVolumeSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesFlexVolumeSecretRefOutput)
}

func (i AlertmanagerSpecVolumesFlexVolumeSecretRefArgs) ToAlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput() AlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput {
	return i.ToAlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesFlexVolumeSecretRefArgs) ToAlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesFlexVolumeSecretRefOutput).ToAlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesFlexVolumeSecretRefPtrInput is an input type that accepts AlertmanagerSpecVolumesFlexVolumeSecretRefArgs, AlertmanagerSpecVolumesFlexVolumeSecretRefPtr and AlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesFlexVolumeSecretRefPtrInput` via:
//
//          AlertmanagerSpecVolumesFlexVolumeSecretRefArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesFlexVolumeSecretRefPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput() AlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput
	ToAlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput
}

type alertmanagerSpecVolumesFlexVolumeSecretRefPtrType AlertmanagerSpecVolumesFlexVolumeSecretRefArgs

func AlertmanagerSpecVolumesFlexVolumeSecretRefPtr(v *AlertmanagerSpecVolumesFlexVolumeSecretRefArgs) AlertmanagerSpecVolumesFlexVolumeSecretRefPtrInput {
	return (*alertmanagerSpecVolumesFlexVolumeSecretRefPtrType)(v)
}

func (*alertmanagerSpecVolumesFlexVolumeSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesFlexVolumeSecretRef)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesFlexVolumeSecretRefPtrType) ToAlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput() AlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput {
	return i.ToAlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesFlexVolumeSecretRefPtrType) ToAlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput)
}

// Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
type AlertmanagerSpecVolumesFlexVolumeSecretRefOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesFlexVolumeSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesFlexVolumeSecretRef)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesFlexVolumeSecretRefOutput) ToAlertmanagerSpecVolumesFlexVolumeSecretRefOutput() AlertmanagerSpecVolumesFlexVolumeSecretRefOutput {
	return o
}

func (o AlertmanagerSpecVolumesFlexVolumeSecretRefOutput) ToAlertmanagerSpecVolumesFlexVolumeSecretRefOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesFlexVolumeSecretRefOutput {
	return o
}

func (o AlertmanagerSpecVolumesFlexVolumeSecretRefOutput) ToAlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput() AlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput {
	return o.ToAlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesFlexVolumeSecretRefOutput) ToAlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesFlexVolumeSecretRef) *AlertmanagerSpecVolumesFlexVolumeSecretRef {
		return &v
	}).(AlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecVolumesFlexVolumeSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesFlexVolumeSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesFlexVolumeSecretRef)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput) ToAlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput() AlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput) ToAlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput) Elem() AlertmanagerSpecVolumesFlexVolumeSecretRefOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesFlexVolumeSecretRef) AlertmanagerSpecVolumesFlexVolumeSecretRef {
		return *v
	}).(AlertmanagerSpecVolumesFlexVolumeSecretRefOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesFlexVolumeSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
type AlertmanagerSpecVolumesFlocker struct {
	// Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
	DatasetName *string `pulumi:"datasetName"`
	// UUID of the dataset. This is unique identifier of a Flocker dataset
	DatasetUUID *string `pulumi:"datasetUUID"`
}

// AlertmanagerSpecVolumesFlockerInput is an input type that accepts AlertmanagerSpecVolumesFlockerArgs and AlertmanagerSpecVolumesFlockerOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesFlockerInput` via:
//
//          AlertmanagerSpecVolumesFlockerArgs{...}
type AlertmanagerSpecVolumesFlockerInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesFlockerOutput() AlertmanagerSpecVolumesFlockerOutput
	ToAlertmanagerSpecVolumesFlockerOutputWithContext(context.Context) AlertmanagerSpecVolumesFlockerOutput
}

// Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
type AlertmanagerSpecVolumesFlockerArgs struct {
	// Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
	DatasetName pulumi.StringPtrInput `pulumi:"datasetName"`
	// UUID of the dataset. This is unique identifier of a Flocker dataset
	DatasetUUID pulumi.StringPtrInput `pulumi:"datasetUUID"`
}

func (AlertmanagerSpecVolumesFlockerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesFlocker)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesFlockerArgs) ToAlertmanagerSpecVolumesFlockerOutput() AlertmanagerSpecVolumesFlockerOutput {
	return i.ToAlertmanagerSpecVolumesFlockerOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesFlockerArgs) ToAlertmanagerSpecVolumesFlockerOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesFlockerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesFlockerOutput)
}

func (i AlertmanagerSpecVolumesFlockerArgs) ToAlertmanagerSpecVolumesFlockerPtrOutput() AlertmanagerSpecVolumesFlockerPtrOutput {
	return i.ToAlertmanagerSpecVolumesFlockerPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesFlockerArgs) ToAlertmanagerSpecVolumesFlockerPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesFlockerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesFlockerOutput).ToAlertmanagerSpecVolumesFlockerPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesFlockerPtrInput is an input type that accepts AlertmanagerSpecVolumesFlockerArgs, AlertmanagerSpecVolumesFlockerPtr and AlertmanagerSpecVolumesFlockerPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesFlockerPtrInput` via:
//
//          AlertmanagerSpecVolumesFlockerArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesFlockerPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesFlockerPtrOutput() AlertmanagerSpecVolumesFlockerPtrOutput
	ToAlertmanagerSpecVolumesFlockerPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesFlockerPtrOutput
}

type alertmanagerSpecVolumesFlockerPtrType AlertmanagerSpecVolumesFlockerArgs

func AlertmanagerSpecVolumesFlockerPtr(v *AlertmanagerSpecVolumesFlockerArgs) AlertmanagerSpecVolumesFlockerPtrInput {
	return (*alertmanagerSpecVolumesFlockerPtrType)(v)
}

func (*alertmanagerSpecVolumesFlockerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesFlocker)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesFlockerPtrType) ToAlertmanagerSpecVolumesFlockerPtrOutput() AlertmanagerSpecVolumesFlockerPtrOutput {
	return i.ToAlertmanagerSpecVolumesFlockerPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesFlockerPtrType) ToAlertmanagerSpecVolumesFlockerPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesFlockerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesFlockerPtrOutput)
}

// Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
type AlertmanagerSpecVolumesFlockerOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesFlockerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesFlocker)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesFlockerOutput) ToAlertmanagerSpecVolumesFlockerOutput() AlertmanagerSpecVolumesFlockerOutput {
	return o
}

func (o AlertmanagerSpecVolumesFlockerOutput) ToAlertmanagerSpecVolumesFlockerOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesFlockerOutput {
	return o
}

func (o AlertmanagerSpecVolumesFlockerOutput) ToAlertmanagerSpecVolumesFlockerPtrOutput() AlertmanagerSpecVolumesFlockerPtrOutput {
	return o.ToAlertmanagerSpecVolumesFlockerPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesFlockerOutput) ToAlertmanagerSpecVolumesFlockerPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesFlockerPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesFlocker) *AlertmanagerSpecVolumesFlocker {
		return &v
	}).(AlertmanagerSpecVolumesFlockerPtrOutput)
}

// Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
func (o AlertmanagerSpecVolumesFlockerOutput) DatasetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesFlocker) *string { return v.DatasetName }).(pulumi.StringPtrOutput)
}

// UUID of the dataset. This is unique identifier of a Flocker dataset
func (o AlertmanagerSpecVolumesFlockerOutput) DatasetUUID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesFlocker) *string { return v.DatasetUUID }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecVolumesFlockerPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesFlockerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesFlocker)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesFlockerPtrOutput) ToAlertmanagerSpecVolumesFlockerPtrOutput() AlertmanagerSpecVolumesFlockerPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesFlockerPtrOutput) ToAlertmanagerSpecVolumesFlockerPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesFlockerPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesFlockerPtrOutput) Elem() AlertmanagerSpecVolumesFlockerOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesFlocker) AlertmanagerSpecVolumesFlocker { return *v }).(AlertmanagerSpecVolumesFlockerOutput)
}

// Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
func (o AlertmanagerSpecVolumesFlockerPtrOutput) DatasetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesFlocker) *string {
		if v == nil {
			return nil
		}
		return v.DatasetName
	}).(pulumi.StringPtrOutput)
}

// UUID of the dataset. This is unique identifier of a Flocker dataset
func (o AlertmanagerSpecVolumesFlockerPtrOutput) DatasetUUID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesFlocker) *string {
		if v == nil {
			return nil
		}
		return v.DatasetUUID
	}).(pulumi.StringPtrOutput)
}

// GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
type AlertmanagerSpecVolumesGcePersistentDisk struct {
	// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType *string `pulumi:"fsType"`
	// The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	Partition *int `pulumi:"partition"`
	// Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	PdName string `pulumi:"pdName"`
	// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	ReadOnly *bool `pulumi:"readOnly"`
}

// AlertmanagerSpecVolumesGcePersistentDiskInput is an input type that accepts AlertmanagerSpecVolumesGcePersistentDiskArgs and AlertmanagerSpecVolumesGcePersistentDiskOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesGcePersistentDiskInput` via:
//
//          AlertmanagerSpecVolumesGcePersistentDiskArgs{...}
type AlertmanagerSpecVolumesGcePersistentDiskInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesGcePersistentDiskOutput() AlertmanagerSpecVolumesGcePersistentDiskOutput
	ToAlertmanagerSpecVolumesGcePersistentDiskOutputWithContext(context.Context) AlertmanagerSpecVolumesGcePersistentDiskOutput
}

// GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
type AlertmanagerSpecVolumesGcePersistentDiskArgs struct {
	// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	Partition pulumi.IntPtrInput `pulumi:"partition"`
	// Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	PdName pulumi.StringInput `pulumi:"pdName"`
	// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (AlertmanagerSpecVolumesGcePersistentDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesGcePersistentDisk)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesGcePersistentDiskArgs) ToAlertmanagerSpecVolumesGcePersistentDiskOutput() AlertmanagerSpecVolumesGcePersistentDiskOutput {
	return i.ToAlertmanagerSpecVolumesGcePersistentDiskOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesGcePersistentDiskArgs) ToAlertmanagerSpecVolumesGcePersistentDiskOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesGcePersistentDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesGcePersistentDiskOutput)
}

func (i AlertmanagerSpecVolumesGcePersistentDiskArgs) ToAlertmanagerSpecVolumesGcePersistentDiskPtrOutput() AlertmanagerSpecVolumesGcePersistentDiskPtrOutput {
	return i.ToAlertmanagerSpecVolumesGcePersistentDiskPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesGcePersistentDiskArgs) ToAlertmanagerSpecVolumesGcePersistentDiskPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesGcePersistentDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesGcePersistentDiskOutput).ToAlertmanagerSpecVolumesGcePersistentDiskPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesGcePersistentDiskPtrInput is an input type that accepts AlertmanagerSpecVolumesGcePersistentDiskArgs, AlertmanagerSpecVolumesGcePersistentDiskPtr and AlertmanagerSpecVolumesGcePersistentDiskPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesGcePersistentDiskPtrInput` via:
//
//          AlertmanagerSpecVolumesGcePersistentDiskArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesGcePersistentDiskPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesGcePersistentDiskPtrOutput() AlertmanagerSpecVolumesGcePersistentDiskPtrOutput
	ToAlertmanagerSpecVolumesGcePersistentDiskPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesGcePersistentDiskPtrOutput
}

type alertmanagerSpecVolumesGcePersistentDiskPtrType AlertmanagerSpecVolumesGcePersistentDiskArgs

func AlertmanagerSpecVolumesGcePersistentDiskPtr(v *AlertmanagerSpecVolumesGcePersistentDiskArgs) AlertmanagerSpecVolumesGcePersistentDiskPtrInput {
	return (*alertmanagerSpecVolumesGcePersistentDiskPtrType)(v)
}

func (*alertmanagerSpecVolumesGcePersistentDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesGcePersistentDisk)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesGcePersistentDiskPtrType) ToAlertmanagerSpecVolumesGcePersistentDiskPtrOutput() AlertmanagerSpecVolumesGcePersistentDiskPtrOutput {
	return i.ToAlertmanagerSpecVolumesGcePersistentDiskPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesGcePersistentDiskPtrType) ToAlertmanagerSpecVolumesGcePersistentDiskPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesGcePersistentDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesGcePersistentDiskPtrOutput)
}

// GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
type AlertmanagerSpecVolumesGcePersistentDiskOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesGcePersistentDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesGcePersistentDisk)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesGcePersistentDiskOutput) ToAlertmanagerSpecVolumesGcePersistentDiskOutput() AlertmanagerSpecVolumesGcePersistentDiskOutput {
	return o
}

func (o AlertmanagerSpecVolumesGcePersistentDiskOutput) ToAlertmanagerSpecVolumesGcePersistentDiskOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesGcePersistentDiskOutput {
	return o
}

func (o AlertmanagerSpecVolumesGcePersistentDiskOutput) ToAlertmanagerSpecVolumesGcePersistentDiskPtrOutput() AlertmanagerSpecVolumesGcePersistentDiskPtrOutput {
	return o.ToAlertmanagerSpecVolumesGcePersistentDiskPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesGcePersistentDiskOutput) ToAlertmanagerSpecVolumesGcePersistentDiskPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesGcePersistentDiskPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesGcePersistentDisk) *AlertmanagerSpecVolumesGcePersistentDisk {
		return &v
	}).(AlertmanagerSpecVolumesGcePersistentDiskPtrOutput)
}

// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
func (o AlertmanagerSpecVolumesGcePersistentDiskOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesGcePersistentDisk) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o AlertmanagerSpecVolumesGcePersistentDiskOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesGcePersistentDisk) *int { return v.Partition }).(pulumi.IntPtrOutput)
}

// Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o AlertmanagerSpecVolumesGcePersistentDiskOutput) PdName() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesGcePersistentDisk) string { return v.PdName }).(pulumi.StringOutput)
}

// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o AlertmanagerSpecVolumesGcePersistentDiskOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesGcePersistentDisk) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type AlertmanagerSpecVolumesGcePersistentDiskPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesGcePersistentDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesGcePersistentDisk)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesGcePersistentDiskPtrOutput) ToAlertmanagerSpecVolumesGcePersistentDiskPtrOutput() AlertmanagerSpecVolumesGcePersistentDiskPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesGcePersistentDiskPtrOutput) ToAlertmanagerSpecVolumesGcePersistentDiskPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesGcePersistentDiskPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesGcePersistentDiskPtrOutput) Elem() AlertmanagerSpecVolumesGcePersistentDiskOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesGcePersistentDisk) AlertmanagerSpecVolumesGcePersistentDisk { return *v }).(AlertmanagerSpecVolumesGcePersistentDiskOutput)
}

// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
func (o AlertmanagerSpecVolumesGcePersistentDiskPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesGcePersistentDisk) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o AlertmanagerSpecVolumesGcePersistentDiskPtrOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesGcePersistentDisk) *int {
		if v == nil {
			return nil
		}
		return v.Partition
	}).(pulumi.IntPtrOutput)
}

// Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o AlertmanagerSpecVolumesGcePersistentDiskPtrOutput) PdName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesGcePersistentDisk) *string {
		if v == nil {
			return nil
		}
		return &v.PdName
	}).(pulumi.StringPtrOutput)
}

// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o AlertmanagerSpecVolumesGcePersistentDiskPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesGcePersistentDisk) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
type AlertmanagerSpecVolumesGitRepo struct {
	// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
	Directory *string `pulumi:"directory"`
	// Repository URL
	Repository string `pulumi:"repository"`
	// Commit hash for the specified revision.
	Revision *string `pulumi:"revision"`
}

// AlertmanagerSpecVolumesGitRepoInput is an input type that accepts AlertmanagerSpecVolumesGitRepoArgs and AlertmanagerSpecVolumesGitRepoOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesGitRepoInput` via:
//
//          AlertmanagerSpecVolumesGitRepoArgs{...}
type AlertmanagerSpecVolumesGitRepoInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesGitRepoOutput() AlertmanagerSpecVolumesGitRepoOutput
	ToAlertmanagerSpecVolumesGitRepoOutputWithContext(context.Context) AlertmanagerSpecVolumesGitRepoOutput
}

// GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
type AlertmanagerSpecVolumesGitRepoArgs struct {
	// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
	Directory pulumi.StringPtrInput `pulumi:"directory"`
	// Repository URL
	Repository pulumi.StringInput `pulumi:"repository"`
	// Commit hash for the specified revision.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
}

func (AlertmanagerSpecVolumesGitRepoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesGitRepo)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesGitRepoArgs) ToAlertmanagerSpecVolumesGitRepoOutput() AlertmanagerSpecVolumesGitRepoOutput {
	return i.ToAlertmanagerSpecVolumesGitRepoOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesGitRepoArgs) ToAlertmanagerSpecVolumesGitRepoOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesGitRepoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesGitRepoOutput)
}

func (i AlertmanagerSpecVolumesGitRepoArgs) ToAlertmanagerSpecVolumesGitRepoPtrOutput() AlertmanagerSpecVolumesGitRepoPtrOutput {
	return i.ToAlertmanagerSpecVolumesGitRepoPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesGitRepoArgs) ToAlertmanagerSpecVolumesGitRepoPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesGitRepoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesGitRepoOutput).ToAlertmanagerSpecVolumesGitRepoPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesGitRepoPtrInput is an input type that accepts AlertmanagerSpecVolumesGitRepoArgs, AlertmanagerSpecVolumesGitRepoPtr and AlertmanagerSpecVolumesGitRepoPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesGitRepoPtrInput` via:
//
//          AlertmanagerSpecVolumesGitRepoArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesGitRepoPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesGitRepoPtrOutput() AlertmanagerSpecVolumesGitRepoPtrOutput
	ToAlertmanagerSpecVolumesGitRepoPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesGitRepoPtrOutput
}

type alertmanagerSpecVolumesGitRepoPtrType AlertmanagerSpecVolumesGitRepoArgs

func AlertmanagerSpecVolumesGitRepoPtr(v *AlertmanagerSpecVolumesGitRepoArgs) AlertmanagerSpecVolumesGitRepoPtrInput {
	return (*alertmanagerSpecVolumesGitRepoPtrType)(v)
}

func (*alertmanagerSpecVolumesGitRepoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesGitRepo)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesGitRepoPtrType) ToAlertmanagerSpecVolumesGitRepoPtrOutput() AlertmanagerSpecVolumesGitRepoPtrOutput {
	return i.ToAlertmanagerSpecVolumesGitRepoPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesGitRepoPtrType) ToAlertmanagerSpecVolumesGitRepoPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesGitRepoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesGitRepoPtrOutput)
}

// GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
type AlertmanagerSpecVolumesGitRepoOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesGitRepoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesGitRepo)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesGitRepoOutput) ToAlertmanagerSpecVolumesGitRepoOutput() AlertmanagerSpecVolumesGitRepoOutput {
	return o
}

func (o AlertmanagerSpecVolumesGitRepoOutput) ToAlertmanagerSpecVolumesGitRepoOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesGitRepoOutput {
	return o
}

func (o AlertmanagerSpecVolumesGitRepoOutput) ToAlertmanagerSpecVolumesGitRepoPtrOutput() AlertmanagerSpecVolumesGitRepoPtrOutput {
	return o.ToAlertmanagerSpecVolumesGitRepoPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesGitRepoOutput) ToAlertmanagerSpecVolumesGitRepoPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesGitRepoPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesGitRepo) *AlertmanagerSpecVolumesGitRepo {
		return &v
	}).(AlertmanagerSpecVolumesGitRepoPtrOutput)
}

// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
func (o AlertmanagerSpecVolumesGitRepoOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesGitRepo) *string { return v.Directory }).(pulumi.StringPtrOutput)
}

// Repository URL
func (o AlertmanagerSpecVolumesGitRepoOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesGitRepo) string { return v.Repository }).(pulumi.StringOutput)
}

// Commit hash for the specified revision.
func (o AlertmanagerSpecVolumesGitRepoOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesGitRepo) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecVolumesGitRepoPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesGitRepoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesGitRepo)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesGitRepoPtrOutput) ToAlertmanagerSpecVolumesGitRepoPtrOutput() AlertmanagerSpecVolumesGitRepoPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesGitRepoPtrOutput) ToAlertmanagerSpecVolumesGitRepoPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesGitRepoPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesGitRepoPtrOutput) Elem() AlertmanagerSpecVolumesGitRepoOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesGitRepo) AlertmanagerSpecVolumesGitRepo { return *v }).(AlertmanagerSpecVolumesGitRepoOutput)
}

// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
func (o AlertmanagerSpecVolumesGitRepoPtrOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesGitRepo) *string {
		if v == nil {
			return nil
		}
		return v.Directory
	}).(pulumi.StringPtrOutput)
}

// Repository URL
func (o AlertmanagerSpecVolumesGitRepoPtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesGitRepo) *string {
		if v == nil {
			return nil
		}
		return &v.Repository
	}).(pulumi.StringPtrOutput)
}

// Commit hash for the specified revision.
func (o AlertmanagerSpecVolumesGitRepoPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesGitRepo) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
type AlertmanagerSpecVolumesGlusterfs struct {
	// EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Endpoints string `pulumi:"endpoints"`
	// Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Path string `pulumi:"path"`
	// ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	ReadOnly *bool `pulumi:"readOnly"`
}

// AlertmanagerSpecVolumesGlusterfsInput is an input type that accepts AlertmanagerSpecVolumesGlusterfsArgs and AlertmanagerSpecVolumesGlusterfsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesGlusterfsInput` via:
//
//          AlertmanagerSpecVolumesGlusterfsArgs{...}
type AlertmanagerSpecVolumesGlusterfsInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesGlusterfsOutput() AlertmanagerSpecVolumesGlusterfsOutput
	ToAlertmanagerSpecVolumesGlusterfsOutputWithContext(context.Context) AlertmanagerSpecVolumesGlusterfsOutput
}

// Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
type AlertmanagerSpecVolumesGlusterfsArgs struct {
	// EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Endpoints pulumi.StringInput `pulumi:"endpoints"`
	// Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Path pulumi.StringInput `pulumi:"path"`
	// ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (AlertmanagerSpecVolumesGlusterfsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesGlusterfs)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesGlusterfsArgs) ToAlertmanagerSpecVolumesGlusterfsOutput() AlertmanagerSpecVolumesGlusterfsOutput {
	return i.ToAlertmanagerSpecVolumesGlusterfsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesGlusterfsArgs) ToAlertmanagerSpecVolumesGlusterfsOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesGlusterfsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesGlusterfsOutput)
}

func (i AlertmanagerSpecVolumesGlusterfsArgs) ToAlertmanagerSpecVolumesGlusterfsPtrOutput() AlertmanagerSpecVolumesGlusterfsPtrOutput {
	return i.ToAlertmanagerSpecVolumesGlusterfsPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesGlusterfsArgs) ToAlertmanagerSpecVolumesGlusterfsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesGlusterfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesGlusterfsOutput).ToAlertmanagerSpecVolumesGlusterfsPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesGlusterfsPtrInput is an input type that accepts AlertmanagerSpecVolumesGlusterfsArgs, AlertmanagerSpecVolumesGlusterfsPtr and AlertmanagerSpecVolumesGlusterfsPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesGlusterfsPtrInput` via:
//
//          AlertmanagerSpecVolumesGlusterfsArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesGlusterfsPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesGlusterfsPtrOutput() AlertmanagerSpecVolumesGlusterfsPtrOutput
	ToAlertmanagerSpecVolumesGlusterfsPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesGlusterfsPtrOutput
}

type alertmanagerSpecVolumesGlusterfsPtrType AlertmanagerSpecVolumesGlusterfsArgs

func AlertmanagerSpecVolumesGlusterfsPtr(v *AlertmanagerSpecVolumesGlusterfsArgs) AlertmanagerSpecVolumesGlusterfsPtrInput {
	return (*alertmanagerSpecVolumesGlusterfsPtrType)(v)
}

func (*alertmanagerSpecVolumesGlusterfsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesGlusterfs)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesGlusterfsPtrType) ToAlertmanagerSpecVolumesGlusterfsPtrOutput() AlertmanagerSpecVolumesGlusterfsPtrOutput {
	return i.ToAlertmanagerSpecVolumesGlusterfsPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesGlusterfsPtrType) ToAlertmanagerSpecVolumesGlusterfsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesGlusterfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesGlusterfsPtrOutput)
}

// Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
type AlertmanagerSpecVolumesGlusterfsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesGlusterfsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesGlusterfs)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesGlusterfsOutput) ToAlertmanagerSpecVolumesGlusterfsOutput() AlertmanagerSpecVolumesGlusterfsOutput {
	return o
}

func (o AlertmanagerSpecVolumesGlusterfsOutput) ToAlertmanagerSpecVolumesGlusterfsOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesGlusterfsOutput {
	return o
}

func (o AlertmanagerSpecVolumesGlusterfsOutput) ToAlertmanagerSpecVolumesGlusterfsPtrOutput() AlertmanagerSpecVolumesGlusterfsPtrOutput {
	return o.ToAlertmanagerSpecVolumesGlusterfsPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesGlusterfsOutput) ToAlertmanagerSpecVolumesGlusterfsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesGlusterfsPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesGlusterfs) *AlertmanagerSpecVolumesGlusterfs {
		return &v
	}).(AlertmanagerSpecVolumesGlusterfsPtrOutput)
}

// EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o AlertmanagerSpecVolumesGlusterfsOutput) Endpoints() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesGlusterfs) string { return v.Endpoints }).(pulumi.StringOutput)
}

// Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o AlertmanagerSpecVolumesGlusterfsOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesGlusterfs) string { return v.Path }).(pulumi.StringOutput)
}

// ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o AlertmanagerSpecVolumesGlusterfsOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesGlusterfs) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type AlertmanagerSpecVolumesGlusterfsPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesGlusterfsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesGlusterfs)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesGlusterfsPtrOutput) ToAlertmanagerSpecVolumesGlusterfsPtrOutput() AlertmanagerSpecVolumesGlusterfsPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesGlusterfsPtrOutput) ToAlertmanagerSpecVolumesGlusterfsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesGlusterfsPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesGlusterfsPtrOutput) Elem() AlertmanagerSpecVolumesGlusterfsOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesGlusterfs) AlertmanagerSpecVolumesGlusterfs { return *v }).(AlertmanagerSpecVolumesGlusterfsOutput)
}

// EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o AlertmanagerSpecVolumesGlusterfsPtrOutput) Endpoints() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesGlusterfs) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoints
	}).(pulumi.StringPtrOutput)
}

// Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o AlertmanagerSpecVolumesGlusterfsPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesGlusterfs) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o AlertmanagerSpecVolumesGlusterfsPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesGlusterfs) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
type AlertmanagerSpecVolumesHostPath struct {
	// Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Path string `pulumi:"path"`
	// Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Type *string `pulumi:"type"`
}

// AlertmanagerSpecVolumesHostPathInput is an input type that accepts AlertmanagerSpecVolumesHostPathArgs and AlertmanagerSpecVolumesHostPathOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesHostPathInput` via:
//
//          AlertmanagerSpecVolumesHostPathArgs{...}
type AlertmanagerSpecVolumesHostPathInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesHostPathOutput() AlertmanagerSpecVolumesHostPathOutput
	ToAlertmanagerSpecVolumesHostPathOutputWithContext(context.Context) AlertmanagerSpecVolumesHostPathOutput
}

// HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
type AlertmanagerSpecVolumesHostPathArgs struct {
	// Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Path pulumi.StringInput `pulumi:"path"`
	// Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (AlertmanagerSpecVolumesHostPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesHostPath)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesHostPathArgs) ToAlertmanagerSpecVolumesHostPathOutput() AlertmanagerSpecVolumesHostPathOutput {
	return i.ToAlertmanagerSpecVolumesHostPathOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesHostPathArgs) ToAlertmanagerSpecVolumesHostPathOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesHostPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesHostPathOutput)
}

func (i AlertmanagerSpecVolumesHostPathArgs) ToAlertmanagerSpecVolumesHostPathPtrOutput() AlertmanagerSpecVolumesHostPathPtrOutput {
	return i.ToAlertmanagerSpecVolumesHostPathPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesHostPathArgs) ToAlertmanagerSpecVolumesHostPathPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesHostPathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesHostPathOutput).ToAlertmanagerSpecVolumesHostPathPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesHostPathPtrInput is an input type that accepts AlertmanagerSpecVolumesHostPathArgs, AlertmanagerSpecVolumesHostPathPtr and AlertmanagerSpecVolumesHostPathPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesHostPathPtrInput` via:
//
//          AlertmanagerSpecVolumesHostPathArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesHostPathPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesHostPathPtrOutput() AlertmanagerSpecVolumesHostPathPtrOutput
	ToAlertmanagerSpecVolumesHostPathPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesHostPathPtrOutput
}

type alertmanagerSpecVolumesHostPathPtrType AlertmanagerSpecVolumesHostPathArgs

func AlertmanagerSpecVolumesHostPathPtr(v *AlertmanagerSpecVolumesHostPathArgs) AlertmanagerSpecVolumesHostPathPtrInput {
	return (*alertmanagerSpecVolumesHostPathPtrType)(v)
}

func (*alertmanagerSpecVolumesHostPathPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesHostPath)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesHostPathPtrType) ToAlertmanagerSpecVolumesHostPathPtrOutput() AlertmanagerSpecVolumesHostPathPtrOutput {
	return i.ToAlertmanagerSpecVolumesHostPathPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesHostPathPtrType) ToAlertmanagerSpecVolumesHostPathPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesHostPathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesHostPathPtrOutput)
}

// HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
type AlertmanagerSpecVolumesHostPathOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesHostPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesHostPath)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesHostPathOutput) ToAlertmanagerSpecVolumesHostPathOutput() AlertmanagerSpecVolumesHostPathOutput {
	return o
}

func (o AlertmanagerSpecVolumesHostPathOutput) ToAlertmanagerSpecVolumesHostPathOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesHostPathOutput {
	return o
}

func (o AlertmanagerSpecVolumesHostPathOutput) ToAlertmanagerSpecVolumesHostPathPtrOutput() AlertmanagerSpecVolumesHostPathPtrOutput {
	return o.ToAlertmanagerSpecVolumesHostPathPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesHostPathOutput) ToAlertmanagerSpecVolumesHostPathPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesHostPathPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesHostPath) *AlertmanagerSpecVolumesHostPath {
		return &v
	}).(AlertmanagerSpecVolumesHostPathPtrOutput)
}

// Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o AlertmanagerSpecVolumesHostPathOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesHostPath) string { return v.Path }).(pulumi.StringOutput)
}

// Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o AlertmanagerSpecVolumesHostPathOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesHostPath) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecVolumesHostPathPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesHostPathPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesHostPath)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesHostPathPtrOutput) ToAlertmanagerSpecVolumesHostPathPtrOutput() AlertmanagerSpecVolumesHostPathPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesHostPathPtrOutput) ToAlertmanagerSpecVolumesHostPathPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesHostPathPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesHostPathPtrOutput) Elem() AlertmanagerSpecVolumesHostPathOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesHostPath) AlertmanagerSpecVolumesHostPath { return *v }).(AlertmanagerSpecVolumesHostPathOutput)
}

// Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o AlertmanagerSpecVolumesHostPathPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesHostPath) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o AlertmanagerSpecVolumesHostPathPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesHostPath) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
type AlertmanagerSpecVolumesIscsi struct {
	// whether support iSCSI Discovery CHAP authentication
	ChapAuthDiscovery *bool `pulumi:"chapAuthDiscovery"`
	// whether support iSCSI Session CHAP authentication
	ChapAuthSession *bool `pulumi:"chapAuthSession"`
	// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType *string `pulumi:"fsType"`
	// Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
	InitiatorName *string `pulumi:"initiatorName"`
	// Target iSCSI Qualified Name.
	Iqn string `pulumi:"iqn"`
	// iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
	IscsiInterface *string `pulumi:"iscsiInterface"`
	// iSCSI Target Lun number.
	Lun int `pulumi:"lun"`
	// iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	Portals []string `pulumi:"portals"`
	// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
	ReadOnly *bool `pulumi:"readOnly"`
	// CHAP Secret for iSCSI target and initiator authentication
	SecretRef *AlertmanagerSpecVolumesIscsiSecretRef `pulumi:"secretRef"`
	// iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	TargetPortal string `pulumi:"targetPortal"`
}

// AlertmanagerSpecVolumesIscsiInput is an input type that accepts AlertmanagerSpecVolumesIscsiArgs and AlertmanagerSpecVolumesIscsiOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesIscsiInput` via:
//
//          AlertmanagerSpecVolumesIscsiArgs{...}
type AlertmanagerSpecVolumesIscsiInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesIscsiOutput() AlertmanagerSpecVolumesIscsiOutput
	ToAlertmanagerSpecVolumesIscsiOutputWithContext(context.Context) AlertmanagerSpecVolumesIscsiOutput
}

// ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
type AlertmanagerSpecVolumesIscsiArgs struct {
	// whether support iSCSI Discovery CHAP authentication
	ChapAuthDiscovery pulumi.BoolPtrInput `pulumi:"chapAuthDiscovery"`
	// whether support iSCSI Session CHAP authentication
	ChapAuthSession pulumi.BoolPtrInput `pulumi:"chapAuthSession"`
	// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
	InitiatorName pulumi.StringPtrInput `pulumi:"initiatorName"`
	// Target iSCSI Qualified Name.
	Iqn pulumi.StringInput `pulumi:"iqn"`
	// iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
	IscsiInterface pulumi.StringPtrInput `pulumi:"iscsiInterface"`
	// iSCSI Target Lun number.
	Lun pulumi.IntInput `pulumi:"lun"`
	// iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	Portals pulumi.StringArrayInput `pulumi:"portals"`
	// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// CHAP Secret for iSCSI target and initiator authentication
	SecretRef AlertmanagerSpecVolumesIscsiSecretRefPtrInput `pulumi:"secretRef"`
	// iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	TargetPortal pulumi.StringInput `pulumi:"targetPortal"`
}

func (AlertmanagerSpecVolumesIscsiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesIscsi)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesIscsiArgs) ToAlertmanagerSpecVolumesIscsiOutput() AlertmanagerSpecVolumesIscsiOutput {
	return i.ToAlertmanagerSpecVolumesIscsiOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesIscsiArgs) ToAlertmanagerSpecVolumesIscsiOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesIscsiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesIscsiOutput)
}

func (i AlertmanagerSpecVolumesIscsiArgs) ToAlertmanagerSpecVolumesIscsiPtrOutput() AlertmanagerSpecVolumesIscsiPtrOutput {
	return i.ToAlertmanagerSpecVolumesIscsiPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesIscsiArgs) ToAlertmanagerSpecVolumesIscsiPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesIscsiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesIscsiOutput).ToAlertmanagerSpecVolumesIscsiPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesIscsiPtrInput is an input type that accepts AlertmanagerSpecVolumesIscsiArgs, AlertmanagerSpecVolumesIscsiPtr and AlertmanagerSpecVolumesIscsiPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesIscsiPtrInput` via:
//
//          AlertmanagerSpecVolumesIscsiArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesIscsiPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesIscsiPtrOutput() AlertmanagerSpecVolumesIscsiPtrOutput
	ToAlertmanagerSpecVolumesIscsiPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesIscsiPtrOutput
}

type alertmanagerSpecVolumesIscsiPtrType AlertmanagerSpecVolumesIscsiArgs

func AlertmanagerSpecVolumesIscsiPtr(v *AlertmanagerSpecVolumesIscsiArgs) AlertmanagerSpecVolumesIscsiPtrInput {
	return (*alertmanagerSpecVolumesIscsiPtrType)(v)
}

func (*alertmanagerSpecVolumesIscsiPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesIscsi)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesIscsiPtrType) ToAlertmanagerSpecVolumesIscsiPtrOutput() AlertmanagerSpecVolumesIscsiPtrOutput {
	return i.ToAlertmanagerSpecVolumesIscsiPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesIscsiPtrType) ToAlertmanagerSpecVolumesIscsiPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesIscsiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesIscsiPtrOutput)
}

// ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
type AlertmanagerSpecVolumesIscsiOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesIscsiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesIscsi)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesIscsiOutput) ToAlertmanagerSpecVolumesIscsiOutput() AlertmanagerSpecVolumesIscsiOutput {
	return o
}

func (o AlertmanagerSpecVolumesIscsiOutput) ToAlertmanagerSpecVolumesIscsiOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesIscsiOutput {
	return o
}

func (o AlertmanagerSpecVolumesIscsiOutput) ToAlertmanagerSpecVolumesIscsiPtrOutput() AlertmanagerSpecVolumesIscsiPtrOutput {
	return o.ToAlertmanagerSpecVolumesIscsiPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesIscsiOutput) ToAlertmanagerSpecVolumesIscsiPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesIscsiPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesIscsi) *AlertmanagerSpecVolumesIscsi {
		return &v
	}).(AlertmanagerSpecVolumesIscsiPtrOutput)
}

// whether support iSCSI Discovery CHAP authentication
func (o AlertmanagerSpecVolumesIscsiOutput) ChapAuthDiscovery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesIscsi) *bool { return v.ChapAuthDiscovery }).(pulumi.BoolPtrOutput)
}

// whether support iSCSI Session CHAP authentication
func (o AlertmanagerSpecVolumesIscsiOutput) ChapAuthSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesIscsi) *bool { return v.ChapAuthSession }).(pulumi.BoolPtrOutput)
}

// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
func (o AlertmanagerSpecVolumesIscsiOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesIscsi) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
func (o AlertmanagerSpecVolumesIscsiOutput) InitiatorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesIscsi) *string { return v.InitiatorName }).(pulumi.StringPtrOutput)
}

// Target iSCSI Qualified Name.
func (o AlertmanagerSpecVolumesIscsiOutput) Iqn() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesIscsi) string { return v.Iqn }).(pulumi.StringOutput)
}

// iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
func (o AlertmanagerSpecVolumesIscsiOutput) IscsiInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesIscsi) *string { return v.IscsiInterface }).(pulumi.StringPtrOutput)
}

// iSCSI Target Lun number.
func (o AlertmanagerSpecVolumesIscsiOutput) Lun() pulumi.IntOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesIscsi) int { return v.Lun }).(pulumi.IntOutput)
}

// iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (o AlertmanagerSpecVolumesIscsiOutput) Portals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesIscsi) []string { return v.Portals }).(pulumi.StringArrayOutput)
}

// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
func (o AlertmanagerSpecVolumesIscsiOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesIscsi) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// CHAP Secret for iSCSI target and initiator authentication
func (o AlertmanagerSpecVolumesIscsiOutput) SecretRef() AlertmanagerSpecVolumesIscsiSecretRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesIscsi) *AlertmanagerSpecVolumesIscsiSecretRef { return v.SecretRef }).(AlertmanagerSpecVolumesIscsiSecretRefPtrOutput)
}

// iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (o AlertmanagerSpecVolumesIscsiOutput) TargetPortal() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesIscsi) string { return v.TargetPortal }).(pulumi.StringOutput)
}

type AlertmanagerSpecVolumesIscsiPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesIscsiPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesIscsi)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesIscsiPtrOutput) ToAlertmanagerSpecVolumesIscsiPtrOutput() AlertmanagerSpecVolumesIscsiPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesIscsiPtrOutput) ToAlertmanagerSpecVolumesIscsiPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesIscsiPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesIscsiPtrOutput) Elem() AlertmanagerSpecVolumesIscsiOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesIscsi) AlertmanagerSpecVolumesIscsi { return *v }).(AlertmanagerSpecVolumesIscsiOutput)
}

// whether support iSCSI Discovery CHAP authentication
func (o AlertmanagerSpecVolumesIscsiPtrOutput) ChapAuthDiscovery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesIscsi) *bool {
		if v == nil {
			return nil
		}
		return v.ChapAuthDiscovery
	}).(pulumi.BoolPtrOutput)
}

// whether support iSCSI Session CHAP authentication
func (o AlertmanagerSpecVolumesIscsiPtrOutput) ChapAuthSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesIscsi) *bool {
		if v == nil {
			return nil
		}
		return v.ChapAuthSession
	}).(pulumi.BoolPtrOutput)
}

// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
func (o AlertmanagerSpecVolumesIscsiPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesIscsi) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
func (o AlertmanagerSpecVolumesIscsiPtrOutput) InitiatorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesIscsi) *string {
		if v == nil {
			return nil
		}
		return v.InitiatorName
	}).(pulumi.StringPtrOutput)
}

// Target iSCSI Qualified Name.
func (o AlertmanagerSpecVolumesIscsiPtrOutput) Iqn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesIscsi) *string {
		if v == nil {
			return nil
		}
		return &v.Iqn
	}).(pulumi.StringPtrOutput)
}

// iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
func (o AlertmanagerSpecVolumesIscsiPtrOutput) IscsiInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesIscsi) *string {
		if v == nil {
			return nil
		}
		return v.IscsiInterface
	}).(pulumi.StringPtrOutput)
}

// iSCSI Target Lun number.
func (o AlertmanagerSpecVolumesIscsiPtrOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesIscsi) *int {
		if v == nil {
			return nil
		}
		return &v.Lun
	}).(pulumi.IntPtrOutput)
}

// iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (o AlertmanagerSpecVolumesIscsiPtrOutput) Portals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesIscsi) []string {
		if v == nil {
			return nil
		}
		return v.Portals
	}).(pulumi.StringArrayOutput)
}

// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
func (o AlertmanagerSpecVolumesIscsiPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesIscsi) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// CHAP Secret for iSCSI target and initiator authentication
func (o AlertmanagerSpecVolumesIscsiPtrOutput) SecretRef() AlertmanagerSpecVolumesIscsiSecretRefPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesIscsi) *AlertmanagerSpecVolumesIscsiSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(AlertmanagerSpecVolumesIscsiSecretRefPtrOutput)
}

// iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (o AlertmanagerSpecVolumesIscsiPtrOutput) TargetPortal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesIscsi) *string {
		if v == nil {
			return nil
		}
		return &v.TargetPortal
	}).(pulumi.StringPtrOutput)
}

// CHAP Secret for iSCSI target and initiator authentication
type AlertmanagerSpecVolumesIscsiSecretRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
}

// AlertmanagerSpecVolumesIscsiSecretRefInput is an input type that accepts AlertmanagerSpecVolumesIscsiSecretRefArgs and AlertmanagerSpecVolumesIscsiSecretRefOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesIscsiSecretRefInput` via:
//
//          AlertmanagerSpecVolumesIscsiSecretRefArgs{...}
type AlertmanagerSpecVolumesIscsiSecretRefInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesIscsiSecretRefOutput() AlertmanagerSpecVolumesIscsiSecretRefOutput
	ToAlertmanagerSpecVolumesIscsiSecretRefOutputWithContext(context.Context) AlertmanagerSpecVolumesIscsiSecretRefOutput
}

// CHAP Secret for iSCSI target and initiator authentication
type AlertmanagerSpecVolumesIscsiSecretRefArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (AlertmanagerSpecVolumesIscsiSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesIscsiSecretRef)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesIscsiSecretRefArgs) ToAlertmanagerSpecVolumesIscsiSecretRefOutput() AlertmanagerSpecVolumesIscsiSecretRefOutput {
	return i.ToAlertmanagerSpecVolumesIscsiSecretRefOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesIscsiSecretRefArgs) ToAlertmanagerSpecVolumesIscsiSecretRefOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesIscsiSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesIscsiSecretRefOutput)
}

func (i AlertmanagerSpecVolumesIscsiSecretRefArgs) ToAlertmanagerSpecVolumesIscsiSecretRefPtrOutput() AlertmanagerSpecVolumesIscsiSecretRefPtrOutput {
	return i.ToAlertmanagerSpecVolumesIscsiSecretRefPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesIscsiSecretRefArgs) ToAlertmanagerSpecVolumesIscsiSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesIscsiSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesIscsiSecretRefOutput).ToAlertmanagerSpecVolumesIscsiSecretRefPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesIscsiSecretRefPtrInput is an input type that accepts AlertmanagerSpecVolumesIscsiSecretRefArgs, AlertmanagerSpecVolumesIscsiSecretRefPtr and AlertmanagerSpecVolumesIscsiSecretRefPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesIscsiSecretRefPtrInput` via:
//
//          AlertmanagerSpecVolumesIscsiSecretRefArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesIscsiSecretRefPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesIscsiSecretRefPtrOutput() AlertmanagerSpecVolumesIscsiSecretRefPtrOutput
	ToAlertmanagerSpecVolumesIscsiSecretRefPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesIscsiSecretRefPtrOutput
}

type alertmanagerSpecVolumesIscsiSecretRefPtrType AlertmanagerSpecVolumesIscsiSecretRefArgs

func AlertmanagerSpecVolumesIscsiSecretRefPtr(v *AlertmanagerSpecVolumesIscsiSecretRefArgs) AlertmanagerSpecVolumesIscsiSecretRefPtrInput {
	return (*alertmanagerSpecVolumesIscsiSecretRefPtrType)(v)
}

func (*alertmanagerSpecVolumesIscsiSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesIscsiSecretRef)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesIscsiSecretRefPtrType) ToAlertmanagerSpecVolumesIscsiSecretRefPtrOutput() AlertmanagerSpecVolumesIscsiSecretRefPtrOutput {
	return i.ToAlertmanagerSpecVolumesIscsiSecretRefPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesIscsiSecretRefPtrType) ToAlertmanagerSpecVolumesIscsiSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesIscsiSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesIscsiSecretRefPtrOutput)
}

// CHAP Secret for iSCSI target and initiator authentication
type AlertmanagerSpecVolumesIscsiSecretRefOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesIscsiSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesIscsiSecretRef)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesIscsiSecretRefOutput) ToAlertmanagerSpecVolumesIscsiSecretRefOutput() AlertmanagerSpecVolumesIscsiSecretRefOutput {
	return o
}

func (o AlertmanagerSpecVolumesIscsiSecretRefOutput) ToAlertmanagerSpecVolumesIscsiSecretRefOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesIscsiSecretRefOutput {
	return o
}

func (o AlertmanagerSpecVolumesIscsiSecretRefOutput) ToAlertmanagerSpecVolumesIscsiSecretRefPtrOutput() AlertmanagerSpecVolumesIscsiSecretRefPtrOutput {
	return o.ToAlertmanagerSpecVolumesIscsiSecretRefPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesIscsiSecretRefOutput) ToAlertmanagerSpecVolumesIscsiSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesIscsiSecretRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesIscsiSecretRef) *AlertmanagerSpecVolumesIscsiSecretRef {
		return &v
	}).(AlertmanagerSpecVolumesIscsiSecretRefPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecVolumesIscsiSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesIscsiSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecVolumesIscsiSecretRefPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesIscsiSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesIscsiSecretRef)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesIscsiSecretRefPtrOutput) ToAlertmanagerSpecVolumesIscsiSecretRefPtrOutput() AlertmanagerSpecVolumesIscsiSecretRefPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesIscsiSecretRefPtrOutput) ToAlertmanagerSpecVolumesIscsiSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesIscsiSecretRefPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesIscsiSecretRefPtrOutput) Elem() AlertmanagerSpecVolumesIscsiSecretRefOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesIscsiSecretRef) AlertmanagerSpecVolumesIscsiSecretRef { return *v }).(AlertmanagerSpecVolumesIscsiSecretRefOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecVolumesIscsiSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesIscsiSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
type AlertmanagerSpecVolumesNfs struct {
	// Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Path string `pulumi:"path"`
	// ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	ReadOnly *bool `pulumi:"readOnly"`
	// Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Server string `pulumi:"server"`
}

// AlertmanagerSpecVolumesNfsInput is an input type that accepts AlertmanagerSpecVolumesNfsArgs and AlertmanagerSpecVolumesNfsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesNfsInput` via:
//
//          AlertmanagerSpecVolumesNfsArgs{...}
type AlertmanagerSpecVolumesNfsInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesNfsOutput() AlertmanagerSpecVolumesNfsOutput
	ToAlertmanagerSpecVolumesNfsOutputWithContext(context.Context) AlertmanagerSpecVolumesNfsOutput
}

// NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
type AlertmanagerSpecVolumesNfsArgs struct {
	// Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Path pulumi.StringInput `pulumi:"path"`
	// ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Server pulumi.StringInput `pulumi:"server"`
}

func (AlertmanagerSpecVolumesNfsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesNfs)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesNfsArgs) ToAlertmanagerSpecVolumesNfsOutput() AlertmanagerSpecVolumesNfsOutput {
	return i.ToAlertmanagerSpecVolumesNfsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesNfsArgs) ToAlertmanagerSpecVolumesNfsOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesNfsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesNfsOutput)
}

func (i AlertmanagerSpecVolumesNfsArgs) ToAlertmanagerSpecVolumesNfsPtrOutput() AlertmanagerSpecVolumesNfsPtrOutput {
	return i.ToAlertmanagerSpecVolumesNfsPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesNfsArgs) ToAlertmanagerSpecVolumesNfsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesNfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesNfsOutput).ToAlertmanagerSpecVolumesNfsPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesNfsPtrInput is an input type that accepts AlertmanagerSpecVolumesNfsArgs, AlertmanagerSpecVolumesNfsPtr and AlertmanagerSpecVolumesNfsPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesNfsPtrInput` via:
//
//          AlertmanagerSpecVolumesNfsArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesNfsPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesNfsPtrOutput() AlertmanagerSpecVolumesNfsPtrOutput
	ToAlertmanagerSpecVolumesNfsPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesNfsPtrOutput
}

type alertmanagerSpecVolumesNfsPtrType AlertmanagerSpecVolumesNfsArgs

func AlertmanagerSpecVolumesNfsPtr(v *AlertmanagerSpecVolumesNfsArgs) AlertmanagerSpecVolumesNfsPtrInput {
	return (*alertmanagerSpecVolumesNfsPtrType)(v)
}

func (*alertmanagerSpecVolumesNfsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesNfs)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesNfsPtrType) ToAlertmanagerSpecVolumesNfsPtrOutput() AlertmanagerSpecVolumesNfsPtrOutput {
	return i.ToAlertmanagerSpecVolumesNfsPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesNfsPtrType) ToAlertmanagerSpecVolumesNfsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesNfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesNfsPtrOutput)
}

// NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
type AlertmanagerSpecVolumesNfsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesNfsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesNfs)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesNfsOutput) ToAlertmanagerSpecVolumesNfsOutput() AlertmanagerSpecVolumesNfsOutput {
	return o
}

func (o AlertmanagerSpecVolumesNfsOutput) ToAlertmanagerSpecVolumesNfsOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesNfsOutput {
	return o
}

func (o AlertmanagerSpecVolumesNfsOutput) ToAlertmanagerSpecVolumesNfsPtrOutput() AlertmanagerSpecVolumesNfsPtrOutput {
	return o.ToAlertmanagerSpecVolumesNfsPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesNfsOutput) ToAlertmanagerSpecVolumesNfsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesNfsPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesNfs) *AlertmanagerSpecVolumesNfs {
		return &v
	}).(AlertmanagerSpecVolumesNfsPtrOutput)
}

// Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o AlertmanagerSpecVolumesNfsOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesNfs) string { return v.Path }).(pulumi.StringOutput)
}

// ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o AlertmanagerSpecVolumesNfsOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesNfs) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o AlertmanagerSpecVolumesNfsOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesNfs) string { return v.Server }).(pulumi.StringOutput)
}

type AlertmanagerSpecVolumesNfsPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesNfsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesNfs)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesNfsPtrOutput) ToAlertmanagerSpecVolumesNfsPtrOutput() AlertmanagerSpecVolumesNfsPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesNfsPtrOutput) ToAlertmanagerSpecVolumesNfsPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesNfsPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesNfsPtrOutput) Elem() AlertmanagerSpecVolumesNfsOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesNfs) AlertmanagerSpecVolumesNfs { return *v }).(AlertmanagerSpecVolumesNfsOutput)
}

// Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o AlertmanagerSpecVolumesNfsPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesNfs) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o AlertmanagerSpecVolumesNfsPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesNfs) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o AlertmanagerSpecVolumesNfsPtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesNfs) *string {
		if v == nil {
			return nil
		}
		return &v.Server
	}).(pulumi.StringPtrOutput)
}

// PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type AlertmanagerSpecVolumesPersistentVolumeClaim struct {
	// ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	ClaimName string `pulumi:"claimName"`
	// Will force the ReadOnly setting in VolumeMounts. Default false.
	ReadOnly *bool `pulumi:"readOnly"`
}

// AlertmanagerSpecVolumesPersistentVolumeClaimInput is an input type that accepts AlertmanagerSpecVolumesPersistentVolumeClaimArgs and AlertmanagerSpecVolumesPersistentVolumeClaimOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesPersistentVolumeClaimInput` via:
//
//          AlertmanagerSpecVolumesPersistentVolumeClaimArgs{...}
type AlertmanagerSpecVolumesPersistentVolumeClaimInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesPersistentVolumeClaimOutput() AlertmanagerSpecVolumesPersistentVolumeClaimOutput
	ToAlertmanagerSpecVolumesPersistentVolumeClaimOutputWithContext(context.Context) AlertmanagerSpecVolumesPersistentVolumeClaimOutput
}

// PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type AlertmanagerSpecVolumesPersistentVolumeClaimArgs struct {
	// ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	ClaimName pulumi.StringInput `pulumi:"claimName"`
	// Will force the ReadOnly setting in VolumeMounts. Default false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (AlertmanagerSpecVolumesPersistentVolumeClaimArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesPersistentVolumeClaim)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesPersistentVolumeClaimArgs) ToAlertmanagerSpecVolumesPersistentVolumeClaimOutput() AlertmanagerSpecVolumesPersistentVolumeClaimOutput {
	return i.ToAlertmanagerSpecVolumesPersistentVolumeClaimOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesPersistentVolumeClaimArgs) ToAlertmanagerSpecVolumesPersistentVolumeClaimOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesPersistentVolumeClaimOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesPersistentVolumeClaimOutput)
}

func (i AlertmanagerSpecVolumesPersistentVolumeClaimArgs) ToAlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput() AlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput {
	return i.ToAlertmanagerSpecVolumesPersistentVolumeClaimPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesPersistentVolumeClaimArgs) ToAlertmanagerSpecVolumesPersistentVolumeClaimPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesPersistentVolumeClaimOutput).ToAlertmanagerSpecVolumesPersistentVolumeClaimPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesPersistentVolumeClaimPtrInput is an input type that accepts AlertmanagerSpecVolumesPersistentVolumeClaimArgs, AlertmanagerSpecVolumesPersistentVolumeClaimPtr and AlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesPersistentVolumeClaimPtrInput` via:
//
//          AlertmanagerSpecVolumesPersistentVolumeClaimArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesPersistentVolumeClaimPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput() AlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput
	ToAlertmanagerSpecVolumesPersistentVolumeClaimPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput
}

type alertmanagerSpecVolumesPersistentVolumeClaimPtrType AlertmanagerSpecVolumesPersistentVolumeClaimArgs

func AlertmanagerSpecVolumesPersistentVolumeClaimPtr(v *AlertmanagerSpecVolumesPersistentVolumeClaimArgs) AlertmanagerSpecVolumesPersistentVolumeClaimPtrInput {
	return (*alertmanagerSpecVolumesPersistentVolumeClaimPtrType)(v)
}

func (*alertmanagerSpecVolumesPersistentVolumeClaimPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesPersistentVolumeClaim)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesPersistentVolumeClaimPtrType) ToAlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput() AlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput {
	return i.ToAlertmanagerSpecVolumesPersistentVolumeClaimPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesPersistentVolumeClaimPtrType) ToAlertmanagerSpecVolumesPersistentVolumeClaimPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput)
}

// PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type AlertmanagerSpecVolumesPersistentVolumeClaimOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesPersistentVolumeClaimOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesPersistentVolumeClaim)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesPersistentVolumeClaimOutput) ToAlertmanagerSpecVolumesPersistentVolumeClaimOutput() AlertmanagerSpecVolumesPersistentVolumeClaimOutput {
	return o
}

func (o AlertmanagerSpecVolumesPersistentVolumeClaimOutput) ToAlertmanagerSpecVolumesPersistentVolumeClaimOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesPersistentVolumeClaimOutput {
	return o
}

func (o AlertmanagerSpecVolumesPersistentVolumeClaimOutput) ToAlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput() AlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput {
	return o.ToAlertmanagerSpecVolumesPersistentVolumeClaimPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesPersistentVolumeClaimOutput) ToAlertmanagerSpecVolumesPersistentVolumeClaimPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesPersistentVolumeClaim) *AlertmanagerSpecVolumesPersistentVolumeClaim {
		return &v
	}).(AlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput)
}

// ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o AlertmanagerSpecVolumesPersistentVolumeClaimOutput) ClaimName() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesPersistentVolumeClaim) string { return v.ClaimName }).(pulumi.StringOutput)
}

// Will force the ReadOnly setting in VolumeMounts. Default false.
func (o AlertmanagerSpecVolumesPersistentVolumeClaimOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesPersistentVolumeClaim) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type AlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesPersistentVolumeClaim)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput) ToAlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput() AlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput) ToAlertmanagerSpecVolumesPersistentVolumeClaimPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput) Elem() AlertmanagerSpecVolumesPersistentVolumeClaimOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesPersistentVolumeClaim) AlertmanagerSpecVolumesPersistentVolumeClaim {
		return *v
	}).(AlertmanagerSpecVolumesPersistentVolumeClaimOutput)
}

// ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o AlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput) ClaimName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesPersistentVolumeClaim) *string {
		if v == nil {
			return nil
		}
		return &v.ClaimName
	}).(pulumi.StringPtrOutput)
}

// Will force the ReadOnly setting in VolumeMounts. Default false.
func (o AlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesPersistentVolumeClaim) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
type AlertmanagerSpecVolumesPhotonPersistentDisk struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// ID that identifies Photon Controller persistent disk
	PdID string `pulumi:"pdID"`
}

// AlertmanagerSpecVolumesPhotonPersistentDiskInput is an input type that accepts AlertmanagerSpecVolumesPhotonPersistentDiskArgs and AlertmanagerSpecVolumesPhotonPersistentDiskOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesPhotonPersistentDiskInput` via:
//
//          AlertmanagerSpecVolumesPhotonPersistentDiskArgs{...}
type AlertmanagerSpecVolumesPhotonPersistentDiskInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesPhotonPersistentDiskOutput() AlertmanagerSpecVolumesPhotonPersistentDiskOutput
	ToAlertmanagerSpecVolumesPhotonPersistentDiskOutputWithContext(context.Context) AlertmanagerSpecVolumesPhotonPersistentDiskOutput
}

// PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
type AlertmanagerSpecVolumesPhotonPersistentDiskArgs struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// ID that identifies Photon Controller persistent disk
	PdID pulumi.StringInput `pulumi:"pdID"`
}

func (AlertmanagerSpecVolumesPhotonPersistentDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesPhotonPersistentDisk)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesPhotonPersistentDiskArgs) ToAlertmanagerSpecVolumesPhotonPersistentDiskOutput() AlertmanagerSpecVolumesPhotonPersistentDiskOutput {
	return i.ToAlertmanagerSpecVolumesPhotonPersistentDiskOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesPhotonPersistentDiskArgs) ToAlertmanagerSpecVolumesPhotonPersistentDiskOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesPhotonPersistentDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesPhotonPersistentDiskOutput)
}

func (i AlertmanagerSpecVolumesPhotonPersistentDiskArgs) ToAlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput() AlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput {
	return i.ToAlertmanagerSpecVolumesPhotonPersistentDiskPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesPhotonPersistentDiskArgs) ToAlertmanagerSpecVolumesPhotonPersistentDiskPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesPhotonPersistentDiskOutput).ToAlertmanagerSpecVolumesPhotonPersistentDiskPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesPhotonPersistentDiskPtrInput is an input type that accepts AlertmanagerSpecVolumesPhotonPersistentDiskArgs, AlertmanagerSpecVolumesPhotonPersistentDiskPtr and AlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesPhotonPersistentDiskPtrInput` via:
//
//          AlertmanagerSpecVolumesPhotonPersistentDiskArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesPhotonPersistentDiskPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput() AlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput
	ToAlertmanagerSpecVolumesPhotonPersistentDiskPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput
}

type alertmanagerSpecVolumesPhotonPersistentDiskPtrType AlertmanagerSpecVolumesPhotonPersistentDiskArgs

func AlertmanagerSpecVolumesPhotonPersistentDiskPtr(v *AlertmanagerSpecVolumesPhotonPersistentDiskArgs) AlertmanagerSpecVolumesPhotonPersistentDiskPtrInput {
	return (*alertmanagerSpecVolumesPhotonPersistentDiskPtrType)(v)
}

func (*alertmanagerSpecVolumesPhotonPersistentDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesPhotonPersistentDisk)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesPhotonPersistentDiskPtrType) ToAlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput() AlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput {
	return i.ToAlertmanagerSpecVolumesPhotonPersistentDiskPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesPhotonPersistentDiskPtrType) ToAlertmanagerSpecVolumesPhotonPersistentDiskPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput)
}

// PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
type AlertmanagerSpecVolumesPhotonPersistentDiskOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesPhotonPersistentDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesPhotonPersistentDisk)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesPhotonPersistentDiskOutput) ToAlertmanagerSpecVolumesPhotonPersistentDiskOutput() AlertmanagerSpecVolumesPhotonPersistentDiskOutput {
	return o
}

func (o AlertmanagerSpecVolumesPhotonPersistentDiskOutput) ToAlertmanagerSpecVolumesPhotonPersistentDiskOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesPhotonPersistentDiskOutput {
	return o
}

func (o AlertmanagerSpecVolumesPhotonPersistentDiskOutput) ToAlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput() AlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput {
	return o.ToAlertmanagerSpecVolumesPhotonPersistentDiskPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesPhotonPersistentDiskOutput) ToAlertmanagerSpecVolumesPhotonPersistentDiskPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesPhotonPersistentDisk) *AlertmanagerSpecVolumesPhotonPersistentDisk {
		return &v
	}).(AlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput)
}

// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o AlertmanagerSpecVolumesPhotonPersistentDiskOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesPhotonPersistentDisk) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// ID that identifies Photon Controller persistent disk
func (o AlertmanagerSpecVolumesPhotonPersistentDiskOutput) PdID() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesPhotonPersistentDisk) string { return v.PdID }).(pulumi.StringOutput)
}

type AlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesPhotonPersistentDisk)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput) ToAlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput() AlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput) ToAlertmanagerSpecVolumesPhotonPersistentDiskPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput) Elem() AlertmanagerSpecVolumesPhotonPersistentDiskOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesPhotonPersistentDisk) AlertmanagerSpecVolumesPhotonPersistentDisk {
		return *v
	}).(AlertmanagerSpecVolumesPhotonPersistentDiskOutput)
}

// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o AlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesPhotonPersistentDisk) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// ID that identifies Photon Controller persistent disk
func (o AlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput) PdID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesPhotonPersistentDisk) *string {
		if v == nil {
			return nil
		}
		return &v.PdID
	}).(pulumi.StringPtrOutput)
}

// PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
type AlertmanagerSpecVolumesPortworxVolume struct {
	// FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// VolumeID uniquely identifies a Portworx volume
	VolumeID string `pulumi:"volumeID"`
}

// AlertmanagerSpecVolumesPortworxVolumeInput is an input type that accepts AlertmanagerSpecVolumesPortworxVolumeArgs and AlertmanagerSpecVolumesPortworxVolumeOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesPortworxVolumeInput` via:
//
//          AlertmanagerSpecVolumesPortworxVolumeArgs{...}
type AlertmanagerSpecVolumesPortworxVolumeInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesPortworxVolumeOutput() AlertmanagerSpecVolumesPortworxVolumeOutput
	ToAlertmanagerSpecVolumesPortworxVolumeOutputWithContext(context.Context) AlertmanagerSpecVolumesPortworxVolumeOutput
}

// PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
type AlertmanagerSpecVolumesPortworxVolumeArgs struct {
	// FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// VolumeID uniquely identifies a Portworx volume
	VolumeID pulumi.StringInput `pulumi:"volumeID"`
}

func (AlertmanagerSpecVolumesPortworxVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesPortworxVolume)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesPortworxVolumeArgs) ToAlertmanagerSpecVolumesPortworxVolumeOutput() AlertmanagerSpecVolumesPortworxVolumeOutput {
	return i.ToAlertmanagerSpecVolumesPortworxVolumeOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesPortworxVolumeArgs) ToAlertmanagerSpecVolumesPortworxVolumeOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesPortworxVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesPortworxVolumeOutput)
}

func (i AlertmanagerSpecVolumesPortworxVolumeArgs) ToAlertmanagerSpecVolumesPortworxVolumePtrOutput() AlertmanagerSpecVolumesPortworxVolumePtrOutput {
	return i.ToAlertmanagerSpecVolumesPortworxVolumePtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesPortworxVolumeArgs) ToAlertmanagerSpecVolumesPortworxVolumePtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesPortworxVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesPortworxVolumeOutput).ToAlertmanagerSpecVolumesPortworxVolumePtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesPortworxVolumePtrInput is an input type that accepts AlertmanagerSpecVolumesPortworxVolumeArgs, AlertmanagerSpecVolumesPortworxVolumePtr and AlertmanagerSpecVolumesPortworxVolumePtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesPortworxVolumePtrInput` via:
//
//          AlertmanagerSpecVolumesPortworxVolumeArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesPortworxVolumePtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesPortworxVolumePtrOutput() AlertmanagerSpecVolumesPortworxVolumePtrOutput
	ToAlertmanagerSpecVolumesPortworxVolumePtrOutputWithContext(context.Context) AlertmanagerSpecVolumesPortworxVolumePtrOutput
}

type alertmanagerSpecVolumesPortworxVolumePtrType AlertmanagerSpecVolumesPortworxVolumeArgs

func AlertmanagerSpecVolumesPortworxVolumePtr(v *AlertmanagerSpecVolumesPortworxVolumeArgs) AlertmanagerSpecVolumesPortworxVolumePtrInput {
	return (*alertmanagerSpecVolumesPortworxVolumePtrType)(v)
}

func (*alertmanagerSpecVolumesPortworxVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesPortworxVolume)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesPortworxVolumePtrType) ToAlertmanagerSpecVolumesPortworxVolumePtrOutput() AlertmanagerSpecVolumesPortworxVolumePtrOutput {
	return i.ToAlertmanagerSpecVolumesPortworxVolumePtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesPortworxVolumePtrType) ToAlertmanagerSpecVolumesPortworxVolumePtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesPortworxVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesPortworxVolumePtrOutput)
}

// PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
type AlertmanagerSpecVolumesPortworxVolumeOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesPortworxVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesPortworxVolume)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesPortworxVolumeOutput) ToAlertmanagerSpecVolumesPortworxVolumeOutput() AlertmanagerSpecVolumesPortworxVolumeOutput {
	return o
}

func (o AlertmanagerSpecVolumesPortworxVolumeOutput) ToAlertmanagerSpecVolumesPortworxVolumeOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesPortworxVolumeOutput {
	return o
}

func (o AlertmanagerSpecVolumesPortworxVolumeOutput) ToAlertmanagerSpecVolumesPortworxVolumePtrOutput() AlertmanagerSpecVolumesPortworxVolumePtrOutput {
	return o.ToAlertmanagerSpecVolumesPortworxVolumePtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesPortworxVolumeOutput) ToAlertmanagerSpecVolumesPortworxVolumePtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesPortworxVolumePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesPortworxVolume) *AlertmanagerSpecVolumesPortworxVolume {
		return &v
	}).(AlertmanagerSpecVolumesPortworxVolumePtrOutput)
}

// FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
func (o AlertmanagerSpecVolumesPortworxVolumeOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesPortworxVolume) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o AlertmanagerSpecVolumesPortworxVolumeOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesPortworxVolume) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// VolumeID uniquely identifies a Portworx volume
func (o AlertmanagerSpecVolumesPortworxVolumeOutput) VolumeID() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesPortworxVolume) string { return v.VolumeID }).(pulumi.StringOutput)
}

type AlertmanagerSpecVolumesPortworxVolumePtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesPortworxVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesPortworxVolume)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesPortworxVolumePtrOutput) ToAlertmanagerSpecVolumesPortworxVolumePtrOutput() AlertmanagerSpecVolumesPortworxVolumePtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesPortworxVolumePtrOutput) ToAlertmanagerSpecVolumesPortworxVolumePtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesPortworxVolumePtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesPortworxVolumePtrOutput) Elem() AlertmanagerSpecVolumesPortworxVolumeOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesPortworxVolume) AlertmanagerSpecVolumesPortworxVolume { return *v }).(AlertmanagerSpecVolumesPortworxVolumeOutput)
}

// FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
func (o AlertmanagerSpecVolumesPortworxVolumePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesPortworxVolume) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o AlertmanagerSpecVolumesPortworxVolumePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesPortworxVolume) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// VolumeID uniquely identifies a Portworx volume
func (o AlertmanagerSpecVolumesPortworxVolumePtrOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesPortworxVolume) *string {
		if v == nil {
			return nil
		}
		return &v.VolumeID
	}).(pulumi.StringPtrOutput)
}

// Items for all in one resources secrets, configmaps, and downward API
type AlertmanagerSpecVolumesProjected struct {
	// Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// list of volume projections
	Sources []AlertmanagerSpecVolumesProjectedSources `pulumi:"sources"`
}

// AlertmanagerSpecVolumesProjectedInput is an input type that accepts AlertmanagerSpecVolumesProjectedArgs and AlertmanagerSpecVolumesProjectedOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesProjectedInput` via:
//
//          AlertmanagerSpecVolumesProjectedArgs{...}
type AlertmanagerSpecVolumesProjectedInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesProjectedOutput() AlertmanagerSpecVolumesProjectedOutput
	ToAlertmanagerSpecVolumesProjectedOutputWithContext(context.Context) AlertmanagerSpecVolumesProjectedOutput
}

// Items for all in one resources secrets, configmaps, and downward API
type AlertmanagerSpecVolumesProjectedArgs struct {
	// Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// list of volume projections
	Sources AlertmanagerSpecVolumesProjectedSourcesArrayInput `pulumi:"sources"`
}

func (AlertmanagerSpecVolumesProjectedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesProjected)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesProjectedArgs) ToAlertmanagerSpecVolumesProjectedOutput() AlertmanagerSpecVolumesProjectedOutput {
	return i.ToAlertmanagerSpecVolumesProjectedOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesProjectedArgs) ToAlertmanagerSpecVolumesProjectedOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedOutput)
}

func (i AlertmanagerSpecVolumesProjectedArgs) ToAlertmanagerSpecVolumesProjectedPtrOutput() AlertmanagerSpecVolumesProjectedPtrOutput {
	return i.ToAlertmanagerSpecVolumesProjectedPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesProjectedArgs) ToAlertmanagerSpecVolumesProjectedPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedOutput).ToAlertmanagerSpecVolumesProjectedPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesProjectedPtrInput is an input type that accepts AlertmanagerSpecVolumesProjectedArgs, AlertmanagerSpecVolumesProjectedPtr and AlertmanagerSpecVolumesProjectedPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesProjectedPtrInput` via:
//
//          AlertmanagerSpecVolumesProjectedArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesProjectedPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesProjectedPtrOutput() AlertmanagerSpecVolumesProjectedPtrOutput
	ToAlertmanagerSpecVolumesProjectedPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesProjectedPtrOutput
}

type alertmanagerSpecVolumesProjectedPtrType AlertmanagerSpecVolumesProjectedArgs

func AlertmanagerSpecVolumesProjectedPtr(v *AlertmanagerSpecVolumesProjectedArgs) AlertmanagerSpecVolumesProjectedPtrInput {
	return (*alertmanagerSpecVolumesProjectedPtrType)(v)
}

func (*alertmanagerSpecVolumesProjectedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesProjected)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesProjectedPtrType) ToAlertmanagerSpecVolumesProjectedPtrOutput() AlertmanagerSpecVolumesProjectedPtrOutput {
	return i.ToAlertmanagerSpecVolumesProjectedPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesProjectedPtrType) ToAlertmanagerSpecVolumesProjectedPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedPtrOutput)
}

// Items for all in one resources secrets, configmaps, and downward API
type AlertmanagerSpecVolumesProjectedOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesProjectedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesProjected)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesProjectedOutput) ToAlertmanagerSpecVolumesProjectedOutput() AlertmanagerSpecVolumesProjectedOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedOutput) ToAlertmanagerSpecVolumesProjectedOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedOutput) ToAlertmanagerSpecVolumesProjectedPtrOutput() AlertmanagerSpecVolumesProjectedPtrOutput {
	return o.ToAlertmanagerSpecVolumesProjectedPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesProjectedOutput) ToAlertmanagerSpecVolumesProjectedPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjected) *AlertmanagerSpecVolumesProjected {
		return &v
	}).(AlertmanagerSpecVolumesProjectedPtrOutput)
}

// Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o AlertmanagerSpecVolumesProjectedOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjected) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// list of volume projections
func (o AlertmanagerSpecVolumesProjectedOutput) Sources() AlertmanagerSpecVolumesProjectedSourcesArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjected) []AlertmanagerSpecVolumesProjectedSources { return v.Sources }).(AlertmanagerSpecVolumesProjectedSourcesArrayOutput)
}

type AlertmanagerSpecVolumesProjectedPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesProjectedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesProjected)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesProjectedPtrOutput) ToAlertmanagerSpecVolumesProjectedPtrOutput() AlertmanagerSpecVolumesProjectedPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedPtrOutput) ToAlertmanagerSpecVolumesProjectedPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedPtrOutput) Elem() AlertmanagerSpecVolumesProjectedOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesProjected) AlertmanagerSpecVolumesProjected { return *v }).(AlertmanagerSpecVolumesProjectedOutput)
}

// Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o AlertmanagerSpecVolumesProjectedPtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesProjected) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// list of volume projections
func (o AlertmanagerSpecVolumesProjectedPtrOutput) Sources() AlertmanagerSpecVolumesProjectedSourcesArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesProjected) []AlertmanagerSpecVolumesProjectedSources {
		if v == nil {
			return nil
		}
		return v.Sources
	}).(AlertmanagerSpecVolumesProjectedSourcesArrayOutput)
}

// Projection that may be projected along with other supported volume types
type AlertmanagerSpecVolumesProjectedSources struct {
	// information about the configMap data to project
	ConfigMap *AlertmanagerSpecVolumesProjectedSourcesConfigMap `pulumi:"configMap"`
	// information about the downwardAPI data to project
	DownwardAPI *AlertmanagerSpecVolumesProjectedSourcesDownwardAPI `pulumi:"downwardAPI"`
	// information about the secret data to project
	Secret *AlertmanagerSpecVolumesProjectedSourcesSecret `pulumi:"secret"`
	// information about the serviceAccountToken data to project
	ServiceAccountToken *AlertmanagerSpecVolumesProjectedSourcesServiceAccountToken `pulumi:"serviceAccountToken"`
}

// AlertmanagerSpecVolumesProjectedSourcesInput is an input type that accepts AlertmanagerSpecVolumesProjectedSourcesArgs and AlertmanagerSpecVolumesProjectedSourcesOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesProjectedSourcesInput` via:
//
//          AlertmanagerSpecVolumesProjectedSourcesArgs{...}
type AlertmanagerSpecVolumesProjectedSourcesInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesProjectedSourcesOutput() AlertmanagerSpecVolumesProjectedSourcesOutput
	ToAlertmanagerSpecVolumesProjectedSourcesOutputWithContext(context.Context) AlertmanagerSpecVolumesProjectedSourcesOutput
}

// Projection that may be projected along with other supported volume types
type AlertmanagerSpecVolumesProjectedSourcesArgs struct {
	// information about the configMap data to project
	ConfigMap AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrInput `pulumi:"configMap"`
	// information about the downwardAPI data to project
	DownwardAPI AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrInput `pulumi:"downwardAPI"`
	// information about the secret data to project
	Secret AlertmanagerSpecVolumesProjectedSourcesSecretPtrInput `pulumi:"secret"`
	// information about the serviceAccountToken data to project
	ServiceAccountToken AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrInput `pulumi:"serviceAccountToken"`
}

func (AlertmanagerSpecVolumesProjectedSourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesProjectedSources)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesProjectedSourcesArgs) ToAlertmanagerSpecVolumesProjectedSourcesOutput() AlertmanagerSpecVolumesProjectedSourcesOutput {
	return i.ToAlertmanagerSpecVolumesProjectedSourcesOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesProjectedSourcesArgs) ToAlertmanagerSpecVolumesProjectedSourcesOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedSourcesOutput)
}

// AlertmanagerSpecVolumesProjectedSourcesArrayInput is an input type that accepts AlertmanagerSpecVolumesProjectedSourcesArray and AlertmanagerSpecVolumesProjectedSourcesArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesProjectedSourcesArrayInput` via:
//
//          AlertmanagerSpecVolumesProjectedSourcesArray{ AlertmanagerSpecVolumesProjectedSourcesArgs{...} }
type AlertmanagerSpecVolumesProjectedSourcesArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesProjectedSourcesArrayOutput() AlertmanagerSpecVolumesProjectedSourcesArrayOutput
	ToAlertmanagerSpecVolumesProjectedSourcesArrayOutputWithContext(context.Context) AlertmanagerSpecVolumesProjectedSourcesArrayOutput
}

type AlertmanagerSpecVolumesProjectedSourcesArray []AlertmanagerSpecVolumesProjectedSourcesInput

func (AlertmanagerSpecVolumesProjectedSourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecVolumesProjectedSources)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesProjectedSourcesArray) ToAlertmanagerSpecVolumesProjectedSourcesArrayOutput() AlertmanagerSpecVolumesProjectedSourcesArrayOutput {
	return i.ToAlertmanagerSpecVolumesProjectedSourcesArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesProjectedSourcesArray) ToAlertmanagerSpecVolumesProjectedSourcesArrayOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedSourcesArrayOutput)
}

// Projection that may be projected along with other supported volume types
type AlertmanagerSpecVolumesProjectedSourcesOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesProjectedSourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesProjectedSources)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesProjectedSourcesOutput) ToAlertmanagerSpecVolumesProjectedSourcesOutput() AlertmanagerSpecVolumesProjectedSourcesOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesOutput) ToAlertmanagerSpecVolumesProjectedSourcesOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesOutput {
	return o
}

// information about the configMap data to project
func (o AlertmanagerSpecVolumesProjectedSourcesOutput) ConfigMap() AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSources) *AlertmanagerSpecVolumesProjectedSourcesConfigMap {
		return v.ConfigMap
	}).(AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput)
}

// information about the downwardAPI data to project
func (o AlertmanagerSpecVolumesProjectedSourcesOutput) DownwardAPI() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSources) *AlertmanagerSpecVolumesProjectedSourcesDownwardAPI {
		return v.DownwardAPI
	}).(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutput)
}

// information about the secret data to project
func (o AlertmanagerSpecVolumesProjectedSourcesOutput) Secret() AlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSources) *AlertmanagerSpecVolumesProjectedSourcesSecret {
		return v.Secret
	}).(AlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput)
}

// information about the serviceAccountToken data to project
func (o AlertmanagerSpecVolumesProjectedSourcesOutput) ServiceAccountToken() AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSources) *AlertmanagerSpecVolumesProjectedSourcesServiceAccountToken {
		return v.ServiceAccountToken
	}).(AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput)
}

type AlertmanagerSpecVolumesProjectedSourcesArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesProjectedSourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecVolumesProjectedSources)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesProjectedSourcesArrayOutput) ToAlertmanagerSpecVolumesProjectedSourcesArrayOutput() AlertmanagerSpecVolumesProjectedSourcesArrayOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesArrayOutput) ToAlertmanagerSpecVolumesProjectedSourcesArrayOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesArrayOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecVolumesProjectedSourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecVolumesProjectedSources {
		return vs[0].([]AlertmanagerSpecVolumesProjectedSources)[vs[1].(int)]
	}).(AlertmanagerSpecVolumesProjectedSourcesOutput)
}

// information about the configMap data to project
type AlertmanagerSpecVolumesProjectedSourcesConfigMap struct {
	// If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []AlertmanagerSpecVolumesProjectedSourcesConfigMapItems `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its keys must be defined
	Optional *bool `pulumi:"optional"`
}

// AlertmanagerSpecVolumesProjectedSourcesConfigMapInput is an input type that accepts AlertmanagerSpecVolumesProjectedSourcesConfigMap and AlertmanagerSpecVolumesProjectedSourcesConfigMapOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesProjectedSourcesConfigMapInput` via:
//
//          AlertmanagerSpecVolumesProjectedSourcesConfigMap{ "key": AlertmanagerSpecVolumesProjectedSourcesConfigArgs{...} }
type AlertmanagerSpecVolumesProjectedSourcesConfigMapInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesProjectedSourcesConfigMapOutput() AlertmanagerSpecVolumesProjectedSourcesConfigMapOutput
	ToAlertmanagerSpecVolumesProjectedSourcesConfigMapOutputWithContext(context.Context) AlertmanagerSpecVolumesProjectedSourcesConfigMapOutput
}

// information about the configMap data to project
type AlertmanagerSpecVolumesProjectedSourcesConfigMapArgs struct {
	// If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayInput `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its keys must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (AlertmanagerSpecVolumesProjectedSourcesConfigMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesProjectedSourcesConfigMap)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesProjectedSourcesConfigMapArgs) ToAlertmanagerSpecVolumesProjectedSourcesConfigMapOutput() AlertmanagerSpecVolumesProjectedSourcesConfigMapOutput {
	return i.ToAlertmanagerSpecVolumesProjectedSourcesConfigMapOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesProjectedSourcesConfigMapArgs) ToAlertmanagerSpecVolumesProjectedSourcesConfigMapOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedSourcesConfigMapOutput)
}

func (i AlertmanagerSpecVolumesProjectedSourcesConfigMapArgs) ToAlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput() AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput {
	return i.ToAlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesProjectedSourcesConfigMapArgs) ToAlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedSourcesConfigMapOutput).ToAlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrInput is an input type that accepts AlertmanagerSpecVolumesProjectedSourcesConfigMapArgs, AlertmanagerSpecVolumesProjectedSourcesConfigMapPtr and AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrInput` via:
//
//          AlertmanagerSpecVolumesProjectedSourcesConfigMapArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput() AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput
	ToAlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput
}

type alertmanagerSpecVolumesProjectedSourcesConfigMapPtrType AlertmanagerSpecVolumesProjectedSourcesConfigMapArgs

func AlertmanagerSpecVolumesProjectedSourcesConfigMapPtr(v *AlertmanagerSpecVolumesProjectedSourcesConfigMapArgs) AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrInput {
	return (*alertmanagerSpecVolumesProjectedSourcesConfigMapPtrType)(v)
}

func (*alertmanagerSpecVolumesProjectedSourcesConfigMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesProjectedSourcesConfigMap)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesProjectedSourcesConfigMapPtrType) ToAlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput() AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput {
	return i.ToAlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesProjectedSourcesConfigMapPtrType) ToAlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput)
}

// information about the configMap data to project
type AlertmanagerSpecVolumesProjectedSourcesConfigMapOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesProjectedSourcesConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesProjectedSourcesConfigMap)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesProjectedSourcesConfigMapOutput) ToAlertmanagerSpecVolumesProjectedSourcesConfigMapOutput() AlertmanagerSpecVolumesProjectedSourcesConfigMapOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesConfigMapOutput) ToAlertmanagerSpecVolumesProjectedSourcesConfigMapOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesConfigMapOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesConfigMapOutput) ToAlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput() AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput {
	return o.ToAlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesProjectedSourcesConfigMapOutput) ToAlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesConfigMap) *AlertmanagerSpecVolumesProjectedSourcesConfigMap {
		return &v
	}).(AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput)
}

// If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o AlertmanagerSpecVolumesProjectedSourcesConfigMapOutput) Items() AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesConfigMap) []AlertmanagerSpecVolumesProjectedSourcesConfigMapItems {
		return v.Items
	}).(AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecVolumesProjectedSourcesConfigMapOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesConfigMap) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its keys must be defined
func (o AlertmanagerSpecVolumesProjectedSourcesConfigMapOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesConfigMap) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesProjectedSourcesConfigMap)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput) ToAlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput() AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput) ToAlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput) Elem() AlertmanagerSpecVolumesProjectedSourcesConfigMapOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesProjectedSourcesConfigMap) AlertmanagerSpecVolumesProjectedSourcesConfigMap {
		return *v
	}).(AlertmanagerSpecVolumesProjectedSourcesConfigMapOutput)
}

// If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput) Items() AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesProjectedSourcesConfigMap) []AlertmanagerSpecVolumesProjectedSourcesConfigMapItems {
		if v == nil {
			return nil
		}
		return v.Items
	}).(AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesProjectedSourcesConfigMap) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its keys must be defined
func (o AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesProjectedSourcesConfigMap) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Maps a string key to a path within a volume.
type AlertmanagerSpecVolumesProjectedSourcesConfigMapItems struct {
	// The key to project.
	Key string `pulumi:"key"`
	// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path string `pulumi:"path"`
}

// AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsInput is an input type that accepts AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArgs and AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsInput` via:
//
//          AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArgs{...}
type AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesProjectedSourcesConfigMapItemsOutput() AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsOutput
	ToAlertmanagerSpecVolumesProjectedSourcesConfigMapItemsOutputWithContext(context.Context) AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsOutput
}

// Maps a string key to a path within a volume.
type AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArgs struct {
	// The key to project.
	Key pulumi.StringInput `pulumi:"key"`
	// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path pulumi.StringInput `pulumi:"path"`
}

func (AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesProjectedSourcesConfigMapItems)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArgs) ToAlertmanagerSpecVolumesProjectedSourcesConfigMapItemsOutput() AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsOutput {
	return i.ToAlertmanagerSpecVolumesProjectedSourcesConfigMapItemsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArgs) ToAlertmanagerSpecVolumesProjectedSourcesConfigMapItemsOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsOutput)
}

// AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayInput is an input type that accepts AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArray and AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayInput` via:
//
//          AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArray{ AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArgs{...} }
type AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput() AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput
	ToAlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayOutputWithContext(context.Context) AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput
}

type AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArray []AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsInput

func (AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecVolumesProjectedSourcesConfigMapItems)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArray) ToAlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput() AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput {
	return i.ToAlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArray) ToAlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput)
}

// Maps a string key to a path within a volume.
type AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesProjectedSourcesConfigMapItems)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsOutput) ToAlertmanagerSpecVolumesProjectedSourcesConfigMapItemsOutput() AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsOutput) ToAlertmanagerSpecVolumesProjectedSourcesConfigMapItemsOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsOutput {
	return o
}

// The key to project.
func (o AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesConfigMapItems) string { return v.Key }).(pulumi.StringOutput)
}

// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesConfigMapItems) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
func (o AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesConfigMapItems) string { return v.Path }).(pulumi.StringOutput)
}

type AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecVolumesProjectedSourcesConfigMapItems)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput) ToAlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput() AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput) ToAlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecVolumesProjectedSourcesConfigMapItems {
		return vs[0].([]AlertmanagerSpecVolumesProjectedSourcesConfigMapItems)[vs[1].(int)]
	}).(AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsOutput)
}

// information about the downwardAPI data to project
type AlertmanagerSpecVolumesProjectedSourcesDownwardAPI struct {
	// Items is a list of DownwardAPIVolume file
	Items []AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItems `pulumi:"items"`
}

// AlertmanagerSpecVolumesProjectedSourcesDownwardAPIInput is an input type that accepts AlertmanagerSpecVolumesProjectedSourcesDownwardAPIArgs and AlertmanagerSpecVolumesProjectedSourcesDownwardAPIOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesProjectedSourcesDownwardAPIInput` via:
//
//          AlertmanagerSpecVolumesProjectedSourcesDownwardAPIArgs{...}
type AlertmanagerSpecVolumesProjectedSourcesDownwardAPIInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIOutput
	ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIOutputWithContext(context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIOutput
}

// information about the downwardAPI data to project
type AlertmanagerSpecVolumesProjectedSourcesDownwardAPIArgs struct {
	// Items is a list of DownwardAPIVolume file
	Items AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayInput `pulumi:"items"`
}

func (AlertmanagerSpecVolumesProjectedSourcesDownwardAPIArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesProjectedSourcesDownwardAPI)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesProjectedSourcesDownwardAPIArgs) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIOutput {
	return i.ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesProjectedSourcesDownwardAPIArgs) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIOutput)
}

func (i AlertmanagerSpecVolumesProjectedSourcesDownwardAPIArgs) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutput {
	return i.ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesProjectedSourcesDownwardAPIArgs) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIOutput).ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrInput is an input type that accepts AlertmanagerSpecVolumesProjectedSourcesDownwardAPIArgs, AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtr and AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrInput` via:
//
//          AlertmanagerSpecVolumesProjectedSourcesDownwardAPIArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutput
	ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutput
}

type alertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrType AlertmanagerSpecVolumesProjectedSourcesDownwardAPIArgs

func AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtr(v *AlertmanagerSpecVolumesProjectedSourcesDownwardAPIArgs) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrInput {
	return (*alertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrType)(v)
}

func (*alertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesProjectedSourcesDownwardAPI)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrType) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutput {
	return i.ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrType) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutput)
}

// information about the downwardAPI data to project
type AlertmanagerSpecVolumesProjectedSourcesDownwardAPIOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesProjectedSourcesDownwardAPIOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesProjectedSourcesDownwardAPI)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIOutput) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIOutput) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIOutput) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutput {
	return o.ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIOutput) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesDownwardAPI) *AlertmanagerSpecVolumesProjectedSourcesDownwardAPI {
		return &v
	}).(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutput)
}

// Items is a list of DownwardAPIVolume file
func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIOutput) Items() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesDownwardAPI) []AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItems {
		return v.Items
	}).(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput)
}

type AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesProjectedSourcesDownwardAPI)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutput) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutput) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutput) Elem() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesProjectedSourcesDownwardAPI) AlertmanagerSpecVolumesProjectedSourcesDownwardAPI {
		return *v
	}).(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIOutput)
}

// Items is a list of DownwardAPIVolume file
func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutput) Items() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesProjectedSourcesDownwardAPI) []AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItems {
		if v == nil {
			return nil
		}
		return v.Items
	}).(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput)
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItems struct {
	// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
	FieldRef *AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef `pulumi:"fieldRef"`
	// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path string `pulumi:"path"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
	ResourceFieldRef *AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef `pulumi:"resourceFieldRef"`
}

// AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsInput is an input type that accepts AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArgs and AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsInput` via:
//
//          AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArgs{...}
type AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsOutput
	ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsOutputWithContext(context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsOutput
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArgs struct {
	// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
	FieldRef AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrInput `pulumi:"fieldRef"`
	// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path pulumi.StringInput `pulumi:"path"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
	ResourceFieldRef AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
}

func (AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItems)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArgs) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsOutput {
	return i.ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArgs) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsOutput)
}

// AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayInput is an input type that accepts AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArray and AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayInput` via:
//
//          AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArray{ AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArgs{...} }
type AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput
	ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutputWithContext(context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput
}

type AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArray []AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsInput

func (AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItems)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArray) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput {
	return i.ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArray) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput)
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItems)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsOutput) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsOutput) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsOutput {
	return o
}

// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsOutput) FieldRef() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItems) *AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef {
		return v.FieldRef
	}).(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput)
}

// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItems) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItems) string { return v.Path }).(pulumi.StringOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsOutput) ResourceFieldRef() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItems) *AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
		return v.ResourceFieldRef
	}).(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput)
}

type AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItems)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItems {
		return vs[0].([]AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItems)[vs[1].(int)]
	}).(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsOutput)
}

// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
type AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefInput is an input type that accepts AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs and AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefInput` via:
//
//          AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs{...}
type AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput
	ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutputWithContext(context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput
}

// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
type AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput {
	return i.ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput)
}

func (i AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput {
	return i.ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput).ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrInput is an input type that accepts AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs, AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtr and AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrInput` via:
//
//          AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput
	ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput
}

type alertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrType AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs

func AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtr(v *AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrInput {
	return (*alertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrType)(v)
}

func (*alertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrType) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput {
	return i.ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrType) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput)
}

// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
type AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput {
	return o.ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef) *AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef {
		return &v
	}).(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput) Elem() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef {
		return *v
	}).(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *string `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefInput is an input type that accepts AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs and AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefInput` via:
//
//          AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs{...}
type AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput
	ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutputWithContext(context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.StringPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput {
	return i.ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput)
}

func (i AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput {
	return i.ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput).ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrInput is an input type that accepts AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs, AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtr and AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrInput` via:
//
//          AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput
	ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput
}

type alertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrType AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs

func AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtr(v *AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrInput {
	return (*alertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrType)(v)
}

func (*alertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrType) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput {
	return i.ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrType) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput {
	return o.ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef) *AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
		return &v
	}).(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef) *string {
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef) *string {
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef) string {
		return v.Resource
	}).(pulumi.StringOutput)
}

type AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput) ToAlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput) Elem() AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef) AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
		return *v
	}).(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// information about the secret data to project
type AlertmanagerSpecVolumesProjectedSourcesSecret struct {
	// If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []AlertmanagerSpecVolumesProjectedSourcesSecretItems `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// AlertmanagerSpecVolumesProjectedSourcesSecretInput is an input type that accepts AlertmanagerSpecVolumesProjectedSourcesSecretArgs and AlertmanagerSpecVolumesProjectedSourcesSecretOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesProjectedSourcesSecretInput` via:
//
//          AlertmanagerSpecVolumesProjectedSourcesSecretArgs{...}
type AlertmanagerSpecVolumesProjectedSourcesSecretInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesProjectedSourcesSecretOutput() AlertmanagerSpecVolumesProjectedSourcesSecretOutput
	ToAlertmanagerSpecVolumesProjectedSourcesSecretOutputWithContext(context.Context) AlertmanagerSpecVolumesProjectedSourcesSecretOutput
}

// information about the secret data to project
type AlertmanagerSpecVolumesProjectedSourcesSecretArgs struct {
	// If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items AlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayInput `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (AlertmanagerSpecVolumesProjectedSourcesSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesProjectedSourcesSecret)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesProjectedSourcesSecretArgs) ToAlertmanagerSpecVolumesProjectedSourcesSecretOutput() AlertmanagerSpecVolumesProjectedSourcesSecretOutput {
	return i.ToAlertmanagerSpecVolumesProjectedSourcesSecretOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesProjectedSourcesSecretArgs) ToAlertmanagerSpecVolumesProjectedSourcesSecretOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedSourcesSecretOutput)
}

func (i AlertmanagerSpecVolumesProjectedSourcesSecretArgs) ToAlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput() AlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput {
	return i.ToAlertmanagerSpecVolumesProjectedSourcesSecretPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesProjectedSourcesSecretArgs) ToAlertmanagerSpecVolumesProjectedSourcesSecretPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedSourcesSecretOutput).ToAlertmanagerSpecVolumesProjectedSourcesSecretPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesProjectedSourcesSecretPtrInput is an input type that accepts AlertmanagerSpecVolumesProjectedSourcesSecretArgs, AlertmanagerSpecVolumesProjectedSourcesSecretPtr and AlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesProjectedSourcesSecretPtrInput` via:
//
//          AlertmanagerSpecVolumesProjectedSourcesSecretArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesProjectedSourcesSecretPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput() AlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput
	ToAlertmanagerSpecVolumesProjectedSourcesSecretPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput
}

type alertmanagerSpecVolumesProjectedSourcesSecretPtrType AlertmanagerSpecVolumesProjectedSourcesSecretArgs

func AlertmanagerSpecVolumesProjectedSourcesSecretPtr(v *AlertmanagerSpecVolumesProjectedSourcesSecretArgs) AlertmanagerSpecVolumesProjectedSourcesSecretPtrInput {
	return (*alertmanagerSpecVolumesProjectedSourcesSecretPtrType)(v)
}

func (*alertmanagerSpecVolumesProjectedSourcesSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesProjectedSourcesSecret)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesProjectedSourcesSecretPtrType) ToAlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput() AlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput {
	return i.ToAlertmanagerSpecVolumesProjectedSourcesSecretPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesProjectedSourcesSecretPtrType) ToAlertmanagerSpecVolumesProjectedSourcesSecretPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput)
}

// information about the secret data to project
type AlertmanagerSpecVolumesProjectedSourcesSecretOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesProjectedSourcesSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesProjectedSourcesSecret)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesProjectedSourcesSecretOutput) ToAlertmanagerSpecVolumesProjectedSourcesSecretOutput() AlertmanagerSpecVolumesProjectedSourcesSecretOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesSecretOutput) ToAlertmanagerSpecVolumesProjectedSourcesSecretOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesSecretOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesSecretOutput) ToAlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput() AlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput {
	return o.ToAlertmanagerSpecVolumesProjectedSourcesSecretPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesProjectedSourcesSecretOutput) ToAlertmanagerSpecVolumesProjectedSourcesSecretPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesSecret) *AlertmanagerSpecVolumesProjectedSourcesSecret {
		return &v
	}).(AlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput)
}

// If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o AlertmanagerSpecVolumesProjectedSourcesSecretOutput) Items() AlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesSecret) []AlertmanagerSpecVolumesProjectedSourcesSecretItems {
		return v.Items
	}).(AlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecVolumesProjectedSourcesSecretOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesSecret) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o AlertmanagerSpecVolumesProjectedSourcesSecretOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesSecret) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type AlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesProjectedSourcesSecret)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput) ToAlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput() AlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput) ToAlertmanagerSpecVolumesProjectedSourcesSecretPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput) Elem() AlertmanagerSpecVolumesProjectedSourcesSecretOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesProjectedSourcesSecret) AlertmanagerSpecVolumesProjectedSourcesSecret {
		return *v
	}).(AlertmanagerSpecVolumesProjectedSourcesSecretOutput)
}

// If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o AlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput) Items() AlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesProjectedSourcesSecret) []AlertmanagerSpecVolumesProjectedSourcesSecretItems {
		if v == nil {
			return nil
		}
		return v.Items
	}).(AlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesProjectedSourcesSecret) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o AlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesProjectedSourcesSecret) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Maps a string key to a path within a volume.
type AlertmanagerSpecVolumesProjectedSourcesSecretItems struct {
	// The key to project.
	Key string `pulumi:"key"`
	// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path string `pulumi:"path"`
}

// AlertmanagerSpecVolumesProjectedSourcesSecretItemsInput is an input type that accepts AlertmanagerSpecVolumesProjectedSourcesSecretItemsArgs and AlertmanagerSpecVolumesProjectedSourcesSecretItemsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesProjectedSourcesSecretItemsInput` via:
//
//          AlertmanagerSpecVolumesProjectedSourcesSecretItemsArgs{...}
type AlertmanagerSpecVolumesProjectedSourcesSecretItemsInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesProjectedSourcesSecretItemsOutput() AlertmanagerSpecVolumesProjectedSourcesSecretItemsOutput
	ToAlertmanagerSpecVolumesProjectedSourcesSecretItemsOutputWithContext(context.Context) AlertmanagerSpecVolumesProjectedSourcesSecretItemsOutput
}

// Maps a string key to a path within a volume.
type AlertmanagerSpecVolumesProjectedSourcesSecretItemsArgs struct {
	// The key to project.
	Key pulumi.StringInput `pulumi:"key"`
	// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path pulumi.StringInput `pulumi:"path"`
}

func (AlertmanagerSpecVolumesProjectedSourcesSecretItemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesProjectedSourcesSecretItems)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesProjectedSourcesSecretItemsArgs) ToAlertmanagerSpecVolumesProjectedSourcesSecretItemsOutput() AlertmanagerSpecVolumesProjectedSourcesSecretItemsOutput {
	return i.ToAlertmanagerSpecVolumesProjectedSourcesSecretItemsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesProjectedSourcesSecretItemsArgs) ToAlertmanagerSpecVolumesProjectedSourcesSecretItemsOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesSecretItemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedSourcesSecretItemsOutput)
}

// AlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayInput is an input type that accepts AlertmanagerSpecVolumesProjectedSourcesSecretItemsArray and AlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayInput` via:
//
//          AlertmanagerSpecVolumesProjectedSourcesSecretItemsArray{ AlertmanagerSpecVolumesProjectedSourcesSecretItemsArgs{...} }
type AlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayOutput() AlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayOutput
	ToAlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayOutputWithContext(context.Context) AlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayOutput
}

type AlertmanagerSpecVolumesProjectedSourcesSecretItemsArray []AlertmanagerSpecVolumesProjectedSourcesSecretItemsInput

func (AlertmanagerSpecVolumesProjectedSourcesSecretItemsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecVolumesProjectedSourcesSecretItems)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesProjectedSourcesSecretItemsArray) ToAlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayOutput() AlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayOutput {
	return i.ToAlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesProjectedSourcesSecretItemsArray) ToAlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayOutput)
}

// Maps a string key to a path within a volume.
type AlertmanagerSpecVolumesProjectedSourcesSecretItemsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesProjectedSourcesSecretItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesProjectedSourcesSecretItems)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesProjectedSourcesSecretItemsOutput) ToAlertmanagerSpecVolumesProjectedSourcesSecretItemsOutput() AlertmanagerSpecVolumesProjectedSourcesSecretItemsOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesSecretItemsOutput) ToAlertmanagerSpecVolumesProjectedSourcesSecretItemsOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesSecretItemsOutput {
	return o
}

// The key to project.
func (o AlertmanagerSpecVolumesProjectedSourcesSecretItemsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesSecretItems) string { return v.Key }).(pulumi.StringOutput)
}

// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o AlertmanagerSpecVolumesProjectedSourcesSecretItemsOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesSecretItems) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
func (o AlertmanagerSpecVolumesProjectedSourcesSecretItemsOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesSecretItems) string { return v.Path }).(pulumi.StringOutput)
}

type AlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecVolumesProjectedSourcesSecretItems)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayOutput) ToAlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayOutput() AlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayOutput) ToAlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecVolumesProjectedSourcesSecretItemsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecVolumesProjectedSourcesSecretItems {
		return vs[0].([]AlertmanagerSpecVolumesProjectedSourcesSecretItems)[vs[1].(int)]
	}).(AlertmanagerSpecVolumesProjectedSourcesSecretItemsOutput)
}

// information about the serviceAccountToken data to project
type AlertmanagerSpecVolumesProjectedSourcesServiceAccountToken struct {
	// Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
	Audience *string `pulumi:"audience"`
	// ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
	ExpirationSeconds *int `pulumi:"expirationSeconds"`
	// Path is the path relative to the mount point of the file to project the token into.
	Path string `pulumi:"path"`
}

// AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenInput is an input type that accepts AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenArgs and AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenInput` via:
//
//          AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenArgs{...}
type AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutput() AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutput
	ToAlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutputWithContext(context.Context) AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutput
}

// information about the serviceAccountToken data to project
type AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenArgs struct {
	// Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
	Audience pulumi.StringPtrInput `pulumi:"audience"`
	// ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
	ExpirationSeconds pulumi.IntPtrInput `pulumi:"expirationSeconds"`
	// Path is the path relative to the mount point of the file to project the token into.
	Path pulumi.StringInput `pulumi:"path"`
}

func (AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesProjectedSourcesServiceAccountToken)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenArgs) ToAlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutput() AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutput {
	return i.ToAlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenArgs) ToAlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutput)
}

func (i AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenArgs) ToAlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput() AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput {
	return i.ToAlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenArgs) ToAlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutput).ToAlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrInput is an input type that accepts AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenArgs, AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtr and AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrInput` via:
//
//          AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput() AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput
	ToAlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput
}

type alertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrType AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenArgs

func AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtr(v *AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenArgs) AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrInput {
	return (*alertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrType)(v)
}

func (*alertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesProjectedSourcesServiceAccountToken)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrType) ToAlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput() AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput {
	return i.ToAlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrType) ToAlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput)
}

// information about the serviceAccountToken data to project
type AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesProjectedSourcesServiceAccountToken)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutput) ToAlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutput() AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutput) ToAlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutput) ToAlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput() AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput {
	return o.ToAlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutput) ToAlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesServiceAccountToken) *AlertmanagerSpecVolumesProjectedSourcesServiceAccountToken {
		return &v
	}).(AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput)
}

// Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
func (o AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesServiceAccountToken) *string { return v.Audience }).(pulumi.StringPtrOutput)
}

// ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
func (o AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesServiceAccountToken) *int { return v.ExpirationSeconds }).(pulumi.IntPtrOutput)
}

// Path is the path relative to the mount point of the file to project the token into.
func (o AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesProjectedSourcesServiceAccountToken) string { return v.Path }).(pulumi.StringOutput)
}

type AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesProjectedSourcesServiceAccountToken)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput) ToAlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput() AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput) ToAlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput) Elem() AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesProjectedSourcesServiceAccountToken) AlertmanagerSpecVolumesProjectedSourcesServiceAccountToken {
		return *v
	}).(AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutput)
}

// Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
func (o AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesProjectedSourcesServiceAccountToken) *string {
		if v == nil {
			return nil
		}
		return v.Audience
	}).(pulumi.StringPtrOutput)
}

// ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
func (o AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesProjectedSourcesServiceAccountToken) *int {
		if v == nil {
			return nil
		}
		return v.ExpirationSeconds
	}).(pulumi.IntPtrOutput)
}

// Path is the path relative to the mount point of the file to project the token into.
func (o AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesProjectedSourcesServiceAccountToken) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
type AlertmanagerSpecVolumesQuobyte struct {
	// Group to map volume access to Default is no group
	Group *string `pulumi:"group"`
	// ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
	ReadOnly *bool `pulumi:"readOnly"`
	// Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
	Registry string `pulumi:"registry"`
	// Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
	Tenant *string `pulumi:"tenant"`
	// User to map volume access to Defaults to serivceaccount user
	User *string `pulumi:"user"`
	// Volume is a string that references an already created Quobyte volume by name.
	Volume string `pulumi:"volume"`
}

// AlertmanagerSpecVolumesQuobyteInput is an input type that accepts AlertmanagerSpecVolumesQuobyteArgs and AlertmanagerSpecVolumesQuobyteOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesQuobyteInput` via:
//
//          AlertmanagerSpecVolumesQuobyteArgs{...}
type AlertmanagerSpecVolumesQuobyteInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesQuobyteOutput() AlertmanagerSpecVolumesQuobyteOutput
	ToAlertmanagerSpecVolumesQuobyteOutputWithContext(context.Context) AlertmanagerSpecVolumesQuobyteOutput
}

// Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
type AlertmanagerSpecVolumesQuobyteArgs struct {
	// Group to map volume access to Default is no group
	Group pulumi.StringPtrInput `pulumi:"group"`
	// ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
	Registry pulumi.StringInput `pulumi:"registry"`
	// Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
	Tenant pulumi.StringPtrInput `pulumi:"tenant"`
	// User to map volume access to Defaults to serivceaccount user
	User pulumi.StringPtrInput `pulumi:"user"`
	// Volume is a string that references an already created Quobyte volume by name.
	Volume pulumi.StringInput `pulumi:"volume"`
}

func (AlertmanagerSpecVolumesQuobyteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesQuobyte)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesQuobyteArgs) ToAlertmanagerSpecVolumesQuobyteOutput() AlertmanagerSpecVolumesQuobyteOutput {
	return i.ToAlertmanagerSpecVolumesQuobyteOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesQuobyteArgs) ToAlertmanagerSpecVolumesQuobyteOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesQuobyteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesQuobyteOutput)
}

func (i AlertmanagerSpecVolumesQuobyteArgs) ToAlertmanagerSpecVolumesQuobytePtrOutput() AlertmanagerSpecVolumesQuobytePtrOutput {
	return i.ToAlertmanagerSpecVolumesQuobytePtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesQuobyteArgs) ToAlertmanagerSpecVolumesQuobytePtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesQuobytePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesQuobyteOutput).ToAlertmanagerSpecVolumesQuobytePtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesQuobytePtrInput is an input type that accepts AlertmanagerSpecVolumesQuobyteArgs, AlertmanagerSpecVolumesQuobytePtr and AlertmanagerSpecVolumesQuobytePtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesQuobytePtrInput` via:
//
//          AlertmanagerSpecVolumesQuobyteArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesQuobytePtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesQuobytePtrOutput() AlertmanagerSpecVolumesQuobytePtrOutput
	ToAlertmanagerSpecVolumesQuobytePtrOutputWithContext(context.Context) AlertmanagerSpecVolumesQuobytePtrOutput
}

type alertmanagerSpecVolumesQuobytePtrType AlertmanagerSpecVolumesQuobyteArgs

func AlertmanagerSpecVolumesQuobytePtr(v *AlertmanagerSpecVolumesQuobyteArgs) AlertmanagerSpecVolumesQuobytePtrInput {
	return (*alertmanagerSpecVolumesQuobytePtrType)(v)
}

func (*alertmanagerSpecVolumesQuobytePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesQuobyte)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesQuobytePtrType) ToAlertmanagerSpecVolumesQuobytePtrOutput() AlertmanagerSpecVolumesQuobytePtrOutput {
	return i.ToAlertmanagerSpecVolumesQuobytePtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesQuobytePtrType) ToAlertmanagerSpecVolumesQuobytePtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesQuobytePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesQuobytePtrOutput)
}

// Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
type AlertmanagerSpecVolumesQuobyteOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesQuobyteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesQuobyte)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesQuobyteOutput) ToAlertmanagerSpecVolumesQuobyteOutput() AlertmanagerSpecVolumesQuobyteOutput {
	return o
}

func (o AlertmanagerSpecVolumesQuobyteOutput) ToAlertmanagerSpecVolumesQuobyteOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesQuobyteOutput {
	return o
}

func (o AlertmanagerSpecVolumesQuobyteOutput) ToAlertmanagerSpecVolumesQuobytePtrOutput() AlertmanagerSpecVolumesQuobytePtrOutput {
	return o.ToAlertmanagerSpecVolumesQuobytePtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesQuobyteOutput) ToAlertmanagerSpecVolumesQuobytePtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesQuobytePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesQuobyte) *AlertmanagerSpecVolumesQuobyte {
		return &v
	}).(AlertmanagerSpecVolumesQuobytePtrOutput)
}

// Group to map volume access to Default is no group
func (o AlertmanagerSpecVolumesQuobyteOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesQuobyte) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
func (o AlertmanagerSpecVolumesQuobyteOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesQuobyte) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
func (o AlertmanagerSpecVolumesQuobyteOutput) Registry() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesQuobyte) string { return v.Registry }).(pulumi.StringOutput)
}

// Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
func (o AlertmanagerSpecVolumesQuobyteOutput) Tenant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesQuobyte) *string { return v.Tenant }).(pulumi.StringPtrOutput)
}

// User to map volume access to Defaults to serivceaccount user
func (o AlertmanagerSpecVolumesQuobyteOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesQuobyte) *string { return v.User }).(pulumi.StringPtrOutput)
}

// Volume is a string that references an already created Quobyte volume by name.
func (o AlertmanagerSpecVolumesQuobyteOutput) Volume() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesQuobyte) string { return v.Volume }).(pulumi.StringOutput)
}

type AlertmanagerSpecVolumesQuobytePtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesQuobytePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesQuobyte)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesQuobytePtrOutput) ToAlertmanagerSpecVolumesQuobytePtrOutput() AlertmanagerSpecVolumesQuobytePtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesQuobytePtrOutput) ToAlertmanagerSpecVolumesQuobytePtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesQuobytePtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesQuobytePtrOutput) Elem() AlertmanagerSpecVolumesQuobyteOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesQuobyte) AlertmanagerSpecVolumesQuobyte { return *v }).(AlertmanagerSpecVolumesQuobyteOutput)
}

// Group to map volume access to Default is no group
func (o AlertmanagerSpecVolumesQuobytePtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesQuobyte) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
func (o AlertmanagerSpecVolumesQuobytePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesQuobyte) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
func (o AlertmanagerSpecVolumesQuobytePtrOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesQuobyte) *string {
		if v == nil {
			return nil
		}
		return &v.Registry
	}).(pulumi.StringPtrOutput)
}

// Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
func (o AlertmanagerSpecVolumesQuobytePtrOutput) Tenant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesQuobyte) *string {
		if v == nil {
			return nil
		}
		return v.Tenant
	}).(pulumi.StringPtrOutput)
}

// User to map volume access to Defaults to serivceaccount user
func (o AlertmanagerSpecVolumesQuobytePtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesQuobyte) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// Volume is a string that references an already created Quobyte volume by name.
func (o AlertmanagerSpecVolumesQuobytePtrOutput) Volume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesQuobyte) *string {
		if v == nil {
			return nil
		}
		return &v.Volume
	}).(pulumi.StringPtrOutput)
}

// RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
type AlertmanagerSpecVolumesRbd struct {
	// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType *string `pulumi:"fsType"`
	// The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Image string `pulumi:"image"`
	// Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Keyring *string `pulumi:"keyring"`
	// A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Monitors []string `pulumi:"monitors"`
	// The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Pool *string `pulumi:"pool"`
	// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	ReadOnly *bool `pulumi:"readOnly"`
	// SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	SecretRef *AlertmanagerSpecVolumesRbdSecretRef `pulumi:"secretRef"`
	// The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	User *string `pulumi:"user"`
}

// AlertmanagerSpecVolumesRbdInput is an input type that accepts AlertmanagerSpecVolumesRbdArgs and AlertmanagerSpecVolumesRbdOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesRbdInput` via:
//
//          AlertmanagerSpecVolumesRbdArgs{...}
type AlertmanagerSpecVolumesRbdInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesRbdOutput() AlertmanagerSpecVolumesRbdOutput
	ToAlertmanagerSpecVolumesRbdOutputWithContext(context.Context) AlertmanagerSpecVolumesRbdOutput
}

// RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
type AlertmanagerSpecVolumesRbdArgs struct {
	// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Image pulumi.StringInput `pulumi:"image"`
	// Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Keyring pulumi.StringPtrInput `pulumi:"keyring"`
	// A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Monitors pulumi.StringArrayInput `pulumi:"monitors"`
	// The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Pool pulumi.StringPtrInput `pulumi:"pool"`
	// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	SecretRef AlertmanagerSpecVolumesRbdSecretRefPtrInput `pulumi:"secretRef"`
	// The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (AlertmanagerSpecVolumesRbdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesRbd)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesRbdArgs) ToAlertmanagerSpecVolumesRbdOutput() AlertmanagerSpecVolumesRbdOutput {
	return i.ToAlertmanagerSpecVolumesRbdOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesRbdArgs) ToAlertmanagerSpecVolumesRbdOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesRbdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesRbdOutput)
}

func (i AlertmanagerSpecVolumesRbdArgs) ToAlertmanagerSpecVolumesRbdPtrOutput() AlertmanagerSpecVolumesRbdPtrOutput {
	return i.ToAlertmanagerSpecVolumesRbdPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesRbdArgs) ToAlertmanagerSpecVolumesRbdPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesRbdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesRbdOutput).ToAlertmanagerSpecVolumesRbdPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesRbdPtrInput is an input type that accepts AlertmanagerSpecVolumesRbdArgs, AlertmanagerSpecVolumesRbdPtr and AlertmanagerSpecVolumesRbdPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesRbdPtrInput` via:
//
//          AlertmanagerSpecVolumesRbdArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesRbdPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesRbdPtrOutput() AlertmanagerSpecVolumesRbdPtrOutput
	ToAlertmanagerSpecVolumesRbdPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesRbdPtrOutput
}

type alertmanagerSpecVolumesRbdPtrType AlertmanagerSpecVolumesRbdArgs

func AlertmanagerSpecVolumesRbdPtr(v *AlertmanagerSpecVolumesRbdArgs) AlertmanagerSpecVolumesRbdPtrInput {
	return (*alertmanagerSpecVolumesRbdPtrType)(v)
}

func (*alertmanagerSpecVolumesRbdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesRbd)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesRbdPtrType) ToAlertmanagerSpecVolumesRbdPtrOutput() AlertmanagerSpecVolumesRbdPtrOutput {
	return i.ToAlertmanagerSpecVolumesRbdPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesRbdPtrType) ToAlertmanagerSpecVolumesRbdPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesRbdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesRbdPtrOutput)
}

// RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
type AlertmanagerSpecVolumesRbdOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesRbdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesRbd)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesRbdOutput) ToAlertmanagerSpecVolumesRbdOutput() AlertmanagerSpecVolumesRbdOutput {
	return o
}

func (o AlertmanagerSpecVolumesRbdOutput) ToAlertmanagerSpecVolumesRbdOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesRbdOutput {
	return o
}

func (o AlertmanagerSpecVolumesRbdOutput) ToAlertmanagerSpecVolumesRbdPtrOutput() AlertmanagerSpecVolumesRbdPtrOutput {
	return o.ToAlertmanagerSpecVolumesRbdPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesRbdOutput) ToAlertmanagerSpecVolumesRbdPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesRbdPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesRbd) *AlertmanagerSpecVolumesRbd {
		return &v
	}).(AlertmanagerSpecVolumesRbdPtrOutput)
}

// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
func (o AlertmanagerSpecVolumesRbdOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesRbd) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o AlertmanagerSpecVolumesRbdOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesRbd) string { return v.Image }).(pulumi.StringOutput)
}

// Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o AlertmanagerSpecVolumesRbdOutput) Keyring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesRbd) *string { return v.Keyring }).(pulumi.StringPtrOutput)
}

// A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o AlertmanagerSpecVolumesRbdOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesRbd) []string { return v.Monitors }).(pulumi.StringArrayOutput)
}

// The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o AlertmanagerSpecVolumesRbdOutput) Pool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesRbd) *string { return v.Pool }).(pulumi.StringPtrOutput)
}

// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o AlertmanagerSpecVolumesRbdOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesRbd) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o AlertmanagerSpecVolumesRbdOutput) SecretRef() AlertmanagerSpecVolumesRbdSecretRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesRbd) *AlertmanagerSpecVolumesRbdSecretRef { return v.SecretRef }).(AlertmanagerSpecVolumesRbdSecretRefPtrOutput)
}

// The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o AlertmanagerSpecVolumesRbdOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesRbd) *string { return v.User }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecVolumesRbdPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesRbdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesRbd)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesRbdPtrOutput) ToAlertmanagerSpecVolumesRbdPtrOutput() AlertmanagerSpecVolumesRbdPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesRbdPtrOutput) ToAlertmanagerSpecVolumesRbdPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesRbdPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesRbdPtrOutput) Elem() AlertmanagerSpecVolumesRbdOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesRbd) AlertmanagerSpecVolumesRbd { return *v }).(AlertmanagerSpecVolumesRbdOutput)
}

// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
func (o AlertmanagerSpecVolumesRbdPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesRbd) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o AlertmanagerSpecVolumesRbdPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesRbd) *string {
		if v == nil {
			return nil
		}
		return &v.Image
	}).(pulumi.StringPtrOutput)
}

// Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o AlertmanagerSpecVolumesRbdPtrOutput) Keyring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesRbd) *string {
		if v == nil {
			return nil
		}
		return v.Keyring
	}).(pulumi.StringPtrOutput)
}

// A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o AlertmanagerSpecVolumesRbdPtrOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesRbd) []string {
		if v == nil {
			return nil
		}
		return v.Monitors
	}).(pulumi.StringArrayOutput)
}

// The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o AlertmanagerSpecVolumesRbdPtrOutput) Pool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesRbd) *string {
		if v == nil {
			return nil
		}
		return v.Pool
	}).(pulumi.StringPtrOutput)
}

// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o AlertmanagerSpecVolumesRbdPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesRbd) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o AlertmanagerSpecVolumesRbdPtrOutput) SecretRef() AlertmanagerSpecVolumesRbdSecretRefPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesRbd) *AlertmanagerSpecVolumesRbdSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(AlertmanagerSpecVolumesRbdSecretRefPtrOutput)
}

// The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o AlertmanagerSpecVolumesRbdPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesRbd) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
type AlertmanagerSpecVolumesRbdSecretRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
}

// AlertmanagerSpecVolumesRbdSecretRefInput is an input type that accepts AlertmanagerSpecVolumesRbdSecretRefArgs and AlertmanagerSpecVolumesRbdSecretRefOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesRbdSecretRefInput` via:
//
//          AlertmanagerSpecVolumesRbdSecretRefArgs{...}
type AlertmanagerSpecVolumesRbdSecretRefInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesRbdSecretRefOutput() AlertmanagerSpecVolumesRbdSecretRefOutput
	ToAlertmanagerSpecVolumesRbdSecretRefOutputWithContext(context.Context) AlertmanagerSpecVolumesRbdSecretRefOutput
}

// SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
type AlertmanagerSpecVolumesRbdSecretRefArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (AlertmanagerSpecVolumesRbdSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesRbdSecretRef)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesRbdSecretRefArgs) ToAlertmanagerSpecVolumesRbdSecretRefOutput() AlertmanagerSpecVolumesRbdSecretRefOutput {
	return i.ToAlertmanagerSpecVolumesRbdSecretRefOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesRbdSecretRefArgs) ToAlertmanagerSpecVolumesRbdSecretRefOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesRbdSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesRbdSecretRefOutput)
}

func (i AlertmanagerSpecVolumesRbdSecretRefArgs) ToAlertmanagerSpecVolumesRbdSecretRefPtrOutput() AlertmanagerSpecVolumesRbdSecretRefPtrOutput {
	return i.ToAlertmanagerSpecVolumesRbdSecretRefPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesRbdSecretRefArgs) ToAlertmanagerSpecVolumesRbdSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesRbdSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesRbdSecretRefOutput).ToAlertmanagerSpecVolumesRbdSecretRefPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesRbdSecretRefPtrInput is an input type that accepts AlertmanagerSpecVolumesRbdSecretRefArgs, AlertmanagerSpecVolumesRbdSecretRefPtr and AlertmanagerSpecVolumesRbdSecretRefPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesRbdSecretRefPtrInput` via:
//
//          AlertmanagerSpecVolumesRbdSecretRefArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesRbdSecretRefPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesRbdSecretRefPtrOutput() AlertmanagerSpecVolumesRbdSecretRefPtrOutput
	ToAlertmanagerSpecVolumesRbdSecretRefPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesRbdSecretRefPtrOutput
}

type alertmanagerSpecVolumesRbdSecretRefPtrType AlertmanagerSpecVolumesRbdSecretRefArgs

func AlertmanagerSpecVolumesRbdSecretRefPtr(v *AlertmanagerSpecVolumesRbdSecretRefArgs) AlertmanagerSpecVolumesRbdSecretRefPtrInput {
	return (*alertmanagerSpecVolumesRbdSecretRefPtrType)(v)
}

func (*alertmanagerSpecVolumesRbdSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesRbdSecretRef)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesRbdSecretRefPtrType) ToAlertmanagerSpecVolumesRbdSecretRefPtrOutput() AlertmanagerSpecVolumesRbdSecretRefPtrOutput {
	return i.ToAlertmanagerSpecVolumesRbdSecretRefPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesRbdSecretRefPtrType) ToAlertmanagerSpecVolumesRbdSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesRbdSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesRbdSecretRefPtrOutput)
}

// SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
type AlertmanagerSpecVolumesRbdSecretRefOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesRbdSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesRbdSecretRef)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesRbdSecretRefOutput) ToAlertmanagerSpecVolumesRbdSecretRefOutput() AlertmanagerSpecVolumesRbdSecretRefOutput {
	return o
}

func (o AlertmanagerSpecVolumesRbdSecretRefOutput) ToAlertmanagerSpecVolumesRbdSecretRefOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesRbdSecretRefOutput {
	return o
}

func (o AlertmanagerSpecVolumesRbdSecretRefOutput) ToAlertmanagerSpecVolumesRbdSecretRefPtrOutput() AlertmanagerSpecVolumesRbdSecretRefPtrOutput {
	return o.ToAlertmanagerSpecVolumesRbdSecretRefPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesRbdSecretRefOutput) ToAlertmanagerSpecVolumesRbdSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesRbdSecretRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesRbdSecretRef) *AlertmanagerSpecVolumesRbdSecretRef {
		return &v
	}).(AlertmanagerSpecVolumesRbdSecretRefPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecVolumesRbdSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesRbdSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecVolumesRbdSecretRefPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesRbdSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesRbdSecretRef)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesRbdSecretRefPtrOutput) ToAlertmanagerSpecVolumesRbdSecretRefPtrOutput() AlertmanagerSpecVolumesRbdSecretRefPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesRbdSecretRefPtrOutput) ToAlertmanagerSpecVolumesRbdSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesRbdSecretRefPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesRbdSecretRefPtrOutput) Elem() AlertmanagerSpecVolumesRbdSecretRefOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesRbdSecretRef) AlertmanagerSpecVolumesRbdSecretRef { return *v }).(AlertmanagerSpecVolumesRbdSecretRefOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecVolumesRbdSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesRbdSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
type AlertmanagerSpecVolumesScaleIO struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
	FsType *string `pulumi:"fsType"`
	// The host address of the ScaleIO API Gateway.
	Gateway string `pulumi:"gateway"`
	// The name of the ScaleIO Protection Domain for the configured storage.
	ProtectionDomain *string `pulumi:"protectionDomain"`
	// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
	SecretRef AlertmanagerSpecVolumesScaleIOSecretRef `pulumi:"secretRef"`
	// Flag to enable/disable SSL communication with Gateway, default false
	SslEnabled *bool `pulumi:"sslEnabled"`
	// Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
	StorageMode *string `pulumi:"storageMode"`
	// The ScaleIO Storage Pool associated with the protection domain.
	StoragePool *string `pulumi:"storagePool"`
	// The name of the storage system as configured in ScaleIO.
	System string `pulumi:"system"`
	// The name of a volume already created in the ScaleIO system that is associated with this volume source.
	VolumeName *string `pulumi:"volumeName"`
}

// AlertmanagerSpecVolumesScaleIOInput is an input type that accepts AlertmanagerSpecVolumesScaleIOArgs and AlertmanagerSpecVolumesScaleIOOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesScaleIOInput` via:
//
//          AlertmanagerSpecVolumesScaleIOArgs{...}
type AlertmanagerSpecVolumesScaleIOInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesScaleIOOutput() AlertmanagerSpecVolumesScaleIOOutput
	ToAlertmanagerSpecVolumesScaleIOOutputWithContext(context.Context) AlertmanagerSpecVolumesScaleIOOutput
}

// ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
type AlertmanagerSpecVolumesScaleIOArgs struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// The host address of the ScaleIO API Gateway.
	Gateway pulumi.StringInput `pulumi:"gateway"`
	// The name of the ScaleIO Protection Domain for the configured storage.
	ProtectionDomain pulumi.StringPtrInput `pulumi:"protectionDomain"`
	// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
	SecretRef AlertmanagerSpecVolumesScaleIOSecretRefInput `pulumi:"secretRef"`
	// Flag to enable/disable SSL communication with Gateway, default false
	SslEnabled pulumi.BoolPtrInput `pulumi:"sslEnabled"`
	// Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
	StorageMode pulumi.StringPtrInput `pulumi:"storageMode"`
	// The ScaleIO Storage Pool associated with the protection domain.
	StoragePool pulumi.StringPtrInput `pulumi:"storagePool"`
	// The name of the storage system as configured in ScaleIO.
	System pulumi.StringInput `pulumi:"system"`
	// The name of a volume already created in the ScaleIO system that is associated with this volume source.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (AlertmanagerSpecVolumesScaleIOArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesScaleIO)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesScaleIOArgs) ToAlertmanagerSpecVolumesScaleIOOutput() AlertmanagerSpecVolumesScaleIOOutput {
	return i.ToAlertmanagerSpecVolumesScaleIOOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesScaleIOArgs) ToAlertmanagerSpecVolumesScaleIOOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesScaleIOOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesScaleIOOutput)
}

func (i AlertmanagerSpecVolumesScaleIOArgs) ToAlertmanagerSpecVolumesScaleIOPtrOutput() AlertmanagerSpecVolumesScaleIOPtrOutput {
	return i.ToAlertmanagerSpecVolumesScaleIOPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesScaleIOArgs) ToAlertmanagerSpecVolumesScaleIOPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesScaleIOPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesScaleIOOutput).ToAlertmanagerSpecVolumesScaleIOPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesScaleIOPtrInput is an input type that accepts AlertmanagerSpecVolumesScaleIOArgs, AlertmanagerSpecVolumesScaleIOPtr and AlertmanagerSpecVolumesScaleIOPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesScaleIOPtrInput` via:
//
//          AlertmanagerSpecVolumesScaleIOArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesScaleIOPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesScaleIOPtrOutput() AlertmanagerSpecVolumesScaleIOPtrOutput
	ToAlertmanagerSpecVolumesScaleIOPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesScaleIOPtrOutput
}

type alertmanagerSpecVolumesScaleIOPtrType AlertmanagerSpecVolumesScaleIOArgs

func AlertmanagerSpecVolumesScaleIOPtr(v *AlertmanagerSpecVolumesScaleIOArgs) AlertmanagerSpecVolumesScaleIOPtrInput {
	return (*alertmanagerSpecVolumesScaleIOPtrType)(v)
}

func (*alertmanagerSpecVolumesScaleIOPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesScaleIO)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesScaleIOPtrType) ToAlertmanagerSpecVolumesScaleIOPtrOutput() AlertmanagerSpecVolumesScaleIOPtrOutput {
	return i.ToAlertmanagerSpecVolumesScaleIOPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesScaleIOPtrType) ToAlertmanagerSpecVolumesScaleIOPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesScaleIOPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesScaleIOPtrOutput)
}

// ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
type AlertmanagerSpecVolumesScaleIOOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesScaleIOOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesScaleIO)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesScaleIOOutput) ToAlertmanagerSpecVolumesScaleIOOutput() AlertmanagerSpecVolumesScaleIOOutput {
	return o
}

func (o AlertmanagerSpecVolumesScaleIOOutput) ToAlertmanagerSpecVolumesScaleIOOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesScaleIOOutput {
	return o
}

func (o AlertmanagerSpecVolumesScaleIOOutput) ToAlertmanagerSpecVolumesScaleIOPtrOutput() AlertmanagerSpecVolumesScaleIOPtrOutput {
	return o.ToAlertmanagerSpecVolumesScaleIOPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesScaleIOOutput) ToAlertmanagerSpecVolumesScaleIOPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesScaleIOPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesScaleIO) *AlertmanagerSpecVolumesScaleIO {
		return &v
	}).(AlertmanagerSpecVolumesScaleIOPtrOutput)
}

// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
func (o AlertmanagerSpecVolumesScaleIOOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesScaleIO) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// The host address of the ScaleIO API Gateway.
func (o AlertmanagerSpecVolumesScaleIOOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesScaleIO) string { return v.Gateway }).(pulumi.StringOutput)
}

// The name of the ScaleIO Protection Domain for the configured storage.
func (o AlertmanagerSpecVolumesScaleIOOutput) ProtectionDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesScaleIO) *string { return v.ProtectionDomain }).(pulumi.StringPtrOutput)
}

// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o AlertmanagerSpecVolumesScaleIOOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesScaleIO) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
func (o AlertmanagerSpecVolumesScaleIOOutput) SecretRef() AlertmanagerSpecVolumesScaleIOSecretRefOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesScaleIO) AlertmanagerSpecVolumesScaleIOSecretRef { return v.SecretRef }).(AlertmanagerSpecVolumesScaleIOSecretRefOutput)
}

// Flag to enable/disable SSL communication with Gateway, default false
func (o AlertmanagerSpecVolumesScaleIOOutput) SslEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesScaleIO) *bool { return v.SslEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
func (o AlertmanagerSpecVolumesScaleIOOutput) StorageMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesScaleIO) *string { return v.StorageMode }).(pulumi.StringPtrOutput)
}

// The ScaleIO Storage Pool associated with the protection domain.
func (o AlertmanagerSpecVolumesScaleIOOutput) StoragePool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesScaleIO) *string { return v.StoragePool }).(pulumi.StringPtrOutput)
}

// The name of the storage system as configured in ScaleIO.
func (o AlertmanagerSpecVolumesScaleIOOutput) System() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesScaleIO) string { return v.System }).(pulumi.StringOutput)
}

// The name of a volume already created in the ScaleIO system that is associated with this volume source.
func (o AlertmanagerSpecVolumesScaleIOOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesScaleIO) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecVolumesScaleIOPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesScaleIOPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesScaleIO)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesScaleIOPtrOutput) ToAlertmanagerSpecVolumesScaleIOPtrOutput() AlertmanagerSpecVolumesScaleIOPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesScaleIOPtrOutput) ToAlertmanagerSpecVolumesScaleIOPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesScaleIOPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesScaleIOPtrOutput) Elem() AlertmanagerSpecVolumesScaleIOOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesScaleIO) AlertmanagerSpecVolumesScaleIO { return *v }).(AlertmanagerSpecVolumesScaleIOOutput)
}

// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
func (o AlertmanagerSpecVolumesScaleIOPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesScaleIO) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// The host address of the ScaleIO API Gateway.
func (o AlertmanagerSpecVolumesScaleIOPtrOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesScaleIO) *string {
		if v == nil {
			return nil
		}
		return &v.Gateway
	}).(pulumi.StringPtrOutput)
}

// The name of the ScaleIO Protection Domain for the configured storage.
func (o AlertmanagerSpecVolumesScaleIOPtrOutput) ProtectionDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesScaleIO) *string {
		if v == nil {
			return nil
		}
		return v.ProtectionDomain
	}).(pulumi.StringPtrOutput)
}

// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o AlertmanagerSpecVolumesScaleIOPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesScaleIO) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
func (o AlertmanagerSpecVolumesScaleIOPtrOutput) SecretRef() AlertmanagerSpecVolumesScaleIOSecretRefPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesScaleIO) *AlertmanagerSpecVolumesScaleIOSecretRef {
		if v == nil {
			return nil
		}
		return &v.SecretRef
	}).(AlertmanagerSpecVolumesScaleIOSecretRefPtrOutput)
}

// Flag to enable/disable SSL communication with Gateway, default false
func (o AlertmanagerSpecVolumesScaleIOPtrOutput) SslEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesScaleIO) *bool {
		if v == nil {
			return nil
		}
		return v.SslEnabled
	}).(pulumi.BoolPtrOutput)
}

// Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
func (o AlertmanagerSpecVolumesScaleIOPtrOutput) StorageMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesScaleIO) *string {
		if v == nil {
			return nil
		}
		return v.StorageMode
	}).(pulumi.StringPtrOutput)
}

// The ScaleIO Storage Pool associated with the protection domain.
func (o AlertmanagerSpecVolumesScaleIOPtrOutput) StoragePool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesScaleIO) *string {
		if v == nil {
			return nil
		}
		return v.StoragePool
	}).(pulumi.StringPtrOutput)
}

// The name of the storage system as configured in ScaleIO.
func (o AlertmanagerSpecVolumesScaleIOPtrOutput) System() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesScaleIO) *string {
		if v == nil {
			return nil
		}
		return &v.System
	}).(pulumi.StringPtrOutput)
}

// The name of a volume already created in the ScaleIO system that is associated with this volume source.
func (o AlertmanagerSpecVolumesScaleIOPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesScaleIO) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
type AlertmanagerSpecVolumesScaleIOSecretRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
}

// AlertmanagerSpecVolumesScaleIOSecretRefInput is an input type that accepts AlertmanagerSpecVolumesScaleIOSecretRefArgs and AlertmanagerSpecVolumesScaleIOSecretRefOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesScaleIOSecretRefInput` via:
//
//          AlertmanagerSpecVolumesScaleIOSecretRefArgs{...}
type AlertmanagerSpecVolumesScaleIOSecretRefInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesScaleIOSecretRefOutput() AlertmanagerSpecVolumesScaleIOSecretRefOutput
	ToAlertmanagerSpecVolumesScaleIOSecretRefOutputWithContext(context.Context) AlertmanagerSpecVolumesScaleIOSecretRefOutput
}

// SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
type AlertmanagerSpecVolumesScaleIOSecretRefArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (AlertmanagerSpecVolumesScaleIOSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesScaleIOSecretRef)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesScaleIOSecretRefArgs) ToAlertmanagerSpecVolumesScaleIOSecretRefOutput() AlertmanagerSpecVolumesScaleIOSecretRefOutput {
	return i.ToAlertmanagerSpecVolumesScaleIOSecretRefOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesScaleIOSecretRefArgs) ToAlertmanagerSpecVolumesScaleIOSecretRefOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesScaleIOSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesScaleIOSecretRefOutput)
}

func (i AlertmanagerSpecVolumesScaleIOSecretRefArgs) ToAlertmanagerSpecVolumesScaleIOSecretRefPtrOutput() AlertmanagerSpecVolumesScaleIOSecretRefPtrOutput {
	return i.ToAlertmanagerSpecVolumesScaleIOSecretRefPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesScaleIOSecretRefArgs) ToAlertmanagerSpecVolumesScaleIOSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesScaleIOSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesScaleIOSecretRefOutput).ToAlertmanagerSpecVolumesScaleIOSecretRefPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesScaleIOSecretRefPtrInput is an input type that accepts AlertmanagerSpecVolumesScaleIOSecretRefArgs, AlertmanagerSpecVolumesScaleIOSecretRefPtr and AlertmanagerSpecVolumesScaleIOSecretRefPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesScaleIOSecretRefPtrInput` via:
//
//          AlertmanagerSpecVolumesScaleIOSecretRefArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesScaleIOSecretRefPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesScaleIOSecretRefPtrOutput() AlertmanagerSpecVolumesScaleIOSecretRefPtrOutput
	ToAlertmanagerSpecVolumesScaleIOSecretRefPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesScaleIOSecretRefPtrOutput
}

type alertmanagerSpecVolumesScaleIOSecretRefPtrType AlertmanagerSpecVolumesScaleIOSecretRefArgs

func AlertmanagerSpecVolumesScaleIOSecretRefPtr(v *AlertmanagerSpecVolumesScaleIOSecretRefArgs) AlertmanagerSpecVolumesScaleIOSecretRefPtrInput {
	return (*alertmanagerSpecVolumesScaleIOSecretRefPtrType)(v)
}

func (*alertmanagerSpecVolumesScaleIOSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesScaleIOSecretRef)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesScaleIOSecretRefPtrType) ToAlertmanagerSpecVolumesScaleIOSecretRefPtrOutput() AlertmanagerSpecVolumesScaleIOSecretRefPtrOutput {
	return i.ToAlertmanagerSpecVolumesScaleIOSecretRefPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesScaleIOSecretRefPtrType) ToAlertmanagerSpecVolumesScaleIOSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesScaleIOSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesScaleIOSecretRefPtrOutput)
}

// SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
type AlertmanagerSpecVolumesScaleIOSecretRefOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesScaleIOSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesScaleIOSecretRef)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesScaleIOSecretRefOutput) ToAlertmanagerSpecVolumesScaleIOSecretRefOutput() AlertmanagerSpecVolumesScaleIOSecretRefOutput {
	return o
}

func (o AlertmanagerSpecVolumesScaleIOSecretRefOutput) ToAlertmanagerSpecVolumesScaleIOSecretRefOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesScaleIOSecretRefOutput {
	return o
}

func (o AlertmanagerSpecVolumesScaleIOSecretRefOutput) ToAlertmanagerSpecVolumesScaleIOSecretRefPtrOutput() AlertmanagerSpecVolumesScaleIOSecretRefPtrOutput {
	return o.ToAlertmanagerSpecVolumesScaleIOSecretRefPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesScaleIOSecretRefOutput) ToAlertmanagerSpecVolumesScaleIOSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesScaleIOSecretRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesScaleIOSecretRef) *AlertmanagerSpecVolumesScaleIOSecretRef {
		return &v
	}).(AlertmanagerSpecVolumesScaleIOSecretRefPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecVolumesScaleIOSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesScaleIOSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecVolumesScaleIOSecretRefPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesScaleIOSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesScaleIOSecretRef)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesScaleIOSecretRefPtrOutput) ToAlertmanagerSpecVolumesScaleIOSecretRefPtrOutput() AlertmanagerSpecVolumesScaleIOSecretRefPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesScaleIOSecretRefPtrOutput) ToAlertmanagerSpecVolumesScaleIOSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesScaleIOSecretRefPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesScaleIOSecretRefPtrOutput) Elem() AlertmanagerSpecVolumesScaleIOSecretRefOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesScaleIOSecretRef) AlertmanagerSpecVolumesScaleIOSecretRef { return *v }).(AlertmanagerSpecVolumesScaleIOSecretRefOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecVolumesScaleIOSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesScaleIOSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
type AlertmanagerSpecVolumesSecret struct {
	// Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []AlertmanagerSpecVolumesSecretItems `pulumi:"items"`
	// Specify whether the Secret or its keys must be defined
	Optional *bool `pulumi:"optional"`
	// Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	SecretName *string `pulumi:"secretName"`
}

// AlertmanagerSpecVolumesSecretInput is an input type that accepts AlertmanagerSpecVolumesSecretArgs and AlertmanagerSpecVolumesSecretOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesSecretInput` via:
//
//          AlertmanagerSpecVolumesSecretArgs{...}
type AlertmanagerSpecVolumesSecretInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesSecretOutput() AlertmanagerSpecVolumesSecretOutput
	ToAlertmanagerSpecVolumesSecretOutputWithContext(context.Context) AlertmanagerSpecVolumesSecretOutput
}

// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
type AlertmanagerSpecVolumesSecretArgs struct {
	// Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items AlertmanagerSpecVolumesSecretItemsArrayInput `pulumi:"items"`
	// Specify whether the Secret or its keys must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
	// Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (AlertmanagerSpecVolumesSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesSecret)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesSecretArgs) ToAlertmanagerSpecVolumesSecretOutput() AlertmanagerSpecVolumesSecretOutput {
	return i.ToAlertmanagerSpecVolumesSecretOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesSecretArgs) ToAlertmanagerSpecVolumesSecretOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesSecretOutput)
}

func (i AlertmanagerSpecVolumesSecretArgs) ToAlertmanagerSpecVolumesSecretPtrOutput() AlertmanagerSpecVolumesSecretPtrOutput {
	return i.ToAlertmanagerSpecVolumesSecretPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesSecretArgs) ToAlertmanagerSpecVolumesSecretPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesSecretOutput).ToAlertmanagerSpecVolumesSecretPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesSecretPtrInput is an input type that accepts AlertmanagerSpecVolumesSecretArgs, AlertmanagerSpecVolumesSecretPtr and AlertmanagerSpecVolumesSecretPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesSecretPtrInput` via:
//
//          AlertmanagerSpecVolumesSecretArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesSecretPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesSecretPtrOutput() AlertmanagerSpecVolumesSecretPtrOutput
	ToAlertmanagerSpecVolumesSecretPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesSecretPtrOutput
}

type alertmanagerSpecVolumesSecretPtrType AlertmanagerSpecVolumesSecretArgs

func AlertmanagerSpecVolumesSecretPtr(v *AlertmanagerSpecVolumesSecretArgs) AlertmanagerSpecVolumesSecretPtrInput {
	return (*alertmanagerSpecVolumesSecretPtrType)(v)
}

func (*alertmanagerSpecVolumesSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesSecret)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesSecretPtrType) ToAlertmanagerSpecVolumesSecretPtrOutput() AlertmanagerSpecVolumesSecretPtrOutput {
	return i.ToAlertmanagerSpecVolumesSecretPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesSecretPtrType) ToAlertmanagerSpecVolumesSecretPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesSecretPtrOutput)
}

// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
type AlertmanagerSpecVolumesSecretOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesSecret)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesSecretOutput) ToAlertmanagerSpecVolumesSecretOutput() AlertmanagerSpecVolumesSecretOutput {
	return o
}

func (o AlertmanagerSpecVolumesSecretOutput) ToAlertmanagerSpecVolumesSecretOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesSecretOutput {
	return o
}

func (o AlertmanagerSpecVolumesSecretOutput) ToAlertmanagerSpecVolumesSecretPtrOutput() AlertmanagerSpecVolumesSecretPtrOutput {
	return o.ToAlertmanagerSpecVolumesSecretPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesSecretOutput) ToAlertmanagerSpecVolumesSecretPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesSecretPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesSecret) *AlertmanagerSpecVolumesSecret {
		return &v
	}).(AlertmanagerSpecVolumesSecretPtrOutput)
}

// Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o AlertmanagerSpecVolumesSecretOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesSecret) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o AlertmanagerSpecVolumesSecretOutput) Items() AlertmanagerSpecVolumesSecretItemsArrayOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesSecret) []AlertmanagerSpecVolumesSecretItems { return v.Items }).(AlertmanagerSpecVolumesSecretItemsArrayOutput)
}

// Specify whether the Secret or its keys must be defined
func (o AlertmanagerSpecVolumesSecretOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesSecret) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

// Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (o AlertmanagerSpecVolumesSecretOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesSecret) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecVolumesSecretPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesSecret)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesSecretPtrOutput) ToAlertmanagerSpecVolumesSecretPtrOutput() AlertmanagerSpecVolumesSecretPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesSecretPtrOutput) ToAlertmanagerSpecVolumesSecretPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesSecretPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesSecretPtrOutput) Elem() AlertmanagerSpecVolumesSecretOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesSecret) AlertmanagerSpecVolumesSecret { return *v }).(AlertmanagerSpecVolumesSecretOutput)
}

// Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o AlertmanagerSpecVolumesSecretPtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesSecret) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o AlertmanagerSpecVolumesSecretPtrOutput) Items() AlertmanagerSpecVolumesSecretItemsArrayOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesSecret) []AlertmanagerSpecVolumesSecretItems {
		if v == nil {
			return nil
		}
		return v.Items
	}).(AlertmanagerSpecVolumesSecretItemsArrayOutput)
}

// Specify whether the Secret or its keys must be defined
func (o AlertmanagerSpecVolumesSecretPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesSecret) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (o AlertmanagerSpecVolumesSecretPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesSecret) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// Maps a string key to a path within a volume.
type AlertmanagerSpecVolumesSecretItems struct {
	// The key to project.
	Key string `pulumi:"key"`
	// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path string `pulumi:"path"`
}

// AlertmanagerSpecVolumesSecretItemsInput is an input type that accepts AlertmanagerSpecVolumesSecretItemsArgs and AlertmanagerSpecVolumesSecretItemsOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesSecretItemsInput` via:
//
//          AlertmanagerSpecVolumesSecretItemsArgs{...}
type AlertmanagerSpecVolumesSecretItemsInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesSecretItemsOutput() AlertmanagerSpecVolumesSecretItemsOutput
	ToAlertmanagerSpecVolumesSecretItemsOutputWithContext(context.Context) AlertmanagerSpecVolumesSecretItemsOutput
}

// Maps a string key to a path within a volume.
type AlertmanagerSpecVolumesSecretItemsArgs struct {
	// The key to project.
	Key pulumi.StringInput `pulumi:"key"`
	// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path pulumi.StringInput `pulumi:"path"`
}

func (AlertmanagerSpecVolumesSecretItemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesSecretItems)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesSecretItemsArgs) ToAlertmanagerSpecVolumesSecretItemsOutput() AlertmanagerSpecVolumesSecretItemsOutput {
	return i.ToAlertmanagerSpecVolumesSecretItemsOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesSecretItemsArgs) ToAlertmanagerSpecVolumesSecretItemsOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesSecretItemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesSecretItemsOutput)
}

// AlertmanagerSpecVolumesSecretItemsArrayInput is an input type that accepts AlertmanagerSpecVolumesSecretItemsArray and AlertmanagerSpecVolumesSecretItemsArrayOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesSecretItemsArrayInput` via:
//
//          AlertmanagerSpecVolumesSecretItemsArray{ AlertmanagerSpecVolumesSecretItemsArgs{...} }
type AlertmanagerSpecVolumesSecretItemsArrayInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesSecretItemsArrayOutput() AlertmanagerSpecVolumesSecretItemsArrayOutput
	ToAlertmanagerSpecVolumesSecretItemsArrayOutputWithContext(context.Context) AlertmanagerSpecVolumesSecretItemsArrayOutput
}

type AlertmanagerSpecVolumesSecretItemsArray []AlertmanagerSpecVolumesSecretItemsInput

func (AlertmanagerSpecVolumesSecretItemsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecVolumesSecretItems)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesSecretItemsArray) ToAlertmanagerSpecVolumesSecretItemsArrayOutput() AlertmanagerSpecVolumesSecretItemsArrayOutput {
	return i.ToAlertmanagerSpecVolumesSecretItemsArrayOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesSecretItemsArray) ToAlertmanagerSpecVolumesSecretItemsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesSecretItemsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesSecretItemsArrayOutput)
}

// Maps a string key to a path within a volume.
type AlertmanagerSpecVolumesSecretItemsOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesSecretItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesSecretItems)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesSecretItemsOutput) ToAlertmanagerSpecVolumesSecretItemsOutput() AlertmanagerSpecVolumesSecretItemsOutput {
	return o
}

func (o AlertmanagerSpecVolumesSecretItemsOutput) ToAlertmanagerSpecVolumesSecretItemsOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesSecretItemsOutput {
	return o
}

// The key to project.
func (o AlertmanagerSpecVolumesSecretItemsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesSecretItems) string { return v.Key }).(pulumi.StringOutput)
}

// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o AlertmanagerSpecVolumesSecretItemsOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesSecretItems) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
func (o AlertmanagerSpecVolumesSecretItemsOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesSecretItems) string { return v.Path }).(pulumi.StringOutput)
}

type AlertmanagerSpecVolumesSecretItemsArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesSecretItemsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertmanagerSpecVolumesSecretItems)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesSecretItemsArrayOutput) ToAlertmanagerSpecVolumesSecretItemsArrayOutput() AlertmanagerSpecVolumesSecretItemsArrayOutput {
	return o
}

func (o AlertmanagerSpecVolumesSecretItemsArrayOutput) ToAlertmanagerSpecVolumesSecretItemsArrayOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesSecretItemsArrayOutput {
	return o
}

func (o AlertmanagerSpecVolumesSecretItemsArrayOutput) Index(i pulumi.IntInput) AlertmanagerSpecVolumesSecretItemsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertmanagerSpecVolumesSecretItems {
		return vs[0].([]AlertmanagerSpecVolumesSecretItems)[vs[1].(int)]
	}).(AlertmanagerSpecVolumesSecretItemsOutput)
}

// StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
type AlertmanagerSpecVolumesStorageos struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
	SecretRef *AlertmanagerSpecVolumesStorageosSecretRef `pulumi:"secretRef"`
	// VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
	VolumeName *string `pulumi:"volumeName"`
	// VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
	VolumeNamespace *string `pulumi:"volumeNamespace"`
}

// AlertmanagerSpecVolumesStorageosInput is an input type that accepts AlertmanagerSpecVolumesStorageosArgs and AlertmanagerSpecVolumesStorageosOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesStorageosInput` via:
//
//          AlertmanagerSpecVolumesStorageosArgs{...}
type AlertmanagerSpecVolumesStorageosInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesStorageosOutput() AlertmanagerSpecVolumesStorageosOutput
	ToAlertmanagerSpecVolumesStorageosOutputWithContext(context.Context) AlertmanagerSpecVolumesStorageosOutput
}

// StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
type AlertmanagerSpecVolumesStorageosArgs struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
	SecretRef AlertmanagerSpecVolumesStorageosSecretRefPtrInput `pulumi:"secretRef"`
	// VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
	// VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
	VolumeNamespace pulumi.StringPtrInput `pulumi:"volumeNamespace"`
}

func (AlertmanagerSpecVolumesStorageosArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesStorageos)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesStorageosArgs) ToAlertmanagerSpecVolumesStorageosOutput() AlertmanagerSpecVolumesStorageosOutput {
	return i.ToAlertmanagerSpecVolumesStorageosOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesStorageosArgs) ToAlertmanagerSpecVolumesStorageosOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesStorageosOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesStorageosOutput)
}

func (i AlertmanagerSpecVolumesStorageosArgs) ToAlertmanagerSpecVolumesStorageosPtrOutput() AlertmanagerSpecVolumesStorageosPtrOutput {
	return i.ToAlertmanagerSpecVolumesStorageosPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesStorageosArgs) ToAlertmanagerSpecVolumesStorageosPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesStorageosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesStorageosOutput).ToAlertmanagerSpecVolumesStorageosPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesStorageosPtrInput is an input type that accepts AlertmanagerSpecVolumesStorageosArgs, AlertmanagerSpecVolumesStorageosPtr and AlertmanagerSpecVolumesStorageosPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesStorageosPtrInput` via:
//
//          AlertmanagerSpecVolumesStorageosArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesStorageosPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesStorageosPtrOutput() AlertmanagerSpecVolumesStorageosPtrOutput
	ToAlertmanagerSpecVolumesStorageosPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesStorageosPtrOutput
}

type alertmanagerSpecVolumesStorageosPtrType AlertmanagerSpecVolumesStorageosArgs

func AlertmanagerSpecVolumesStorageosPtr(v *AlertmanagerSpecVolumesStorageosArgs) AlertmanagerSpecVolumesStorageosPtrInput {
	return (*alertmanagerSpecVolumesStorageosPtrType)(v)
}

func (*alertmanagerSpecVolumesStorageosPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesStorageos)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesStorageosPtrType) ToAlertmanagerSpecVolumesStorageosPtrOutput() AlertmanagerSpecVolumesStorageosPtrOutput {
	return i.ToAlertmanagerSpecVolumesStorageosPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesStorageosPtrType) ToAlertmanagerSpecVolumesStorageosPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesStorageosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesStorageosPtrOutput)
}

// StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
type AlertmanagerSpecVolumesStorageosOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesStorageosOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesStorageos)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesStorageosOutput) ToAlertmanagerSpecVolumesStorageosOutput() AlertmanagerSpecVolumesStorageosOutput {
	return o
}

func (o AlertmanagerSpecVolumesStorageosOutput) ToAlertmanagerSpecVolumesStorageosOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesStorageosOutput {
	return o
}

func (o AlertmanagerSpecVolumesStorageosOutput) ToAlertmanagerSpecVolumesStorageosPtrOutput() AlertmanagerSpecVolumesStorageosPtrOutput {
	return o.ToAlertmanagerSpecVolumesStorageosPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesStorageosOutput) ToAlertmanagerSpecVolumesStorageosPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesStorageosPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesStorageos) *AlertmanagerSpecVolumesStorageos {
		return &v
	}).(AlertmanagerSpecVolumesStorageosPtrOutput)
}

// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o AlertmanagerSpecVolumesStorageosOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesStorageos) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o AlertmanagerSpecVolumesStorageosOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesStorageos) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
func (o AlertmanagerSpecVolumesStorageosOutput) SecretRef() AlertmanagerSpecVolumesStorageosSecretRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesStorageos) *AlertmanagerSpecVolumesStorageosSecretRef {
		return v.SecretRef
	}).(AlertmanagerSpecVolumesStorageosSecretRefPtrOutput)
}

// VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
func (o AlertmanagerSpecVolumesStorageosOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesStorageos) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

// VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
func (o AlertmanagerSpecVolumesStorageosOutput) VolumeNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesStorageos) *string { return v.VolumeNamespace }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecVolumesStorageosPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesStorageosPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesStorageos)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesStorageosPtrOutput) ToAlertmanagerSpecVolumesStorageosPtrOutput() AlertmanagerSpecVolumesStorageosPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesStorageosPtrOutput) ToAlertmanagerSpecVolumesStorageosPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesStorageosPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesStorageosPtrOutput) Elem() AlertmanagerSpecVolumesStorageosOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesStorageos) AlertmanagerSpecVolumesStorageos { return *v }).(AlertmanagerSpecVolumesStorageosOutput)
}

// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o AlertmanagerSpecVolumesStorageosPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesStorageos) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o AlertmanagerSpecVolumesStorageosPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesStorageos) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
func (o AlertmanagerSpecVolumesStorageosPtrOutput) SecretRef() AlertmanagerSpecVolumesStorageosSecretRefPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesStorageos) *AlertmanagerSpecVolumesStorageosSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(AlertmanagerSpecVolumesStorageosSecretRefPtrOutput)
}

// VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
func (o AlertmanagerSpecVolumesStorageosPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesStorageos) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
func (o AlertmanagerSpecVolumesStorageosPtrOutput) VolumeNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesStorageos) *string {
		if v == nil {
			return nil
		}
		return v.VolumeNamespace
	}).(pulumi.StringPtrOutput)
}

// SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
type AlertmanagerSpecVolumesStorageosSecretRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
}

// AlertmanagerSpecVolumesStorageosSecretRefInput is an input type that accepts AlertmanagerSpecVolumesStorageosSecretRefArgs and AlertmanagerSpecVolumesStorageosSecretRefOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesStorageosSecretRefInput` via:
//
//          AlertmanagerSpecVolumesStorageosSecretRefArgs{...}
type AlertmanagerSpecVolumesStorageosSecretRefInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesStorageosSecretRefOutput() AlertmanagerSpecVolumesStorageosSecretRefOutput
	ToAlertmanagerSpecVolumesStorageosSecretRefOutputWithContext(context.Context) AlertmanagerSpecVolumesStorageosSecretRefOutput
}

// SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
type AlertmanagerSpecVolumesStorageosSecretRefArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (AlertmanagerSpecVolumesStorageosSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesStorageosSecretRef)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesStorageosSecretRefArgs) ToAlertmanagerSpecVolumesStorageosSecretRefOutput() AlertmanagerSpecVolumesStorageosSecretRefOutput {
	return i.ToAlertmanagerSpecVolumesStorageosSecretRefOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesStorageosSecretRefArgs) ToAlertmanagerSpecVolumesStorageosSecretRefOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesStorageosSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesStorageosSecretRefOutput)
}

func (i AlertmanagerSpecVolumesStorageosSecretRefArgs) ToAlertmanagerSpecVolumesStorageosSecretRefPtrOutput() AlertmanagerSpecVolumesStorageosSecretRefPtrOutput {
	return i.ToAlertmanagerSpecVolumesStorageosSecretRefPtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesStorageosSecretRefArgs) ToAlertmanagerSpecVolumesStorageosSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesStorageosSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesStorageosSecretRefOutput).ToAlertmanagerSpecVolumesStorageosSecretRefPtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesStorageosSecretRefPtrInput is an input type that accepts AlertmanagerSpecVolumesStorageosSecretRefArgs, AlertmanagerSpecVolumesStorageosSecretRefPtr and AlertmanagerSpecVolumesStorageosSecretRefPtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesStorageosSecretRefPtrInput` via:
//
//          AlertmanagerSpecVolumesStorageosSecretRefArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesStorageosSecretRefPtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesStorageosSecretRefPtrOutput() AlertmanagerSpecVolumesStorageosSecretRefPtrOutput
	ToAlertmanagerSpecVolumesStorageosSecretRefPtrOutputWithContext(context.Context) AlertmanagerSpecVolumesStorageosSecretRefPtrOutput
}

type alertmanagerSpecVolumesStorageosSecretRefPtrType AlertmanagerSpecVolumesStorageosSecretRefArgs

func AlertmanagerSpecVolumesStorageosSecretRefPtr(v *AlertmanagerSpecVolumesStorageosSecretRefArgs) AlertmanagerSpecVolumesStorageosSecretRefPtrInput {
	return (*alertmanagerSpecVolumesStorageosSecretRefPtrType)(v)
}

func (*alertmanagerSpecVolumesStorageosSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesStorageosSecretRef)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesStorageosSecretRefPtrType) ToAlertmanagerSpecVolumesStorageosSecretRefPtrOutput() AlertmanagerSpecVolumesStorageosSecretRefPtrOutput {
	return i.ToAlertmanagerSpecVolumesStorageosSecretRefPtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesStorageosSecretRefPtrType) ToAlertmanagerSpecVolumesStorageosSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesStorageosSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesStorageosSecretRefPtrOutput)
}

// SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
type AlertmanagerSpecVolumesStorageosSecretRefOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesStorageosSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesStorageosSecretRef)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesStorageosSecretRefOutput) ToAlertmanagerSpecVolumesStorageosSecretRefOutput() AlertmanagerSpecVolumesStorageosSecretRefOutput {
	return o
}

func (o AlertmanagerSpecVolumesStorageosSecretRefOutput) ToAlertmanagerSpecVolumesStorageosSecretRefOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesStorageosSecretRefOutput {
	return o
}

func (o AlertmanagerSpecVolumesStorageosSecretRefOutput) ToAlertmanagerSpecVolumesStorageosSecretRefPtrOutput() AlertmanagerSpecVolumesStorageosSecretRefPtrOutput {
	return o.ToAlertmanagerSpecVolumesStorageosSecretRefPtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesStorageosSecretRefOutput) ToAlertmanagerSpecVolumesStorageosSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesStorageosSecretRefPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesStorageosSecretRef) *AlertmanagerSpecVolumesStorageosSecretRef {
		return &v
	}).(AlertmanagerSpecVolumesStorageosSecretRefPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecVolumesStorageosSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesStorageosSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AlertmanagerSpecVolumesStorageosSecretRefPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesStorageosSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesStorageosSecretRef)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesStorageosSecretRefPtrOutput) ToAlertmanagerSpecVolumesStorageosSecretRefPtrOutput() AlertmanagerSpecVolumesStorageosSecretRefPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesStorageosSecretRefPtrOutput) ToAlertmanagerSpecVolumesStorageosSecretRefPtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesStorageosSecretRefPtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesStorageosSecretRefPtrOutput) Elem() AlertmanagerSpecVolumesStorageosSecretRefOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesStorageosSecretRef) AlertmanagerSpecVolumesStorageosSecretRef {
		return *v
	}).(AlertmanagerSpecVolumesStorageosSecretRefOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o AlertmanagerSpecVolumesStorageosSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesStorageosSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
type AlertmanagerSpecVolumesVsphereVolume struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
	StoragePolicyID *string `pulumi:"storagePolicyID"`
	// Storage Policy Based Management (SPBM) profile name.
	StoragePolicyName *string `pulumi:"storagePolicyName"`
	// Path that identifies vSphere volume vmdk
	VolumePath string `pulumi:"volumePath"`
}

// AlertmanagerSpecVolumesVsphereVolumeInput is an input type that accepts AlertmanagerSpecVolumesVsphereVolumeArgs and AlertmanagerSpecVolumesVsphereVolumeOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesVsphereVolumeInput` via:
//
//          AlertmanagerSpecVolumesVsphereVolumeArgs{...}
type AlertmanagerSpecVolumesVsphereVolumeInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesVsphereVolumeOutput() AlertmanagerSpecVolumesVsphereVolumeOutput
	ToAlertmanagerSpecVolumesVsphereVolumeOutputWithContext(context.Context) AlertmanagerSpecVolumesVsphereVolumeOutput
}

// VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
type AlertmanagerSpecVolumesVsphereVolumeArgs struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
	StoragePolicyID pulumi.StringPtrInput `pulumi:"storagePolicyID"`
	// Storage Policy Based Management (SPBM) profile name.
	StoragePolicyName pulumi.StringPtrInput `pulumi:"storagePolicyName"`
	// Path that identifies vSphere volume vmdk
	VolumePath pulumi.StringInput `pulumi:"volumePath"`
}

func (AlertmanagerSpecVolumesVsphereVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesVsphereVolume)(nil)).Elem()
}

func (i AlertmanagerSpecVolumesVsphereVolumeArgs) ToAlertmanagerSpecVolumesVsphereVolumeOutput() AlertmanagerSpecVolumesVsphereVolumeOutput {
	return i.ToAlertmanagerSpecVolumesVsphereVolumeOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesVsphereVolumeArgs) ToAlertmanagerSpecVolumesVsphereVolumeOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesVsphereVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesVsphereVolumeOutput)
}

func (i AlertmanagerSpecVolumesVsphereVolumeArgs) ToAlertmanagerSpecVolumesVsphereVolumePtrOutput() AlertmanagerSpecVolumesVsphereVolumePtrOutput {
	return i.ToAlertmanagerSpecVolumesVsphereVolumePtrOutputWithContext(context.Background())
}

func (i AlertmanagerSpecVolumesVsphereVolumeArgs) ToAlertmanagerSpecVolumesVsphereVolumePtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesVsphereVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesVsphereVolumeOutput).ToAlertmanagerSpecVolumesVsphereVolumePtrOutputWithContext(ctx)
}

// AlertmanagerSpecVolumesVsphereVolumePtrInput is an input type that accepts AlertmanagerSpecVolumesVsphereVolumeArgs, AlertmanagerSpecVolumesVsphereVolumePtr and AlertmanagerSpecVolumesVsphereVolumePtrOutput values.
// You can construct a concrete instance of `AlertmanagerSpecVolumesVsphereVolumePtrInput` via:
//
//          AlertmanagerSpecVolumesVsphereVolumeArgs{...}
//
//  or:
//
//          nil
type AlertmanagerSpecVolumesVsphereVolumePtrInput interface {
	pulumi.Input

	ToAlertmanagerSpecVolumesVsphereVolumePtrOutput() AlertmanagerSpecVolumesVsphereVolumePtrOutput
	ToAlertmanagerSpecVolumesVsphereVolumePtrOutputWithContext(context.Context) AlertmanagerSpecVolumesVsphereVolumePtrOutput
}

type alertmanagerSpecVolumesVsphereVolumePtrType AlertmanagerSpecVolumesVsphereVolumeArgs

func AlertmanagerSpecVolumesVsphereVolumePtr(v *AlertmanagerSpecVolumesVsphereVolumeArgs) AlertmanagerSpecVolumesVsphereVolumePtrInput {
	return (*alertmanagerSpecVolumesVsphereVolumePtrType)(v)
}

func (*alertmanagerSpecVolumesVsphereVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesVsphereVolume)(nil)).Elem()
}

func (i *alertmanagerSpecVolumesVsphereVolumePtrType) ToAlertmanagerSpecVolumesVsphereVolumePtrOutput() AlertmanagerSpecVolumesVsphereVolumePtrOutput {
	return i.ToAlertmanagerSpecVolumesVsphereVolumePtrOutputWithContext(context.Background())
}

func (i *alertmanagerSpecVolumesVsphereVolumePtrType) ToAlertmanagerSpecVolumesVsphereVolumePtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesVsphereVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerSpecVolumesVsphereVolumePtrOutput)
}

// VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
type AlertmanagerSpecVolumesVsphereVolumeOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesVsphereVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerSpecVolumesVsphereVolume)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesVsphereVolumeOutput) ToAlertmanagerSpecVolumesVsphereVolumeOutput() AlertmanagerSpecVolumesVsphereVolumeOutput {
	return o
}

func (o AlertmanagerSpecVolumesVsphereVolumeOutput) ToAlertmanagerSpecVolumesVsphereVolumeOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesVsphereVolumeOutput {
	return o
}

func (o AlertmanagerSpecVolumesVsphereVolumeOutput) ToAlertmanagerSpecVolumesVsphereVolumePtrOutput() AlertmanagerSpecVolumesVsphereVolumePtrOutput {
	return o.ToAlertmanagerSpecVolumesVsphereVolumePtrOutputWithContext(context.Background())
}

func (o AlertmanagerSpecVolumesVsphereVolumeOutput) ToAlertmanagerSpecVolumesVsphereVolumePtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesVsphereVolumePtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesVsphereVolume) *AlertmanagerSpecVolumesVsphereVolume {
		return &v
	}).(AlertmanagerSpecVolumesVsphereVolumePtrOutput)
}

// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o AlertmanagerSpecVolumesVsphereVolumeOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesVsphereVolume) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
func (o AlertmanagerSpecVolumesVsphereVolumeOutput) StoragePolicyID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesVsphereVolume) *string { return v.StoragePolicyID }).(pulumi.StringPtrOutput)
}

// Storage Policy Based Management (SPBM) profile name.
func (o AlertmanagerSpecVolumesVsphereVolumeOutput) StoragePolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesVsphereVolume) *string { return v.StoragePolicyName }).(pulumi.StringPtrOutput)
}

// Path that identifies vSphere volume vmdk
func (o AlertmanagerSpecVolumesVsphereVolumeOutput) VolumePath() pulumi.StringOutput {
	return o.ApplyT(func(v AlertmanagerSpecVolumesVsphereVolume) string { return v.VolumePath }).(pulumi.StringOutput)
}

type AlertmanagerSpecVolumesVsphereVolumePtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerSpecVolumesVsphereVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerSpecVolumesVsphereVolume)(nil)).Elem()
}

func (o AlertmanagerSpecVolumesVsphereVolumePtrOutput) ToAlertmanagerSpecVolumesVsphereVolumePtrOutput() AlertmanagerSpecVolumesVsphereVolumePtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesVsphereVolumePtrOutput) ToAlertmanagerSpecVolumesVsphereVolumePtrOutputWithContext(ctx context.Context) AlertmanagerSpecVolumesVsphereVolumePtrOutput {
	return o
}

func (o AlertmanagerSpecVolumesVsphereVolumePtrOutput) Elem() AlertmanagerSpecVolumesVsphereVolumeOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesVsphereVolume) AlertmanagerSpecVolumesVsphereVolume { return *v }).(AlertmanagerSpecVolumesVsphereVolumeOutput)
}

// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o AlertmanagerSpecVolumesVsphereVolumePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesVsphereVolume) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
func (o AlertmanagerSpecVolumesVsphereVolumePtrOutput) StoragePolicyID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesVsphereVolume) *string {
		if v == nil {
			return nil
		}
		return v.StoragePolicyID
	}).(pulumi.StringPtrOutput)
}

// Storage Policy Based Management (SPBM) profile name.
func (o AlertmanagerSpecVolumesVsphereVolumePtrOutput) StoragePolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesVsphereVolume) *string {
		if v == nil {
			return nil
		}
		return v.StoragePolicyName
	}).(pulumi.StringPtrOutput)
}

// Path that identifies vSphere volume vmdk
func (o AlertmanagerSpecVolumesVsphereVolumePtrOutput) VolumePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerSpecVolumesVsphereVolume) *string {
		if v == nil {
			return nil
		}
		return &v.VolumePath
	}).(pulumi.StringPtrOutput)
}

// Most recent observed status of the Alertmanager cluster. Read-only. Not included when requesting from the apiserver, only from the Prometheus Operator API itself. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
type AlertmanagerStatus struct {
	// Total number of available pods (ready for at least minReadySeconds) targeted by this Alertmanager cluster.
	AvailableReplicas int `pulumi:"availableReplicas"`
	// Represents whether any actions on the underlaying managed objects are being performed. Only delete actions will be performed.
	Paused bool `pulumi:"paused"`
	// Total number of non-terminated pods targeted by this Alertmanager cluster (their labels match the selector).
	Replicas int `pulumi:"replicas"`
	// Total number of unavailable pods targeted by this Alertmanager cluster.
	UnavailableReplicas int `pulumi:"unavailableReplicas"`
	// Total number of non-terminated pods targeted by this Alertmanager cluster that have the desired version spec.
	UpdatedReplicas int `pulumi:"updatedReplicas"`
}

// AlertmanagerStatusInput is an input type that accepts AlertmanagerStatusArgs and AlertmanagerStatusOutput values.
// You can construct a concrete instance of `AlertmanagerStatusInput` via:
//
//          AlertmanagerStatusArgs{...}
type AlertmanagerStatusInput interface {
	pulumi.Input

	ToAlertmanagerStatusOutput() AlertmanagerStatusOutput
	ToAlertmanagerStatusOutputWithContext(context.Context) AlertmanagerStatusOutput
}

// Most recent observed status of the Alertmanager cluster. Read-only. Not included when requesting from the apiserver, only from the Prometheus Operator API itself. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
type AlertmanagerStatusArgs struct {
	// Total number of available pods (ready for at least minReadySeconds) targeted by this Alertmanager cluster.
	AvailableReplicas pulumi.IntInput `pulumi:"availableReplicas"`
	// Represents whether any actions on the underlaying managed objects are being performed. Only delete actions will be performed.
	Paused pulumi.BoolInput `pulumi:"paused"`
	// Total number of non-terminated pods targeted by this Alertmanager cluster (their labels match the selector).
	Replicas pulumi.IntInput `pulumi:"replicas"`
	// Total number of unavailable pods targeted by this Alertmanager cluster.
	UnavailableReplicas pulumi.IntInput `pulumi:"unavailableReplicas"`
	// Total number of non-terminated pods targeted by this Alertmanager cluster that have the desired version spec.
	UpdatedReplicas pulumi.IntInput `pulumi:"updatedReplicas"`
}

func (AlertmanagerStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerStatus)(nil)).Elem()
}

func (i AlertmanagerStatusArgs) ToAlertmanagerStatusOutput() AlertmanagerStatusOutput {
	return i.ToAlertmanagerStatusOutputWithContext(context.Background())
}

func (i AlertmanagerStatusArgs) ToAlertmanagerStatusOutputWithContext(ctx context.Context) AlertmanagerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerStatusOutput)
}

func (i AlertmanagerStatusArgs) ToAlertmanagerStatusPtrOutput() AlertmanagerStatusPtrOutput {
	return i.ToAlertmanagerStatusPtrOutputWithContext(context.Background())
}

func (i AlertmanagerStatusArgs) ToAlertmanagerStatusPtrOutputWithContext(ctx context.Context) AlertmanagerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerStatusOutput).ToAlertmanagerStatusPtrOutputWithContext(ctx)
}

// AlertmanagerStatusPtrInput is an input type that accepts AlertmanagerStatusArgs, AlertmanagerStatusPtr and AlertmanagerStatusPtrOutput values.
// You can construct a concrete instance of `AlertmanagerStatusPtrInput` via:
//
//          AlertmanagerStatusArgs{...}
//
//  or:
//
//          nil
type AlertmanagerStatusPtrInput interface {
	pulumi.Input

	ToAlertmanagerStatusPtrOutput() AlertmanagerStatusPtrOutput
	ToAlertmanagerStatusPtrOutputWithContext(context.Context) AlertmanagerStatusPtrOutput
}

type alertmanagerStatusPtrType AlertmanagerStatusArgs

func AlertmanagerStatusPtr(v *AlertmanagerStatusArgs) AlertmanagerStatusPtrInput {
	return (*alertmanagerStatusPtrType)(v)
}

func (*alertmanagerStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerStatus)(nil)).Elem()
}

func (i *alertmanagerStatusPtrType) ToAlertmanagerStatusPtrOutput() AlertmanagerStatusPtrOutput {
	return i.ToAlertmanagerStatusPtrOutputWithContext(context.Background())
}

func (i *alertmanagerStatusPtrType) ToAlertmanagerStatusPtrOutputWithContext(ctx context.Context) AlertmanagerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerStatusPtrOutput)
}

// Most recent observed status of the Alertmanager cluster. Read-only. Not included when requesting from the apiserver, only from the Prometheus Operator API itself. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
type AlertmanagerStatusOutput struct{ *pulumi.OutputState }

func (AlertmanagerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertmanagerStatus)(nil)).Elem()
}

func (o AlertmanagerStatusOutput) ToAlertmanagerStatusOutput() AlertmanagerStatusOutput {
	return o
}

func (o AlertmanagerStatusOutput) ToAlertmanagerStatusOutputWithContext(ctx context.Context) AlertmanagerStatusOutput {
	return o
}

func (o AlertmanagerStatusOutput) ToAlertmanagerStatusPtrOutput() AlertmanagerStatusPtrOutput {
	return o.ToAlertmanagerStatusPtrOutputWithContext(context.Background())
}

func (o AlertmanagerStatusOutput) ToAlertmanagerStatusPtrOutputWithContext(ctx context.Context) AlertmanagerStatusPtrOutput {
	return o.ApplyT(func(v AlertmanagerStatus) *AlertmanagerStatus {
		return &v
	}).(AlertmanagerStatusPtrOutput)
}

// Total number of available pods (ready for at least minReadySeconds) targeted by this Alertmanager cluster.
func (o AlertmanagerStatusOutput) AvailableReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v AlertmanagerStatus) int { return v.AvailableReplicas }).(pulumi.IntOutput)
}

// Represents whether any actions on the underlaying managed objects are being performed. Only delete actions will be performed.
func (o AlertmanagerStatusOutput) Paused() pulumi.BoolOutput {
	return o.ApplyT(func(v AlertmanagerStatus) bool { return v.Paused }).(pulumi.BoolOutput)
}

// Total number of non-terminated pods targeted by this Alertmanager cluster (their labels match the selector).
func (o AlertmanagerStatusOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v AlertmanagerStatus) int { return v.Replicas }).(pulumi.IntOutput)
}

// Total number of unavailable pods targeted by this Alertmanager cluster.
func (o AlertmanagerStatusOutput) UnavailableReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v AlertmanagerStatus) int { return v.UnavailableReplicas }).(pulumi.IntOutput)
}

// Total number of non-terminated pods targeted by this Alertmanager cluster that have the desired version spec.
func (o AlertmanagerStatusOutput) UpdatedReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v AlertmanagerStatus) int { return v.UpdatedReplicas }).(pulumi.IntOutput)
}

type AlertmanagerStatusPtrOutput struct{ *pulumi.OutputState }

func (AlertmanagerStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerStatus)(nil)).Elem()
}

func (o AlertmanagerStatusPtrOutput) ToAlertmanagerStatusPtrOutput() AlertmanagerStatusPtrOutput {
	return o
}

func (o AlertmanagerStatusPtrOutput) ToAlertmanagerStatusPtrOutputWithContext(ctx context.Context) AlertmanagerStatusPtrOutput {
	return o
}

func (o AlertmanagerStatusPtrOutput) Elem() AlertmanagerStatusOutput {
	return o.ApplyT(func(v *AlertmanagerStatus) AlertmanagerStatus { return *v }).(AlertmanagerStatusOutput)
}

// Total number of available pods (ready for at least minReadySeconds) targeted by this Alertmanager cluster.
func (o AlertmanagerStatusPtrOutput) AvailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerStatus) *int {
		if v == nil {
			return nil
		}
		return &v.AvailableReplicas
	}).(pulumi.IntPtrOutput)
}

// Represents whether any actions on the underlaying managed objects are being performed. Only delete actions will be performed.
func (o AlertmanagerStatusPtrOutput) Paused() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertmanagerStatus) *bool {
		if v == nil {
			return nil
		}
		return &v.Paused
	}).(pulumi.BoolPtrOutput)
}

// Total number of non-terminated pods targeted by this Alertmanager cluster (their labels match the selector).
func (o AlertmanagerStatusPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerStatus) *int {
		if v == nil {
			return nil
		}
		return &v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Total number of unavailable pods targeted by this Alertmanager cluster.
func (o AlertmanagerStatusPtrOutput) UnavailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerStatus) *int {
		if v == nil {
			return nil
		}
		return &v.UnavailableReplicas
	}).(pulumi.IntPtrOutput)
}

// Total number of non-terminated pods targeted by this Alertmanager cluster that have the desired version spec.
func (o AlertmanagerStatusPtrOutput) UpdatedReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertmanagerStatus) *int {
		if v == nil {
			return nil
		}
		return &v.UpdatedReplicas
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AlertmanagerTypeOutput{})
	pulumi.RegisterOutputType(AlertmanagerMetadataOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityNodeAffinityOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityNodeAffinityPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAffinityOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAffinityPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAntiAffinityOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAntiAffinityPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabelsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabelsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersEnvOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersEnvArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersEnvFromOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersEnvFromArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersEnvFromConfigMapRefOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersEnvFromConfigMapRefPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersEnvFromSecretRefOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersEnvFromSecretRefPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersEnvValueFromOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersEnvValueFromPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersEnvValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersEnvValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersEnvValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersEnvValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersEnvValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersEnvValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersEnvValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecycleOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePostStartOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePostStartPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePostStartExecOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePostStartExecPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePostStartHttpGetOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePostStartHttpGetPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePostStartHttpGetPortOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePostStartHttpGetPortPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePostStartTcpSocketOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePostStartTcpSocketPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePostStartTcpSocketPortPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePreStopOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePreStopPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePreStopExecOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePreStopExecPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePreStopHttpGetOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePreStopHttpGetPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePreStopHttpGetPortOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePreStopHttpGetPortPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePreStopTcpSocketOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePreStopTcpSocketPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLifecyclePreStopTcpSocketPortPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLivenessProbeOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLivenessProbePtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLivenessProbeExecOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLivenessProbeExecPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLivenessProbeHttpGetOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLivenessProbeHttpGetPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeadersArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLivenessProbeHttpGetPortOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLivenessProbeHttpGetPortPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLivenessProbeTcpSocketOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLivenessProbeTcpSocketPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLivenessProbeTcpSocketPortOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersLivenessProbeTcpSocketPortPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersPortsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersPortsArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersReadinessProbeOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersReadinessProbePtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersReadinessProbeExecOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersReadinessProbeExecPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersReadinessProbeHttpGetOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersReadinessProbeHttpGetPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeadersArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersReadinessProbeHttpGetPortOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersReadinessProbeHttpGetPortPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersReadinessProbeTcpSocketOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersReadinessProbeTcpSocketPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersReadinessProbeTcpSocketPortOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersReadinessProbeTcpSocketPortPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersResourcesOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersResourcesPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersResourcesLimitsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersResourcesRequestsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersSecurityContextOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersSecurityContextPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersSecurityContextCapabilitiesOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersSecurityContextCapabilitiesPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersSecurityContextSeLinuxOptionsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersSecurityContextSeLinuxOptionsPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersSecurityContextWindowsOptionsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersSecurityContextWindowsOptionsPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersStartupProbeOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersStartupProbePtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersStartupProbeExecOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersStartupProbeExecPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersStartupProbeHttpGetOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersStartupProbeHttpGetPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersStartupProbeHttpGetHttpHeadersArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersStartupProbeHttpGetPortOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersStartupProbeHttpGetPortPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersStartupProbeTcpSocketOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersStartupProbeTcpSocketPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersStartupProbeTcpSocketPortOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersStartupProbeTcpSocketPortPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersVolumeDevicesOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersVolumeDevicesArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersVolumeMountsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecContainersVolumeMountsArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecImagePullSecretsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecImagePullSecretsArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersEnvOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersEnvArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersEnvFromOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersEnvFromArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersEnvFromConfigMapRefOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersEnvFromConfigMapRefPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersEnvFromSecretRefOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersEnvFromSecretRefPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersEnvValueFromOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersEnvValueFromPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersEnvValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersEnvValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersEnvValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersEnvValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecycleOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePostStartOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePostStartPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePostStartExecOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePostStartExecPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePostStartHttpGetOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePostStartHttpGetPortPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePostStartTcpSocketPortPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePreStopOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePreStopPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePreStopExecOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePreStopExecPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePreStopHttpGetOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePreStopHttpGetPortPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLifecyclePreStopTcpSocketPortPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLivenessProbeOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLivenessProbePtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLivenessProbeExecOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLivenessProbeExecPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLivenessProbeHttpGetOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLivenessProbeHttpGetPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeadersArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLivenessProbeHttpGetPortOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLivenessProbeHttpGetPortPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLivenessProbeTcpSocketOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLivenessProbeTcpSocketPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersLivenessProbeTcpSocketPortPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersPortsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersPortsArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersReadinessProbeOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersReadinessProbePtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersReadinessProbeExecOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersReadinessProbeExecPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersReadinessProbeHttpGetOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersReadinessProbeHttpGetPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersReadinessProbeHttpGetPortOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersReadinessProbeHttpGetPortPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersReadinessProbeTcpSocketOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersReadinessProbeTcpSocketPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersReadinessProbeTcpSocketPortPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersResourcesOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersResourcesPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersResourcesLimitsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersResourcesRequestsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersSecurityContextOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersSecurityContextPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersSecurityContextCapabilitiesOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersSecurityContextCapabilitiesPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersSecurityContextWindowsOptionsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersSecurityContextWindowsOptionsPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersStartupProbeOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersStartupProbePtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersStartupProbeExecOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersStartupProbeExecPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersStartupProbeHttpGetOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersStartupProbeHttpGetPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersStartupProbeHttpGetPortOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersStartupProbeHttpGetPortPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersStartupProbeTcpSocketOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersStartupProbeTcpSocketPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersStartupProbeTcpSocketPortOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersStartupProbeTcpSocketPortPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersVolumeDevicesOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersVolumeDevicesArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersVolumeMountsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecInitContainersVolumeMountsArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecNodeSelectorOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecPodMetadataOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecPodMetadataPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecPodMetadataAnnotationsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecPodMetadataLabelsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecResourcesOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecResourcesPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecResourcesLimitsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecResourcesRequestsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecSecurityContextOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecSecurityContextPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecSecurityContextSeLinuxOptionsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecSecurityContextSeLinuxOptionsPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecSecurityContextSysctlsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecSecurityContextSysctlsArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecSecurityContextWindowsOptionsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecSecurityContextWindowsOptionsPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecStorageOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecStoragePtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecStorageEmptyDirOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecStorageEmptyDirPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecStorageVolumeClaimTemplateOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecStorageVolumeClaimTemplatePtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecStorageVolumeClaimTemplateMetadataOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecStorageVolumeClaimTemplateSpecOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecStorageVolumeClaimTemplateSpecPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesLimitsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecStorageVolumeClaimTemplateSpecResourcesRequestsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchLabelsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecStorageVolumeClaimTemplateStatusOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecStorageVolumeClaimTemplateStatusPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecStorageVolumeClaimTemplateStatusCapacityOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecTolerationsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecTolerationsArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumeMountsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumeMountsArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesAwsElasticBlockStoreOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesAwsElasticBlockStorePtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesAzureDiskOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesAzureDiskPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesAzureFileOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesAzureFilePtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesCephfsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesCephfsPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesCephfsSecretRefOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesCephfsSecretRefPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesCinderOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesCinderPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesCinderSecretRefOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesCinderSecretRefPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesConfigMapOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesConfigMapPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesConfigMapItemsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesConfigMapItemsArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesCsiOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesCsiPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesCsiNodePublishSecretRefOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesCsiNodePublishSecretRefPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesCsiVolumeAttributesOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesDownwardAPIOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesDownwardAPIPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesDownwardAPIItemsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesDownwardAPIItemsArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesDownwardAPIItemsFieldRefOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesDownwardAPIItemsFieldRefPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesEmptyDirOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesEmptyDirPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesFcOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesFcPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesFlexVolumeOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesFlexVolumePtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesFlexVolumeOptionsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesFlexVolumeSecretRefOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesFlexVolumeSecretRefPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesFlockerOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesFlockerPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesGcePersistentDiskOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesGcePersistentDiskPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesGitRepoOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesGitRepoPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesGlusterfsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesGlusterfsPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesHostPathOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesHostPathPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesIscsiOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesIscsiPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesIscsiSecretRefOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesIscsiSecretRefPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesNfsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesNfsPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesPersistentVolumeClaimOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesPersistentVolumeClaimPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesPhotonPersistentDiskOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesPhotonPersistentDiskPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesPortworxVolumeOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesPortworxVolumePtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesProjectedOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesProjectedPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesProjectedSourcesOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesProjectedSourcesArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesProjectedSourcesConfigMapOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesProjectedSourcesConfigMapPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesProjectedSourcesSecretOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesProjectedSourcesSecretPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesProjectedSourcesSecretItemsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesProjectedSourcesSecretItemsArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesQuobyteOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesQuobytePtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesRbdOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesRbdPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesRbdSecretRefOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesRbdSecretRefPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesScaleIOOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesScaleIOPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesScaleIOSecretRefOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesScaleIOSecretRefPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesSecretOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesSecretPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesSecretItemsOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesSecretItemsArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesStorageosOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesStorageosPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesStorageosSecretRefOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesStorageosSecretRefPtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesVsphereVolumeOutput{})
	pulumi.RegisterOutputType(AlertmanagerSpecVolumesVsphereVolumePtrOutput{})
	pulumi.RegisterOutputType(AlertmanagerStatusOutput{})
	pulumi.RegisterOutputType(AlertmanagerStatusPtrOutput{})
}

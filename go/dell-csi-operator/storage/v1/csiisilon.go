// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// CSIIsilon is the Schema for the csiisilons API
type CSIIsilon struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// CSIIsilonSpec defines the desired state of CSIIsilon
	Spec CSIIsilonSpecPtrOutput `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status CSIIsilonStatusPtrOutput `pulumi:"status"`
}

// NewCSIIsilon registers a new resource with the given unique name, arguments, and options.
func NewCSIIsilon(ctx *pulumi.Context,
	name string, args *CSIIsilonArgs, opts ...pulumi.ResourceOption) (*CSIIsilon, error) {
	if args == nil {
		args = &CSIIsilonArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("storage.dell.com/v1")
	args.Kind = pulumi.StringPtr("CSIIsilon")
	var resource CSIIsilon
	err := ctx.RegisterResource("kubernetes:storage.dell.com/v1:CSIIsilon", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCSIIsilon gets an existing CSIIsilon resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCSIIsilon(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CSIIsilonState, opts ...pulumi.ResourceOption) (*CSIIsilon, error) {
	var resource CSIIsilon
	err := ctx.ReadResource("kubernetes:storage.dell.com/v1:CSIIsilon", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CSIIsilon resources.
type csiisilonState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// CSIIsilonSpec defines the desired state of CSIIsilon
	Spec *CSIIsilonSpec `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status *CSIIsilonStatus `pulumi:"status"`
}

type CSIIsilonState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// CSIIsilonSpec defines the desired state of CSIIsilon
	Spec CSIIsilonSpecPtrInput
	// DriverStatus defines the observed state of CSIDriver
	Status CSIIsilonStatusPtrInput
}

func (CSIIsilonState) ElementType() reflect.Type {
	return reflect.TypeOf((*csiisilonState)(nil)).Elem()
}

type csiisilonArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// CSIIsilonSpec defines the desired state of CSIIsilon
	Spec *CSIIsilonSpec `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status *CSIIsilonStatus `pulumi:"status"`
}

// The set of arguments for constructing a CSIIsilon resource.
type CSIIsilonArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// CSIIsilonSpec defines the desired state of CSIIsilon
	Spec CSIIsilonSpecPtrInput
	// DriverStatus defines the observed state of CSIDriver
	Status CSIIsilonStatusPtrInput
}

func (CSIIsilonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*csiisilonArgs)(nil)).Elem()
}

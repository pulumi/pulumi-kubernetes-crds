// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// CSIIsilon is the Schema for the csiisilons API
type CSIIsilonType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// CSIIsilonSpec defines the desired state of CSIIsilon
	Spec *CSIIsilonSpec `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status *CSIIsilonStatus `pulumi:"status"`
}

// CSIIsilonTypeInput is an input type that accepts CSIIsilonTypeArgs and CSIIsilonTypeOutput values.
// You can construct a concrete instance of `CSIIsilonTypeInput` via:
//
//          CSIIsilonTypeArgs{...}
type CSIIsilonTypeInput interface {
	pulumi.Input

	ToCSIIsilonTypeOutput() CSIIsilonTypeOutput
	ToCSIIsilonTypeOutputWithContext(context.Context) CSIIsilonTypeOutput
}

// CSIIsilon is the Schema for the csiisilons API
type CSIIsilonTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// CSIIsilonSpec defines the desired state of CSIIsilon
	Spec CSIIsilonSpecPtrInput `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status CSIIsilonStatusPtrInput `pulumi:"status"`
}

func (CSIIsilonTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonType)(nil)).Elem()
}

func (i CSIIsilonTypeArgs) ToCSIIsilonTypeOutput() CSIIsilonTypeOutput {
	return i.ToCSIIsilonTypeOutputWithContext(context.Background())
}

func (i CSIIsilonTypeArgs) ToCSIIsilonTypeOutputWithContext(ctx context.Context) CSIIsilonTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonTypeOutput)
}

// CSIIsilon is the Schema for the csiisilons API
type CSIIsilonTypeOutput struct{ *pulumi.OutputState }

func (CSIIsilonTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonType)(nil)).Elem()
}

func (o CSIIsilonTypeOutput) ToCSIIsilonTypeOutput() CSIIsilonTypeOutput {
	return o
}

func (o CSIIsilonTypeOutput) ToCSIIsilonTypeOutputWithContext(ctx context.Context) CSIIsilonTypeOutput {
	return o
}

func (o CSIIsilonTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o CSIIsilonTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o CSIIsilonTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v CSIIsilonType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// CSIIsilonSpec defines the desired state of CSIIsilon
func (o CSIIsilonTypeOutput) Spec() CSIIsilonSpecPtrOutput {
	return o.ApplyT(func(v CSIIsilonType) *CSIIsilonSpec { return v.Spec }).(CSIIsilonSpecPtrOutput)
}

// DriverStatus defines the observed state of CSIDriver
func (o CSIIsilonTypeOutput) Status() CSIIsilonStatusPtrOutput {
	return o.ApplyT(func(v CSIIsilonType) *CSIIsilonStatus { return v.Status }).(CSIIsilonStatusPtrOutput)
}

// CSIIsilonSpec defines the desired state of CSIIsilon
type CSIIsilonSpec struct {
	// Driver is the specification for the CSI Isilon Driver
	Driver CSIIsilonSpecDriver `pulumi:"driver"`
}

// CSIIsilonSpecInput is an input type that accepts CSIIsilonSpecArgs and CSIIsilonSpecOutput values.
// You can construct a concrete instance of `CSIIsilonSpecInput` via:
//
//          CSIIsilonSpecArgs{...}
type CSIIsilonSpecInput interface {
	pulumi.Input

	ToCSIIsilonSpecOutput() CSIIsilonSpecOutput
	ToCSIIsilonSpecOutputWithContext(context.Context) CSIIsilonSpecOutput
}

// CSIIsilonSpec defines the desired state of CSIIsilon
type CSIIsilonSpecArgs struct {
	// Driver is the specification for the CSI Isilon Driver
	Driver CSIIsilonSpecDriverInput `pulumi:"driver"`
}

func (CSIIsilonSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpec)(nil)).Elem()
}

func (i CSIIsilonSpecArgs) ToCSIIsilonSpecOutput() CSIIsilonSpecOutput {
	return i.ToCSIIsilonSpecOutputWithContext(context.Background())
}

func (i CSIIsilonSpecArgs) ToCSIIsilonSpecOutputWithContext(ctx context.Context) CSIIsilonSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecOutput)
}

func (i CSIIsilonSpecArgs) ToCSIIsilonSpecPtrOutput() CSIIsilonSpecPtrOutput {
	return i.ToCSIIsilonSpecPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecArgs) ToCSIIsilonSpecPtrOutputWithContext(ctx context.Context) CSIIsilonSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecOutput).ToCSIIsilonSpecPtrOutputWithContext(ctx)
}

// CSIIsilonSpecPtrInput is an input type that accepts CSIIsilonSpecArgs, CSIIsilonSpecPtr and CSIIsilonSpecPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecPtrInput` via:
//
//          CSIIsilonSpecArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecPtrOutput() CSIIsilonSpecPtrOutput
	ToCSIIsilonSpecPtrOutputWithContext(context.Context) CSIIsilonSpecPtrOutput
}

type csiisilonSpecPtrType CSIIsilonSpecArgs

func CSIIsilonSpecPtr(v *CSIIsilonSpecArgs) CSIIsilonSpecPtrInput {
	return (*csiisilonSpecPtrType)(v)
}

func (*csiisilonSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpec)(nil)).Elem()
}

func (i *csiisilonSpecPtrType) ToCSIIsilonSpecPtrOutput() CSIIsilonSpecPtrOutput {
	return i.ToCSIIsilonSpecPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecPtrType) ToCSIIsilonSpecPtrOutputWithContext(ctx context.Context) CSIIsilonSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecPtrOutput)
}

// CSIIsilonSpec defines the desired state of CSIIsilon
type CSIIsilonSpecOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpec)(nil)).Elem()
}

func (o CSIIsilonSpecOutput) ToCSIIsilonSpecOutput() CSIIsilonSpecOutput {
	return o
}

func (o CSIIsilonSpecOutput) ToCSIIsilonSpecOutputWithContext(ctx context.Context) CSIIsilonSpecOutput {
	return o
}

func (o CSIIsilonSpecOutput) ToCSIIsilonSpecPtrOutput() CSIIsilonSpecPtrOutput {
	return o.ToCSIIsilonSpecPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecOutput) ToCSIIsilonSpecPtrOutputWithContext(ctx context.Context) CSIIsilonSpecPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpec) *CSIIsilonSpec {
		return &v
	}).(CSIIsilonSpecPtrOutput)
}

// Driver is the specification for the CSI Isilon Driver
func (o CSIIsilonSpecOutput) Driver() CSIIsilonSpecDriverOutput {
	return o.ApplyT(func(v CSIIsilonSpec) CSIIsilonSpecDriver { return v.Driver }).(CSIIsilonSpecDriverOutput)
}

type CSIIsilonSpecPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpec)(nil)).Elem()
}

func (o CSIIsilonSpecPtrOutput) ToCSIIsilonSpecPtrOutput() CSIIsilonSpecPtrOutput {
	return o
}

func (o CSIIsilonSpecPtrOutput) ToCSIIsilonSpecPtrOutputWithContext(ctx context.Context) CSIIsilonSpecPtrOutput {
	return o
}

func (o CSIIsilonSpecPtrOutput) Elem() CSIIsilonSpecOutput {
	return o.ApplyT(func(v *CSIIsilonSpec) CSIIsilonSpec { return *v }).(CSIIsilonSpecOutput)
}

// Driver is the specification for the CSI Isilon Driver
func (o CSIIsilonSpecPtrOutput) Driver() CSIIsilonSpecDriverPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpec) *CSIIsilonSpecDriver {
		if v == nil {
			return nil
		}
		return &v.Driver
	}).(CSIIsilonSpecDriverPtrOutput)
}

// Driver is the specification for the CSI Isilon Driver
type CSIIsilonSpecDriver struct {
	// AuthSecret is the name of the credentials secret for the driver
	AuthSecret *string `pulumi:"authSecret"`
	// Common is the common specification for both controller and node plugins
	Common CSIIsilonSpecDriverCommon `pulumi:"common"`
	// ConfigVersion is the configuration version of the driver
	ConfigVersion string `pulumi:"configVersion"`
	// Controller is the specification for Controller plugin only
	Controller *CSIIsilonSpecDriverController `pulumi:"controller"`
	// ForceUpdate is the boolean flag used to force an update of the driver instance
	ForceUpdate *bool `pulumi:"forceUpdate"`
	// Node is the specification for Node plugin only
	Node *CSIIsilonSpecDriverNode `pulumi:"node"`
	// Replicas is the count of controllers for Controller plugin
	Replicas int `pulumi:"replicas"`
	// SideCars is the specification for CSI sidecar containers
	SideCars []CSIIsilonSpecDriverSideCars `pulumi:"sideCars"`
	// SnapshotClass is the specification for Snapshot Classes
	SnapshotClass []CSIIsilonSpecDriverSnapshotClass `pulumi:"snapshotClass"`
	// StorageClass is the specification for Storage Classes
	StorageClass []CSIIsilonSpecDriverStorageClass `pulumi:"storageClass"`
	// TLSCertSecret is the name of the TLS Cert secret
	TlsCertSecret *string `pulumi:"tlsCertSecret"`
}

// CSIIsilonSpecDriverInput is an input type that accepts CSIIsilonSpecDriverArgs and CSIIsilonSpecDriverOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverInput` via:
//
//          CSIIsilonSpecDriverArgs{...}
type CSIIsilonSpecDriverInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverOutput() CSIIsilonSpecDriverOutput
	ToCSIIsilonSpecDriverOutputWithContext(context.Context) CSIIsilonSpecDriverOutput
}

// Driver is the specification for the CSI Isilon Driver
type CSIIsilonSpecDriverArgs struct {
	// AuthSecret is the name of the credentials secret for the driver
	AuthSecret pulumi.StringPtrInput `pulumi:"authSecret"`
	// Common is the common specification for both controller and node plugins
	Common CSIIsilonSpecDriverCommonInput `pulumi:"common"`
	// ConfigVersion is the configuration version of the driver
	ConfigVersion pulumi.StringInput `pulumi:"configVersion"`
	// Controller is the specification for Controller plugin only
	Controller CSIIsilonSpecDriverControllerPtrInput `pulumi:"controller"`
	// ForceUpdate is the boolean flag used to force an update of the driver instance
	ForceUpdate pulumi.BoolPtrInput `pulumi:"forceUpdate"`
	// Node is the specification for Node plugin only
	Node CSIIsilonSpecDriverNodePtrInput `pulumi:"node"`
	// Replicas is the count of controllers for Controller plugin
	Replicas pulumi.IntInput `pulumi:"replicas"`
	// SideCars is the specification for CSI sidecar containers
	SideCars CSIIsilonSpecDriverSideCarsArrayInput `pulumi:"sideCars"`
	// SnapshotClass is the specification for Snapshot Classes
	SnapshotClass CSIIsilonSpecDriverSnapshotClassArrayInput `pulumi:"snapshotClass"`
	// StorageClass is the specification for Storage Classes
	StorageClass CSIIsilonSpecDriverStorageClassArrayInput `pulumi:"storageClass"`
	// TLSCertSecret is the name of the TLS Cert secret
	TlsCertSecret pulumi.StringPtrInput `pulumi:"tlsCertSecret"`
}

func (CSIIsilonSpecDriverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriver)(nil)).Elem()
}

func (i CSIIsilonSpecDriverArgs) ToCSIIsilonSpecDriverOutput() CSIIsilonSpecDriverOutput {
	return i.ToCSIIsilonSpecDriverOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverArgs) ToCSIIsilonSpecDriverOutputWithContext(ctx context.Context) CSIIsilonSpecDriverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverOutput)
}

func (i CSIIsilonSpecDriverArgs) ToCSIIsilonSpecDriverPtrOutput() CSIIsilonSpecDriverPtrOutput {
	return i.ToCSIIsilonSpecDriverPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverArgs) ToCSIIsilonSpecDriverPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverOutput).ToCSIIsilonSpecDriverPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverPtrInput is an input type that accepts CSIIsilonSpecDriverArgs, CSIIsilonSpecDriverPtr and CSIIsilonSpecDriverPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverPtrInput` via:
//
//          CSIIsilonSpecDriverArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverPtrOutput() CSIIsilonSpecDriverPtrOutput
	ToCSIIsilonSpecDriverPtrOutputWithContext(context.Context) CSIIsilonSpecDriverPtrOutput
}

type csiisilonSpecDriverPtrType CSIIsilonSpecDriverArgs

func CSIIsilonSpecDriverPtr(v *CSIIsilonSpecDriverArgs) CSIIsilonSpecDriverPtrInput {
	return (*csiisilonSpecDriverPtrType)(v)
}

func (*csiisilonSpecDriverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriver)(nil)).Elem()
}

func (i *csiisilonSpecDriverPtrType) ToCSIIsilonSpecDriverPtrOutput() CSIIsilonSpecDriverPtrOutput {
	return i.ToCSIIsilonSpecDriverPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverPtrType) ToCSIIsilonSpecDriverPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverPtrOutput)
}

// Driver is the specification for the CSI Isilon Driver
type CSIIsilonSpecDriverOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriver)(nil)).Elem()
}

func (o CSIIsilonSpecDriverOutput) ToCSIIsilonSpecDriverOutput() CSIIsilonSpecDriverOutput {
	return o
}

func (o CSIIsilonSpecDriverOutput) ToCSIIsilonSpecDriverOutputWithContext(ctx context.Context) CSIIsilonSpecDriverOutput {
	return o
}

func (o CSIIsilonSpecDriverOutput) ToCSIIsilonSpecDriverPtrOutput() CSIIsilonSpecDriverPtrOutput {
	return o.ToCSIIsilonSpecDriverPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverOutput) ToCSIIsilonSpecDriverPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) *CSIIsilonSpecDriver {
		return &v
	}).(CSIIsilonSpecDriverPtrOutput)
}

// AuthSecret is the name of the credentials secret for the driver
func (o CSIIsilonSpecDriverOutput) AuthSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) *string { return v.AuthSecret }).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
func (o CSIIsilonSpecDriverOutput) Common() CSIIsilonSpecDriverCommonOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) CSIIsilonSpecDriverCommon { return v.Common }).(CSIIsilonSpecDriverCommonOutput)
}

// ConfigVersion is the configuration version of the driver
func (o CSIIsilonSpecDriverOutput) ConfigVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) string { return v.ConfigVersion }).(pulumi.StringOutput)
}

// Controller is the specification for Controller plugin only
func (o CSIIsilonSpecDriverOutput) Controller() CSIIsilonSpecDriverControllerPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) *CSIIsilonSpecDriverController { return v.Controller }).(CSIIsilonSpecDriverControllerPtrOutput)
}

// ForceUpdate is the boolean flag used to force an update of the driver instance
func (o CSIIsilonSpecDriverOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) *bool { return v.ForceUpdate }).(pulumi.BoolPtrOutput)
}

// Node is the specification for Node plugin only
func (o CSIIsilonSpecDriverOutput) Node() CSIIsilonSpecDriverNodePtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) *CSIIsilonSpecDriverNode { return v.Node }).(CSIIsilonSpecDriverNodePtrOutput)
}

// Replicas is the count of controllers for Controller plugin
func (o CSIIsilonSpecDriverOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) int { return v.Replicas }).(pulumi.IntOutput)
}

// SideCars is the specification for CSI sidecar containers
func (o CSIIsilonSpecDriverOutput) SideCars() CSIIsilonSpecDriverSideCarsArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) []CSIIsilonSpecDriverSideCars { return v.SideCars }).(CSIIsilonSpecDriverSideCarsArrayOutput)
}

// SnapshotClass is the specification for Snapshot Classes
func (o CSIIsilonSpecDriverOutput) SnapshotClass() CSIIsilonSpecDriverSnapshotClassArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) []CSIIsilonSpecDriverSnapshotClass { return v.SnapshotClass }).(CSIIsilonSpecDriverSnapshotClassArrayOutput)
}

// StorageClass is the specification for Storage Classes
func (o CSIIsilonSpecDriverOutput) StorageClass() CSIIsilonSpecDriverStorageClassArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) []CSIIsilonSpecDriverStorageClass { return v.StorageClass }).(CSIIsilonSpecDriverStorageClassArrayOutput)
}

// TLSCertSecret is the name of the TLS Cert secret
func (o CSIIsilonSpecDriverOutput) TlsCertSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) *string { return v.TlsCertSecret }).(pulumi.StringPtrOutput)
}

type CSIIsilonSpecDriverPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriver)(nil)).Elem()
}

func (o CSIIsilonSpecDriverPtrOutput) ToCSIIsilonSpecDriverPtrOutput() CSIIsilonSpecDriverPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverPtrOutput) ToCSIIsilonSpecDriverPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverPtrOutput) Elem() CSIIsilonSpecDriverOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) CSIIsilonSpecDriver { return *v }).(CSIIsilonSpecDriverOutput)
}

// AuthSecret is the name of the credentials secret for the driver
func (o CSIIsilonSpecDriverPtrOutput) AuthSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) *string {
		if v == nil {
			return nil
		}
		return v.AuthSecret
	}).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
func (o CSIIsilonSpecDriverPtrOutput) Common() CSIIsilonSpecDriverCommonPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) *CSIIsilonSpecDriverCommon {
		if v == nil {
			return nil
		}
		return &v.Common
	}).(CSIIsilonSpecDriverCommonPtrOutput)
}

// ConfigVersion is the configuration version of the driver
func (o CSIIsilonSpecDriverPtrOutput) ConfigVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) *string {
		if v == nil {
			return nil
		}
		return &v.ConfigVersion
	}).(pulumi.StringPtrOutput)
}

// Controller is the specification for Controller plugin only
func (o CSIIsilonSpecDriverPtrOutput) Controller() CSIIsilonSpecDriverControllerPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) *CSIIsilonSpecDriverController {
		if v == nil {
			return nil
		}
		return v.Controller
	}).(CSIIsilonSpecDriverControllerPtrOutput)
}

// ForceUpdate is the boolean flag used to force an update of the driver instance
func (o CSIIsilonSpecDriverPtrOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) *bool {
		if v == nil {
			return nil
		}
		return v.ForceUpdate
	}).(pulumi.BoolPtrOutput)
}

// Node is the specification for Node plugin only
func (o CSIIsilonSpecDriverPtrOutput) Node() CSIIsilonSpecDriverNodePtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) *CSIIsilonSpecDriverNode {
		if v == nil {
			return nil
		}
		return v.Node
	}).(CSIIsilonSpecDriverNodePtrOutput)
}

// Replicas is the count of controllers for Controller plugin
func (o CSIIsilonSpecDriverPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) *int {
		if v == nil {
			return nil
		}
		return &v.Replicas
	}).(pulumi.IntPtrOutput)
}

// SideCars is the specification for CSI sidecar containers
func (o CSIIsilonSpecDriverPtrOutput) SideCars() CSIIsilonSpecDriverSideCarsArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) []CSIIsilonSpecDriverSideCars {
		if v == nil {
			return nil
		}
		return v.SideCars
	}).(CSIIsilonSpecDriverSideCarsArrayOutput)
}

// SnapshotClass is the specification for Snapshot Classes
func (o CSIIsilonSpecDriverPtrOutput) SnapshotClass() CSIIsilonSpecDriverSnapshotClassArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) []CSIIsilonSpecDriverSnapshotClass {
		if v == nil {
			return nil
		}
		return v.SnapshotClass
	}).(CSIIsilonSpecDriverSnapshotClassArrayOutput)
}

// StorageClass is the specification for Storage Classes
func (o CSIIsilonSpecDriverPtrOutput) StorageClass() CSIIsilonSpecDriverStorageClassArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) []CSIIsilonSpecDriverStorageClass {
		if v == nil {
			return nil
		}
		return v.StorageClass
	}).(CSIIsilonSpecDriverStorageClassArrayOutput)
}

// TLSCertSecret is the name of the TLS Cert secret
func (o CSIIsilonSpecDriverPtrOutput) TlsCertSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) *string {
		if v == nil {
			return nil
		}
		return v.TlsCertSecret
	}).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
type CSIIsilonSpecDriverCommon struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIIsilonSpecDriverCommonEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
}

// CSIIsilonSpecDriverCommonInput is an input type that accepts CSIIsilonSpecDriverCommonArgs and CSIIsilonSpecDriverCommonOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonInput` via:
//
//          CSIIsilonSpecDriverCommonArgs{...}
type CSIIsilonSpecDriverCommonInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonOutput() CSIIsilonSpecDriverCommonOutput
	ToCSIIsilonSpecDriverCommonOutputWithContext(context.Context) CSIIsilonSpecDriverCommonOutput
}

// Common is the common specification for both controller and node plugins
type CSIIsilonSpecDriverCommonArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIIsilonSpecDriverCommonEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CSIIsilonSpecDriverCommonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommon)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonArgs) ToCSIIsilonSpecDriverCommonOutput() CSIIsilonSpecDriverCommonOutput {
	return i.ToCSIIsilonSpecDriverCommonOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonArgs) ToCSIIsilonSpecDriverCommonOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonOutput)
}

func (i CSIIsilonSpecDriverCommonArgs) ToCSIIsilonSpecDriverCommonPtrOutput() CSIIsilonSpecDriverCommonPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonArgs) ToCSIIsilonSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonOutput).ToCSIIsilonSpecDriverCommonPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverCommonPtrInput is an input type that accepts CSIIsilonSpecDriverCommonArgs, CSIIsilonSpecDriverCommonPtr and CSIIsilonSpecDriverCommonPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonPtrInput` via:
//
//          CSIIsilonSpecDriverCommonArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverCommonPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonPtrOutput() CSIIsilonSpecDriverCommonPtrOutput
	ToCSIIsilonSpecDriverCommonPtrOutputWithContext(context.Context) CSIIsilonSpecDriverCommonPtrOutput
}

type csiisilonSpecDriverCommonPtrType CSIIsilonSpecDriverCommonArgs

func CSIIsilonSpecDriverCommonPtr(v *CSIIsilonSpecDriverCommonArgs) CSIIsilonSpecDriverCommonPtrInput {
	return (*csiisilonSpecDriverCommonPtrType)(v)
}

func (*csiisilonSpecDriverCommonPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommon)(nil)).Elem()
}

func (i *csiisilonSpecDriverCommonPtrType) ToCSIIsilonSpecDriverCommonPtrOutput() CSIIsilonSpecDriverCommonPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverCommonPtrType) ToCSIIsilonSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonPtrOutput)
}

// Common is the common specification for both controller and node plugins
type CSIIsilonSpecDriverCommonOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommon)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonOutput) ToCSIIsilonSpecDriverCommonOutput() CSIIsilonSpecDriverCommonOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonOutput) ToCSIIsilonSpecDriverCommonOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonOutput) ToCSIIsilonSpecDriverCommonPtrOutput() CSIIsilonSpecDriverCommonPtrOutput {
	return o.ToCSIIsilonSpecDriverCommonPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverCommonOutput) ToCSIIsilonSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommon) *CSIIsilonSpecDriverCommon {
		return &v
	}).(CSIIsilonSpecDriverCommonPtrOutput)
}

// Args is the set of arguments for the container
func (o CSIIsilonSpecDriverCommonOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommon) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIIsilonSpecDriverCommonOutput) Envs() CSIIsilonSpecDriverCommonEnvsArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommon) []CSIIsilonSpecDriverCommonEnvs { return v.Envs }).(CSIIsilonSpecDriverCommonEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIIsilonSpecDriverCommonOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommon) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIIsilonSpecDriverCommonOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommon) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIIsilonSpecDriverCommonOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommon) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CSIIsilonSpecDriverCommonPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommon)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonPtrOutput) ToCSIIsilonSpecDriverCommonPtrOutput() CSIIsilonSpecDriverCommonPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonPtrOutput) ToCSIIsilonSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonPtrOutput) Elem() CSIIsilonSpecDriverCommonOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommon) CSIIsilonSpecDriverCommon { return *v }).(CSIIsilonSpecDriverCommonOutput)
}

// Args is the set of arguments for the container
func (o CSIIsilonSpecDriverCommonPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommon) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIIsilonSpecDriverCommonPtrOutput) Envs() CSIIsilonSpecDriverCommonEnvsArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommon) []CSIIsilonSpecDriverCommonEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIIsilonSpecDriverCommonEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIIsilonSpecDriverCommonPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIIsilonSpecDriverCommonPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIIsilonSpecDriverCommonPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverCommonEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIIsilonSpecDriverCommonEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIIsilonSpecDriverCommonEnvsInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsArgs and CSIIsilonSpecDriverCommonEnvsOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsArgs{...}
type CSIIsilonSpecDriverCommonEnvsInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsOutput() CSIIsilonSpecDriverCommonEnvsOutput
	ToCSIIsilonSpecDriverCommonEnvsOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverCommonEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIIsilonSpecDriverCommonEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIIsilonSpecDriverCommonEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvs)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonEnvsArgs) ToCSIIsilonSpecDriverCommonEnvsOutput() CSIIsilonSpecDriverCommonEnvsOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsArgs) ToCSIIsilonSpecDriverCommonEnvsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsOutput)
}

// CSIIsilonSpecDriverCommonEnvsArrayInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsArray and CSIIsilonSpecDriverCommonEnvsArrayOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsArrayInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsArray{ CSIIsilonSpecDriverCommonEnvsArgs{...} }
type CSIIsilonSpecDriverCommonEnvsArrayInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsArrayOutput() CSIIsilonSpecDriverCommonEnvsArrayOutput
	ToCSIIsilonSpecDriverCommonEnvsArrayOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsArrayOutput
}

type CSIIsilonSpecDriverCommonEnvsArray []CSIIsilonSpecDriverCommonEnvsInput

func (CSIIsilonSpecDriverCommonEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverCommonEnvs)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonEnvsArray) ToCSIIsilonSpecDriverCommonEnvsArrayOutput() CSIIsilonSpecDriverCommonEnvsArrayOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsArrayOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsArray) ToCSIIsilonSpecDriverCommonEnvsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverCommonEnvsOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvs)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsOutput) ToCSIIsilonSpecDriverCommonEnvsOutput() CSIIsilonSpecDriverCommonEnvsOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsOutput) ToCSIIsilonSpecDriverCommonEnvsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIIsilonSpecDriverCommonEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIIsilonSpecDriverCommonEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIIsilonSpecDriverCommonEnvsOutput) ValueFrom() CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvs) *CSIIsilonSpecDriverCommonEnvsValueFrom { return v.ValueFrom }).(CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput)
}

type CSIIsilonSpecDriverCommonEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverCommonEnvs)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsArrayOutput) ToCSIIsilonSpecDriverCommonEnvsArrayOutput() CSIIsilonSpecDriverCommonEnvsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsArrayOutput) ToCSIIsilonSpecDriverCommonEnvsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsArrayOutput) Index(i pulumi.IntInput) CSIIsilonSpecDriverCommonEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIIsilonSpecDriverCommonEnvs {
		return vs[0].([]CSIIsilonSpecDriverCommonEnvs)[vs[1].(int)]
	}).(CSIIsilonSpecDriverCommonEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverCommonEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef *CSIIsilonSpecDriverCommonEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIIsilonSpecDriverCommonEnvsValueFromInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromArgs and CSIIsilonSpecDriverCommonEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromArgs{...}
type CSIIsilonSpecDriverCommonEnvsValueFromInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromOutput() CSIIsilonSpecDriverCommonEnvsValueFromOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverCommonEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIIsilonSpecDriverCommonEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromOutput() CSIIsilonSpecDriverCommonEnvsValueFromOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromOutput)
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromOutput).ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverCommonEnvsValueFromPtrInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromArgs, CSIIsilonSpecDriverCommonEnvsValueFromPtr and CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromPtrInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverCommonEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput
}

type csiisilonSpecDriverCommonEnvsValueFromPtrType CSIIsilonSpecDriverCommonEnvsValueFromArgs

func CSIIsilonSpecDriverCommonEnvsValueFromPtr(v *CSIIsilonSpecDriverCommonEnvsValueFromArgs) CSIIsilonSpecDriverCommonEnvsValueFromPtrInput {
	return (*csiisilonSpecDriverCommonEnvsValueFromPtrType)(v)
}

func (*csiisilonSpecDriverCommonEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (i *csiisilonSpecDriverCommonEnvsValueFromPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverCommonEnvsValueFromPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverCommonEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromOutput() CSIIsilonSpecDriverCommonEnvsValueFromOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput {
	return o.ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFrom) *CSIIsilonSpecDriverCommonEnvsValueFrom {
		return &v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIIsilonSpecDriverCommonEnvsValueFromOutput) ConfigMapKeyRef() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFrom) *CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIIsilonSpecDriverCommonEnvsValueFromOutput) FieldRef() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFrom) *CSIIsilonSpecDriverCommonEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIIsilonSpecDriverCommonEnvsValueFromOutput) ResourceFieldRef() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFrom) *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIIsilonSpecDriverCommonEnvsValueFromOutput) SecretKeyRef() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFrom) *CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput) Elem() CSIIsilonSpecDriverCommonEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFrom) CSIIsilonSpecDriverCommonEnvsValueFrom { return *v }).(CSIIsilonSpecDriverCommonEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFrom) *CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput) FieldRef() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFrom) *CSIIsilonSpecDriverCommonEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput) ResourceFieldRef() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFrom) *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput) SecretKeyRef() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFrom) *CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs and CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs{...}
type CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput).ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs, CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtr and CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput
}

type csiisilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs

func CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtr(v *CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csiisilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csiisilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef) *CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIIsilonSpecDriverCommonEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIIsilonSpecDriverCommonEnvsValueFromFieldRefInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs and CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromFieldRefInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs{...}
type CSIIsilonSpecDriverCommonEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput)
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput).ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs, CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtr and CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput
}

type csiisilonSpecDriverCommonEnvsValueFromFieldRefPtrType CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs

func CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtr(v *CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs) CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrInput {
	return (*csiisilonSpecDriverCommonEnvsValueFromFieldRefPtrType)(v)
}

func (*csiisilonSpecDriverCommonEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverCommonEnvsValueFromFieldRefPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverCommonEnvsValueFromFieldRefPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromFieldRef) *CSIIsilonSpecDriverCommonEnvsValueFromFieldRef {
		return &v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput) Elem() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromFieldRef) CSIIsilonSpecDriverCommonEnvsValueFromFieldRef {
		return *v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *string `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs and CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs{...}
type CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.StringPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput)
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput).ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs, CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtr and CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput
}

type csiisilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrType CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs

func CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtr(v *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput {
	return (*csiisilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csiisilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef) *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef) *string { return v.Divisor }).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs and CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs{...}
type CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput)
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput).ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs, CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtr and CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput
}

type csiisilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrType CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs

func CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtr(v *CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput {
	return (*csiisilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csiisilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef) *CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Controller is the specification for Controller plugin only
type CSIIsilonSpecDriverController struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIIsilonSpecDriverControllerEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
}

// CSIIsilonSpecDriverControllerInput is an input type that accepts CSIIsilonSpecDriverControllerArgs and CSIIsilonSpecDriverControllerOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerInput` via:
//
//          CSIIsilonSpecDriverControllerArgs{...}
type CSIIsilonSpecDriverControllerInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerOutput() CSIIsilonSpecDriverControllerOutput
	ToCSIIsilonSpecDriverControllerOutputWithContext(context.Context) CSIIsilonSpecDriverControllerOutput
}

// Controller is the specification for Controller plugin only
type CSIIsilonSpecDriverControllerArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIIsilonSpecDriverControllerEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CSIIsilonSpecDriverControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverController)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerArgs) ToCSIIsilonSpecDriverControllerOutput() CSIIsilonSpecDriverControllerOutput {
	return i.ToCSIIsilonSpecDriverControllerOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerArgs) ToCSIIsilonSpecDriverControllerOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerOutput)
}

func (i CSIIsilonSpecDriverControllerArgs) ToCSIIsilonSpecDriverControllerPtrOutput() CSIIsilonSpecDriverControllerPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerArgs) ToCSIIsilonSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerOutput).ToCSIIsilonSpecDriverControllerPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverControllerPtrInput is an input type that accepts CSIIsilonSpecDriverControllerArgs, CSIIsilonSpecDriverControllerPtr and CSIIsilonSpecDriverControllerPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerPtrInput` via:
//
//          CSIIsilonSpecDriverControllerArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverControllerPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerPtrOutput() CSIIsilonSpecDriverControllerPtrOutput
	ToCSIIsilonSpecDriverControllerPtrOutputWithContext(context.Context) CSIIsilonSpecDriverControllerPtrOutput
}

type csiisilonSpecDriverControllerPtrType CSIIsilonSpecDriverControllerArgs

func CSIIsilonSpecDriverControllerPtr(v *CSIIsilonSpecDriverControllerArgs) CSIIsilonSpecDriverControllerPtrInput {
	return (*csiisilonSpecDriverControllerPtrType)(v)
}

func (*csiisilonSpecDriverControllerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverController)(nil)).Elem()
}

func (i *csiisilonSpecDriverControllerPtrType) ToCSIIsilonSpecDriverControllerPtrOutput() CSIIsilonSpecDriverControllerPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverControllerPtrType) ToCSIIsilonSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerPtrOutput)
}

// Controller is the specification for Controller plugin only
type CSIIsilonSpecDriverControllerOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverController)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerOutput) ToCSIIsilonSpecDriverControllerOutput() CSIIsilonSpecDriverControllerOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerOutput) ToCSIIsilonSpecDriverControllerOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerOutput) ToCSIIsilonSpecDriverControllerPtrOutput() CSIIsilonSpecDriverControllerPtrOutput {
	return o.ToCSIIsilonSpecDriverControllerPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverControllerOutput) ToCSIIsilonSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverController) *CSIIsilonSpecDriverController {
		return &v
	}).(CSIIsilonSpecDriverControllerPtrOutput)
}

// Args is the set of arguments for the container
func (o CSIIsilonSpecDriverControllerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverController) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIIsilonSpecDriverControllerOutput) Envs() CSIIsilonSpecDriverControllerEnvsArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverController) []CSIIsilonSpecDriverControllerEnvs { return v.Envs }).(CSIIsilonSpecDriverControllerEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIIsilonSpecDriverControllerOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverController) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIIsilonSpecDriverControllerOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverController) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIIsilonSpecDriverControllerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverController) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CSIIsilonSpecDriverControllerPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverController)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerPtrOutput) ToCSIIsilonSpecDriverControllerPtrOutput() CSIIsilonSpecDriverControllerPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerPtrOutput) ToCSIIsilonSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerPtrOutput) Elem() CSIIsilonSpecDriverControllerOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverController) CSIIsilonSpecDriverController { return *v }).(CSIIsilonSpecDriverControllerOutput)
}

// Args is the set of arguments for the container
func (o CSIIsilonSpecDriverControllerPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverController) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIIsilonSpecDriverControllerPtrOutput) Envs() CSIIsilonSpecDriverControllerEnvsArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverController) []CSIIsilonSpecDriverControllerEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIIsilonSpecDriverControllerEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIIsilonSpecDriverControllerPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIIsilonSpecDriverControllerPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIIsilonSpecDriverControllerPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverControllerEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIIsilonSpecDriverControllerEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIIsilonSpecDriverControllerEnvsInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsArgs and CSIIsilonSpecDriverControllerEnvsOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsArgs{...}
type CSIIsilonSpecDriverControllerEnvsInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsOutput() CSIIsilonSpecDriverControllerEnvsOutput
	ToCSIIsilonSpecDriverControllerEnvsOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverControllerEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIIsilonSpecDriverControllerEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIIsilonSpecDriverControllerEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvs)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerEnvsArgs) ToCSIIsilonSpecDriverControllerEnvsOutput() CSIIsilonSpecDriverControllerEnvsOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsArgs) ToCSIIsilonSpecDriverControllerEnvsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsOutput)
}

// CSIIsilonSpecDriverControllerEnvsArrayInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsArray and CSIIsilonSpecDriverControllerEnvsArrayOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsArrayInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsArray{ CSIIsilonSpecDriverControllerEnvsArgs{...} }
type CSIIsilonSpecDriverControllerEnvsArrayInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsArrayOutput() CSIIsilonSpecDriverControllerEnvsArrayOutput
	ToCSIIsilonSpecDriverControllerEnvsArrayOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsArrayOutput
}

type CSIIsilonSpecDriverControllerEnvsArray []CSIIsilonSpecDriverControllerEnvsInput

func (CSIIsilonSpecDriverControllerEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverControllerEnvs)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerEnvsArray) ToCSIIsilonSpecDriverControllerEnvsArrayOutput() CSIIsilonSpecDriverControllerEnvsArrayOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsArrayOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsArray) ToCSIIsilonSpecDriverControllerEnvsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverControllerEnvsOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvs)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsOutput) ToCSIIsilonSpecDriverControllerEnvsOutput() CSIIsilonSpecDriverControllerEnvsOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsOutput) ToCSIIsilonSpecDriverControllerEnvsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIIsilonSpecDriverControllerEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIIsilonSpecDriverControllerEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIIsilonSpecDriverControllerEnvsOutput) ValueFrom() CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvs) *CSIIsilonSpecDriverControllerEnvsValueFrom {
		return v.ValueFrom
	}).(CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput)
}

type CSIIsilonSpecDriverControllerEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverControllerEnvs)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsArrayOutput) ToCSIIsilonSpecDriverControllerEnvsArrayOutput() CSIIsilonSpecDriverControllerEnvsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsArrayOutput) ToCSIIsilonSpecDriverControllerEnvsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsArrayOutput) Index(i pulumi.IntInput) CSIIsilonSpecDriverControllerEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIIsilonSpecDriverControllerEnvs {
		return vs[0].([]CSIIsilonSpecDriverControllerEnvs)[vs[1].(int)]
	}).(CSIIsilonSpecDriverControllerEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverControllerEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef *CSIIsilonSpecDriverControllerEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIIsilonSpecDriverControllerEnvsValueFromInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromArgs and CSIIsilonSpecDriverControllerEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromArgs{...}
type CSIIsilonSpecDriverControllerEnvsValueFromInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromOutput() CSIIsilonSpecDriverControllerEnvsValueFromOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverControllerEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIIsilonSpecDriverControllerEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromOutput() CSIIsilonSpecDriverControllerEnvsValueFromOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromOutput)
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromOutput).ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverControllerEnvsValueFromPtrInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromArgs, CSIIsilonSpecDriverControllerEnvsValueFromPtr and CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromPtrInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverControllerEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput
}

type csiisilonSpecDriverControllerEnvsValueFromPtrType CSIIsilonSpecDriverControllerEnvsValueFromArgs

func CSIIsilonSpecDriverControllerEnvsValueFromPtr(v *CSIIsilonSpecDriverControllerEnvsValueFromArgs) CSIIsilonSpecDriverControllerEnvsValueFromPtrInput {
	return (*csiisilonSpecDriverControllerEnvsValueFromPtrType)(v)
}

func (*csiisilonSpecDriverControllerEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (i *csiisilonSpecDriverControllerEnvsValueFromPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverControllerEnvsValueFromPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverControllerEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromOutput() CSIIsilonSpecDriverControllerEnvsValueFromOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput {
	return o.ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFrom) *CSIIsilonSpecDriverControllerEnvsValueFrom {
		return &v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIIsilonSpecDriverControllerEnvsValueFromOutput) ConfigMapKeyRef() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFrom) *CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIIsilonSpecDriverControllerEnvsValueFromOutput) FieldRef() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFrom) *CSIIsilonSpecDriverControllerEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIIsilonSpecDriverControllerEnvsValueFromOutput) ResourceFieldRef() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFrom) *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIIsilonSpecDriverControllerEnvsValueFromOutput) SecretKeyRef() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFrom) *CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput) Elem() CSIIsilonSpecDriverControllerEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFrom) CSIIsilonSpecDriverControllerEnvsValueFrom {
		return *v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFrom) *CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput) FieldRef() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFrom) *CSIIsilonSpecDriverControllerEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput) ResourceFieldRef() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFrom) *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput) SecretKeyRef() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFrom) *CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs and CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs{...}
type CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput).ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs, CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtr and CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput
}

type csiisilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs

func CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtr(v *CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csiisilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csiisilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef) *CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIIsilonSpecDriverControllerEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIIsilonSpecDriverControllerEnvsValueFromFieldRefInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs and CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromFieldRefInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs{...}
type CSIIsilonSpecDriverControllerEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput)
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput).ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs, CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtr and CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput
}

type csiisilonSpecDriverControllerEnvsValueFromFieldRefPtrType CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs

func CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtr(v *CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs) CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrInput {
	return (*csiisilonSpecDriverControllerEnvsValueFromFieldRefPtrType)(v)
}

func (*csiisilonSpecDriverControllerEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverControllerEnvsValueFromFieldRefPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverControllerEnvsValueFromFieldRefPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromFieldRef) *CSIIsilonSpecDriverControllerEnvsValueFromFieldRef {
		return &v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput) Elem() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromFieldRef) CSIIsilonSpecDriverControllerEnvsValueFromFieldRef {
		return *v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *string `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs and CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs{...}
type CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.StringPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput)
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput).ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs, CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtr and CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput
}

type csiisilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrType CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs

func CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtr(v *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput {
	return (*csiisilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csiisilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef) *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef) *string { return v.Divisor }).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs and CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs{...}
type CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput)
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput).ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs, CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtr and CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput
}

type csiisilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrType CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs

func CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtr(v *CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput {
	return (*csiisilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csiisilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef) *CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Node is the specification for Node plugin only
type CSIIsilonSpecDriverNode struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIIsilonSpecDriverNodeEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
}

// CSIIsilonSpecDriverNodeInput is an input type that accepts CSIIsilonSpecDriverNodeArgs and CSIIsilonSpecDriverNodeOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeInput` via:
//
//          CSIIsilonSpecDriverNodeArgs{...}
type CSIIsilonSpecDriverNodeInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeOutput() CSIIsilonSpecDriverNodeOutput
	ToCSIIsilonSpecDriverNodeOutputWithContext(context.Context) CSIIsilonSpecDriverNodeOutput
}

// Node is the specification for Node plugin only
type CSIIsilonSpecDriverNodeArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIIsilonSpecDriverNodeEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CSIIsilonSpecDriverNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNode)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeArgs) ToCSIIsilonSpecDriverNodeOutput() CSIIsilonSpecDriverNodeOutput {
	return i.ToCSIIsilonSpecDriverNodeOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeArgs) ToCSIIsilonSpecDriverNodeOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeOutput)
}

func (i CSIIsilonSpecDriverNodeArgs) ToCSIIsilonSpecDriverNodePtrOutput() CSIIsilonSpecDriverNodePtrOutput {
	return i.ToCSIIsilonSpecDriverNodePtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeArgs) ToCSIIsilonSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeOutput).ToCSIIsilonSpecDriverNodePtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverNodePtrInput is an input type that accepts CSIIsilonSpecDriverNodeArgs, CSIIsilonSpecDriverNodePtr and CSIIsilonSpecDriverNodePtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodePtrInput` via:
//
//          CSIIsilonSpecDriverNodeArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverNodePtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodePtrOutput() CSIIsilonSpecDriverNodePtrOutput
	ToCSIIsilonSpecDriverNodePtrOutputWithContext(context.Context) CSIIsilonSpecDriverNodePtrOutput
}

type csiisilonSpecDriverNodePtrType CSIIsilonSpecDriverNodeArgs

func CSIIsilonSpecDriverNodePtr(v *CSIIsilonSpecDriverNodeArgs) CSIIsilonSpecDriverNodePtrInput {
	return (*csiisilonSpecDriverNodePtrType)(v)
}

func (*csiisilonSpecDriverNodePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNode)(nil)).Elem()
}

func (i *csiisilonSpecDriverNodePtrType) ToCSIIsilonSpecDriverNodePtrOutput() CSIIsilonSpecDriverNodePtrOutput {
	return i.ToCSIIsilonSpecDriverNodePtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverNodePtrType) ToCSIIsilonSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodePtrOutput)
}

// Node is the specification for Node plugin only
type CSIIsilonSpecDriverNodeOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNode)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeOutput) ToCSIIsilonSpecDriverNodeOutput() CSIIsilonSpecDriverNodeOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeOutput) ToCSIIsilonSpecDriverNodeOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeOutput) ToCSIIsilonSpecDriverNodePtrOutput() CSIIsilonSpecDriverNodePtrOutput {
	return o.ToCSIIsilonSpecDriverNodePtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverNodeOutput) ToCSIIsilonSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodePtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNode) *CSIIsilonSpecDriverNode {
		return &v
	}).(CSIIsilonSpecDriverNodePtrOutput)
}

// Args is the set of arguments for the container
func (o CSIIsilonSpecDriverNodeOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNode) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIIsilonSpecDriverNodeOutput) Envs() CSIIsilonSpecDriverNodeEnvsArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNode) []CSIIsilonSpecDriverNodeEnvs { return v.Envs }).(CSIIsilonSpecDriverNodeEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIIsilonSpecDriverNodeOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNode) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIIsilonSpecDriverNodeOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNode) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIIsilonSpecDriverNodeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNode) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CSIIsilonSpecDriverNodePtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNode)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodePtrOutput) ToCSIIsilonSpecDriverNodePtrOutput() CSIIsilonSpecDriverNodePtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodePtrOutput) ToCSIIsilonSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodePtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodePtrOutput) Elem() CSIIsilonSpecDriverNodeOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNode) CSIIsilonSpecDriverNode { return *v }).(CSIIsilonSpecDriverNodeOutput)
}

// Args is the set of arguments for the container
func (o CSIIsilonSpecDriverNodePtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNode) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIIsilonSpecDriverNodePtrOutput) Envs() CSIIsilonSpecDriverNodeEnvsArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNode) []CSIIsilonSpecDriverNodeEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIIsilonSpecDriverNodeEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIIsilonSpecDriverNodePtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIIsilonSpecDriverNodePtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIIsilonSpecDriverNodePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverNodeEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIIsilonSpecDriverNodeEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIIsilonSpecDriverNodeEnvsInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsArgs and CSIIsilonSpecDriverNodeEnvsOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsArgs{...}
type CSIIsilonSpecDriverNodeEnvsInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsOutput() CSIIsilonSpecDriverNodeEnvsOutput
	ToCSIIsilonSpecDriverNodeEnvsOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverNodeEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIIsilonSpecDriverNodeEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIIsilonSpecDriverNodeEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvs)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeEnvsArgs) ToCSIIsilonSpecDriverNodeEnvsOutput() CSIIsilonSpecDriverNodeEnvsOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsArgs) ToCSIIsilonSpecDriverNodeEnvsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsOutput)
}

// CSIIsilonSpecDriverNodeEnvsArrayInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsArray and CSIIsilonSpecDriverNodeEnvsArrayOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsArrayInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsArray{ CSIIsilonSpecDriverNodeEnvsArgs{...} }
type CSIIsilonSpecDriverNodeEnvsArrayInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsArrayOutput() CSIIsilonSpecDriverNodeEnvsArrayOutput
	ToCSIIsilonSpecDriverNodeEnvsArrayOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsArrayOutput
}

type CSIIsilonSpecDriverNodeEnvsArray []CSIIsilonSpecDriverNodeEnvsInput

func (CSIIsilonSpecDriverNodeEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverNodeEnvs)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeEnvsArray) ToCSIIsilonSpecDriverNodeEnvsArrayOutput() CSIIsilonSpecDriverNodeEnvsArrayOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsArrayOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsArray) ToCSIIsilonSpecDriverNodeEnvsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverNodeEnvsOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvs)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsOutput) ToCSIIsilonSpecDriverNodeEnvsOutput() CSIIsilonSpecDriverNodeEnvsOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsOutput) ToCSIIsilonSpecDriverNodeEnvsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIIsilonSpecDriverNodeEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIIsilonSpecDriverNodeEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIIsilonSpecDriverNodeEnvsOutput) ValueFrom() CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvs) *CSIIsilonSpecDriverNodeEnvsValueFrom { return v.ValueFrom }).(CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput)
}

type CSIIsilonSpecDriverNodeEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverNodeEnvs)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsArrayOutput) ToCSIIsilonSpecDriverNodeEnvsArrayOutput() CSIIsilonSpecDriverNodeEnvsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsArrayOutput) ToCSIIsilonSpecDriverNodeEnvsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsArrayOutput) Index(i pulumi.IntInput) CSIIsilonSpecDriverNodeEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIIsilonSpecDriverNodeEnvs {
		return vs[0].([]CSIIsilonSpecDriverNodeEnvs)[vs[1].(int)]
	}).(CSIIsilonSpecDriverNodeEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverNodeEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef *CSIIsilonSpecDriverNodeEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIIsilonSpecDriverNodeEnvsValueFromInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromArgs and CSIIsilonSpecDriverNodeEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromArgs{...}
type CSIIsilonSpecDriverNodeEnvsValueFromInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromOutput() CSIIsilonSpecDriverNodeEnvsValueFromOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverNodeEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIIsilonSpecDriverNodeEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromOutput() CSIIsilonSpecDriverNodeEnvsValueFromOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromOutput)
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromOutput).ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverNodeEnvsValueFromPtrInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromArgs, CSIIsilonSpecDriverNodeEnvsValueFromPtr and CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromPtrInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverNodeEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput
}

type csiisilonSpecDriverNodeEnvsValueFromPtrType CSIIsilonSpecDriverNodeEnvsValueFromArgs

func CSIIsilonSpecDriverNodeEnvsValueFromPtr(v *CSIIsilonSpecDriverNodeEnvsValueFromArgs) CSIIsilonSpecDriverNodeEnvsValueFromPtrInput {
	return (*csiisilonSpecDriverNodeEnvsValueFromPtrType)(v)
}

func (*csiisilonSpecDriverNodeEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (i *csiisilonSpecDriverNodeEnvsValueFromPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverNodeEnvsValueFromPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverNodeEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromOutput() CSIIsilonSpecDriverNodeEnvsValueFromOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput {
	return o.ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFrom) *CSIIsilonSpecDriverNodeEnvsValueFrom {
		return &v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIIsilonSpecDriverNodeEnvsValueFromOutput) ConfigMapKeyRef() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFrom) *CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIIsilonSpecDriverNodeEnvsValueFromOutput) FieldRef() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFrom) *CSIIsilonSpecDriverNodeEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIIsilonSpecDriverNodeEnvsValueFromOutput) ResourceFieldRef() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFrom) *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIIsilonSpecDriverNodeEnvsValueFromOutput) SecretKeyRef() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFrom) *CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput) Elem() CSIIsilonSpecDriverNodeEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFrom) CSIIsilonSpecDriverNodeEnvsValueFrom { return *v }).(CSIIsilonSpecDriverNodeEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFrom) *CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput) FieldRef() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFrom) *CSIIsilonSpecDriverNodeEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput) ResourceFieldRef() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFrom) *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput) SecretKeyRef() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFrom) *CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs and CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs{...}
type CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput).ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs, CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtr and CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput
}

type csiisilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs

func CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtr(v *CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csiisilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csiisilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef) *CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIIsilonSpecDriverNodeEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIIsilonSpecDriverNodeEnvsValueFromFieldRefInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs and CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromFieldRefInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs{...}
type CSIIsilonSpecDriverNodeEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput)
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput).ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs, CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtr and CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput
}

type csiisilonSpecDriverNodeEnvsValueFromFieldRefPtrType CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs

func CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtr(v *CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs) CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrInput {
	return (*csiisilonSpecDriverNodeEnvsValueFromFieldRefPtrType)(v)
}

func (*csiisilonSpecDriverNodeEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverNodeEnvsValueFromFieldRefPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverNodeEnvsValueFromFieldRefPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromFieldRef) *CSIIsilonSpecDriverNodeEnvsValueFromFieldRef {
		return &v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput) Elem() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromFieldRef) CSIIsilonSpecDriverNodeEnvsValueFromFieldRef {
		return *v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *string `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs and CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs{...}
type CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.StringPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput)
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput).ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs, CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtr and CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput
}

type csiisilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrType CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs

func CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtr(v *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput {
	return (*csiisilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csiisilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef) *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef) *string { return v.Divisor }).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs and CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs{...}
type CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput)
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput).ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs, CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtr and CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput
}

type csiisilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrType CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs

func CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtr(v *CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput {
	return (*csiisilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csiisilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef) *CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// ContainerTemplate - Structure representing a container
type CSIIsilonSpecDriverSideCars struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIIsilonSpecDriverSideCarsEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
}

// CSIIsilonSpecDriverSideCarsInput is an input type that accepts CSIIsilonSpecDriverSideCarsArgs and CSIIsilonSpecDriverSideCarsOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsInput` via:
//
//          CSIIsilonSpecDriverSideCarsArgs{...}
type CSIIsilonSpecDriverSideCarsInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsOutput() CSIIsilonSpecDriverSideCarsOutput
	ToCSIIsilonSpecDriverSideCarsOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsOutput
}

// ContainerTemplate - Structure representing a container
type CSIIsilonSpecDriverSideCarsArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIIsilonSpecDriverSideCarsEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CSIIsilonSpecDriverSideCarsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCars)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsArgs) ToCSIIsilonSpecDriverSideCarsOutput() CSIIsilonSpecDriverSideCarsOutput {
	return i.ToCSIIsilonSpecDriverSideCarsOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsArgs) ToCSIIsilonSpecDriverSideCarsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsOutput)
}

// CSIIsilonSpecDriverSideCarsArrayInput is an input type that accepts CSIIsilonSpecDriverSideCarsArray and CSIIsilonSpecDriverSideCarsArrayOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsArrayInput` via:
//
//          CSIIsilonSpecDriverSideCarsArray{ CSIIsilonSpecDriverSideCarsArgs{...} }
type CSIIsilonSpecDriverSideCarsArrayInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsArrayOutput() CSIIsilonSpecDriverSideCarsArrayOutput
	ToCSIIsilonSpecDriverSideCarsArrayOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsArrayOutput
}

type CSIIsilonSpecDriverSideCarsArray []CSIIsilonSpecDriverSideCarsInput

func (CSIIsilonSpecDriverSideCarsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverSideCars)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsArray) ToCSIIsilonSpecDriverSideCarsArrayOutput() CSIIsilonSpecDriverSideCarsArrayOutput {
	return i.ToCSIIsilonSpecDriverSideCarsArrayOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsArray) ToCSIIsilonSpecDriverSideCarsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsArrayOutput)
}

// ContainerTemplate - Structure representing a container
type CSIIsilonSpecDriverSideCarsOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCars)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsOutput) ToCSIIsilonSpecDriverSideCarsOutput() CSIIsilonSpecDriverSideCarsOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsOutput) ToCSIIsilonSpecDriverSideCarsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsOutput {
	return o
}

// Args is the set of arguments for the container
func (o CSIIsilonSpecDriverSideCarsOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCars) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIIsilonSpecDriverSideCarsOutput) Envs() CSIIsilonSpecDriverSideCarsEnvsArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCars) []CSIIsilonSpecDriverSideCarsEnvs { return v.Envs }).(CSIIsilonSpecDriverSideCarsEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIIsilonSpecDriverSideCarsOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCars) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIIsilonSpecDriverSideCarsOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCars) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIIsilonSpecDriverSideCarsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCars) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CSIIsilonSpecDriverSideCarsArrayOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverSideCars)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsArrayOutput) ToCSIIsilonSpecDriverSideCarsArrayOutput() CSIIsilonSpecDriverSideCarsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsArrayOutput) ToCSIIsilonSpecDriverSideCarsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsArrayOutput) Index(i pulumi.IntInput) CSIIsilonSpecDriverSideCarsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIIsilonSpecDriverSideCars {
		return vs[0].([]CSIIsilonSpecDriverSideCars)[vs[1].(int)]
	}).(CSIIsilonSpecDriverSideCarsOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverSideCarsEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIIsilonSpecDriverSideCarsEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIIsilonSpecDriverSideCarsEnvsInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsArgs and CSIIsilonSpecDriverSideCarsEnvsOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsArgs{...}
type CSIIsilonSpecDriverSideCarsEnvsInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsOutput() CSIIsilonSpecDriverSideCarsEnvsOutput
	ToCSIIsilonSpecDriverSideCarsEnvsOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverSideCarsEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIIsilonSpecDriverSideCarsEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIIsilonSpecDriverSideCarsEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsEnvsArgs) ToCSIIsilonSpecDriverSideCarsEnvsOutput() CSIIsilonSpecDriverSideCarsEnvsOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsArgs) ToCSIIsilonSpecDriverSideCarsEnvsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsOutput)
}

// CSIIsilonSpecDriverSideCarsEnvsArrayInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsArray and CSIIsilonSpecDriverSideCarsEnvsArrayOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsArrayInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsArray{ CSIIsilonSpecDriverSideCarsEnvsArgs{...} }
type CSIIsilonSpecDriverSideCarsEnvsArrayInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsArrayOutput() CSIIsilonSpecDriverSideCarsEnvsArrayOutput
	ToCSIIsilonSpecDriverSideCarsEnvsArrayOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsArrayOutput
}

type CSIIsilonSpecDriverSideCarsEnvsArray []CSIIsilonSpecDriverSideCarsEnvsInput

func (CSIIsilonSpecDriverSideCarsEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsEnvsArray) ToCSIIsilonSpecDriverSideCarsEnvsArrayOutput() CSIIsilonSpecDriverSideCarsEnvsArrayOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsArrayOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsArray) ToCSIIsilonSpecDriverSideCarsEnvsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverSideCarsEnvsOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsOutput) ToCSIIsilonSpecDriverSideCarsEnvsOutput() CSIIsilonSpecDriverSideCarsEnvsOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsOutput) ToCSIIsilonSpecDriverSideCarsEnvsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIIsilonSpecDriverSideCarsEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIIsilonSpecDriverSideCarsEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIIsilonSpecDriverSideCarsEnvsOutput) ValueFrom() CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvs) *CSIIsilonSpecDriverSideCarsEnvsValueFrom { return v.ValueFrom }).(CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput)
}

type CSIIsilonSpecDriverSideCarsEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsArrayOutput) ToCSIIsilonSpecDriverSideCarsEnvsArrayOutput() CSIIsilonSpecDriverSideCarsEnvsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsArrayOutput) ToCSIIsilonSpecDriverSideCarsEnvsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsArrayOutput) Index(i pulumi.IntInput) CSIIsilonSpecDriverSideCarsEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIIsilonSpecDriverSideCarsEnvs {
		return vs[0].([]CSIIsilonSpecDriverSideCarsEnvs)[vs[1].(int)]
	}).(CSIIsilonSpecDriverSideCarsEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverSideCarsEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef *CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromArgs and CSIIsilonSpecDriverSideCarsEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromArgs{...}
type CSIIsilonSpecDriverSideCarsEnvsValueFromInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverSideCarsEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIIsilonSpecDriverSideCarsEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromOutput)
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromOutput).ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromPtrInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromArgs, CSIIsilonSpecDriverSideCarsEnvsValueFromPtr and CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromPtrInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverSideCarsEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput
}

type csiisilonSpecDriverSideCarsEnvsValueFromPtrType CSIIsilonSpecDriverSideCarsEnvsValueFromArgs

func CSIIsilonSpecDriverSideCarsEnvsValueFromPtr(v *CSIIsilonSpecDriverSideCarsEnvsValueFromArgs) CSIIsilonSpecDriverSideCarsEnvsValueFromPtrInput {
	return (*csiisilonSpecDriverSideCarsEnvsValueFromPtrType)(v)
}

func (*csiisilonSpecDriverSideCarsEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverSideCarsEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFrom) *CSIIsilonSpecDriverSideCarsEnvsValueFrom {
		return &v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromOutput) ConfigMapKeyRef() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFrom) *CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromOutput) FieldRef() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFrom) *CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromOutput) ResourceFieldRef() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFrom) *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromOutput) SecretKeyRef() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFrom) *CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput) Elem() CSIIsilonSpecDriverSideCarsEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFrom) CSIIsilonSpecDriverSideCarsEnvsValueFrom { return *v }).(CSIIsilonSpecDriverSideCarsEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFrom) *CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput) FieldRef() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFrom) *CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput) ResourceFieldRef() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFrom) *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput) SecretKeyRef() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFrom) *CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs and CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs{...}
type CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput).ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs, CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtr and CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput
}

type csiisilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs

func CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtr(v *CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csiisilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csiisilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs and CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs{...}
type CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput)
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput).ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs, CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtr and CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput
}

type csiisilonSpecDriverSideCarsEnvsValueFromFieldRefPtrType CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs

func CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtr(v *CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrInput {
	return (*csiisilonSpecDriverSideCarsEnvsValueFromFieldRefPtrType)(v)
}

func (*csiisilonSpecDriverSideCarsEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromFieldRefPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromFieldRefPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef) *CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef {
		return &v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) Elem() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef {
		return *v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *string `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs and CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs{...}
type CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.StringPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput)
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput).ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs, CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtr and CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput
}

type csiisilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs

func CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtr(v *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput {
	return (*csiisilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csiisilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef) *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string { return v.Divisor }).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs and CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs{...}
type CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput)
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput).ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs, CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtr and CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput
}

type csiisilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs

func CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtr(v *CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput {
	return (*csiisilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csiisilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef) *CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIIsilonSpecDriverSnapshotClass struct {
	// Name is the name of the Snapshot Class
	Name string `pulumi:"name"`
	// Parameters is a map of driver specific parameters for snapshot class
	Parameters map[string]string `pulumi:"parameters"`
}

// CSIIsilonSpecDriverSnapshotClassInput is an input type that accepts CSIIsilonSpecDriverSnapshotClassArgs and CSIIsilonSpecDriverSnapshotClassOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSnapshotClassInput` via:
//
//          CSIIsilonSpecDriverSnapshotClassArgs{...}
type CSIIsilonSpecDriverSnapshotClassInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSnapshotClassOutput() CSIIsilonSpecDriverSnapshotClassOutput
	ToCSIIsilonSpecDriverSnapshotClassOutputWithContext(context.Context) CSIIsilonSpecDriverSnapshotClassOutput
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIIsilonSpecDriverSnapshotClassArgs struct {
	// Name is the name of the Snapshot Class
	Name pulumi.StringInput `pulumi:"name"`
	// Parameters is a map of driver specific parameters for snapshot class
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
}

func (CSIIsilonSpecDriverSnapshotClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSnapshotClass)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSnapshotClassArgs) ToCSIIsilonSpecDriverSnapshotClassOutput() CSIIsilonSpecDriverSnapshotClassOutput {
	return i.ToCSIIsilonSpecDriverSnapshotClassOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSnapshotClassArgs) ToCSIIsilonSpecDriverSnapshotClassOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSnapshotClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSnapshotClassOutput)
}

// CSIIsilonSpecDriverSnapshotClassArrayInput is an input type that accepts CSIIsilonSpecDriverSnapshotClassArray and CSIIsilonSpecDriverSnapshotClassArrayOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSnapshotClassArrayInput` via:
//
//          CSIIsilonSpecDriverSnapshotClassArray{ CSIIsilonSpecDriverSnapshotClassArgs{...} }
type CSIIsilonSpecDriverSnapshotClassArrayInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSnapshotClassArrayOutput() CSIIsilonSpecDriverSnapshotClassArrayOutput
	ToCSIIsilonSpecDriverSnapshotClassArrayOutputWithContext(context.Context) CSIIsilonSpecDriverSnapshotClassArrayOutput
}

type CSIIsilonSpecDriverSnapshotClassArray []CSIIsilonSpecDriverSnapshotClassInput

func (CSIIsilonSpecDriverSnapshotClassArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverSnapshotClass)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSnapshotClassArray) ToCSIIsilonSpecDriverSnapshotClassArrayOutput() CSIIsilonSpecDriverSnapshotClassArrayOutput {
	return i.ToCSIIsilonSpecDriverSnapshotClassArrayOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSnapshotClassArray) ToCSIIsilonSpecDriverSnapshotClassArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSnapshotClassArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSnapshotClassArrayOutput)
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIIsilonSpecDriverSnapshotClassOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSnapshotClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSnapshotClass)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSnapshotClassOutput) ToCSIIsilonSpecDriverSnapshotClassOutput() CSIIsilonSpecDriverSnapshotClassOutput {
	return o
}

func (o CSIIsilonSpecDriverSnapshotClassOutput) ToCSIIsilonSpecDriverSnapshotClassOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSnapshotClassOutput {
	return o
}

// Name is the name of the Snapshot Class
func (o CSIIsilonSpecDriverSnapshotClassOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSnapshotClass) string { return v.Name }).(pulumi.StringOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
func (o CSIIsilonSpecDriverSnapshotClassOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSnapshotClass) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

type CSIIsilonSpecDriverSnapshotClassArrayOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSnapshotClassArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverSnapshotClass)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSnapshotClassArrayOutput) ToCSIIsilonSpecDriverSnapshotClassArrayOutput() CSIIsilonSpecDriverSnapshotClassArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverSnapshotClassArrayOutput) ToCSIIsilonSpecDriverSnapshotClassArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSnapshotClassArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverSnapshotClassArrayOutput) Index(i pulumi.IntInput) CSIIsilonSpecDriverSnapshotClassOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIIsilonSpecDriverSnapshotClass {
		return vs[0].([]CSIIsilonSpecDriverSnapshotClass)[vs[1].(int)]
	}).(CSIIsilonSpecDriverSnapshotClassOutput)
}

// StorageClass represents a kubernetes storage class
type CSIIsilonSpecDriverStorageClass struct {
	// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
	AllowVolumeExpansion *bool `pulumi:"allowVolumeExpansion"`
	// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
	Default *bool `pulumi:"default"`
	// Name is the name of the StorageClass
	Name string `pulumi:"name"`
	// Parameters is a map of driver specific storage class
	Parameters map[string]string `pulumi:"parameters"`
	// ReclaimPolicy is the reclaim policy for the storage class
	ReclaimPolicy *string `pulumi:"reclaimPolicy"`
}

// CSIIsilonSpecDriverStorageClassInput is an input type that accepts CSIIsilonSpecDriverStorageClassArgs and CSIIsilonSpecDriverStorageClassOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverStorageClassInput` via:
//
//          CSIIsilonSpecDriverStorageClassArgs{...}
type CSIIsilonSpecDriverStorageClassInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverStorageClassOutput() CSIIsilonSpecDriverStorageClassOutput
	ToCSIIsilonSpecDriverStorageClassOutputWithContext(context.Context) CSIIsilonSpecDriverStorageClassOutput
}

// StorageClass represents a kubernetes storage class
type CSIIsilonSpecDriverStorageClassArgs struct {
	// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
	AllowVolumeExpansion pulumi.BoolPtrInput `pulumi:"allowVolumeExpansion"`
	// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
	Default pulumi.BoolPtrInput `pulumi:"default"`
	// Name is the name of the StorageClass
	Name pulumi.StringInput `pulumi:"name"`
	// Parameters is a map of driver specific storage class
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	// ReclaimPolicy is the reclaim policy for the storage class
	ReclaimPolicy pulumi.StringPtrInput `pulumi:"reclaimPolicy"`
}

func (CSIIsilonSpecDriverStorageClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverStorageClass)(nil)).Elem()
}

func (i CSIIsilonSpecDriverStorageClassArgs) ToCSIIsilonSpecDriverStorageClassOutput() CSIIsilonSpecDriverStorageClassOutput {
	return i.ToCSIIsilonSpecDriverStorageClassOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverStorageClassArgs) ToCSIIsilonSpecDriverStorageClassOutputWithContext(ctx context.Context) CSIIsilonSpecDriverStorageClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverStorageClassOutput)
}

// CSIIsilonSpecDriverStorageClassArrayInput is an input type that accepts CSIIsilonSpecDriverStorageClassArray and CSIIsilonSpecDriverStorageClassArrayOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverStorageClassArrayInput` via:
//
//          CSIIsilonSpecDriverStorageClassArray{ CSIIsilonSpecDriverStorageClassArgs{...} }
type CSIIsilonSpecDriverStorageClassArrayInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverStorageClassArrayOutput() CSIIsilonSpecDriverStorageClassArrayOutput
	ToCSIIsilonSpecDriverStorageClassArrayOutputWithContext(context.Context) CSIIsilonSpecDriverStorageClassArrayOutput
}

type CSIIsilonSpecDriverStorageClassArray []CSIIsilonSpecDriverStorageClassInput

func (CSIIsilonSpecDriverStorageClassArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverStorageClass)(nil)).Elem()
}

func (i CSIIsilonSpecDriverStorageClassArray) ToCSIIsilonSpecDriverStorageClassArrayOutput() CSIIsilonSpecDriverStorageClassArrayOutput {
	return i.ToCSIIsilonSpecDriverStorageClassArrayOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverStorageClassArray) ToCSIIsilonSpecDriverStorageClassArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverStorageClassArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverStorageClassArrayOutput)
}

// StorageClass represents a kubernetes storage class
type CSIIsilonSpecDriverStorageClassOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverStorageClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverStorageClass)(nil)).Elem()
}

func (o CSIIsilonSpecDriverStorageClassOutput) ToCSIIsilonSpecDriverStorageClassOutput() CSIIsilonSpecDriverStorageClassOutput {
	return o
}

func (o CSIIsilonSpecDriverStorageClassOutput) ToCSIIsilonSpecDriverStorageClassOutputWithContext(ctx context.Context) CSIIsilonSpecDriverStorageClassOutput {
	return o
}

// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
func (o CSIIsilonSpecDriverStorageClassOutput) AllowVolumeExpansion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverStorageClass) *bool { return v.AllowVolumeExpansion }).(pulumi.BoolPtrOutput)
}

// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
func (o CSIIsilonSpecDriverStorageClassOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverStorageClass) *bool { return v.Default }).(pulumi.BoolPtrOutput)
}

// Name is the name of the StorageClass
func (o CSIIsilonSpecDriverStorageClassOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverStorageClass) string { return v.Name }).(pulumi.StringOutput)
}

// Parameters is a map of driver specific storage class
func (o CSIIsilonSpecDriverStorageClassOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverStorageClass) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// ReclaimPolicy is the reclaim policy for the storage class
func (o CSIIsilonSpecDriverStorageClassOutput) ReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverStorageClass) *string { return v.ReclaimPolicy }).(pulumi.StringPtrOutput)
}

type CSIIsilonSpecDriverStorageClassArrayOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverStorageClassArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverStorageClass)(nil)).Elem()
}

func (o CSIIsilonSpecDriverStorageClassArrayOutput) ToCSIIsilonSpecDriverStorageClassArrayOutput() CSIIsilonSpecDriverStorageClassArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverStorageClassArrayOutput) ToCSIIsilonSpecDriverStorageClassArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverStorageClassArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverStorageClassArrayOutput) Index(i pulumi.IntInput) CSIIsilonSpecDriverStorageClassOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIIsilonSpecDriverStorageClass {
		return vs[0].([]CSIIsilonSpecDriverStorageClass)[vs[1].(int)]
	}).(CSIIsilonSpecDriverStorageClassOutput)
}

// DriverStatus defines the observed state of CSIDriver
type CSIIsilonStatus struct {
	// ControllerStatus is the status of Controller pods
	ControllerStatus *CSIIsilonStatusControllerStatus `pulumi:"controllerStatus"`
	// DriverHash is a hash of the driver specification
	DriverHash *int `pulumi:"driverHash"`
	// LastUpdate is the last updated state of the driver
	LastUpdate *CSIIsilonStatusLastUpdate `pulumi:"lastUpdate"`
	// NodeStatus is the status of Controller pods
	NodeStatus *CSIIsilonStatusNodeStatus `pulumi:"nodeStatus"`
	// State is the state of the driver installation
	State *string `pulumi:"state"`
}

// CSIIsilonStatusInput is an input type that accepts CSIIsilonStatusArgs and CSIIsilonStatusOutput values.
// You can construct a concrete instance of `CSIIsilonStatusInput` via:
//
//          CSIIsilonStatusArgs{...}
type CSIIsilonStatusInput interface {
	pulumi.Input

	ToCSIIsilonStatusOutput() CSIIsilonStatusOutput
	ToCSIIsilonStatusOutputWithContext(context.Context) CSIIsilonStatusOutput
}

// DriverStatus defines the observed state of CSIDriver
type CSIIsilonStatusArgs struct {
	// ControllerStatus is the status of Controller pods
	ControllerStatus CSIIsilonStatusControllerStatusPtrInput `pulumi:"controllerStatus"`
	// DriverHash is a hash of the driver specification
	DriverHash pulumi.IntPtrInput `pulumi:"driverHash"`
	// LastUpdate is the last updated state of the driver
	LastUpdate CSIIsilonStatusLastUpdatePtrInput `pulumi:"lastUpdate"`
	// NodeStatus is the status of Controller pods
	NodeStatus CSIIsilonStatusNodeStatusPtrInput `pulumi:"nodeStatus"`
	// State is the state of the driver installation
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (CSIIsilonStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonStatus)(nil)).Elem()
}

func (i CSIIsilonStatusArgs) ToCSIIsilonStatusOutput() CSIIsilonStatusOutput {
	return i.ToCSIIsilonStatusOutputWithContext(context.Background())
}

func (i CSIIsilonStatusArgs) ToCSIIsilonStatusOutputWithContext(ctx context.Context) CSIIsilonStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusOutput)
}

func (i CSIIsilonStatusArgs) ToCSIIsilonStatusPtrOutput() CSIIsilonStatusPtrOutput {
	return i.ToCSIIsilonStatusPtrOutputWithContext(context.Background())
}

func (i CSIIsilonStatusArgs) ToCSIIsilonStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusOutput).ToCSIIsilonStatusPtrOutputWithContext(ctx)
}

// CSIIsilonStatusPtrInput is an input type that accepts CSIIsilonStatusArgs, CSIIsilonStatusPtr and CSIIsilonStatusPtrOutput values.
// You can construct a concrete instance of `CSIIsilonStatusPtrInput` via:
//
//          CSIIsilonStatusArgs{...}
//
//  or:
//
//          nil
type CSIIsilonStatusPtrInput interface {
	pulumi.Input

	ToCSIIsilonStatusPtrOutput() CSIIsilonStatusPtrOutput
	ToCSIIsilonStatusPtrOutputWithContext(context.Context) CSIIsilonStatusPtrOutput
}

type csiisilonStatusPtrType CSIIsilonStatusArgs

func CSIIsilonStatusPtr(v *CSIIsilonStatusArgs) CSIIsilonStatusPtrInput {
	return (*csiisilonStatusPtrType)(v)
}

func (*csiisilonStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonStatus)(nil)).Elem()
}

func (i *csiisilonStatusPtrType) ToCSIIsilonStatusPtrOutput() CSIIsilonStatusPtrOutput {
	return i.ToCSIIsilonStatusPtrOutputWithContext(context.Background())
}

func (i *csiisilonStatusPtrType) ToCSIIsilonStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusPtrOutput)
}

// DriverStatus defines the observed state of CSIDriver
type CSIIsilonStatusOutput struct{ *pulumi.OutputState }

func (CSIIsilonStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonStatus)(nil)).Elem()
}

func (o CSIIsilonStatusOutput) ToCSIIsilonStatusOutput() CSIIsilonStatusOutput {
	return o
}

func (o CSIIsilonStatusOutput) ToCSIIsilonStatusOutputWithContext(ctx context.Context) CSIIsilonStatusOutput {
	return o
}

func (o CSIIsilonStatusOutput) ToCSIIsilonStatusPtrOutput() CSIIsilonStatusPtrOutput {
	return o.ToCSIIsilonStatusPtrOutputWithContext(context.Background())
}

func (o CSIIsilonStatusOutput) ToCSIIsilonStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatus) *CSIIsilonStatus {
		return &v
	}).(CSIIsilonStatusPtrOutput)
}

// ControllerStatus is the status of Controller pods
func (o CSIIsilonStatusOutput) ControllerStatus() CSIIsilonStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatus) *CSIIsilonStatusControllerStatus { return v.ControllerStatus }).(CSIIsilonStatusControllerStatusPtrOutput)
}

// DriverHash is a hash of the driver specification
func (o CSIIsilonStatusOutput) DriverHash() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatus) *int { return v.DriverHash }).(pulumi.IntPtrOutput)
}

// LastUpdate is the last updated state of the driver
func (o CSIIsilonStatusOutput) LastUpdate() CSIIsilonStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v CSIIsilonStatus) *CSIIsilonStatusLastUpdate { return v.LastUpdate }).(CSIIsilonStatusLastUpdatePtrOutput)
}

// NodeStatus is the status of Controller pods
func (o CSIIsilonStatusOutput) NodeStatus() CSIIsilonStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatus) *CSIIsilonStatusNodeStatus { return v.NodeStatus }).(CSIIsilonStatusNodeStatusPtrOutput)
}

// State is the state of the driver installation
func (o CSIIsilonStatusOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatus) *string { return v.State }).(pulumi.StringPtrOutput)
}

type CSIIsilonStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonStatus)(nil)).Elem()
}

func (o CSIIsilonStatusPtrOutput) ToCSIIsilonStatusPtrOutput() CSIIsilonStatusPtrOutput {
	return o
}

func (o CSIIsilonStatusPtrOutput) ToCSIIsilonStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusPtrOutput {
	return o
}

func (o CSIIsilonStatusPtrOutput) Elem() CSIIsilonStatusOutput {
	return o.ApplyT(func(v *CSIIsilonStatus) CSIIsilonStatus { return *v }).(CSIIsilonStatusOutput)
}

// ControllerStatus is the status of Controller pods
func (o CSIIsilonStatusPtrOutput) ControllerStatus() CSIIsilonStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v *CSIIsilonStatus) *CSIIsilonStatusControllerStatus {
		if v == nil {
			return nil
		}
		return v.ControllerStatus
	}).(CSIIsilonStatusControllerStatusPtrOutput)
}

// DriverHash is a hash of the driver specification
func (o CSIIsilonStatusPtrOutput) DriverHash() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIIsilonStatus) *int {
		if v == nil {
			return nil
		}
		return v.DriverHash
	}).(pulumi.IntPtrOutput)
}

// LastUpdate is the last updated state of the driver
func (o CSIIsilonStatusPtrOutput) LastUpdate() CSIIsilonStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v *CSIIsilonStatus) *CSIIsilonStatusLastUpdate {
		if v == nil {
			return nil
		}
		return v.LastUpdate
	}).(CSIIsilonStatusLastUpdatePtrOutput)
}

// NodeStatus is the status of Controller pods
func (o CSIIsilonStatusPtrOutput) NodeStatus() CSIIsilonStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v *CSIIsilonStatus) *CSIIsilonStatusNodeStatus {
		if v == nil {
			return nil
		}
		return v.NodeStatus
	}).(CSIIsilonStatusNodeStatusPtrOutput)
}

// State is the state of the driver installation
func (o CSIIsilonStatusPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonStatus) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// ControllerStatus is the status of Controller pods
type CSIIsilonStatusControllerStatus struct {
	Available []string `pulumi:"available"`
	Ready     []string `pulumi:"ready"`
	Starting  []string `pulumi:"starting"`
	Stopped   []string `pulumi:"stopped"`
}

// CSIIsilonStatusControllerStatusInput is an input type that accepts CSIIsilonStatusControllerStatusArgs and CSIIsilonStatusControllerStatusOutput values.
// You can construct a concrete instance of `CSIIsilonStatusControllerStatusInput` via:
//
//          CSIIsilonStatusControllerStatusArgs{...}
type CSIIsilonStatusControllerStatusInput interface {
	pulumi.Input

	ToCSIIsilonStatusControllerStatusOutput() CSIIsilonStatusControllerStatusOutput
	ToCSIIsilonStatusControllerStatusOutputWithContext(context.Context) CSIIsilonStatusControllerStatusOutput
}

// ControllerStatus is the status of Controller pods
type CSIIsilonStatusControllerStatusArgs struct {
	Available pulumi.StringArrayInput `pulumi:"available"`
	Ready     pulumi.StringArrayInput `pulumi:"ready"`
	Starting  pulumi.StringArrayInput `pulumi:"starting"`
	Stopped   pulumi.StringArrayInput `pulumi:"stopped"`
}

func (CSIIsilonStatusControllerStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonStatusControllerStatus)(nil)).Elem()
}

func (i CSIIsilonStatusControllerStatusArgs) ToCSIIsilonStatusControllerStatusOutput() CSIIsilonStatusControllerStatusOutput {
	return i.ToCSIIsilonStatusControllerStatusOutputWithContext(context.Background())
}

func (i CSIIsilonStatusControllerStatusArgs) ToCSIIsilonStatusControllerStatusOutputWithContext(ctx context.Context) CSIIsilonStatusControllerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusControllerStatusOutput)
}

func (i CSIIsilonStatusControllerStatusArgs) ToCSIIsilonStatusControllerStatusPtrOutput() CSIIsilonStatusControllerStatusPtrOutput {
	return i.ToCSIIsilonStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (i CSIIsilonStatusControllerStatusArgs) ToCSIIsilonStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusControllerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusControllerStatusOutput).ToCSIIsilonStatusControllerStatusPtrOutputWithContext(ctx)
}

// CSIIsilonStatusControllerStatusPtrInput is an input type that accepts CSIIsilonStatusControllerStatusArgs, CSIIsilonStatusControllerStatusPtr and CSIIsilonStatusControllerStatusPtrOutput values.
// You can construct a concrete instance of `CSIIsilonStatusControllerStatusPtrInput` via:
//
//          CSIIsilonStatusControllerStatusArgs{...}
//
//  or:
//
//          nil
type CSIIsilonStatusControllerStatusPtrInput interface {
	pulumi.Input

	ToCSIIsilonStatusControllerStatusPtrOutput() CSIIsilonStatusControllerStatusPtrOutput
	ToCSIIsilonStatusControllerStatusPtrOutputWithContext(context.Context) CSIIsilonStatusControllerStatusPtrOutput
}

type csiisilonStatusControllerStatusPtrType CSIIsilonStatusControllerStatusArgs

func CSIIsilonStatusControllerStatusPtr(v *CSIIsilonStatusControllerStatusArgs) CSIIsilonStatusControllerStatusPtrInput {
	return (*csiisilonStatusControllerStatusPtrType)(v)
}

func (*csiisilonStatusControllerStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonStatusControllerStatus)(nil)).Elem()
}

func (i *csiisilonStatusControllerStatusPtrType) ToCSIIsilonStatusControllerStatusPtrOutput() CSIIsilonStatusControllerStatusPtrOutput {
	return i.ToCSIIsilonStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (i *csiisilonStatusControllerStatusPtrType) ToCSIIsilonStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusControllerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusControllerStatusPtrOutput)
}

// ControllerStatus is the status of Controller pods
type CSIIsilonStatusControllerStatusOutput struct{ *pulumi.OutputState }

func (CSIIsilonStatusControllerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonStatusControllerStatus)(nil)).Elem()
}

func (o CSIIsilonStatusControllerStatusOutput) ToCSIIsilonStatusControllerStatusOutput() CSIIsilonStatusControllerStatusOutput {
	return o
}

func (o CSIIsilonStatusControllerStatusOutput) ToCSIIsilonStatusControllerStatusOutputWithContext(ctx context.Context) CSIIsilonStatusControllerStatusOutput {
	return o
}

func (o CSIIsilonStatusControllerStatusOutput) ToCSIIsilonStatusControllerStatusPtrOutput() CSIIsilonStatusControllerStatusPtrOutput {
	return o.ToCSIIsilonStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (o CSIIsilonStatusControllerStatusOutput) ToCSIIsilonStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatusControllerStatus) *CSIIsilonStatusControllerStatus {
		return &v
	}).(CSIIsilonStatusControllerStatusPtrOutput)
}
func (o CSIIsilonStatusControllerStatusOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonStatusControllerStatus) []string { return v.Available }).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusControllerStatusOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonStatusControllerStatus) []string { return v.Ready }).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusControllerStatusOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonStatusControllerStatus) []string { return v.Starting }).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusControllerStatusOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonStatusControllerStatus) []string { return v.Stopped }).(pulumi.StringArrayOutput)
}

type CSIIsilonStatusControllerStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonStatusControllerStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonStatusControllerStatus)(nil)).Elem()
}

func (o CSIIsilonStatusControllerStatusPtrOutput) ToCSIIsilonStatusControllerStatusPtrOutput() CSIIsilonStatusControllerStatusPtrOutput {
	return o
}

func (o CSIIsilonStatusControllerStatusPtrOutput) ToCSIIsilonStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusControllerStatusPtrOutput {
	return o
}

func (o CSIIsilonStatusControllerStatusPtrOutput) Elem() CSIIsilonStatusControllerStatusOutput {
	return o.ApplyT(func(v *CSIIsilonStatusControllerStatus) CSIIsilonStatusControllerStatus { return *v }).(CSIIsilonStatusControllerStatusOutput)
}

func (o CSIIsilonStatusControllerStatusPtrOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Available
	}).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusControllerStatusPtrOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusControllerStatusPtrOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Starting
	}).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusControllerStatusPtrOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Stopped
	}).(pulumi.StringArrayOutput)
}

// LastUpdate is the last updated state of the driver
type CSIIsilonStatusLastUpdate struct {
	// Condition is the last known condition of the Custom Resource
	Condition *string `pulumi:"condition"`
	// ErrorMessage is the last error message associated with the condition
	ErrorMessage *string `pulumi:"errorMessage"`
	// Time is the time stamp for the last condition update
	Time *string `pulumi:"time"`
}

// CSIIsilonStatusLastUpdateInput is an input type that accepts CSIIsilonStatusLastUpdateArgs and CSIIsilonStatusLastUpdateOutput values.
// You can construct a concrete instance of `CSIIsilonStatusLastUpdateInput` via:
//
//          CSIIsilonStatusLastUpdateArgs{...}
type CSIIsilonStatusLastUpdateInput interface {
	pulumi.Input

	ToCSIIsilonStatusLastUpdateOutput() CSIIsilonStatusLastUpdateOutput
	ToCSIIsilonStatusLastUpdateOutputWithContext(context.Context) CSIIsilonStatusLastUpdateOutput
}

// LastUpdate is the last updated state of the driver
type CSIIsilonStatusLastUpdateArgs struct {
	// Condition is the last known condition of the Custom Resource
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// ErrorMessage is the last error message associated with the condition
	ErrorMessage pulumi.StringPtrInput `pulumi:"errorMessage"`
	// Time is the time stamp for the last condition update
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (CSIIsilonStatusLastUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonStatusLastUpdate)(nil)).Elem()
}

func (i CSIIsilonStatusLastUpdateArgs) ToCSIIsilonStatusLastUpdateOutput() CSIIsilonStatusLastUpdateOutput {
	return i.ToCSIIsilonStatusLastUpdateOutputWithContext(context.Background())
}

func (i CSIIsilonStatusLastUpdateArgs) ToCSIIsilonStatusLastUpdateOutputWithContext(ctx context.Context) CSIIsilonStatusLastUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusLastUpdateOutput)
}

func (i CSIIsilonStatusLastUpdateArgs) ToCSIIsilonStatusLastUpdatePtrOutput() CSIIsilonStatusLastUpdatePtrOutput {
	return i.ToCSIIsilonStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (i CSIIsilonStatusLastUpdateArgs) ToCSIIsilonStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIIsilonStatusLastUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusLastUpdateOutput).ToCSIIsilonStatusLastUpdatePtrOutputWithContext(ctx)
}

// CSIIsilonStatusLastUpdatePtrInput is an input type that accepts CSIIsilonStatusLastUpdateArgs, CSIIsilonStatusLastUpdatePtr and CSIIsilonStatusLastUpdatePtrOutput values.
// You can construct a concrete instance of `CSIIsilonStatusLastUpdatePtrInput` via:
//
//          CSIIsilonStatusLastUpdateArgs{...}
//
//  or:
//
//          nil
type CSIIsilonStatusLastUpdatePtrInput interface {
	pulumi.Input

	ToCSIIsilonStatusLastUpdatePtrOutput() CSIIsilonStatusLastUpdatePtrOutput
	ToCSIIsilonStatusLastUpdatePtrOutputWithContext(context.Context) CSIIsilonStatusLastUpdatePtrOutput
}

type csiisilonStatusLastUpdatePtrType CSIIsilonStatusLastUpdateArgs

func CSIIsilonStatusLastUpdatePtr(v *CSIIsilonStatusLastUpdateArgs) CSIIsilonStatusLastUpdatePtrInput {
	return (*csiisilonStatusLastUpdatePtrType)(v)
}

func (*csiisilonStatusLastUpdatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonStatusLastUpdate)(nil)).Elem()
}

func (i *csiisilonStatusLastUpdatePtrType) ToCSIIsilonStatusLastUpdatePtrOutput() CSIIsilonStatusLastUpdatePtrOutput {
	return i.ToCSIIsilonStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (i *csiisilonStatusLastUpdatePtrType) ToCSIIsilonStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIIsilonStatusLastUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusLastUpdatePtrOutput)
}

// LastUpdate is the last updated state of the driver
type CSIIsilonStatusLastUpdateOutput struct{ *pulumi.OutputState }

func (CSIIsilonStatusLastUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonStatusLastUpdate)(nil)).Elem()
}

func (o CSIIsilonStatusLastUpdateOutput) ToCSIIsilonStatusLastUpdateOutput() CSIIsilonStatusLastUpdateOutput {
	return o
}

func (o CSIIsilonStatusLastUpdateOutput) ToCSIIsilonStatusLastUpdateOutputWithContext(ctx context.Context) CSIIsilonStatusLastUpdateOutput {
	return o
}

func (o CSIIsilonStatusLastUpdateOutput) ToCSIIsilonStatusLastUpdatePtrOutput() CSIIsilonStatusLastUpdatePtrOutput {
	return o.ToCSIIsilonStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (o CSIIsilonStatusLastUpdateOutput) ToCSIIsilonStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIIsilonStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v CSIIsilonStatusLastUpdate) *CSIIsilonStatusLastUpdate {
		return &v
	}).(CSIIsilonStatusLastUpdatePtrOutput)
}

// Condition is the last known condition of the Custom Resource
func (o CSIIsilonStatusLastUpdateOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatusLastUpdate) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// ErrorMessage is the last error message associated with the condition
func (o CSIIsilonStatusLastUpdateOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatusLastUpdate) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// Time is the time stamp for the last condition update
func (o CSIIsilonStatusLastUpdateOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatusLastUpdate) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type CSIIsilonStatusLastUpdatePtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonStatusLastUpdatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonStatusLastUpdate)(nil)).Elem()
}

func (o CSIIsilonStatusLastUpdatePtrOutput) ToCSIIsilonStatusLastUpdatePtrOutput() CSIIsilonStatusLastUpdatePtrOutput {
	return o
}

func (o CSIIsilonStatusLastUpdatePtrOutput) ToCSIIsilonStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIIsilonStatusLastUpdatePtrOutput {
	return o
}

func (o CSIIsilonStatusLastUpdatePtrOutput) Elem() CSIIsilonStatusLastUpdateOutput {
	return o.ApplyT(func(v *CSIIsilonStatusLastUpdate) CSIIsilonStatusLastUpdate { return *v }).(CSIIsilonStatusLastUpdateOutput)
}

// Condition is the last known condition of the Custom Resource
func (o CSIIsilonStatusLastUpdatePtrOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Condition
	}).(pulumi.StringPtrOutput)
}

// ErrorMessage is the last error message associated with the condition
func (o CSIIsilonStatusLastUpdatePtrOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// Time is the time stamp for the last condition update
func (o CSIIsilonStatusLastUpdatePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

// NodeStatus is the status of Controller pods
type CSIIsilonStatusNodeStatus struct {
	Available []string `pulumi:"available"`
	Ready     []string `pulumi:"ready"`
	Starting  []string `pulumi:"starting"`
	Stopped   []string `pulumi:"stopped"`
}

// CSIIsilonStatusNodeStatusInput is an input type that accepts CSIIsilonStatusNodeStatusArgs and CSIIsilonStatusNodeStatusOutput values.
// You can construct a concrete instance of `CSIIsilonStatusNodeStatusInput` via:
//
//          CSIIsilonStatusNodeStatusArgs{...}
type CSIIsilonStatusNodeStatusInput interface {
	pulumi.Input

	ToCSIIsilonStatusNodeStatusOutput() CSIIsilonStatusNodeStatusOutput
	ToCSIIsilonStatusNodeStatusOutputWithContext(context.Context) CSIIsilonStatusNodeStatusOutput
}

// NodeStatus is the status of Controller pods
type CSIIsilonStatusNodeStatusArgs struct {
	Available pulumi.StringArrayInput `pulumi:"available"`
	Ready     pulumi.StringArrayInput `pulumi:"ready"`
	Starting  pulumi.StringArrayInput `pulumi:"starting"`
	Stopped   pulumi.StringArrayInput `pulumi:"stopped"`
}

func (CSIIsilonStatusNodeStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonStatusNodeStatus)(nil)).Elem()
}

func (i CSIIsilonStatusNodeStatusArgs) ToCSIIsilonStatusNodeStatusOutput() CSIIsilonStatusNodeStatusOutput {
	return i.ToCSIIsilonStatusNodeStatusOutputWithContext(context.Background())
}

func (i CSIIsilonStatusNodeStatusArgs) ToCSIIsilonStatusNodeStatusOutputWithContext(ctx context.Context) CSIIsilonStatusNodeStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusNodeStatusOutput)
}

func (i CSIIsilonStatusNodeStatusArgs) ToCSIIsilonStatusNodeStatusPtrOutput() CSIIsilonStatusNodeStatusPtrOutput {
	return i.ToCSIIsilonStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (i CSIIsilonStatusNodeStatusArgs) ToCSIIsilonStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusNodeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusNodeStatusOutput).ToCSIIsilonStatusNodeStatusPtrOutputWithContext(ctx)
}

// CSIIsilonStatusNodeStatusPtrInput is an input type that accepts CSIIsilonStatusNodeStatusArgs, CSIIsilonStatusNodeStatusPtr and CSIIsilonStatusNodeStatusPtrOutput values.
// You can construct a concrete instance of `CSIIsilonStatusNodeStatusPtrInput` via:
//
//          CSIIsilonStatusNodeStatusArgs{...}
//
//  or:
//
//          nil
type CSIIsilonStatusNodeStatusPtrInput interface {
	pulumi.Input

	ToCSIIsilonStatusNodeStatusPtrOutput() CSIIsilonStatusNodeStatusPtrOutput
	ToCSIIsilonStatusNodeStatusPtrOutputWithContext(context.Context) CSIIsilonStatusNodeStatusPtrOutput
}

type csiisilonStatusNodeStatusPtrType CSIIsilonStatusNodeStatusArgs

func CSIIsilonStatusNodeStatusPtr(v *CSIIsilonStatusNodeStatusArgs) CSIIsilonStatusNodeStatusPtrInput {
	return (*csiisilonStatusNodeStatusPtrType)(v)
}

func (*csiisilonStatusNodeStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonStatusNodeStatus)(nil)).Elem()
}

func (i *csiisilonStatusNodeStatusPtrType) ToCSIIsilonStatusNodeStatusPtrOutput() CSIIsilonStatusNodeStatusPtrOutput {
	return i.ToCSIIsilonStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (i *csiisilonStatusNodeStatusPtrType) ToCSIIsilonStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusNodeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusNodeStatusPtrOutput)
}

// NodeStatus is the status of Controller pods
type CSIIsilonStatusNodeStatusOutput struct{ *pulumi.OutputState }

func (CSIIsilonStatusNodeStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonStatusNodeStatus)(nil)).Elem()
}

func (o CSIIsilonStatusNodeStatusOutput) ToCSIIsilonStatusNodeStatusOutput() CSIIsilonStatusNodeStatusOutput {
	return o
}

func (o CSIIsilonStatusNodeStatusOutput) ToCSIIsilonStatusNodeStatusOutputWithContext(ctx context.Context) CSIIsilonStatusNodeStatusOutput {
	return o
}

func (o CSIIsilonStatusNodeStatusOutput) ToCSIIsilonStatusNodeStatusPtrOutput() CSIIsilonStatusNodeStatusPtrOutput {
	return o.ToCSIIsilonStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (o CSIIsilonStatusNodeStatusOutput) ToCSIIsilonStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatusNodeStatus) *CSIIsilonStatusNodeStatus {
		return &v
	}).(CSIIsilonStatusNodeStatusPtrOutput)
}
func (o CSIIsilonStatusNodeStatusOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonStatusNodeStatus) []string { return v.Available }).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusNodeStatusOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonStatusNodeStatus) []string { return v.Ready }).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusNodeStatusOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonStatusNodeStatus) []string { return v.Starting }).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusNodeStatusOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonStatusNodeStatus) []string { return v.Stopped }).(pulumi.StringArrayOutput)
}

type CSIIsilonStatusNodeStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonStatusNodeStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonStatusNodeStatus)(nil)).Elem()
}

func (o CSIIsilonStatusNodeStatusPtrOutput) ToCSIIsilonStatusNodeStatusPtrOutput() CSIIsilonStatusNodeStatusPtrOutput {
	return o
}

func (o CSIIsilonStatusNodeStatusPtrOutput) ToCSIIsilonStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusNodeStatusPtrOutput {
	return o
}

func (o CSIIsilonStatusNodeStatusPtrOutput) Elem() CSIIsilonStatusNodeStatusOutput {
	return o.ApplyT(func(v *CSIIsilonStatusNodeStatus) CSIIsilonStatusNodeStatus { return *v }).(CSIIsilonStatusNodeStatusOutput)
}

func (o CSIIsilonStatusNodeStatusPtrOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Available
	}).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusNodeStatusPtrOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusNodeStatusPtrOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Starting
	}).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusNodeStatusPtrOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Stopped
	}).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(CSIIsilonTypeOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodePtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsArrayOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSnapshotClassOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSnapshotClassArrayOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverStorageClassOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverStorageClassArrayOutput{})
	pulumi.RegisterOutputType(CSIIsilonStatusOutput{})
	pulumi.RegisterOutputType(CSIIsilonStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonStatusControllerStatusOutput{})
	pulumi.RegisterOutputType(CSIIsilonStatusControllerStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonStatusLastUpdateOutput{})
	pulumi.RegisterOutputType(CSIIsilonStatusLastUpdatePtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonStatusNodeStatusOutput{})
	pulumi.RegisterOutputType(CSIIsilonStatusNodeStatusPtrOutput{})
}

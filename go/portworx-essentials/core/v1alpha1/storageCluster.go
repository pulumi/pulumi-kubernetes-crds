// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type StorageCluster struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// The desired behavior of the storage cluster.
	Spec StorageClusterSpecPtrOutput `pulumi:"spec"`
	// Most recently observed status of the storage cluster. This data may not be up to date.
	Status StorageClusterStatusPtrOutput `pulumi:"status"`
}

// NewStorageCluster registers a new resource with the given unique name, arguments, and options.
func NewStorageCluster(ctx *pulumi.Context,
	name string, args *StorageClusterArgs, opts ...pulumi.ResourceOption) (*StorageCluster, error) {
	if args == nil {
		args = &StorageClusterArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("core.libopenstorage.org/v1alpha1")
	args.Kind = pulumi.StringPtr("StorageCluster")
	var resource StorageCluster
	err := ctx.RegisterResource("kubernetes:core.libopenstorage.org/v1alpha1:StorageCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStorageCluster gets an existing StorageCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStorageCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StorageClusterState, opts ...pulumi.ResourceOption) (*StorageCluster, error) {
	var resource StorageCluster
	err := ctx.ReadResource("kubernetes:core.libopenstorage.org/v1alpha1:StorageCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StorageCluster resources.
type storageClusterState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// The desired behavior of the storage cluster.
	Spec *StorageClusterSpec `pulumi:"spec"`
	// Most recently observed status of the storage cluster. This data may not be up to date.
	Status *StorageClusterStatus `pulumi:"status"`
}

type StorageClusterState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// The desired behavior of the storage cluster.
	Spec StorageClusterSpecPtrInput
	// Most recently observed status of the storage cluster. This data may not be up to date.
	Status StorageClusterStatusPtrInput
}

func (StorageClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*storageClusterState)(nil)).Elem()
}

type storageClusterArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// The desired behavior of the storage cluster.
	Spec *StorageClusterSpec `pulumi:"spec"`
	// Most recently observed status of the storage cluster. This data may not be up to date.
	Status *StorageClusterStatus `pulumi:"status"`
}

// The set of arguments for constructing a StorageCluster resource.
type StorageClusterArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// The desired behavior of the storage cluster.
	Spec StorageClusterSpecPtrInput
	// Most recently observed status of the storage cluster. This data may not be up to date.
	Status StorageClusterStatusPtrInput
}

func (StorageClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storageClusterArgs)(nil)).Elem()
}

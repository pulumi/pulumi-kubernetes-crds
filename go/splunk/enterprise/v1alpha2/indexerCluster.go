// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha2

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// IndexerCluster is the Schema for a Splunk Enterprise indexer cluster
type IndexerCluster struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// IndexerClusterSpec defines the desired state of a Splunk Enterprise indexer cluster
	Spec IndexerClusterSpecPtrOutput `pulumi:"spec"`
	// IndexerClusterStatus defines the observed state of a Splunk Enterprise indexer cluster
	Status IndexerClusterStatusPtrOutput `pulumi:"status"`
}

// NewIndexerCluster registers a new resource with the given unique name, arguments, and options.
func NewIndexerCluster(ctx *pulumi.Context,
	name string, args *IndexerClusterArgs, opts ...pulumi.ResourceOption) (*IndexerCluster, error) {
	if args == nil {
		args = &IndexerClusterArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("enterprise.splunk.com/v1alpha2")
	args.Kind = pulumi.StringPtr("IndexerCluster")
	var resource IndexerCluster
	err := ctx.RegisterResource("kubernetes:enterprise.splunk.com/v1alpha2:IndexerCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIndexerCluster gets an existing IndexerCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIndexerCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IndexerClusterState, opts ...pulumi.ResourceOption) (*IndexerCluster, error) {
	var resource IndexerCluster
	err := ctx.ReadResource("kubernetes:enterprise.splunk.com/v1alpha2:IndexerCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IndexerCluster resources.
type indexerClusterState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// IndexerClusterSpec defines the desired state of a Splunk Enterprise indexer cluster
	Spec *IndexerClusterSpec `pulumi:"spec"`
	// IndexerClusterStatus defines the observed state of a Splunk Enterprise indexer cluster
	Status *IndexerClusterStatus `pulumi:"status"`
}

type IndexerClusterState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// IndexerClusterSpec defines the desired state of a Splunk Enterprise indexer cluster
	Spec IndexerClusterSpecPtrInput
	// IndexerClusterStatus defines the observed state of a Splunk Enterprise indexer cluster
	Status IndexerClusterStatusPtrInput
}

func (IndexerClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*indexerClusterState)(nil)).Elem()
}

type indexerClusterArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// IndexerClusterSpec defines the desired state of a Splunk Enterprise indexer cluster
	Spec *IndexerClusterSpec `pulumi:"spec"`
	// IndexerClusterStatus defines the observed state of a Splunk Enterprise indexer cluster
	Status *IndexerClusterStatus `pulumi:"status"`
}

// The set of arguments for constructing a IndexerCluster resource.
type IndexerClusterArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// IndexerClusterSpec defines the desired state of a Splunk Enterprise indexer cluster
	Spec IndexerClusterSpecPtrInput
	// IndexerClusterStatus defines the observed state of a Splunk Enterprise indexer cluster
	Status IndexerClusterStatusPtrInput
}

func (IndexerClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*indexerClusterArgs)(nil)).Elem()
}

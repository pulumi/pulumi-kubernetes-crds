// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type BackupType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       *BackupSpec        `pulumi:"spec"`
	Status     *BackupStatus      `pulumi:"status"`
}

// BackupTypeInput is an input type that accepts BackupTypeArgs and BackupTypeOutput values.
// You can construct a concrete instance of `BackupTypeInput` via:
//
//          BackupTypeArgs{...}
type BackupTypeInput interface {
	pulumi.Input

	ToBackupTypeOutput() BackupTypeOutput
	ToBackupTypeOutputWithContext(context.Context) BackupTypeOutput
}

type BackupTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec       BackupSpecPtrInput        `pulumi:"spec"`
	Status     BackupStatusPtrInput      `pulumi:"status"`
}

func (BackupTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupType)(nil)).Elem()
}

func (i BackupTypeArgs) ToBackupTypeOutput() BackupTypeOutput {
	return i.ToBackupTypeOutputWithContext(context.Background())
}

func (i BackupTypeArgs) ToBackupTypeOutputWithContext(ctx context.Context) BackupTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupTypeOutput)
}

type BackupTypeOutput struct{ *pulumi.OutputState }

func (BackupTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupType)(nil)).Elem()
}

func (o BackupTypeOutput) ToBackupTypeOutput() BackupTypeOutput {
	return o
}

func (o BackupTypeOutput) ToBackupTypeOutputWithContext(ctx context.Context) BackupTypeOutput {
	return o
}

func (o BackupTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o BackupTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o BackupTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v BackupType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o BackupTypeOutput) Spec() BackupSpecPtrOutput {
	return o.ApplyT(func(v BackupType) *BackupSpec { return v.Spec }).(BackupSpecPtrOutput)
}

func (o BackupTypeOutput) Status() BackupStatusPtrOutput {
	return o.ApplyT(func(v BackupType) *BackupStatus { return v.Status }).(BackupStatusPtrOutput)
}

type BackupMetadata struct {
}

// BackupMetadataInput is an input type that accepts BackupMetadataArgs and BackupMetadataOutput values.
// You can construct a concrete instance of `BackupMetadataInput` via:
//
//          BackupMetadataArgs{...}
type BackupMetadataInput interface {
	pulumi.Input

	ToBackupMetadataOutput() BackupMetadataOutput
	ToBackupMetadataOutputWithContext(context.Context) BackupMetadataOutput
}

type BackupMetadataArgs struct {
}

func (BackupMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupMetadata)(nil)).Elem()
}

func (i BackupMetadataArgs) ToBackupMetadataOutput() BackupMetadataOutput {
	return i.ToBackupMetadataOutputWithContext(context.Background())
}

func (i BackupMetadataArgs) ToBackupMetadataOutputWithContext(ctx context.Context) BackupMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupMetadataOutput)
}

type BackupMetadataOutput struct{ *pulumi.OutputState }

func (BackupMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupMetadata)(nil)).Elem()
}

func (o BackupMetadataOutput) ToBackupMetadataOutput() BackupMetadataOutput {
	return o
}

func (o BackupMetadataOutput) ToBackupMetadataOutputWithContext(ctx context.Context) BackupMetadataOutput {
	return o
}

type BackupSpec struct {
	// Key ID of AWS S3 storage. Default Value: nil Required to create the Secret with the data to allow send the backup files to AWS S3 storage.
	AwsAccessKeyId *string `pulumi:"awsAccessKeyId"`
	// Name of AWS S3 storage. Default Value: nil Required to create the Secret with the AWS data to allow send the backup files to AWS S3 storage.
	AwsS3BucketName *string `pulumi:"awsS3BucketName"`
	// Secret/Token of AWS S3 storage. Default Value: nil Required to create the Secret with the data to allow send the backup files to AWS S3 storage.
	AwsSecretAccessKey *string `pulumi:"awsSecretAccessKey"`
	// Name of the secret with the AWS data credentials pre-existing in the cluster Default Value: nil See here the template: https://github.com/integr8ly/backup-container-image/blob/master/templates/openshift/sample-config/s3-secret.yaml
	AwsSecretName *string `pulumi:"awsSecretName"`
	// Namespace of the secret with the AWS data credentials pre-existing in the cluster Default Value: nil NOTE: If the namespace be not informed then the operator will try to find it in the same namespace where it is applied
	AwsSecretNamespace *string `pulumi:"awsSecretNamespace"`
	// Name of the Database CR applied which this backup will work with Default Value: database
	DatabaseCRName *string `pulumi:"databaseCRName"`
	// Database version. (E.g 9.6). Default Value: <9.6> IMPORTANT: Just the first 2 digits should be used.
	DatabaseVersion *string `pulumi:"databaseVersion"`
	// Name of the secret with the Encrypt data pre-existing in the cluster Default Value: nil See here the template: https://github.com/integr8ly/backup-container-image/blob/master/templates/openshift/sample-config/gpg-secret.yaml
	EncryptKeySecretName *string `pulumi:"encryptKeySecretName"`
	// Namespace of the secret with the Encrypt data pre-existing in the cluster Default Value: nil NOTE: If the namespace be not informed then the operator will try to find it in the same namespace where it is applied
	EncryptKeySecretNamespace *string `pulumi:"encryptKeySecretNamespace"`
	// GPG email to create the EncryptionKeySecret with this data Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key
	GpgEmail *string `pulumi:"gpgEmail"`
	// GPG public key to create the EncryptionKeySecret with this data Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key
	GpgPublicKey *string `pulumi:"gpgPublicKey"`
	// GPG trust model to create the EncryptionKeySecret with this data. the default value is true when it is empty. Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key
	GpgTrustModel *string `pulumi:"gpgTrustModel"`
	// Image:tag used to do the backup. Default Value: <quay.io/integreatly/backup-container:1.0.8> More Info: https://github.com/integr8ly/backup-container-image
	Image *string `pulumi:"image"`
	// Used to create the directory where the files will be stored Default Value: <postgresql>
	ProductName *string `pulumi:"productName"`
	// Schedule period for the CronJob. Default Value: <0 0 * * *> daily at 00:00
	Schedule *string `pulumi:"schedule"`
}

// BackupSpecInput is an input type that accepts BackupSpecArgs and BackupSpecOutput values.
// You can construct a concrete instance of `BackupSpecInput` via:
//
//          BackupSpecArgs{...}
type BackupSpecInput interface {
	pulumi.Input

	ToBackupSpecOutput() BackupSpecOutput
	ToBackupSpecOutputWithContext(context.Context) BackupSpecOutput
}

type BackupSpecArgs struct {
	// Key ID of AWS S3 storage. Default Value: nil Required to create the Secret with the data to allow send the backup files to AWS S3 storage.
	AwsAccessKeyId pulumi.StringPtrInput `pulumi:"awsAccessKeyId"`
	// Name of AWS S3 storage. Default Value: nil Required to create the Secret with the AWS data to allow send the backup files to AWS S3 storage.
	AwsS3BucketName pulumi.StringPtrInput `pulumi:"awsS3BucketName"`
	// Secret/Token of AWS S3 storage. Default Value: nil Required to create the Secret with the data to allow send the backup files to AWS S3 storage.
	AwsSecretAccessKey pulumi.StringPtrInput `pulumi:"awsSecretAccessKey"`
	// Name of the secret with the AWS data credentials pre-existing in the cluster Default Value: nil See here the template: https://github.com/integr8ly/backup-container-image/blob/master/templates/openshift/sample-config/s3-secret.yaml
	AwsSecretName pulumi.StringPtrInput `pulumi:"awsSecretName"`
	// Namespace of the secret with the AWS data credentials pre-existing in the cluster Default Value: nil NOTE: If the namespace be not informed then the operator will try to find it in the same namespace where it is applied
	AwsSecretNamespace pulumi.StringPtrInput `pulumi:"awsSecretNamespace"`
	// Name of the Database CR applied which this backup will work with Default Value: database
	DatabaseCRName pulumi.StringPtrInput `pulumi:"databaseCRName"`
	// Database version. (E.g 9.6). Default Value: <9.6> IMPORTANT: Just the first 2 digits should be used.
	DatabaseVersion pulumi.StringPtrInput `pulumi:"databaseVersion"`
	// Name of the secret with the Encrypt data pre-existing in the cluster Default Value: nil See here the template: https://github.com/integr8ly/backup-container-image/blob/master/templates/openshift/sample-config/gpg-secret.yaml
	EncryptKeySecretName pulumi.StringPtrInput `pulumi:"encryptKeySecretName"`
	// Namespace of the secret with the Encrypt data pre-existing in the cluster Default Value: nil NOTE: If the namespace be not informed then the operator will try to find it in the same namespace where it is applied
	EncryptKeySecretNamespace pulumi.StringPtrInput `pulumi:"encryptKeySecretNamespace"`
	// GPG email to create the EncryptionKeySecret with this data Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key
	GpgEmail pulumi.StringPtrInput `pulumi:"gpgEmail"`
	// GPG public key to create the EncryptionKeySecret with this data Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key
	GpgPublicKey pulumi.StringPtrInput `pulumi:"gpgPublicKey"`
	// GPG trust model to create the EncryptionKeySecret with this data. the default value is true when it is empty. Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key
	GpgTrustModel pulumi.StringPtrInput `pulumi:"gpgTrustModel"`
	// Image:tag used to do the backup. Default Value: <quay.io/integreatly/backup-container:1.0.8> More Info: https://github.com/integr8ly/backup-container-image
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Used to create the directory where the files will be stored Default Value: <postgresql>
	ProductName pulumi.StringPtrInput `pulumi:"productName"`
	// Schedule period for the CronJob. Default Value: <0 0 * * *> daily at 00:00
	Schedule pulumi.StringPtrInput `pulumi:"schedule"`
}

func (BackupSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpec)(nil)).Elem()
}

func (i BackupSpecArgs) ToBackupSpecOutput() BackupSpecOutput {
	return i.ToBackupSpecOutputWithContext(context.Background())
}

func (i BackupSpecArgs) ToBackupSpecOutputWithContext(ctx context.Context) BackupSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecOutput)
}

func (i BackupSpecArgs) ToBackupSpecPtrOutput() BackupSpecPtrOutput {
	return i.ToBackupSpecPtrOutputWithContext(context.Background())
}

func (i BackupSpecArgs) ToBackupSpecPtrOutputWithContext(ctx context.Context) BackupSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecOutput).ToBackupSpecPtrOutputWithContext(ctx)
}

// BackupSpecPtrInput is an input type that accepts BackupSpecArgs, BackupSpecPtr and BackupSpecPtrOutput values.
// You can construct a concrete instance of `BackupSpecPtrInput` via:
//
//          BackupSpecArgs{...}
//
//  or:
//
//          nil
type BackupSpecPtrInput interface {
	pulumi.Input

	ToBackupSpecPtrOutput() BackupSpecPtrOutput
	ToBackupSpecPtrOutputWithContext(context.Context) BackupSpecPtrOutput
}

type backupSpecPtrType BackupSpecArgs

func BackupSpecPtr(v *BackupSpecArgs) BackupSpecPtrInput {
	return (*backupSpecPtrType)(v)
}

func (*backupSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupSpec)(nil)).Elem()
}

func (i *backupSpecPtrType) ToBackupSpecPtrOutput() BackupSpecPtrOutput {
	return i.ToBackupSpecPtrOutputWithContext(context.Background())
}

func (i *backupSpecPtrType) ToBackupSpecPtrOutputWithContext(ctx context.Context) BackupSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecPtrOutput)
}

type BackupSpecOutput struct{ *pulumi.OutputState }

func (BackupSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpec)(nil)).Elem()
}

func (o BackupSpecOutput) ToBackupSpecOutput() BackupSpecOutput {
	return o
}

func (o BackupSpecOutput) ToBackupSpecOutputWithContext(ctx context.Context) BackupSpecOutput {
	return o
}

func (o BackupSpecOutput) ToBackupSpecPtrOutput() BackupSpecPtrOutput {
	return o.ToBackupSpecPtrOutputWithContext(context.Background())
}

func (o BackupSpecOutput) ToBackupSpecPtrOutputWithContext(ctx context.Context) BackupSpecPtrOutput {
	return o.ApplyT(func(v BackupSpec) *BackupSpec {
		return &v
	}).(BackupSpecPtrOutput)
}

// Key ID of AWS S3 storage. Default Value: nil Required to create the Secret with the data to allow send the backup files to AWS S3 storage.
func (o BackupSpecOutput) AwsAccessKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSpec) *string { return v.AwsAccessKeyId }).(pulumi.StringPtrOutput)
}

// Name of AWS S3 storage. Default Value: nil Required to create the Secret with the AWS data to allow send the backup files to AWS S3 storage.
func (o BackupSpecOutput) AwsS3BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSpec) *string { return v.AwsS3BucketName }).(pulumi.StringPtrOutput)
}

// Secret/Token of AWS S3 storage. Default Value: nil Required to create the Secret with the data to allow send the backup files to AWS S3 storage.
func (o BackupSpecOutput) AwsSecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSpec) *string { return v.AwsSecretAccessKey }).(pulumi.StringPtrOutput)
}

// Name of the secret with the AWS data credentials pre-existing in the cluster Default Value: nil See here the template: https://github.com/integr8ly/backup-container-image/blob/master/templates/openshift/sample-config/s3-secret.yaml
func (o BackupSpecOutput) AwsSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSpec) *string { return v.AwsSecretName }).(pulumi.StringPtrOutput)
}

// Namespace of the secret with the AWS data credentials pre-existing in the cluster Default Value: nil NOTE: If the namespace be not informed then the operator will try to find it in the same namespace where it is applied
func (o BackupSpecOutput) AwsSecretNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSpec) *string { return v.AwsSecretNamespace }).(pulumi.StringPtrOutput)
}

// Name of the Database CR applied which this backup will work with Default Value: database
func (o BackupSpecOutput) DatabaseCRName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSpec) *string { return v.DatabaseCRName }).(pulumi.StringPtrOutput)
}

// Database version. (E.g 9.6). Default Value: <9.6> IMPORTANT: Just the first 2 digits should be used.
func (o BackupSpecOutput) DatabaseVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSpec) *string { return v.DatabaseVersion }).(pulumi.StringPtrOutput)
}

// Name of the secret with the Encrypt data pre-existing in the cluster Default Value: nil See here the template: https://github.com/integr8ly/backup-container-image/blob/master/templates/openshift/sample-config/gpg-secret.yaml
func (o BackupSpecOutput) EncryptKeySecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSpec) *string { return v.EncryptKeySecretName }).(pulumi.StringPtrOutput)
}

// Namespace of the secret with the Encrypt data pre-existing in the cluster Default Value: nil NOTE: If the namespace be not informed then the operator will try to find it in the same namespace where it is applied
func (o BackupSpecOutput) EncryptKeySecretNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSpec) *string { return v.EncryptKeySecretNamespace }).(pulumi.StringPtrOutput)
}

// GPG email to create the EncryptionKeySecret with this data Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key
func (o BackupSpecOutput) GpgEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSpec) *string { return v.GpgEmail }).(pulumi.StringPtrOutput)
}

// GPG public key to create the EncryptionKeySecret with this data Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key
func (o BackupSpecOutput) GpgPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSpec) *string { return v.GpgPublicKey }).(pulumi.StringPtrOutput)
}

// GPG trust model to create the EncryptionKeySecret with this data. the default value is true when it is empty. Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key
func (o BackupSpecOutput) GpgTrustModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSpec) *string { return v.GpgTrustModel }).(pulumi.StringPtrOutput)
}

// Image:tag used to do the backup. Default Value: <quay.io/integreatly/backup-container:1.0.8> More Info: https://github.com/integr8ly/backup-container-image
func (o BackupSpecOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSpec) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Used to create the directory where the files will be stored Default Value: <postgresql>
func (o BackupSpecOutput) ProductName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSpec) *string { return v.ProductName }).(pulumi.StringPtrOutput)
}

// Schedule period for the CronJob. Default Value: <0 0 * * *> daily at 00:00
func (o BackupSpecOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSpec) *string { return v.Schedule }).(pulumi.StringPtrOutput)
}

type BackupSpecPtrOutput struct{ *pulumi.OutputState }

func (BackupSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupSpec)(nil)).Elem()
}

func (o BackupSpecPtrOutput) ToBackupSpecPtrOutput() BackupSpecPtrOutput {
	return o
}

func (o BackupSpecPtrOutput) ToBackupSpecPtrOutputWithContext(ctx context.Context) BackupSpecPtrOutput {
	return o
}

func (o BackupSpecPtrOutput) Elem() BackupSpecOutput {
	return o.ApplyT(func(v *BackupSpec) BackupSpec { return *v }).(BackupSpecOutput)
}

// Key ID of AWS S3 storage. Default Value: nil Required to create the Secret with the data to allow send the backup files to AWS S3 storage.
func (o BackupSpecPtrOutput) AwsAccessKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupSpec) *string {
		if v == nil {
			return nil
		}
		return v.AwsAccessKeyId
	}).(pulumi.StringPtrOutput)
}

// Name of AWS S3 storage. Default Value: nil Required to create the Secret with the AWS data to allow send the backup files to AWS S3 storage.
func (o BackupSpecPtrOutput) AwsS3BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupSpec) *string {
		if v == nil {
			return nil
		}
		return v.AwsS3BucketName
	}).(pulumi.StringPtrOutput)
}

// Secret/Token of AWS S3 storage. Default Value: nil Required to create the Secret with the data to allow send the backup files to AWS S3 storage.
func (o BackupSpecPtrOutput) AwsSecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupSpec) *string {
		if v == nil {
			return nil
		}
		return v.AwsSecretAccessKey
	}).(pulumi.StringPtrOutput)
}

// Name of the secret with the AWS data credentials pre-existing in the cluster Default Value: nil See here the template: https://github.com/integr8ly/backup-container-image/blob/master/templates/openshift/sample-config/s3-secret.yaml
func (o BackupSpecPtrOutput) AwsSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupSpec) *string {
		if v == nil {
			return nil
		}
		return v.AwsSecretName
	}).(pulumi.StringPtrOutput)
}

// Namespace of the secret with the AWS data credentials pre-existing in the cluster Default Value: nil NOTE: If the namespace be not informed then the operator will try to find it in the same namespace where it is applied
func (o BackupSpecPtrOutput) AwsSecretNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupSpec) *string {
		if v == nil {
			return nil
		}
		return v.AwsSecretNamespace
	}).(pulumi.StringPtrOutput)
}

// Name of the Database CR applied which this backup will work with Default Value: database
func (o BackupSpecPtrOutput) DatabaseCRName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupSpec) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseCRName
	}).(pulumi.StringPtrOutput)
}

// Database version. (E.g 9.6). Default Value: <9.6> IMPORTANT: Just the first 2 digits should be used.
func (o BackupSpecPtrOutput) DatabaseVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupSpec) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseVersion
	}).(pulumi.StringPtrOutput)
}

// Name of the secret with the Encrypt data pre-existing in the cluster Default Value: nil See here the template: https://github.com/integr8ly/backup-container-image/blob/master/templates/openshift/sample-config/gpg-secret.yaml
func (o BackupSpecPtrOutput) EncryptKeySecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupSpec) *string {
		if v == nil {
			return nil
		}
		return v.EncryptKeySecretName
	}).(pulumi.StringPtrOutput)
}

// Namespace of the secret with the Encrypt data pre-existing in the cluster Default Value: nil NOTE: If the namespace be not informed then the operator will try to find it in the same namespace where it is applied
func (o BackupSpecPtrOutput) EncryptKeySecretNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupSpec) *string {
		if v == nil {
			return nil
		}
		return v.EncryptKeySecretNamespace
	}).(pulumi.StringPtrOutput)
}

// GPG email to create the EncryptionKeySecret with this data Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key
func (o BackupSpecPtrOutput) GpgEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupSpec) *string {
		if v == nil {
			return nil
		}
		return v.GpgEmail
	}).(pulumi.StringPtrOutput)
}

// GPG public key to create the EncryptionKeySecret with this data Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key
func (o BackupSpecPtrOutput) GpgPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupSpec) *string {
		if v == nil {
			return nil
		}
		return v.GpgPublicKey
	}).(pulumi.StringPtrOutput)
}

// GPG trust model to create the EncryptionKeySecret with this data. the default value is true when it is empty. Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key
func (o BackupSpecPtrOutput) GpgTrustModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupSpec) *string {
		if v == nil {
			return nil
		}
		return v.GpgTrustModel
	}).(pulumi.StringPtrOutput)
}

// Image:tag used to do the backup. Default Value: <quay.io/integreatly/backup-container:1.0.8> More Info: https://github.com/integr8ly/backup-container-image
func (o BackupSpecPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupSpec) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Used to create the directory where the files will be stored Default Value: <postgresql>
func (o BackupSpecPtrOutput) ProductName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupSpec) *string {
		if v == nil {
			return nil
		}
		return v.ProductName
	}).(pulumi.StringPtrOutput)
}

// Schedule period for the CronJob. Default Value: <0 0 * * *> daily at 00:00
func (o BackupSpecPtrOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupSpec) *string {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(pulumi.StringPtrOutput)
}

type BackupStatus struct {
	// Namespace  of the secret object with the Aws data to allow send the backup files to the AWS storage
	AwsCredentialsSecretNamespace string `pulumi:"awsCredentialsSecretNamespace"`
	// Name  of the secret object with the Aws data to allow send the backup files to the AWS storage
	AwsSecretName string `pulumi:"awsSecretName"`
	// Will be as "OK when all objects are created successfully
	BackupStatus string `pulumi:"backupStatus"`
	// Name of the CronJob object created and managed by it to schedule the backup job
	CronJobName string `pulumi:"cronJobName"`
	// Status of the CronJob object
	CronJobStatus map[string]interface{} `pulumi:"cronJobStatus"`
	// Name of the secret object created with the database data to allow the backup image connect to the database
	DbSecretName string `pulumi:"dbSecretName"`
	// Name  of the secret object with the Encryption GPG Key
	EncryptKeySecretName string `pulumi:"encryptKeySecretName"`
	// Namespace of the secret object with the Encryption GPG Key
	EncryptKeySecretNamespace string `pulumi:"encryptKeySecretNamespace"`
	// Boolean value which has true when it has an EncryptionKey to be used to send the backup files
	HasEncryptKey bool `pulumi:"hasEncryptKey"`
	// Boolean value which has true when the Database Pod was found in order to create the secret with the database data to allow the backup image connect into it.
	IsDatabasePodFound bool `pulumi:"isDatabasePodFound"`
	// Boolean value which has true when the Service Database Pod was found in order to create the secret with the database data to allow the backup image connect into it.
	IsDatabaseServiceFound bool `pulumi:"isDatabaseServiceFound"`
}

// BackupStatusInput is an input type that accepts BackupStatusArgs and BackupStatusOutput values.
// You can construct a concrete instance of `BackupStatusInput` via:
//
//          BackupStatusArgs{...}
type BackupStatusInput interface {
	pulumi.Input

	ToBackupStatusOutput() BackupStatusOutput
	ToBackupStatusOutputWithContext(context.Context) BackupStatusOutput
}

type BackupStatusArgs struct {
	// Namespace  of the secret object with the Aws data to allow send the backup files to the AWS storage
	AwsCredentialsSecretNamespace pulumi.StringInput `pulumi:"awsCredentialsSecretNamespace"`
	// Name  of the secret object with the Aws data to allow send the backup files to the AWS storage
	AwsSecretName pulumi.StringInput `pulumi:"awsSecretName"`
	// Will be as "OK when all objects are created successfully
	BackupStatus pulumi.StringInput `pulumi:"backupStatus"`
	// Name of the CronJob object created and managed by it to schedule the backup job
	CronJobName pulumi.StringInput `pulumi:"cronJobName"`
	// Status of the CronJob object
	CronJobStatus pulumi.MapInput `pulumi:"cronJobStatus"`
	// Name of the secret object created with the database data to allow the backup image connect to the database
	DbSecretName pulumi.StringInput `pulumi:"dbSecretName"`
	// Name  of the secret object with the Encryption GPG Key
	EncryptKeySecretName pulumi.StringInput `pulumi:"encryptKeySecretName"`
	// Namespace of the secret object with the Encryption GPG Key
	EncryptKeySecretNamespace pulumi.StringInput `pulumi:"encryptKeySecretNamespace"`
	// Boolean value which has true when it has an EncryptionKey to be used to send the backup files
	HasEncryptKey pulumi.BoolInput `pulumi:"hasEncryptKey"`
	// Boolean value which has true when the Database Pod was found in order to create the secret with the database data to allow the backup image connect into it.
	IsDatabasePodFound pulumi.BoolInput `pulumi:"isDatabasePodFound"`
	// Boolean value which has true when the Service Database Pod was found in order to create the secret with the database data to allow the backup image connect into it.
	IsDatabaseServiceFound pulumi.BoolInput `pulumi:"isDatabaseServiceFound"`
}

func (BackupStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupStatus)(nil)).Elem()
}

func (i BackupStatusArgs) ToBackupStatusOutput() BackupStatusOutput {
	return i.ToBackupStatusOutputWithContext(context.Background())
}

func (i BackupStatusArgs) ToBackupStatusOutputWithContext(ctx context.Context) BackupStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStatusOutput)
}

func (i BackupStatusArgs) ToBackupStatusPtrOutput() BackupStatusPtrOutput {
	return i.ToBackupStatusPtrOutputWithContext(context.Background())
}

func (i BackupStatusArgs) ToBackupStatusPtrOutputWithContext(ctx context.Context) BackupStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStatusOutput).ToBackupStatusPtrOutputWithContext(ctx)
}

// BackupStatusPtrInput is an input type that accepts BackupStatusArgs, BackupStatusPtr and BackupStatusPtrOutput values.
// You can construct a concrete instance of `BackupStatusPtrInput` via:
//
//          BackupStatusArgs{...}
//
//  or:
//
//          nil
type BackupStatusPtrInput interface {
	pulumi.Input

	ToBackupStatusPtrOutput() BackupStatusPtrOutput
	ToBackupStatusPtrOutputWithContext(context.Context) BackupStatusPtrOutput
}

type backupStatusPtrType BackupStatusArgs

func BackupStatusPtr(v *BackupStatusArgs) BackupStatusPtrInput {
	return (*backupStatusPtrType)(v)
}

func (*backupStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupStatus)(nil)).Elem()
}

func (i *backupStatusPtrType) ToBackupStatusPtrOutput() BackupStatusPtrOutput {
	return i.ToBackupStatusPtrOutputWithContext(context.Background())
}

func (i *backupStatusPtrType) ToBackupStatusPtrOutputWithContext(ctx context.Context) BackupStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStatusPtrOutput)
}

type BackupStatusOutput struct{ *pulumi.OutputState }

func (BackupStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupStatus)(nil)).Elem()
}

func (o BackupStatusOutput) ToBackupStatusOutput() BackupStatusOutput {
	return o
}

func (o BackupStatusOutput) ToBackupStatusOutputWithContext(ctx context.Context) BackupStatusOutput {
	return o
}

func (o BackupStatusOutput) ToBackupStatusPtrOutput() BackupStatusPtrOutput {
	return o.ToBackupStatusPtrOutputWithContext(context.Background())
}

func (o BackupStatusOutput) ToBackupStatusPtrOutputWithContext(ctx context.Context) BackupStatusPtrOutput {
	return o.ApplyT(func(v BackupStatus) *BackupStatus {
		return &v
	}).(BackupStatusPtrOutput)
}

// Namespace  of the secret object with the Aws data to allow send the backup files to the AWS storage
func (o BackupStatusOutput) AwsCredentialsSecretNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v BackupStatus) string { return v.AwsCredentialsSecretNamespace }).(pulumi.StringOutput)
}

// Name  of the secret object with the Aws data to allow send the backup files to the AWS storage
func (o BackupStatusOutput) AwsSecretName() pulumi.StringOutput {
	return o.ApplyT(func(v BackupStatus) string { return v.AwsSecretName }).(pulumi.StringOutput)
}

// Will be as "OK when all objects are created successfully
func (o BackupStatusOutput) BackupStatus() pulumi.StringOutput {
	return o.ApplyT(func(v BackupStatus) string { return v.BackupStatus }).(pulumi.StringOutput)
}

// Name of the CronJob object created and managed by it to schedule the backup job
func (o BackupStatusOutput) CronJobName() pulumi.StringOutput {
	return o.ApplyT(func(v BackupStatus) string { return v.CronJobName }).(pulumi.StringOutput)
}

// Status of the CronJob object
func (o BackupStatusOutput) CronJobStatus() pulumi.MapOutput {
	return o.ApplyT(func(v BackupStatus) map[string]interface{} { return v.CronJobStatus }).(pulumi.MapOutput)
}

// Name of the secret object created with the database data to allow the backup image connect to the database
func (o BackupStatusOutput) DbSecretName() pulumi.StringOutput {
	return o.ApplyT(func(v BackupStatus) string { return v.DbSecretName }).(pulumi.StringOutput)
}

// Name  of the secret object with the Encryption GPG Key
func (o BackupStatusOutput) EncryptKeySecretName() pulumi.StringOutput {
	return o.ApplyT(func(v BackupStatus) string { return v.EncryptKeySecretName }).(pulumi.StringOutput)
}

// Namespace of the secret object with the Encryption GPG Key
func (o BackupStatusOutput) EncryptKeySecretNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v BackupStatus) string { return v.EncryptKeySecretNamespace }).(pulumi.StringOutput)
}

// Boolean value which has true when it has an EncryptionKey to be used to send the backup files
func (o BackupStatusOutput) HasEncryptKey() pulumi.BoolOutput {
	return o.ApplyT(func(v BackupStatus) bool { return v.HasEncryptKey }).(pulumi.BoolOutput)
}

// Boolean value which has true when the Database Pod was found in order to create the secret with the database data to allow the backup image connect into it.
func (o BackupStatusOutput) IsDatabasePodFound() pulumi.BoolOutput {
	return o.ApplyT(func(v BackupStatus) bool { return v.IsDatabasePodFound }).(pulumi.BoolOutput)
}

// Boolean value which has true when the Service Database Pod was found in order to create the secret with the database data to allow the backup image connect into it.
func (o BackupStatusOutput) IsDatabaseServiceFound() pulumi.BoolOutput {
	return o.ApplyT(func(v BackupStatus) bool { return v.IsDatabaseServiceFound }).(pulumi.BoolOutput)
}

type BackupStatusPtrOutput struct{ *pulumi.OutputState }

func (BackupStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupStatus)(nil)).Elem()
}

func (o BackupStatusPtrOutput) ToBackupStatusPtrOutput() BackupStatusPtrOutput {
	return o
}

func (o BackupStatusPtrOutput) ToBackupStatusPtrOutputWithContext(ctx context.Context) BackupStatusPtrOutput {
	return o
}

func (o BackupStatusPtrOutput) Elem() BackupStatusOutput {
	return o.ApplyT(func(v *BackupStatus) BackupStatus { return *v }).(BackupStatusOutput)
}

// Namespace  of the secret object with the Aws data to allow send the backup files to the AWS storage
func (o BackupStatusPtrOutput) AwsCredentialsSecretNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupStatus) *string {
		if v == nil {
			return nil
		}
		return &v.AwsCredentialsSecretNamespace
	}).(pulumi.StringPtrOutput)
}

// Name  of the secret object with the Aws data to allow send the backup files to the AWS storage
func (o BackupStatusPtrOutput) AwsSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupStatus) *string {
		if v == nil {
			return nil
		}
		return &v.AwsSecretName
	}).(pulumi.StringPtrOutput)
}

// Will be as "OK when all objects are created successfully
func (o BackupStatusPtrOutput) BackupStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupStatus) *string {
		if v == nil {
			return nil
		}
		return &v.BackupStatus
	}).(pulumi.StringPtrOutput)
}

// Name of the CronJob object created and managed by it to schedule the backup job
func (o BackupStatusPtrOutput) CronJobName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupStatus) *string {
		if v == nil {
			return nil
		}
		return &v.CronJobName
	}).(pulumi.StringPtrOutput)
}

// Status of the CronJob object
func (o BackupStatusPtrOutput) CronJobStatus() pulumi.MapOutput {
	return o.ApplyT(func(v *BackupStatus) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.CronJobStatus
	}).(pulumi.MapOutput)
}

// Name of the secret object created with the database data to allow the backup image connect to the database
func (o BackupStatusPtrOutput) DbSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupStatus) *string {
		if v == nil {
			return nil
		}
		return &v.DbSecretName
	}).(pulumi.StringPtrOutput)
}

// Name  of the secret object with the Encryption GPG Key
func (o BackupStatusPtrOutput) EncryptKeySecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupStatus) *string {
		if v == nil {
			return nil
		}
		return &v.EncryptKeySecretName
	}).(pulumi.StringPtrOutput)
}

// Namespace of the secret object with the Encryption GPG Key
func (o BackupStatusPtrOutput) EncryptKeySecretNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupStatus) *string {
		if v == nil {
			return nil
		}
		return &v.EncryptKeySecretNamespace
	}).(pulumi.StringPtrOutput)
}

// Boolean value which has true when it has an EncryptionKey to be used to send the backup files
func (o BackupStatusPtrOutput) HasEncryptKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupStatus) *bool {
		if v == nil {
			return nil
		}
		return &v.HasEncryptKey
	}).(pulumi.BoolPtrOutput)
}

// Boolean value which has true when the Database Pod was found in order to create the secret with the database data to allow the backup image connect into it.
func (o BackupStatusPtrOutput) IsDatabasePodFound() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupStatus) *bool {
		if v == nil {
			return nil
		}
		return &v.IsDatabasePodFound
	}).(pulumi.BoolPtrOutput)
}

// Boolean value which has true when the Service Database Pod was found in order to create the secret with the database data to allow the backup image connect into it.
func (o BackupStatusPtrOutput) IsDatabaseServiceFound() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupStatus) *bool {
		if v == nil {
			return nil
		}
		return &v.IsDatabaseServiceFound
	}).(pulumi.BoolPtrOutput)
}

// Status of the CronJob object
type BackupStatusCronJobStatus struct {
}

// BackupStatusCronJobStatusInput is an input type that accepts BackupStatusCronJobStatusArgs and BackupStatusCronJobStatusOutput values.
// You can construct a concrete instance of `BackupStatusCronJobStatusInput` via:
//
//          BackupStatusCronJobStatusArgs{...}
type BackupStatusCronJobStatusInput interface {
	pulumi.Input

	ToBackupStatusCronJobStatusOutput() BackupStatusCronJobStatusOutput
	ToBackupStatusCronJobStatusOutputWithContext(context.Context) BackupStatusCronJobStatusOutput
}

// Status of the CronJob object
type BackupStatusCronJobStatusArgs struct {
}

func (BackupStatusCronJobStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupStatusCronJobStatus)(nil)).Elem()
}

func (i BackupStatusCronJobStatusArgs) ToBackupStatusCronJobStatusOutput() BackupStatusCronJobStatusOutput {
	return i.ToBackupStatusCronJobStatusOutputWithContext(context.Background())
}

func (i BackupStatusCronJobStatusArgs) ToBackupStatusCronJobStatusOutputWithContext(ctx context.Context) BackupStatusCronJobStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStatusCronJobStatusOutput)
}

// Status of the CronJob object
type BackupStatusCronJobStatusOutput struct{ *pulumi.OutputState }

func (BackupStatusCronJobStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupStatusCronJobStatus)(nil)).Elem()
}

func (o BackupStatusCronJobStatusOutput) ToBackupStatusCronJobStatusOutput() BackupStatusCronJobStatusOutput {
	return o
}

func (o BackupStatusCronJobStatusOutput) ToBackupStatusCronJobStatusOutputWithContext(ctx context.Context) BackupStatusCronJobStatusOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(BackupTypeOutput{})
	pulumi.RegisterOutputType(BackupMetadataOutput{})
	pulumi.RegisterOutputType(BackupSpecOutput{})
	pulumi.RegisterOutputType(BackupSpecPtrOutput{})
	pulumi.RegisterOutputType(BackupStatusOutput{})
	pulumi.RegisterOutputType(BackupStatusPtrOutput{})
	pulumi.RegisterOutputType(BackupStatusCronJobStatusOutput{})
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type KnativeEventingKafkaType struct {
	ApiVersion *string                     `pulumi:"apiVersion"`
	Kind       *string                     `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta          `pulumi:"metadata"`
	Spec       *KnativeEventingKafkaSpec   `pulumi:"spec"`
	Status     *KnativeEventingKafkaStatus `pulumi:"status"`
}

// KnativeEventingKafkaTypeInput is an input type that accepts KnativeEventingKafkaTypeArgs and KnativeEventingKafkaTypeOutput values.
// You can construct a concrete instance of `KnativeEventingKafkaTypeInput` via:
//
//          KnativeEventingKafkaTypeArgs{...}
type KnativeEventingKafkaTypeInput interface {
	pulumi.Input

	ToKnativeEventingKafkaTypeOutput() KnativeEventingKafkaTypeOutput
	ToKnativeEventingKafkaTypeOutputWithContext(context.Context) KnativeEventingKafkaTypeOutput
}

type KnativeEventingKafkaTypeArgs struct {
	ApiVersion pulumi.StringPtrInput              `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput              `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput          `pulumi:"metadata"`
	Spec       KnativeEventingKafkaSpecPtrInput   `pulumi:"spec"`
	Status     KnativeEventingKafkaStatusPtrInput `pulumi:"status"`
}

func (KnativeEventingKafkaTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KnativeEventingKafkaType)(nil)).Elem()
}

func (i KnativeEventingKafkaTypeArgs) ToKnativeEventingKafkaTypeOutput() KnativeEventingKafkaTypeOutput {
	return i.ToKnativeEventingKafkaTypeOutputWithContext(context.Background())
}

func (i KnativeEventingKafkaTypeArgs) ToKnativeEventingKafkaTypeOutputWithContext(ctx context.Context) KnativeEventingKafkaTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KnativeEventingKafkaTypeOutput)
}

type KnativeEventingKafkaTypeOutput struct{ *pulumi.OutputState }

func (KnativeEventingKafkaTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KnativeEventingKafkaType)(nil)).Elem()
}

func (o KnativeEventingKafkaTypeOutput) ToKnativeEventingKafkaTypeOutput() KnativeEventingKafkaTypeOutput {
	return o
}

func (o KnativeEventingKafkaTypeOutput) ToKnativeEventingKafkaTypeOutputWithContext(ctx context.Context) KnativeEventingKafkaTypeOutput {
	return o
}

func (o KnativeEventingKafkaTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KnativeEventingKafkaType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KnativeEventingKafkaTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KnativeEventingKafkaType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KnativeEventingKafkaTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v KnativeEventingKafkaType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o KnativeEventingKafkaTypeOutput) Spec() KnativeEventingKafkaSpecPtrOutput {
	return o.ApplyT(func(v KnativeEventingKafkaType) *KnativeEventingKafkaSpec { return v.Spec }).(KnativeEventingKafkaSpecPtrOutput)
}

func (o KnativeEventingKafkaTypeOutput) Status() KnativeEventingKafkaStatusPtrOutput {
	return o.ApplyT(func(v KnativeEventingKafkaType) *KnativeEventingKafkaStatus { return v.Status }).(KnativeEventingKafkaStatusPtrOutput)
}

type KnativeEventingKafkaMetadata struct {
}

// KnativeEventingKafkaMetadataInput is an input type that accepts KnativeEventingKafkaMetadataArgs and KnativeEventingKafkaMetadataOutput values.
// You can construct a concrete instance of `KnativeEventingKafkaMetadataInput` via:
//
//          KnativeEventingKafkaMetadataArgs{...}
type KnativeEventingKafkaMetadataInput interface {
	pulumi.Input

	ToKnativeEventingKafkaMetadataOutput() KnativeEventingKafkaMetadataOutput
	ToKnativeEventingKafkaMetadataOutputWithContext(context.Context) KnativeEventingKafkaMetadataOutput
}

type KnativeEventingKafkaMetadataArgs struct {
}

func (KnativeEventingKafkaMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KnativeEventingKafkaMetadata)(nil)).Elem()
}

func (i KnativeEventingKafkaMetadataArgs) ToKnativeEventingKafkaMetadataOutput() KnativeEventingKafkaMetadataOutput {
	return i.ToKnativeEventingKafkaMetadataOutputWithContext(context.Background())
}

func (i KnativeEventingKafkaMetadataArgs) ToKnativeEventingKafkaMetadataOutputWithContext(ctx context.Context) KnativeEventingKafkaMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KnativeEventingKafkaMetadataOutput)
}

type KnativeEventingKafkaMetadataOutput struct{ *pulumi.OutputState }

func (KnativeEventingKafkaMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KnativeEventingKafkaMetadata)(nil)).Elem()
}

func (o KnativeEventingKafkaMetadataOutput) ToKnativeEventingKafkaMetadataOutput() KnativeEventingKafkaMetadataOutput {
	return o
}

func (o KnativeEventingKafkaMetadataOutput) ToKnativeEventingKafkaMetadataOutputWithContext(ctx context.Context) KnativeEventingKafkaMetadataOutput {
	return o
}

type KnativeEventingKafkaSpec struct {
	// URI(s) of Apache Kafka broker(s)
	BootstrapServers string `pulumi:"bootstrapServers"`
	// Flag that controls whether Kafka channel provisioner is configured as the cluster default. Defaults to false.
	SetAsDefaultChannelProvisioner *bool `pulumi:"setAsDefaultChannelProvisioner"`
}

// KnativeEventingKafkaSpecInput is an input type that accepts KnativeEventingKafkaSpecArgs and KnativeEventingKafkaSpecOutput values.
// You can construct a concrete instance of `KnativeEventingKafkaSpecInput` via:
//
//          KnativeEventingKafkaSpecArgs{...}
type KnativeEventingKafkaSpecInput interface {
	pulumi.Input

	ToKnativeEventingKafkaSpecOutput() KnativeEventingKafkaSpecOutput
	ToKnativeEventingKafkaSpecOutputWithContext(context.Context) KnativeEventingKafkaSpecOutput
}

type KnativeEventingKafkaSpecArgs struct {
	// URI(s) of Apache Kafka broker(s)
	BootstrapServers pulumi.StringInput `pulumi:"bootstrapServers"`
	// Flag that controls whether Kafka channel provisioner is configured as the cluster default. Defaults to false.
	SetAsDefaultChannelProvisioner pulumi.BoolPtrInput `pulumi:"setAsDefaultChannelProvisioner"`
}

func (KnativeEventingKafkaSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KnativeEventingKafkaSpec)(nil)).Elem()
}

func (i KnativeEventingKafkaSpecArgs) ToKnativeEventingKafkaSpecOutput() KnativeEventingKafkaSpecOutput {
	return i.ToKnativeEventingKafkaSpecOutputWithContext(context.Background())
}

func (i KnativeEventingKafkaSpecArgs) ToKnativeEventingKafkaSpecOutputWithContext(ctx context.Context) KnativeEventingKafkaSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KnativeEventingKafkaSpecOutput)
}

func (i KnativeEventingKafkaSpecArgs) ToKnativeEventingKafkaSpecPtrOutput() KnativeEventingKafkaSpecPtrOutput {
	return i.ToKnativeEventingKafkaSpecPtrOutputWithContext(context.Background())
}

func (i KnativeEventingKafkaSpecArgs) ToKnativeEventingKafkaSpecPtrOutputWithContext(ctx context.Context) KnativeEventingKafkaSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KnativeEventingKafkaSpecOutput).ToKnativeEventingKafkaSpecPtrOutputWithContext(ctx)
}

// KnativeEventingKafkaSpecPtrInput is an input type that accepts KnativeEventingKafkaSpecArgs, KnativeEventingKafkaSpecPtr and KnativeEventingKafkaSpecPtrOutput values.
// You can construct a concrete instance of `KnativeEventingKafkaSpecPtrInput` via:
//
//          KnativeEventingKafkaSpecArgs{...}
//
//  or:
//
//          nil
type KnativeEventingKafkaSpecPtrInput interface {
	pulumi.Input

	ToKnativeEventingKafkaSpecPtrOutput() KnativeEventingKafkaSpecPtrOutput
	ToKnativeEventingKafkaSpecPtrOutputWithContext(context.Context) KnativeEventingKafkaSpecPtrOutput
}

type knativeEventingKafkaSpecPtrType KnativeEventingKafkaSpecArgs

func KnativeEventingKafkaSpecPtr(v *KnativeEventingKafkaSpecArgs) KnativeEventingKafkaSpecPtrInput {
	return (*knativeEventingKafkaSpecPtrType)(v)
}

func (*knativeEventingKafkaSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KnativeEventingKafkaSpec)(nil)).Elem()
}

func (i *knativeEventingKafkaSpecPtrType) ToKnativeEventingKafkaSpecPtrOutput() KnativeEventingKafkaSpecPtrOutput {
	return i.ToKnativeEventingKafkaSpecPtrOutputWithContext(context.Background())
}

func (i *knativeEventingKafkaSpecPtrType) ToKnativeEventingKafkaSpecPtrOutputWithContext(ctx context.Context) KnativeEventingKafkaSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KnativeEventingKafkaSpecPtrOutput)
}

type KnativeEventingKafkaSpecOutput struct{ *pulumi.OutputState }

func (KnativeEventingKafkaSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KnativeEventingKafkaSpec)(nil)).Elem()
}

func (o KnativeEventingKafkaSpecOutput) ToKnativeEventingKafkaSpecOutput() KnativeEventingKafkaSpecOutput {
	return o
}

func (o KnativeEventingKafkaSpecOutput) ToKnativeEventingKafkaSpecOutputWithContext(ctx context.Context) KnativeEventingKafkaSpecOutput {
	return o
}

func (o KnativeEventingKafkaSpecOutput) ToKnativeEventingKafkaSpecPtrOutput() KnativeEventingKafkaSpecPtrOutput {
	return o.ToKnativeEventingKafkaSpecPtrOutputWithContext(context.Background())
}

func (o KnativeEventingKafkaSpecOutput) ToKnativeEventingKafkaSpecPtrOutputWithContext(ctx context.Context) KnativeEventingKafkaSpecPtrOutput {
	return o.ApplyT(func(v KnativeEventingKafkaSpec) *KnativeEventingKafkaSpec {
		return &v
	}).(KnativeEventingKafkaSpecPtrOutput)
}

// URI(s) of Apache Kafka broker(s)
func (o KnativeEventingKafkaSpecOutput) BootstrapServers() pulumi.StringOutput {
	return o.ApplyT(func(v KnativeEventingKafkaSpec) string { return v.BootstrapServers }).(pulumi.StringOutput)
}

// Flag that controls whether Kafka channel provisioner is configured as the cluster default. Defaults to false.
func (o KnativeEventingKafkaSpecOutput) SetAsDefaultChannelProvisioner() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KnativeEventingKafkaSpec) *bool { return v.SetAsDefaultChannelProvisioner }).(pulumi.BoolPtrOutput)
}

type KnativeEventingKafkaSpecPtrOutput struct{ *pulumi.OutputState }

func (KnativeEventingKafkaSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KnativeEventingKafkaSpec)(nil)).Elem()
}

func (o KnativeEventingKafkaSpecPtrOutput) ToKnativeEventingKafkaSpecPtrOutput() KnativeEventingKafkaSpecPtrOutput {
	return o
}

func (o KnativeEventingKafkaSpecPtrOutput) ToKnativeEventingKafkaSpecPtrOutputWithContext(ctx context.Context) KnativeEventingKafkaSpecPtrOutput {
	return o
}

func (o KnativeEventingKafkaSpecPtrOutput) Elem() KnativeEventingKafkaSpecOutput {
	return o.ApplyT(func(v *KnativeEventingKafkaSpec) KnativeEventingKafkaSpec { return *v }).(KnativeEventingKafkaSpecOutput)
}

// URI(s) of Apache Kafka broker(s)
func (o KnativeEventingKafkaSpecPtrOutput) BootstrapServers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KnativeEventingKafkaSpec) *string {
		if v == nil {
			return nil
		}
		return &v.BootstrapServers
	}).(pulumi.StringPtrOutput)
}

// Flag that controls whether Kafka channel provisioner is configured as the cluster default. Defaults to false.
func (o KnativeEventingKafkaSpecPtrOutput) SetAsDefaultChannelProvisioner() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KnativeEventingKafkaSpec) *bool {
		if v == nil {
			return nil
		}
		return v.SetAsDefaultChannelProvisioner
	}).(pulumi.BoolPtrOutput)
}

type KnativeEventingKafkaStatus struct {
	// The latest available observations of a resource's current state. +patchMergeKey=type +patchStrategy=merge
	Conditions []KnativeEventingKafkaStatusConditions `pulumi:"conditions"`
	// The version of the installed release
	Version *string `pulumi:"version"`
}

// KnativeEventingKafkaStatusInput is an input type that accepts KnativeEventingKafkaStatusArgs and KnativeEventingKafkaStatusOutput values.
// You can construct a concrete instance of `KnativeEventingKafkaStatusInput` via:
//
//          KnativeEventingKafkaStatusArgs{...}
type KnativeEventingKafkaStatusInput interface {
	pulumi.Input

	ToKnativeEventingKafkaStatusOutput() KnativeEventingKafkaStatusOutput
	ToKnativeEventingKafkaStatusOutputWithContext(context.Context) KnativeEventingKafkaStatusOutput
}

type KnativeEventingKafkaStatusArgs struct {
	// The latest available observations of a resource's current state. +patchMergeKey=type +patchStrategy=merge
	Conditions KnativeEventingKafkaStatusConditionsArrayInput `pulumi:"conditions"`
	// The version of the installed release
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (KnativeEventingKafkaStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KnativeEventingKafkaStatus)(nil)).Elem()
}

func (i KnativeEventingKafkaStatusArgs) ToKnativeEventingKafkaStatusOutput() KnativeEventingKafkaStatusOutput {
	return i.ToKnativeEventingKafkaStatusOutputWithContext(context.Background())
}

func (i KnativeEventingKafkaStatusArgs) ToKnativeEventingKafkaStatusOutputWithContext(ctx context.Context) KnativeEventingKafkaStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KnativeEventingKafkaStatusOutput)
}

func (i KnativeEventingKafkaStatusArgs) ToKnativeEventingKafkaStatusPtrOutput() KnativeEventingKafkaStatusPtrOutput {
	return i.ToKnativeEventingKafkaStatusPtrOutputWithContext(context.Background())
}

func (i KnativeEventingKafkaStatusArgs) ToKnativeEventingKafkaStatusPtrOutputWithContext(ctx context.Context) KnativeEventingKafkaStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KnativeEventingKafkaStatusOutput).ToKnativeEventingKafkaStatusPtrOutputWithContext(ctx)
}

// KnativeEventingKafkaStatusPtrInput is an input type that accepts KnativeEventingKafkaStatusArgs, KnativeEventingKafkaStatusPtr and KnativeEventingKafkaStatusPtrOutput values.
// You can construct a concrete instance of `KnativeEventingKafkaStatusPtrInput` via:
//
//          KnativeEventingKafkaStatusArgs{...}
//
//  or:
//
//          nil
type KnativeEventingKafkaStatusPtrInput interface {
	pulumi.Input

	ToKnativeEventingKafkaStatusPtrOutput() KnativeEventingKafkaStatusPtrOutput
	ToKnativeEventingKafkaStatusPtrOutputWithContext(context.Context) KnativeEventingKafkaStatusPtrOutput
}

type knativeEventingKafkaStatusPtrType KnativeEventingKafkaStatusArgs

func KnativeEventingKafkaStatusPtr(v *KnativeEventingKafkaStatusArgs) KnativeEventingKafkaStatusPtrInput {
	return (*knativeEventingKafkaStatusPtrType)(v)
}

func (*knativeEventingKafkaStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KnativeEventingKafkaStatus)(nil)).Elem()
}

func (i *knativeEventingKafkaStatusPtrType) ToKnativeEventingKafkaStatusPtrOutput() KnativeEventingKafkaStatusPtrOutput {
	return i.ToKnativeEventingKafkaStatusPtrOutputWithContext(context.Background())
}

func (i *knativeEventingKafkaStatusPtrType) ToKnativeEventingKafkaStatusPtrOutputWithContext(ctx context.Context) KnativeEventingKafkaStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KnativeEventingKafkaStatusPtrOutput)
}

type KnativeEventingKafkaStatusOutput struct{ *pulumi.OutputState }

func (KnativeEventingKafkaStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KnativeEventingKafkaStatus)(nil)).Elem()
}

func (o KnativeEventingKafkaStatusOutput) ToKnativeEventingKafkaStatusOutput() KnativeEventingKafkaStatusOutput {
	return o
}

func (o KnativeEventingKafkaStatusOutput) ToKnativeEventingKafkaStatusOutputWithContext(ctx context.Context) KnativeEventingKafkaStatusOutput {
	return o
}

func (o KnativeEventingKafkaStatusOutput) ToKnativeEventingKafkaStatusPtrOutput() KnativeEventingKafkaStatusPtrOutput {
	return o.ToKnativeEventingKafkaStatusPtrOutputWithContext(context.Background())
}

func (o KnativeEventingKafkaStatusOutput) ToKnativeEventingKafkaStatusPtrOutputWithContext(ctx context.Context) KnativeEventingKafkaStatusPtrOutput {
	return o.ApplyT(func(v KnativeEventingKafkaStatus) *KnativeEventingKafkaStatus {
		return &v
	}).(KnativeEventingKafkaStatusPtrOutput)
}

// The latest available observations of a resource's current state. +patchMergeKey=type +patchStrategy=merge
func (o KnativeEventingKafkaStatusOutput) Conditions() KnativeEventingKafkaStatusConditionsArrayOutput {
	return o.ApplyT(func(v KnativeEventingKafkaStatus) []KnativeEventingKafkaStatusConditions { return v.Conditions }).(KnativeEventingKafkaStatusConditionsArrayOutput)
}

// The version of the installed release
func (o KnativeEventingKafkaStatusOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KnativeEventingKafkaStatus) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type KnativeEventingKafkaStatusPtrOutput struct{ *pulumi.OutputState }

func (KnativeEventingKafkaStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KnativeEventingKafkaStatus)(nil)).Elem()
}

func (o KnativeEventingKafkaStatusPtrOutput) ToKnativeEventingKafkaStatusPtrOutput() KnativeEventingKafkaStatusPtrOutput {
	return o
}

func (o KnativeEventingKafkaStatusPtrOutput) ToKnativeEventingKafkaStatusPtrOutputWithContext(ctx context.Context) KnativeEventingKafkaStatusPtrOutput {
	return o
}

func (o KnativeEventingKafkaStatusPtrOutput) Elem() KnativeEventingKafkaStatusOutput {
	return o.ApplyT(func(v *KnativeEventingKafkaStatus) KnativeEventingKafkaStatus { return *v }).(KnativeEventingKafkaStatusOutput)
}

// The latest available observations of a resource's current state. +patchMergeKey=type +patchStrategy=merge
func (o KnativeEventingKafkaStatusPtrOutput) Conditions() KnativeEventingKafkaStatusConditionsArrayOutput {
	return o.ApplyT(func(v *KnativeEventingKafkaStatus) []KnativeEventingKafkaStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(KnativeEventingKafkaStatusConditionsArrayOutput)
}

// The version of the installed release
func (o KnativeEventingKafkaStatusPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KnativeEventingKafkaStatus) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type KnativeEventingKafkaStatusConditions struct {
	// LastTransitionTime is the last time the condition transitioned from one status to another. We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic differences (all other things held constant).
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// A human readable message indicating details about the transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Severity with which to treat failures of this type of condition. When this is not specified, it defaults to Error.
	Severity *string `pulumi:"severity"`
	// Status of the condition, one of True, False, Unknown. +required
	Status string `pulumi:"status"`
	// Type of condition. +required
	Type string `pulumi:"type"`
}

// KnativeEventingKafkaStatusConditionsInput is an input type that accepts KnativeEventingKafkaStatusConditionsArgs and KnativeEventingKafkaStatusConditionsOutput values.
// You can construct a concrete instance of `KnativeEventingKafkaStatusConditionsInput` via:
//
//          KnativeEventingKafkaStatusConditionsArgs{...}
type KnativeEventingKafkaStatusConditionsInput interface {
	pulumi.Input

	ToKnativeEventingKafkaStatusConditionsOutput() KnativeEventingKafkaStatusConditionsOutput
	ToKnativeEventingKafkaStatusConditionsOutputWithContext(context.Context) KnativeEventingKafkaStatusConditionsOutput
}

type KnativeEventingKafkaStatusConditionsArgs struct {
	// LastTransitionTime is the last time the condition transitioned from one status to another. We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic differences (all other things held constant).
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// A human readable message indicating details about the transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Severity with which to treat failures of this type of condition. When this is not specified, it defaults to Error.
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// Status of the condition, one of True, False, Unknown. +required
	Status pulumi.StringInput `pulumi:"status"`
	// Type of condition. +required
	Type pulumi.StringInput `pulumi:"type"`
}

func (KnativeEventingKafkaStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KnativeEventingKafkaStatusConditions)(nil)).Elem()
}

func (i KnativeEventingKafkaStatusConditionsArgs) ToKnativeEventingKafkaStatusConditionsOutput() KnativeEventingKafkaStatusConditionsOutput {
	return i.ToKnativeEventingKafkaStatusConditionsOutputWithContext(context.Background())
}

func (i KnativeEventingKafkaStatusConditionsArgs) ToKnativeEventingKafkaStatusConditionsOutputWithContext(ctx context.Context) KnativeEventingKafkaStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KnativeEventingKafkaStatusConditionsOutput)
}

// KnativeEventingKafkaStatusConditionsArrayInput is an input type that accepts KnativeEventingKafkaStatusConditionsArray and KnativeEventingKafkaStatusConditionsArrayOutput values.
// You can construct a concrete instance of `KnativeEventingKafkaStatusConditionsArrayInput` via:
//
//          KnativeEventingKafkaStatusConditionsArray{ KnativeEventingKafkaStatusConditionsArgs{...} }
type KnativeEventingKafkaStatusConditionsArrayInput interface {
	pulumi.Input

	ToKnativeEventingKafkaStatusConditionsArrayOutput() KnativeEventingKafkaStatusConditionsArrayOutput
	ToKnativeEventingKafkaStatusConditionsArrayOutputWithContext(context.Context) KnativeEventingKafkaStatusConditionsArrayOutput
}

type KnativeEventingKafkaStatusConditionsArray []KnativeEventingKafkaStatusConditionsInput

func (KnativeEventingKafkaStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KnativeEventingKafkaStatusConditions)(nil)).Elem()
}

func (i KnativeEventingKafkaStatusConditionsArray) ToKnativeEventingKafkaStatusConditionsArrayOutput() KnativeEventingKafkaStatusConditionsArrayOutput {
	return i.ToKnativeEventingKafkaStatusConditionsArrayOutputWithContext(context.Background())
}

func (i KnativeEventingKafkaStatusConditionsArray) ToKnativeEventingKafkaStatusConditionsArrayOutputWithContext(ctx context.Context) KnativeEventingKafkaStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KnativeEventingKafkaStatusConditionsArrayOutput)
}

type KnativeEventingKafkaStatusConditionsOutput struct{ *pulumi.OutputState }

func (KnativeEventingKafkaStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KnativeEventingKafkaStatusConditions)(nil)).Elem()
}

func (o KnativeEventingKafkaStatusConditionsOutput) ToKnativeEventingKafkaStatusConditionsOutput() KnativeEventingKafkaStatusConditionsOutput {
	return o
}

func (o KnativeEventingKafkaStatusConditionsOutput) ToKnativeEventingKafkaStatusConditionsOutputWithContext(ctx context.Context) KnativeEventingKafkaStatusConditionsOutput {
	return o
}

// LastTransitionTime is the last time the condition transitioned from one status to another. We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic differences (all other things held constant).
func (o KnativeEventingKafkaStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KnativeEventingKafkaStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about the transition.
func (o KnativeEventingKafkaStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KnativeEventingKafkaStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition.
func (o KnativeEventingKafkaStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KnativeEventingKafkaStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Severity with which to treat failures of this type of condition. When this is not specified, it defaults to Error.
func (o KnativeEventingKafkaStatusConditionsOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KnativeEventingKafkaStatusConditions) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown. +required
func (o KnativeEventingKafkaStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KnativeEventingKafkaStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of condition. +required
func (o KnativeEventingKafkaStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KnativeEventingKafkaStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type KnativeEventingKafkaStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (KnativeEventingKafkaStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KnativeEventingKafkaStatusConditions)(nil)).Elem()
}

func (o KnativeEventingKafkaStatusConditionsArrayOutput) ToKnativeEventingKafkaStatusConditionsArrayOutput() KnativeEventingKafkaStatusConditionsArrayOutput {
	return o
}

func (o KnativeEventingKafkaStatusConditionsArrayOutput) ToKnativeEventingKafkaStatusConditionsArrayOutputWithContext(ctx context.Context) KnativeEventingKafkaStatusConditionsArrayOutput {
	return o
}

func (o KnativeEventingKafkaStatusConditionsArrayOutput) Index(i pulumi.IntInput) KnativeEventingKafkaStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KnativeEventingKafkaStatusConditions {
		return vs[0].([]KnativeEventingKafkaStatusConditions)[vs[1].(int)]
	}).(KnativeEventingKafkaStatusConditionsOutput)
}

func init() {
	pulumi.RegisterOutputType(KnativeEventingKafkaTypeOutput{})
	pulumi.RegisterOutputType(KnativeEventingKafkaMetadataOutput{})
	pulumi.RegisterOutputType(KnativeEventingKafkaSpecOutput{})
	pulumi.RegisterOutputType(KnativeEventingKafkaSpecPtrOutput{})
	pulumi.RegisterOutputType(KnativeEventingKafkaStatusOutput{})
	pulumi.RegisterOutputType(KnativeEventingKafkaStatusPtrOutput{})
	pulumi.RegisterOutputType(KnativeEventingKafkaStatusConditionsOutput{})
	pulumi.RegisterOutputType(KnativeEventingKafkaStatusConditionsArrayOutput{})
}

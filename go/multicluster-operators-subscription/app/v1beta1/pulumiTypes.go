// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Application is the Schema for the applications API
type ApplicationType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ApplicationSpec defines the specification for an Application.
	Spec *ApplicationSpec `pulumi:"spec"`
	// ApplicationStatus defines controller's the observed state of Application
	Status *ApplicationStatus `pulumi:"status"`
}

// ApplicationTypeInput is an input type that accepts ApplicationTypeArgs and ApplicationTypeOutput values.
// You can construct a concrete instance of `ApplicationTypeInput` via:
//
//          ApplicationTypeArgs{...}
type ApplicationTypeInput interface {
	pulumi.Input

	ToApplicationTypeOutput() ApplicationTypeOutput
	ToApplicationTypeOutputWithContext(context.Context) ApplicationTypeOutput
}

// Application is the Schema for the applications API
type ApplicationTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// ApplicationSpec defines the specification for an Application.
	Spec ApplicationSpecPtrInput `pulumi:"spec"`
	// ApplicationStatus defines controller's the observed state of Application
	Status ApplicationStatusPtrInput `pulumi:"status"`
}

func (ApplicationTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationType)(nil)).Elem()
}

func (i ApplicationTypeArgs) ToApplicationTypeOutput() ApplicationTypeOutput {
	return i.ToApplicationTypeOutputWithContext(context.Background())
}

func (i ApplicationTypeArgs) ToApplicationTypeOutputWithContext(ctx context.Context) ApplicationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeOutput)
}

// Application is the Schema for the applications API
type ApplicationTypeOutput struct{ *pulumi.OutputState }

func (ApplicationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationType)(nil)).Elem()
}

func (o ApplicationTypeOutput) ToApplicationTypeOutput() ApplicationTypeOutput {
	return o
}

func (o ApplicationTypeOutput) ToApplicationTypeOutputWithContext(ctx context.Context) ApplicationTypeOutput {
	return o
}

func (o ApplicationTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ApplicationTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ApplicationTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ApplicationType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// ApplicationSpec defines the specification for an Application.
func (o ApplicationTypeOutput) Spec() ApplicationSpecPtrOutput {
	return o.ApplyT(func(v ApplicationType) *ApplicationSpec { return v.Spec }).(ApplicationSpecPtrOutput)
}

// ApplicationStatus defines controller's the observed state of Application
func (o ApplicationTypeOutput) Status() ApplicationStatusPtrOutput {
	return o.ApplyT(func(v ApplicationType) *ApplicationStatus { return v.Status }).(ApplicationStatusPtrOutput)
}

// ApplicationSpec defines the specification for an Application.
type ApplicationSpec struct {
	// AddOwnerRef objects - flag to indicate if we need to add OwnerRefs to matching objects Matching is done by using Selector to query all ComponentGroupKinds
	AddOwnerRef *bool `pulumi:"addOwnerRef"`
	// AssemblyPhase represents the current phase of the application's assembly. An empty value is equivalent to "Succeeded".
	AssemblyPhase *string `pulumi:"assemblyPhase"`
	// ComponentGroupKinds is a list of Kinds for Application's components (e.g. Deployments, Pods, Services, CRDs). It can be used in conjunction with the Application's Selector to list or watch the Applications components.
	ComponentKinds []ApplicationSpecComponentKinds `pulumi:"componentKinds"`
	// Descriptor regroups information and metadata about an application.
	Descriptor *ApplicationSpecDescriptor `pulumi:"descriptor"`
	// Info contains human readable key,value pairs for the Application.
	Info []ApplicationSpecInfo `pulumi:"info"`
	// Selector is a label query over kinds that created by the application. It must match the component objects' labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	Selector *ApplicationSpecSelector `pulumi:"selector"`
}

// ApplicationSpecInput is an input type that accepts ApplicationSpecArgs and ApplicationSpecOutput values.
// You can construct a concrete instance of `ApplicationSpecInput` via:
//
//          ApplicationSpecArgs{...}
type ApplicationSpecInput interface {
	pulumi.Input

	ToApplicationSpecOutput() ApplicationSpecOutput
	ToApplicationSpecOutputWithContext(context.Context) ApplicationSpecOutput
}

// ApplicationSpec defines the specification for an Application.
type ApplicationSpecArgs struct {
	// AddOwnerRef objects - flag to indicate if we need to add OwnerRefs to matching objects Matching is done by using Selector to query all ComponentGroupKinds
	AddOwnerRef pulumi.BoolPtrInput `pulumi:"addOwnerRef"`
	// AssemblyPhase represents the current phase of the application's assembly. An empty value is equivalent to "Succeeded".
	AssemblyPhase pulumi.StringPtrInput `pulumi:"assemblyPhase"`
	// ComponentGroupKinds is a list of Kinds for Application's components (e.g. Deployments, Pods, Services, CRDs). It can be used in conjunction with the Application's Selector to list or watch the Applications components.
	ComponentKinds ApplicationSpecComponentKindsArrayInput `pulumi:"componentKinds"`
	// Descriptor regroups information and metadata about an application.
	Descriptor ApplicationSpecDescriptorPtrInput `pulumi:"descriptor"`
	// Info contains human readable key,value pairs for the Application.
	Info ApplicationSpecInfoArrayInput `pulumi:"info"`
	// Selector is a label query over kinds that created by the application. It must match the component objects' labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	Selector ApplicationSpecSelectorPtrInput `pulumi:"selector"`
}

func (ApplicationSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpec)(nil)).Elem()
}

func (i ApplicationSpecArgs) ToApplicationSpecOutput() ApplicationSpecOutput {
	return i.ToApplicationSpecOutputWithContext(context.Background())
}

func (i ApplicationSpecArgs) ToApplicationSpecOutputWithContext(ctx context.Context) ApplicationSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecOutput)
}

func (i ApplicationSpecArgs) ToApplicationSpecPtrOutput() ApplicationSpecPtrOutput {
	return i.ToApplicationSpecPtrOutputWithContext(context.Background())
}

func (i ApplicationSpecArgs) ToApplicationSpecPtrOutputWithContext(ctx context.Context) ApplicationSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecOutput).ToApplicationSpecPtrOutputWithContext(ctx)
}

// ApplicationSpecPtrInput is an input type that accepts ApplicationSpecArgs, ApplicationSpecPtr and ApplicationSpecPtrOutput values.
// You can construct a concrete instance of `ApplicationSpecPtrInput` via:
//
//          ApplicationSpecArgs{...}
//
//  or:
//
//          nil
type ApplicationSpecPtrInput interface {
	pulumi.Input

	ToApplicationSpecPtrOutput() ApplicationSpecPtrOutput
	ToApplicationSpecPtrOutputWithContext(context.Context) ApplicationSpecPtrOutput
}

type applicationSpecPtrType ApplicationSpecArgs

func ApplicationSpecPtr(v *ApplicationSpecArgs) ApplicationSpecPtrInput {
	return (*applicationSpecPtrType)(v)
}

func (*applicationSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpec)(nil)).Elem()
}

func (i *applicationSpecPtrType) ToApplicationSpecPtrOutput() ApplicationSpecPtrOutput {
	return i.ToApplicationSpecPtrOutputWithContext(context.Background())
}

func (i *applicationSpecPtrType) ToApplicationSpecPtrOutputWithContext(ctx context.Context) ApplicationSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecPtrOutput)
}

// ApplicationSpec defines the specification for an Application.
type ApplicationSpecOutput struct{ *pulumi.OutputState }

func (ApplicationSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpec)(nil)).Elem()
}

func (o ApplicationSpecOutput) ToApplicationSpecOutput() ApplicationSpecOutput {
	return o
}

func (o ApplicationSpecOutput) ToApplicationSpecOutputWithContext(ctx context.Context) ApplicationSpecOutput {
	return o
}

func (o ApplicationSpecOutput) ToApplicationSpecPtrOutput() ApplicationSpecPtrOutput {
	return o.ToApplicationSpecPtrOutputWithContext(context.Background())
}

func (o ApplicationSpecOutput) ToApplicationSpecPtrOutputWithContext(ctx context.Context) ApplicationSpecPtrOutput {
	return o.ApplyT(func(v ApplicationSpec) *ApplicationSpec {
		return &v
	}).(ApplicationSpecPtrOutput)
}

// AddOwnerRef objects - flag to indicate if we need to add OwnerRefs to matching objects Matching is done by using Selector to query all ComponentGroupKinds
func (o ApplicationSpecOutput) AddOwnerRef() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationSpec) *bool { return v.AddOwnerRef }).(pulumi.BoolPtrOutput)
}

// AssemblyPhase represents the current phase of the application's assembly. An empty value is equivalent to "Succeeded".
func (o ApplicationSpecOutput) AssemblyPhase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpec) *string { return v.AssemblyPhase }).(pulumi.StringPtrOutput)
}

// ComponentGroupKinds is a list of Kinds for Application's components (e.g. Deployments, Pods, Services, CRDs). It can be used in conjunction with the Application's Selector to list or watch the Applications components.
func (o ApplicationSpecOutput) ComponentKinds() ApplicationSpecComponentKindsArrayOutput {
	return o.ApplyT(func(v ApplicationSpec) []ApplicationSpecComponentKinds { return v.ComponentKinds }).(ApplicationSpecComponentKindsArrayOutput)
}

// Descriptor regroups information and metadata about an application.
func (o ApplicationSpecOutput) Descriptor() ApplicationSpecDescriptorPtrOutput {
	return o.ApplyT(func(v ApplicationSpec) *ApplicationSpecDescriptor { return v.Descriptor }).(ApplicationSpecDescriptorPtrOutput)
}

// Info contains human readable key,value pairs for the Application.
func (o ApplicationSpecOutput) Info() ApplicationSpecInfoArrayOutput {
	return o.ApplyT(func(v ApplicationSpec) []ApplicationSpecInfo { return v.Info }).(ApplicationSpecInfoArrayOutput)
}

// Selector is a label query over kinds that created by the application. It must match the component objects' labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o ApplicationSpecOutput) Selector() ApplicationSpecSelectorPtrOutput {
	return o.ApplyT(func(v ApplicationSpec) *ApplicationSpecSelector { return v.Selector }).(ApplicationSpecSelectorPtrOutput)
}

type ApplicationSpecPtrOutput struct{ *pulumi.OutputState }

func (ApplicationSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpec)(nil)).Elem()
}

func (o ApplicationSpecPtrOutput) ToApplicationSpecPtrOutput() ApplicationSpecPtrOutput {
	return o
}

func (o ApplicationSpecPtrOutput) ToApplicationSpecPtrOutputWithContext(ctx context.Context) ApplicationSpecPtrOutput {
	return o
}

func (o ApplicationSpecPtrOutput) Elem() ApplicationSpecOutput {
	return o.ApplyT(func(v *ApplicationSpec) ApplicationSpec { return *v }).(ApplicationSpecOutput)
}

// AddOwnerRef objects - flag to indicate if we need to add OwnerRefs to matching objects Matching is done by using Selector to query all ComponentGroupKinds
func (o ApplicationSpecPtrOutput) AddOwnerRef() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationSpec) *bool {
		if v == nil {
			return nil
		}
		return v.AddOwnerRef
	}).(pulumi.BoolPtrOutput)
}

// AssemblyPhase represents the current phase of the application's assembly. An empty value is equivalent to "Succeeded".
func (o ApplicationSpecPtrOutput) AssemblyPhase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpec) *string {
		if v == nil {
			return nil
		}
		return v.AssemblyPhase
	}).(pulumi.StringPtrOutput)
}

// ComponentGroupKinds is a list of Kinds for Application's components (e.g. Deployments, Pods, Services, CRDs). It can be used in conjunction with the Application's Selector to list or watch the Applications components.
func (o ApplicationSpecPtrOutput) ComponentKinds() ApplicationSpecComponentKindsArrayOutput {
	return o.ApplyT(func(v *ApplicationSpec) []ApplicationSpecComponentKinds {
		if v == nil {
			return nil
		}
		return v.ComponentKinds
	}).(ApplicationSpecComponentKindsArrayOutput)
}

// Descriptor regroups information and metadata about an application.
func (o ApplicationSpecPtrOutput) Descriptor() ApplicationSpecDescriptorPtrOutput {
	return o.ApplyT(func(v *ApplicationSpec) *ApplicationSpecDescriptor {
		if v == nil {
			return nil
		}
		return v.Descriptor
	}).(ApplicationSpecDescriptorPtrOutput)
}

// Info contains human readable key,value pairs for the Application.
func (o ApplicationSpecPtrOutput) Info() ApplicationSpecInfoArrayOutput {
	return o.ApplyT(func(v *ApplicationSpec) []ApplicationSpecInfo {
		if v == nil {
			return nil
		}
		return v.Info
	}).(ApplicationSpecInfoArrayOutput)
}

// Selector is a label query over kinds that created by the application. It must match the component objects' labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
func (o ApplicationSpecPtrOutput) Selector() ApplicationSpecSelectorPtrOutput {
	return o.ApplyT(func(v *ApplicationSpec) *ApplicationSpecSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(ApplicationSpecSelectorPtrOutput)
}

// GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
type ApplicationSpecComponentKinds struct {
	Group string `pulumi:"group"`
	Kind  string `pulumi:"kind"`
}

// ApplicationSpecComponentKindsInput is an input type that accepts ApplicationSpecComponentKindsArgs and ApplicationSpecComponentKindsOutput values.
// You can construct a concrete instance of `ApplicationSpecComponentKindsInput` via:
//
//          ApplicationSpecComponentKindsArgs{...}
type ApplicationSpecComponentKindsInput interface {
	pulumi.Input

	ToApplicationSpecComponentKindsOutput() ApplicationSpecComponentKindsOutput
	ToApplicationSpecComponentKindsOutputWithContext(context.Context) ApplicationSpecComponentKindsOutput
}

// GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
type ApplicationSpecComponentKindsArgs struct {
	Group pulumi.StringInput `pulumi:"group"`
	Kind  pulumi.StringInput `pulumi:"kind"`
}

func (ApplicationSpecComponentKindsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecComponentKinds)(nil)).Elem()
}

func (i ApplicationSpecComponentKindsArgs) ToApplicationSpecComponentKindsOutput() ApplicationSpecComponentKindsOutput {
	return i.ToApplicationSpecComponentKindsOutputWithContext(context.Background())
}

func (i ApplicationSpecComponentKindsArgs) ToApplicationSpecComponentKindsOutputWithContext(ctx context.Context) ApplicationSpecComponentKindsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecComponentKindsOutput)
}

// ApplicationSpecComponentKindsArrayInput is an input type that accepts ApplicationSpecComponentKindsArray and ApplicationSpecComponentKindsArrayOutput values.
// You can construct a concrete instance of `ApplicationSpecComponentKindsArrayInput` via:
//
//          ApplicationSpecComponentKindsArray{ ApplicationSpecComponentKindsArgs{...} }
type ApplicationSpecComponentKindsArrayInput interface {
	pulumi.Input

	ToApplicationSpecComponentKindsArrayOutput() ApplicationSpecComponentKindsArrayOutput
	ToApplicationSpecComponentKindsArrayOutputWithContext(context.Context) ApplicationSpecComponentKindsArrayOutput
}

type ApplicationSpecComponentKindsArray []ApplicationSpecComponentKindsInput

func (ApplicationSpecComponentKindsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecComponentKinds)(nil)).Elem()
}

func (i ApplicationSpecComponentKindsArray) ToApplicationSpecComponentKindsArrayOutput() ApplicationSpecComponentKindsArrayOutput {
	return i.ToApplicationSpecComponentKindsArrayOutputWithContext(context.Background())
}

func (i ApplicationSpecComponentKindsArray) ToApplicationSpecComponentKindsArrayOutputWithContext(ctx context.Context) ApplicationSpecComponentKindsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecComponentKindsArrayOutput)
}

// GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types
type ApplicationSpecComponentKindsOutput struct{ *pulumi.OutputState }

func (ApplicationSpecComponentKindsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecComponentKinds)(nil)).Elem()
}

func (o ApplicationSpecComponentKindsOutput) ToApplicationSpecComponentKindsOutput() ApplicationSpecComponentKindsOutput {
	return o
}

func (o ApplicationSpecComponentKindsOutput) ToApplicationSpecComponentKindsOutputWithContext(ctx context.Context) ApplicationSpecComponentKindsOutput {
	return o
}

func (o ApplicationSpecComponentKindsOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecComponentKinds) string { return v.Group }).(pulumi.StringOutput)
}

func (o ApplicationSpecComponentKindsOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecComponentKinds) string { return v.Kind }).(pulumi.StringOutput)
}

type ApplicationSpecComponentKindsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSpecComponentKindsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecComponentKinds)(nil)).Elem()
}

func (o ApplicationSpecComponentKindsArrayOutput) ToApplicationSpecComponentKindsArrayOutput() ApplicationSpecComponentKindsArrayOutput {
	return o
}

func (o ApplicationSpecComponentKindsArrayOutput) ToApplicationSpecComponentKindsArrayOutputWithContext(ctx context.Context) ApplicationSpecComponentKindsArrayOutput {
	return o
}

func (o ApplicationSpecComponentKindsArrayOutput) Index(i pulumi.IntInput) ApplicationSpecComponentKindsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSpecComponentKinds {
		return vs[0].([]ApplicationSpecComponentKinds)[vs[1].(int)]
	}).(ApplicationSpecComponentKindsOutput)
}

// Descriptor regroups information and metadata about an application.
type ApplicationSpecDescriptor struct {
	// Description is a brief string description of the Application.
	Description *string `pulumi:"description"`
	// Icons is an optional list of icons for an application. Icon information includes the source, size, and mime type.
	Icons []ApplicationSpecDescriptorIcons `pulumi:"icons"`
	// Keywords is an optional list of key words associated with the application (e.g. MySQL, RDBMS, database).
	Keywords []string `pulumi:"keywords"`
	// Links are a list of descriptive URLs intended to be used to surface additional documentation, dashboards, etc.
	Links []ApplicationSpecDescriptorLinks `pulumi:"links"`
	// Maintainers is an optional list of maintainers of the application. The maintainers in this list maintain the the source code, images, and package for the application.
	Maintainers []ApplicationSpecDescriptorMaintainers `pulumi:"maintainers"`
	// Notes contain a human readable snippets intended as a quick start for the users of the Application. CommonMark markdown syntax may be used for rich text representation.
	Notes *string `pulumi:"notes"`
	// Owners is an optional list of the owners of the installed application. The owners of the application should be contacted in the event of a planned or unplanned disruption affecting the application.
	Owners []ApplicationSpecDescriptorOwners `pulumi:"owners"`
	// Type is the type of the application (e.g. WordPress, MySQL, Cassandra).
	Type *string `pulumi:"type"`
	// Version is an optional version indicator for the Application.
	Version *string `pulumi:"version"`
}

// ApplicationSpecDescriptorInput is an input type that accepts ApplicationSpecDescriptorArgs and ApplicationSpecDescriptorOutput values.
// You can construct a concrete instance of `ApplicationSpecDescriptorInput` via:
//
//          ApplicationSpecDescriptorArgs{...}
type ApplicationSpecDescriptorInput interface {
	pulumi.Input

	ToApplicationSpecDescriptorOutput() ApplicationSpecDescriptorOutput
	ToApplicationSpecDescriptorOutputWithContext(context.Context) ApplicationSpecDescriptorOutput
}

// Descriptor regroups information and metadata about an application.
type ApplicationSpecDescriptorArgs struct {
	// Description is a brief string description of the Application.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Icons is an optional list of icons for an application. Icon information includes the source, size, and mime type.
	Icons ApplicationSpecDescriptorIconsArrayInput `pulumi:"icons"`
	// Keywords is an optional list of key words associated with the application (e.g. MySQL, RDBMS, database).
	Keywords pulumi.StringArrayInput `pulumi:"keywords"`
	// Links are a list of descriptive URLs intended to be used to surface additional documentation, dashboards, etc.
	Links ApplicationSpecDescriptorLinksArrayInput `pulumi:"links"`
	// Maintainers is an optional list of maintainers of the application. The maintainers in this list maintain the the source code, images, and package for the application.
	Maintainers ApplicationSpecDescriptorMaintainersArrayInput `pulumi:"maintainers"`
	// Notes contain a human readable snippets intended as a quick start for the users of the Application. CommonMark markdown syntax may be used for rich text representation.
	Notes pulumi.StringPtrInput `pulumi:"notes"`
	// Owners is an optional list of the owners of the installed application. The owners of the application should be contacted in the event of a planned or unplanned disruption affecting the application.
	Owners ApplicationSpecDescriptorOwnersArrayInput `pulumi:"owners"`
	// Type is the type of the application (e.g. WordPress, MySQL, Cassandra).
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Version is an optional version indicator for the Application.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ApplicationSpecDescriptorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecDescriptor)(nil)).Elem()
}

func (i ApplicationSpecDescriptorArgs) ToApplicationSpecDescriptorOutput() ApplicationSpecDescriptorOutput {
	return i.ToApplicationSpecDescriptorOutputWithContext(context.Background())
}

func (i ApplicationSpecDescriptorArgs) ToApplicationSpecDescriptorOutputWithContext(ctx context.Context) ApplicationSpecDescriptorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecDescriptorOutput)
}

func (i ApplicationSpecDescriptorArgs) ToApplicationSpecDescriptorPtrOutput() ApplicationSpecDescriptorPtrOutput {
	return i.ToApplicationSpecDescriptorPtrOutputWithContext(context.Background())
}

func (i ApplicationSpecDescriptorArgs) ToApplicationSpecDescriptorPtrOutputWithContext(ctx context.Context) ApplicationSpecDescriptorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecDescriptorOutput).ToApplicationSpecDescriptorPtrOutputWithContext(ctx)
}

// ApplicationSpecDescriptorPtrInput is an input type that accepts ApplicationSpecDescriptorArgs, ApplicationSpecDescriptorPtr and ApplicationSpecDescriptorPtrOutput values.
// You can construct a concrete instance of `ApplicationSpecDescriptorPtrInput` via:
//
//          ApplicationSpecDescriptorArgs{...}
//
//  or:
//
//          nil
type ApplicationSpecDescriptorPtrInput interface {
	pulumi.Input

	ToApplicationSpecDescriptorPtrOutput() ApplicationSpecDescriptorPtrOutput
	ToApplicationSpecDescriptorPtrOutputWithContext(context.Context) ApplicationSpecDescriptorPtrOutput
}

type applicationSpecDescriptorPtrType ApplicationSpecDescriptorArgs

func ApplicationSpecDescriptorPtr(v *ApplicationSpecDescriptorArgs) ApplicationSpecDescriptorPtrInput {
	return (*applicationSpecDescriptorPtrType)(v)
}

func (*applicationSpecDescriptorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecDescriptor)(nil)).Elem()
}

func (i *applicationSpecDescriptorPtrType) ToApplicationSpecDescriptorPtrOutput() ApplicationSpecDescriptorPtrOutput {
	return i.ToApplicationSpecDescriptorPtrOutputWithContext(context.Background())
}

func (i *applicationSpecDescriptorPtrType) ToApplicationSpecDescriptorPtrOutputWithContext(ctx context.Context) ApplicationSpecDescriptorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecDescriptorPtrOutput)
}

// Descriptor regroups information and metadata about an application.
type ApplicationSpecDescriptorOutput struct{ *pulumi.OutputState }

func (ApplicationSpecDescriptorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecDescriptor)(nil)).Elem()
}

func (o ApplicationSpecDescriptorOutput) ToApplicationSpecDescriptorOutput() ApplicationSpecDescriptorOutput {
	return o
}

func (o ApplicationSpecDescriptorOutput) ToApplicationSpecDescriptorOutputWithContext(ctx context.Context) ApplicationSpecDescriptorOutput {
	return o
}

func (o ApplicationSpecDescriptorOutput) ToApplicationSpecDescriptorPtrOutput() ApplicationSpecDescriptorPtrOutput {
	return o.ToApplicationSpecDescriptorPtrOutputWithContext(context.Background())
}

func (o ApplicationSpecDescriptorOutput) ToApplicationSpecDescriptorPtrOutputWithContext(ctx context.Context) ApplicationSpecDescriptorPtrOutput {
	return o.ApplyT(func(v ApplicationSpecDescriptor) *ApplicationSpecDescriptor {
		return &v
	}).(ApplicationSpecDescriptorPtrOutput)
}

// Description is a brief string description of the Application.
func (o ApplicationSpecDescriptorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecDescriptor) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Icons is an optional list of icons for an application. Icon information includes the source, size, and mime type.
func (o ApplicationSpecDescriptorOutput) Icons() ApplicationSpecDescriptorIconsArrayOutput {
	return o.ApplyT(func(v ApplicationSpecDescriptor) []ApplicationSpecDescriptorIcons { return v.Icons }).(ApplicationSpecDescriptorIconsArrayOutput)
}

// Keywords is an optional list of key words associated with the application (e.g. MySQL, RDBMS, database).
func (o ApplicationSpecDescriptorOutput) Keywords() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationSpecDescriptor) []string { return v.Keywords }).(pulumi.StringArrayOutput)
}

// Links are a list of descriptive URLs intended to be used to surface additional documentation, dashboards, etc.
func (o ApplicationSpecDescriptorOutput) Links() ApplicationSpecDescriptorLinksArrayOutput {
	return o.ApplyT(func(v ApplicationSpecDescriptor) []ApplicationSpecDescriptorLinks { return v.Links }).(ApplicationSpecDescriptorLinksArrayOutput)
}

// Maintainers is an optional list of maintainers of the application. The maintainers in this list maintain the the source code, images, and package for the application.
func (o ApplicationSpecDescriptorOutput) Maintainers() ApplicationSpecDescriptorMaintainersArrayOutput {
	return o.ApplyT(func(v ApplicationSpecDescriptor) []ApplicationSpecDescriptorMaintainers { return v.Maintainers }).(ApplicationSpecDescriptorMaintainersArrayOutput)
}

// Notes contain a human readable snippets intended as a quick start for the users of the Application. CommonMark markdown syntax may be used for rich text representation.
func (o ApplicationSpecDescriptorOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecDescriptor) *string { return v.Notes }).(pulumi.StringPtrOutput)
}

// Owners is an optional list of the owners of the installed application. The owners of the application should be contacted in the event of a planned or unplanned disruption affecting the application.
func (o ApplicationSpecDescriptorOutput) Owners() ApplicationSpecDescriptorOwnersArrayOutput {
	return o.ApplyT(func(v ApplicationSpecDescriptor) []ApplicationSpecDescriptorOwners { return v.Owners }).(ApplicationSpecDescriptorOwnersArrayOutput)
}

// Type is the type of the application (e.g. WordPress, MySQL, Cassandra).
func (o ApplicationSpecDescriptorOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecDescriptor) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Version is an optional version indicator for the Application.
func (o ApplicationSpecDescriptorOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecDescriptor) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ApplicationSpecDescriptorPtrOutput struct{ *pulumi.OutputState }

func (ApplicationSpecDescriptorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecDescriptor)(nil)).Elem()
}

func (o ApplicationSpecDescriptorPtrOutput) ToApplicationSpecDescriptorPtrOutput() ApplicationSpecDescriptorPtrOutput {
	return o
}

func (o ApplicationSpecDescriptorPtrOutput) ToApplicationSpecDescriptorPtrOutputWithContext(ctx context.Context) ApplicationSpecDescriptorPtrOutput {
	return o
}

func (o ApplicationSpecDescriptorPtrOutput) Elem() ApplicationSpecDescriptorOutput {
	return o.ApplyT(func(v *ApplicationSpecDescriptor) ApplicationSpecDescriptor { return *v }).(ApplicationSpecDescriptorOutput)
}

// Description is a brief string description of the Application.
func (o ApplicationSpecDescriptorPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecDescriptor) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Icons is an optional list of icons for an application. Icon information includes the source, size, and mime type.
func (o ApplicationSpecDescriptorPtrOutput) Icons() ApplicationSpecDescriptorIconsArrayOutput {
	return o.ApplyT(func(v *ApplicationSpecDescriptor) []ApplicationSpecDescriptorIcons {
		if v == nil {
			return nil
		}
		return v.Icons
	}).(ApplicationSpecDescriptorIconsArrayOutput)
}

// Keywords is an optional list of key words associated with the application (e.g. MySQL, RDBMS, database).
func (o ApplicationSpecDescriptorPtrOutput) Keywords() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationSpecDescriptor) []string {
		if v == nil {
			return nil
		}
		return v.Keywords
	}).(pulumi.StringArrayOutput)
}

// Links are a list of descriptive URLs intended to be used to surface additional documentation, dashboards, etc.
func (o ApplicationSpecDescriptorPtrOutput) Links() ApplicationSpecDescriptorLinksArrayOutput {
	return o.ApplyT(func(v *ApplicationSpecDescriptor) []ApplicationSpecDescriptorLinks {
		if v == nil {
			return nil
		}
		return v.Links
	}).(ApplicationSpecDescriptorLinksArrayOutput)
}

// Maintainers is an optional list of maintainers of the application. The maintainers in this list maintain the the source code, images, and package for the application.
func (o ApplicationSpecDescriptorPtrOutput) Maintainers() ApplicationSpecDescriptorMaintainersArrayOutput {
	return o.ApplyT(func(v *ApplicationSpecDescriptor) []ApplicationSpecDescriptorMaintainers {
		if v == nil {
			return nil
		}
		return v.Maintainers
	}).(ApplicationSpecDescriptorMaintainersArrayOutput)
}

// Notes contain a human readable snippets intended as a quick start for the users of the Application. CommonMark markdown syntax may be used for rich text representation.
func (o ApplicationSpecDescriptorPtrOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecDescriptor) *string {
		if v == nil {
			return nil
		}
		return v.Notes
	}).(pulumi.StringPtrOutput)
}

// Owners is an optional list of the owners of the installed application. The owners of the application should be contacted in the event of a planned or unplanned disruption affecting the application.
func (o ApplicationSpecDescriptorPtrOutput) Owners() ApplicationSpecDescriptorOwnersArrayOutput {
	return o.ApplyT(func(v *ApplicationSpecDescriptor) []ApplicationSpecDescriptorOwners {
		if v == nil {
			return nil
		}
		return v.Owners
	}).(ApplicationSpecDescriptorOwnersArrayOutput)
}

// Type is the type of the application (e.g. WordPress, MySQL, Cassandra).
func (o ApplicationSpecDescriptorPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecDescriptor) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Version is an optional version indicator for the Application.
func (o ApplicationSpecDescriptorPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecDescriptor) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// ImageSpec contains information about an image used as an icon.
type ApplicationSpecDescriptorIcons struct {
	// (optional) The size of the image in pixels (e.g., 25x25).
	Size *string `pulumi:"size"`
	// The source for image represented as either an absolute URL to the image or a Data URL containing the image. Data URLs are defined in RFC 2397.
	Src string `pulumi:"src"`
	// (optional) The mine type of the image (e.g., "image/png").
	Type *string `pulumi:"type"`
}

// ApplicationSpecDescriptorIconsInput is an input type that accepts ApplicationSpecDescriptorIconsArgs and ApplicationSpecDescriptorIconsOutput values.
// You can construct a concrete instance of `ApplicationSpecDescriptorIconsInput` via:
//
//          ApplicationSpecDescriptorIconsArgs{...}
type ApplicationSpecDescriptorIconsInput interface {
	pulumi.Input

	ToApplicationSpecDescriptorIconsOutput() ApplicationSpecDescriptorIconsOutput
	ToApplicationSpecDescriptorIconsOutputWithContext(context.Context) ApplicationSpecDescriptorIconsOutput
}

// ImageSpec contains information about an image used as an icon.
type ApplicationSpecDescriptorIconsArgs struct {
	// (optional) The size of the image in pixels (e.g., 25x25).
	Size pulumi.StringPtrInput `pulumi:"size"`
	// The source for image represented as either an absolute URL to the image or a Data URL containing the image. Data URLs are defined in RFC 2397.
	Src pulumi.StringInput `pulumi:"src"`
	// (optional) The mine type of the image (e.g., "image/png").
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ApplicationSpecDescriptorIconsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecDescriptorIcons)(nil)).Elem()
}

func (i ApplicationSpecDescriptorIconsArgs) ToApplicationSpecDescriptorIconsOutput() ApplicationSpecDescriptorIconsOutput {
	return i.ToApplicationSpecDescriptorIconsOutputWithContext(context.Background())
}

func (i ApplicationSpecDescriptorIconsArgs) ToApplicationSpecDescriptorIconsOutputWithContext(ctx context.Context) ApplicationSpecDescriptorIconsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecDescriptorIconsOutput)
}

// ApplicationSpecDescriptorIconsArrayInput is an input type that accepts ApplicationSpecDescriptorIconsArray and ApplicationSpecDescriptorIconsArrayOutput values.
// You can construct a concrete instance of `ApplicationSpecDescriptorIconsArrayInput` via:
//
//          ApplicationSpecDescriptorIconsArray{ ApplicationSpecDescriptorIconsArgs{...} }
type ApplicationSpecDescriptorIconsArrayInput interface {
	pulumi.Input

	ToApplicationSpecDescriptorIconsArrayOutput() ApplicationSpecDescriptorIconsArrayOutput
	ToApplicationSpecDescriptorIconsArrayOutputWithContext(context.Context) ApplicationSpecDescriptorIconsArrayOutput
}

type ApplicationSpecDescriptorIconsArray []ApplicationSpecDescriptorIconsInput

func (ApplicationSpecDescriptorIconsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecDescriptorIcons)(nil)).Elem()
}

func (i ApplicationSpecDescriptorIconsArray) ToApplicationSpecDescriptorIconsArrayOutput() ApplicationSpecDescriptorIconsArrayOutput {
	return i.ToApplicationSpecDescriptorIconsArrayOutputWithContext(context.Background())
}

func (i ApplicationSpecDescriptorIconsArray) ToApplicationSpecDescriptorIconsArrayOutputWithContext(ctx context.Context) ApplicationSpecDescriptorIconsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecDescriptorIconsArrayOutput)
}

// ImageSpec contains information about an image used as an icon.
type ApplicationSpecDescriptorIconsOutput struct{ *pulumi.OutputState }

func (ApplicationSpecDescriptorIconsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecDescriptorIcons)(nil)).Elem()
}

func (o ApplicationSpecDescriptorIconsOutput) ToApplicationSpecDescriptorIconsOutput() ApplicationSpecDescriptorIconsOutput {
	return o
}

func (o ApplicationSpecDescriptorIconsOutput) ToApplicationSpecDescriptorIconsOutputWithContext(ctx context.Context) ApplicationSpecDescriptorIconsOutput {
	return o
}

// (optional) The size of the image in pixels (e.g., 25x25).
func (o ApplicationSpecDescriptorIconsOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecDescriptorIcons) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The source for image represented as either an absolute URL to the image or a Data URL containing the image. Data URLs are defined in RFC 2397.
func (o ApplicationSpecDescriptorIconsOutput) Src() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecDescriptorIcons) string { return v.Src }).(pulumi.StringOutput)
}

// (optional) The mine type of the image (e.g., "image/png").
func (o ApplicationSpecDescriptorIconsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecDescriptorIcons) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ApplicationSpecDescriptorIconsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSpecDescriptorIconsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecDescriptorIcons)(nil)).Elem()
}

func (o ApplicationSpecDescriptorIconsArrayOutput) ToApplicationSpecDescriptorIconsArrayOutput() ApplicationSpecDescriptorIconsArrayOutput {
	return o
}

func (o ApplicationSpecDescriptorIconsArrayOutput) ToApplicationSpecDescriptorIconsArrayOutputWithContext(ctx context.Context) ApplicationSpecDescriptorIconsArrayOutput {
	return o
}

func (o ApplicationSpecDescriptorIconsArrayOutput) Index(i pulumi.IntInput) ApplicationSpecDescriptorIconsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSpecDescriptorIcons {
		return vs[0].([]ApplicationSpecDescriptorIcons)[vs[1].(int)]
	}).(ApplicationSpecDescriptorIconsOutput)
}

// Link contains information about an URL to surface documentation, dashboards, etc.
type ApplicationSpecDescriptorLinks struct {
	// Description is human readable content explaining the purpose of the link.
	Description *string `pulumi:"description"`
	// Url typically points at a website address.
	Url *string `pulumi:"url"`
}

// ApplicationSpecDescriptorLinksInput is an input type that accepts ApplicationSpecDescriptorLinksArgs and ApplicationSpecDescriptorLinksOutput values.
// You can construct a concrete instance of `ApplicationSpecDescriptorLinksInput` via:
//
//          ApplicationSpecDescriptorLinksArgs{...}
type ApplicationSpecDescriptorLinksInput interface {
	pulumi.Input

	ToApplicationSpecDescriptorLinksOutput() ApplicationSpecDescriptorLinksOutput
	ToApplicationSpecDescriptorLinksOutputWithContext(context.Context) ApplicationSpecDescriptorLinksOutput
}

// Link contains information about an URL to surface documentation, dashboards, etc.
type ApplicationSpecDescriptorLinksArgs struct {
	// Description is human readable content explaining the purpose of the link.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Url typically points at a website address.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (ApplicationSpecDescriptorLinksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecDescriptorLinks)(nil)).Elem()
}

func (i ApplicationSpecDescriptorLinksArgs) ToApplicationSpecDescriptorLinksOutput() ApplicationSpecDescriptorLinksOutput {
	return i.ToApplicationSpecDescriptorLinksOutputWithContext(context.Background())
}

func (i ApplicationSpecDescriptorLinksArgs) ToApplicationSpecDescriptorLinksOutputWithContext(ctx context.Context) ApplicationSpecDescriptorLinksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecDescriptorLinksOutput)
}

// ApplicationSpecDescriptorLinksArrayInput is an input type that accepts ApplicationSpecDescriptorLinksArray and ApplicationSpecDescriptorLinksArrayOutput values.
// You can construct a concrete instance of `ApplicationSpecDescriptorLinksArrayInput` via:
//
//          ApplicationSpecDescriptorLinksArray{ ApplicationSpecDescriptorLinksArgs{...} }
type ApplicationSpecDescriptorLinksArrayInput interface {
	pulumi.Input

	ToApplicationSpecDescriptorLinksArrayOutput() ApplicationSpecDescriptorLinksArrayOutput
	ToApplicationSpecDescriptorLinksArrayOutputWithContext(context.Context) ApplicationSpecDescriptorLinksArrayOutput
}

type ApplicationSpecDescriptorLinksArray []ApplicationSpecDescriptorLinksInput

func (ApplicationSpecDescriptorLinksArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecDescriptorLinks)(nil)).Elem()
}

func (i ApplicationSpecDescriptorLinksArray) ToApplicationSpecDescriptorLinksArrayOutput() ApplicationSpecDescriptorLinksArrayOutput {
	return i.ToApplicationSpecDescriptorLinksArrayOutputWithContext(context.Background())
}

func (i ApplicationSpecDescriptorLinksArray) ToApplicationSpecDescriptorLinksArrayOutputWithContext(ctx context.Context) ApplicationSpecDescriptorLinksArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecDescriptorLinksArrayOutput)
}

// Link contains information about an URL to surface documentation, dashboards, etc.
type ApplicationSpecDescriptorLinksOutput struct{ *pulumi.OutputState }

func (ApplicationSpecDescriptorLinksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecDescriptorLinks)(nil)).Elem()
}

func (o ApplicationSpecDescriptorLinksOutput) ToApplicationSpecDescriptorLinksOutput() ApplicationSpecDescriptorLinksOutput {
	return o
}

func (o ApplicationSpecDescriptorLinksOutput) ToApplicationSpecDescriptorLinksOutputWithContext(ctx context.Context) ApplicationSpecDescriptorLinksOutput {
	return o
}

// Description is human readable content explaining the purpose of the link.
func (o ApplicationSpecDescriptorLinksOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecDescriptorLinks) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Url typically points at a website address.
func (o ApplicationSpecDescriptorLinksOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecDescriptorLinks) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type ApplicationSpecDescriptorLinksArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSpecDescriptorLinksArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecDescriptorLinks)(nil)).Elem()
}

func (o ApplicationSpecDescriptorLinksArrayOutput) ToApplicationSpecDescriptorLinksArrayOutput() ApplicationSpecDescriptorLinksArrayOutput {
	return o
}

func (o ApplicationSpecDescriptorLinksArrayOutput) ToApplicationSpecDescriptorLinksArrayOutputWithContext(ctx context.Context) ApplicationSpecDescriptorLinksArrayOutput {
	return o
}

func (o ApplicationSpecDescriptorLinksArrayOutput) Index(i pulumi.IntInput) ApplicationSpecDescriptorLinksOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSpecDescriptorLinks {
		return vs[0].([]ApplicationSpecDescriptorLinks)[vs[1].(int)]
	}).(ApplicationSpecDescriptorLinksOutput)
}

// ContactData contains information about an individual or organization.
type ApplicationSpecDescriptorMaintainers struct {
	// Email is the email address.
	Email *string `pulumi:"email"`
	// Name is the descriptive name.
	Name *string `pulumi:"name"`
	// Url could typically be a website address.
	Url *string `pulumi:"url"`
}

// ApplicationSpecDescriptorMaintainersInput is an input type that accepts ApplicationSpecDescriptorMaintainersArgs and ApplicationSpecDescriptorMaintainersOutput values.
// You can construct a concrete instance of `ApplicationSpecDescriptorMaintainersInput` via:
//
//          ApplicationSpecDescriptorMaintainersArgs{...}
type ApplicationSpecDescriptorMaintainersInput interface {
	pulumi.Input

	ToApplicationSpecDescriptorMaintainersOutput() ApplicationSpecDescriptorMaintainersOutput
	ToApplicationSpecDescriptorMaintainersOutputWithContext(context.Context) ApplicationSpecDescriptorMaintainersOutput
}

// ContactData contains information about an individual or organization.
type ApplicationSpecDescriptorMaintainersArgs struct {
	// Email is the email address.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// Name is the descriptive name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Url could typically be a website address.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (ApplicationSpecDescriptorMaintainersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecDescriptorMaintainers)(nil)).Elem()
}

func (i ApplicationSpecDescriptorMaintainersArgs) ToApplicationSpecDescriptorMaintainersOutput() ApplicationSpecDescriptorMaintainersOutput {
	return i.ToApplicationSpecDescriptorMaintainersOutputWithContext(context.Background())
}

func (i ApplicationSpecDescriptorMaintainersArgs) ToApplicationSpecDescriptorMaintainersOutputWithContext(ctx context.Context) ApplicationSpecDescriptorMaintainersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecDescriptorMaintainersOutput)
}

// ApplicationSpecDescriptorMaintainersArrayInput is an input type that accepts ApplicationSpecDescriptorMaintainersArray and ApplicationSpecDescriptorMaintainersArrayOutput values.
// You can construct a concrete instance of `ApplicationSpecDescriptorMaintainersArrayInput` via:
//
//          ApplicationSpecDescriptorMaintainersArray{ ApplicationSpecDescriptorMaintainersArgs{...} }
type ApplicationSpecDescriptorMaintainersArrayInput interface {
	pulumi.Input

	ToApplicationSpecDescriptorMaintainersArrayOutput() ApplicationSpecDescriptorMaintainersArrayOutput
	ToApplicationSpecDescriptorMaintainersArrayOutputWithContext(context.Context) ApplicationSpecDescriptorMaintainersArrayOutput
}

type ApplicationSpecDescriptorMaintainersArray []ApplicationSpecDescriptorMaintainersInput

func (ApplicationSpecDescriptorMaintainersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecDescriptorMaintainers)(nil)).Elem()
}

func (i ApplicationSpecDescriptorMaintainersArray) ToApplicationSpecDescriptorMaintainersArrayOutput() ApplicationSpecDescriptorMaintainersArrayOutput {
	return i.ToApplicationSpecDescriptorMaintainersArrayOutputWithContext(context.Background())
}

func (i ApplicationSpecDescriptorMaintainersArray) ToApplicationSpecDescriptorMaintainersArrayOutputWithContext(ctx context.Context) ApplicationSpecDescriptorMaintainersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecDescriptorMaintainersArrayOutput)
}

// ContactData contains information about an individual or organization.
type ApplicationSpecDescriptorMaintainersOutput struct{ *pulumi.OutputState }

func (ApplicationSpecDescriptorMaintainersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecDescriptorMaintainers)(nil)).Elem()
}

func (o ApplicationSpecDescriptorMaintainersOutput) ToApplicationSpecDescriptorMaintainersOutput() ApplicationSpecDescriptorMaintainersOutput {
	return o
}

func (o ApplicationSpecDescriptorMaintainersOutput) ToApplicationSpecDescriptorMaintainersOutputWithContext(ctx context.Context) ApplicationSpecDescriptorMaintainersOutput {
	return o
}

// Email is the email address.
func (o ApplicationSpecDescriptorMaintainersOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecDescriptorMaintainers) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Name is the descriptive name.
func (o ApplicationSpecDescriptorMaintainersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecDescriptorMaintainers) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Url could typically be a website address.
func (o ApplicationSpecDescriptorMaintainersOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecDescriptorMaintainers) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type ApplicationSpecDescriptorMaintainersArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSpecDescriptorMaintainersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecDescriptorMaintainers)(nil)).Elem()
}

func (o ApplicationSpecDescriptorMaintainersArrayOutput) ToApplicationSpecDescriptorMaintainersArrayOutput() ApplicationSpecDescriptorMaintainersArrayOutput {
	return o
}

func (o ApplicationSpecDescriptorMaintainersArrayOutput) ToApplicationSpecDescriptorMaintainersArrayOutputWithContext(ctx context.Context) ApplicationSpecDescriptorMaintainersArrayOutput {
	return o
}

func (o ApplicationSpecDescriptorMaintainersArrayOutput) Index(i pulumi.IntInput) ApplicationSpecDescriptorMaintainersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSpecDescriptorMaintainers {
		return vs[0].([]ApplicationSpecDescriptorMaintainers)[vs[1].(int)]
	}).(ApplicationSpecDescriptorMaintainersOutput)
}

// ContactData contains information about an individual or organization.
type ApplicationSpecDescriptorOwners struct {
	// Email is the email address.
	Email *string `pulumi:"email"`
	// Name is the descriptive name.
	Name *string `pulumi:"name"`
	// Url could typically be a website address.
	Url *string `pulumi:"url"`
}

// ApplicationSpecDescriptorOwnersInput is an input type that accepts ApplicationSpecDescriptorOwnersArgs and ApplicationSpecDescriptorOwnersOutput values.
// You can construct a concrete instance of `ApplicationSpecDescriptorOwnersInput` via:
//
//          ApplicationSpecDescriptorOwnersArgs{...}
type ApplicationSpecDescriptorOwnersInput interface {
	pulumi.Input

	ToApplicationSpecDescriptorOwnersOutput() ApplicationSpecDescriptorOwnersOutput
	ToApplicationSpecDescriptorOwnersOutputWithContext(context.Context) ApplicationSpecDescriptorOwnersOutput
}

// ContactData contains information about an individual or organization.
type ApplicationSpecDescriptorOwnersArgs struct {
	// Email is the email address.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// Name is the descriptive name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Url could typically be a website address.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (ApplicationSpecDescriptorOwnersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecDescriptorOwners)(nil)).Elem()
}

func (i ApplicationSpecDescriptorOwnersArgs) ToApplicationSpecDescriptorOwnersOutput() ApplicationSpecDescriptorOwnersOutput {
	return i.ToApplicationSpecDescriptorOwnersOutputWithContext(context.Background())
}

func (i ApplicationSpecDescriptorOwnersArgs) ToApplicationSpecDescriptorOwnersOutputWithContext(ctx context.Context) ApplicationSpecDescriptorOwnersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecDescriptorOwnersOutput)
}

// ApplicationSpecDescriptorOwnersArrayInput is an input type that accepts ApplicationSpecDescriptorOwnersArray and ApplicationSpecDescriptorOwnersArrayOutput values.
// You can construct a concrete instance of `ApplicationSpecDescriptorOwnersArrayInput` via:
//
//          ApplicationSpecDescriptorOwnersArray{ ApplicationSpecDescriptorOwnersArgs{...} }
type ApplicationSpecDescriptorOwnersArrayInput interface {
	pulumi.Input

	ToApplicationSpecDescriptorOwnersArrayOutput() ApplicationSpecDescriptorOwnersArrayOutput
	ToApplicationSpecDescriptorOwnersArrayOutputWithContext(context.Context) ApplicationSpecDescriptorOwnersArrayOutput
}

type ApplicationSpecDescriptorOwnersArray []ApplicationSpecDescriptorOwnersInput

func (ApplicationSpecDescriptorOwnersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecDescriptorOwners)(nil)).Elem()
}

func (i ApplicationSpecDescriptorOwnersArray) ToApplicationSpecDescriptorOwnersArrayOutput() ApplicationSpecDescriptorOwnersArrayOutput {
	return i.ToApplicationSpecDescriptorOwnersArrayOutputWithContext(context.Background())
}

func (i ApplicationSpecDescriptorOwnersArray) ToApplicationSpecDescriptorOwnersArrayOutputWithContext(ctx context.Context) ApplicationSpecDescriptorOwnersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecDescriptorOwnersArrayOutput)
}

// ContactData contains information about an individual or organization.
type ApplicationSpecDescriptorOwnersOutput struct{ *pulumi.OutputState }

func (ApplicationSpecDescriptorOwnersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecDescriptorOwners)(nil)).Elem()
}

func (o ApplicationSpecDescriptorOwnersOutput) ToApplicationSpecDescriptorOwnersOutput() ApplicationSpecDescriptorOwnersOutput {
	return o
}

func (o ApplicationSpecDescriptorOwnersOutput) ToApplicationSpecDescriptorOwnersOutputWithContext(ctx context.Context) ApplicationSpecDescriptorOwnersOutput {
	return o
}

// Email is the email address.
func (o ApplicationSpecDescriptorOwnersOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecDescriptorOwners) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Name is the descriptive name.
func (o ApplicationSpecDescriptorOwnersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecDescriptorOwners) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Url could typically be a website address.
func (o ApplicationSpecDescriptorOwnersOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecDescriptorOwners) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type ApplicationSpecDescriptorOwnersArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSpecDescriptorOwnersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecDescriptorOwners)(nil)).Elem()
}

func (o ApplicationSpecDescriptorOwnersArrayOutput) ToApplicationSpecDescriptorOwnersArrayOutput() ApplicationSpecDescriptorOwnersArrayOutput {
	return o
}

func (o ApplicationSpecDescriptorOwnersArrayOutput) ToApplicationSpecDescriptorOwnersArrayOutputWithContext(ctx context.Context) ApplicationSpecDescriptorOwnersArrayOutput {
	return o
}

func (o ApplicationSpecDescriptorOwnersArrayOutput) Index(i pulumi.IntInput) ApplicationSpecDescriptorOwnersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSpecDescriptorOwners {
		return vs[0].([]ApplicationSpecDescriptorOwners)[vs[1].(int)]
	}).(ApplicationSpecDescriptorOwnersOutput)
}

// InfoItem is a human readable key,value pair containing important information about how to access the Application.
type ApplicationSpecInfo struct {
	// Name is a human readable title for this piece of information.
	Name *string `pulumi:"name"`
	// Type of the value for this InfoItem.
	Type *string `pulumi:"type"`
	// Value is human readable content.
	Value *string `pulumi:"value"`
	// ValueFrom defines a reference to derive the value from another source.
	ValueFrom *ApplicationSpecInfoValueFrom `pulumi:"valueFrom"`
}

// ApplicationSpecInfoInput is an input type that accepts ApplicationSpecInfoArgs and ApplicationSpecInfoOutput values.
// You can construct a concrete instance of `ApplicationSpecInfoInput` via:
//
//          ApplicationSpecInfoArgs{...}
type ApplicationSpecInfoInput interface {
	pulumi.Input

	ToApplicationSpecInfoOutput() ApplicationSpecInfoOutput
	ToApplicationSpecInfoOutputWithContext(context.Context) ApplicationSpecInfoOutput
}

// InfoItem is a human readable key,value pair containing important information about how to access the Application.
type ApplicationSpecInfoArgs struct {
	// Name is a human readable title for this piece of information.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Type of the value for this InfoItem.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Value is human readable content.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// ValueFrom defines a reference to derive the value from another source.
	ValueFrom ApplicationSpecInfoValueFromPtrInput `pulumi:"valueFrom"`
}

func (ApplicationSpecInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecInfo)(nil)).Elem()
}

func (i ApplicationSpecInfoArgs) ToApplicationSpecInfoOutput() ApplicationSpecInfoOutput {
	return i.ToApplicationSpecInfoOutputWithContext(context.Background())
}

func (i ApplicationSpecInfoArgs) ToApplicationSpecInfoOutputWithContext(ctx context.Context) ApplicationSpecInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecInfoOutput)
}

// ApplicationSpecInfoArrayInput is an input type that accepts ApplicationSpecInfoArray and ApplicationSpecInfoArrayOutput values.
// You can construct a concrete instance of `ApplicationSpecInfoArrayInput` via:
//
//          ApplicationSpecInfoArray{ ApplicationSpecInfoArgs{...} }
type ApplicationSpecInfoArrayInput interface {
	pulumi.Input

	ToApplicationSpecInfoArrayOutput() ApplicationSpecInfoArrayOutput
	ToApplicationSpecInfoArrayOutputWithContext(context.Context) ApplicationSpecInfoArrayOutput
}

type ApplicationSpecInfoArray []ApplicationSpecInfoInput

func (ApplicationSpecInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecInfo)(nil)).Elem()
}

func (i ApplicationSpecInfoArray) ToApplicationSpecInfoArrayOutput() ApplicationSpecInfoArrayOutput {
	return i.ToApplicationSpecInfoArrayOutputWithContext(context.Background())
}

func (i ApplicationSpecInfoArray) ToApplicationSpecInfoArrayOutputWithContext(ctx context.Context) ApplicationSpecInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecInfoArrayOutput)
}

// InfoItem is a human readable key,value pair containing important information about how to access the Application.
type ApplicationSpecInfoOutput struct{ *pulumi.OutputState }

func (ApplicationSpecInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecInfo)(nil)).Elem()
}

func (o ApplicationSpecInfoOutput) ToApplicationSpecInfoOutput() ApplicationSpecInfoOutput {
	return o
}

func (o ApplicationSpecInfoOutput) ToApplicationSpecInfoOutputWithContext(ctx context.Context) ApplicationSpecInfoOutput {
	return o
}

// Name is a human readable title for this piece of information.
func (o ApplicationSpecInfoOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfo) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Type of the value for this InfoItem.
func (o ApplicationSpecInfoOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfo) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Value is human readable content.
func (o ApplicationSpecInfoOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfo) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// ValueFrom defines a reference to derive the value from another source.
func (o ApplicationSpecInfoOutput) ValueFrom() ApplicationSpecInfoValueFromPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfo) *ApplicationSpecInfoValueFrom { return v.ValueFrom }).(ApplicationSpecInfoValueFromPtrOutput)
}

type ApplicationSpecInfoArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSpecInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecInfo)(nil)).Elem()
}

func (o ApplicationSpecInfoArrayOutput) ToApplicationSpecInfoArrayOutput() ApplicationSpecInfoArrayOutput {
	return o
}

func (o ApplicationSpecInfoArrayOutput) ToApplicationSpecInfoArrayOutputWithContext(ctx context.Context) ApplicationSpecInfoArrayOutput {
	return o
}

func (o ApplicationSpecInfoArrayOutput) Index(i pulumi.IntInput) ApplicationSpecInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSpecInfo {
		return vs[0].([]ApplicationSpecInfo)[vs[1].(int)]
	}).(ApplicationSpecInfoOutput)
}

// ValueFrom defines a reference to derive the value from another source.
type ApplicationSpecInfoValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *ApplicationSpecInfoValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Select an Ingress.
	IngressRef *ApplicationSpecInfoValueFromIngressRef `pulumi:"ingressRef"`
	// Selects a key of a Secret.
	SecretKeyRef *ApplicationSpecInfoValueFromSecretKeyRef `pulumi:"secretKeyRef"`
	// Select a Service.
	ServiceRef *ApplicationSpecInfoValueFromServiceRef `pulumi:"serviceRef"`
	// Type of source.
	Type *string `pulumi:"type"`
}

// ApplicationSpecInfoValueFromInput is an input type that accepts ApplicationSpecInfoValueFromArgs and ApplicationSpecInfoValueFromOutput values.
// You can construct a concrete instance of `ApplicationSpecInfoValueFromInput` via:
//
//          ApplicationSpecInfoValueFromArgs{...}
type ApplicationSpecInfoValueFromInput interface {
	pulumi.Input

	ToApplicationSpecInfoValueFromOutput() ApplicationSpecInfoValueFromOutput
	ToApplicationSpecInfoValueFromOutputWithContext(context.Context) ApplicationSpecInfoValueFromOutput
}

// ValueFrom defines a reference to derive the value from another source.
type ApplicationSpecInfoValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef ApplicationSpecInfoValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Select an Ingress.
	IngressRef ApplicationSpecInfoValueFromIngressRefPtrInput `pulumi:"ingressRef"`
	// Selects a key of a Secret.
	SecretKeyRef ApplicationSpecInfoValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
	// Select a Service.
	ServiceRef ApplicationSpecInfoValueFromServiceRefPtrInput `pulumi:"serviceRef"`
	// Type of source.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ApplicationSpecInfoValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecInfoValueFrom)(nil)).Elem()
}

func (i ApplicationSpecInfoValueFromArgs) ToApplicationSpecInfoValueFromOutput() ApplicationSpecInfoValueFromOutput {
	return i.ToApplicationSpecInfoValueFromOutputWithContext(context.Background())
}

func (i ApplicationSpecInfoValueFromArgs) ToApplicationSpecInfoValueFromOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecInfoValueFromOutput)
}

func (i ApplicationSpecInfoValueFromArgs) ToApplicationSpecInfoValueFromPtrOutput() ApplicationSpecInfoValueFromPtrOutput {
	return i.ToApplicationSpecInfoValueFromPtrOutputWithContext(context.Background())
}

func (i ApplicationSpecInfoValueFromArgs) ToApplicationSpecInfoValueFromPtrOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecInfoValueFromOutput).ToApplicationSpecInfoValueFromPtrOutputWithContext(ctx)
}

// ApplicationSpecInfoValueFromPtrInput is an input type that accepts ApplicationSpecInfoValueFromArgs, ApplicationSpecInfoValueFromPtr and ApplicationSpecInfoValueFromPtrOutput values.
// You can construct a concrete instance of `ApplicationSpecInfoValueFromPtrInput` via:
//
//          ApplicationSpecInfoValueFromArgs{...}
//
//  or:
//
//          nil
type ApplicationSpecInfoValueFromPtrInput interface {
	pulumi.Input

	ToApplicationSpecInfoValueFromPtrOutput() ApplicationSpecInfoValueFromPtrOutput
	ToApplicationSpecInfoValueFromPtrOutputWithContext(context.Context) ApplicationSpecInfoValueFromPtrOutput
}

type applicationSpecInfoValueFromPtrType ApplicationSpecInfoValueFromArgs

func ApplicationSpecInfoValueFromPtr(v *ApplicationSpecInfoValueFromArgs) ApplicationSpecInfoValueFromPtrInput {
	return (*applicationSpecInfoValueFromPtrType)(v)
}

func (*applicationSpecInfoValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecInfoValueFrom)(nil)).Elem()
}

func (i *applicationSpecInfoValueFromPtrType) ToApplicationSpecInfoValueFromPtrOutput() ApplicationSpecInfoValueFromPtrOutput {
	return i.ToApplicationSpecInfoValueFromPtrOutputWithContext(context.Background())
}

func (i *applicationSpecInfoValueFromPtrType) ToApplicationSpecInfoValueFromPtrOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecInfoValueFromPtrOutput)
}

// ValueFrom defines a reference to derive the value from another source.
type ApplicationSpecInfoValueFromOutput struct{ *pulumi.OutputState }

func (ApplicationSpecInfoValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecInfoValueFrom)(nil)).Elem()
}

func (o ApplicationSpecInfoValueFromOutput) ToApplicationSpecInfoValueFromOutput() ApplicationSpecInfoValueFromOutput {
	return o
}

func (o ApplicationSpecInfoValueFromOutput) ToApplicationSpecInfoValueFromOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromOutput {
	return o
}

func (o ApplicationSpecInfoValueFromOutput) ToApplicationSpecInfoValueFromPtrOutput() ApplicationSpecInfoValueFromPtrOutput {
	return o.ToApplicationSpecInfoValueFromPtrOutputWithContext(context.Background())
}

func (o ApplicationSpecInfoValueFromOutput) ToApplicationSpecInfoValueFromPtrOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFrom) *ApplicationSpecInfoValueFrom {
		return &v
	}).(ApplicationSpecInfoValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o ApplicationSpecInfoValueFromOutput) ConfigMapKeyRef() ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFrom) *ApplicationSpecInfoValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput)
}

// Select an Ingress.
func (o ApplicationSpecInfoValueFromOutput) IngressRef() ApplicationSpecInfoValueFromIngressRefPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFrom) *ApplicationSpecInfoValueFromIngressRef { return v.IngressRef }).(ApplicationSpecInfoValueFromIngressRefPtrOutput)
}

// Selects a key of a Secret.
func (o ApplicationSpecInfoValueFromOutput) SecretKeyRef() ApplicationSpecInfoValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFrom) *ApplicationSpecInfoValueFromSecretKeyRef { return v.SecretKeyRef }).(ApplicationSpecInfoValueFromSecretKeyRefPtrOutput)
}

// Select a Service.
func (o ApplicationSpecInfoValueFromOutput) ServiceRef() ApplicationSpecInfoValueFromServiceRefPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFrom) *ApplicationSpecInfoValueFromServiceRef { return v.ServiceRef }).(ApplicationSpecInfoValueFromServiceRefPtrOutput)
}

// Type of source.
func (o ApplicationSpecInfoValueFromOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFrom) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ApplicationSpecInfoValueFromPtrOutput struct{ *pulumi.OutputState }

func (ApplicationSpecInfoValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecInfoValueFrom)(nil)).Elem()
}

func (o ApplicationSpecInfoValueFromPtrOutput) ToApplicationSpecInfoValueFromPtrOutput() ApplicationSpecInfoValueFromPtrOutput {
	return o
}

func (o ApplicationSpecInfoValueFromPtrOutput) ToApplicationSpecInfoValueFromPtrOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromPtrOutput {
	return o
}

func (o ApplicationSpecInfoValueFromPtrOutput) Elem() ApplicationSpecInfoValueFromOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFrom) ApplicationSpecInfoValueFrom { return *v }).(ApplicationSpecInfoValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o ApplicationSpecInfoValueFromPtrOutput) ConfigMapKeyRef() ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFrom) *ApplicationSpecInfoValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput)
}

// Select an Ingress.
func (o ApplicationSpecInfoValueFromPtrOutput) IngressRef() ApplicationSpecInfoValueFromIngressRefPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFrom) *ApplicationSpecInfoValueFromIngressRef {
		if v == nil {
			return nil
		}
		return v.IngressRef
	}).(ApplicationSpecInfoValueFromIngressRefPtrOutput)
}

// Selects a key of a Secret.
func (o ApplicationSpecInfoValueFromPtrOutput) SecretKeyRef() ApplicationSpecInfoValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFrom) *ApplicationSpecInfoValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(ApplicationSpecInfoValueFromSecretKeyRefPtrOutput)
}

// Select a Service.
func (o ApplicationSpecInfoValueFromPtrOutput) ServiceRef() ApplicationSpecInfoValueFromServiceRefPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFrom) *ApplicationSpecInfoValueFromServiceRef {
		if v == nil {
			return nil
		}
		return v.ServiceRef
	}).(ApplicationSpecInfoValueFromServiceRefPtrOutput)
}

// Type of source.
func (o ApplicationSpecInfoValueFromPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFrom) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a ConfigMap.
type ApplicationSpecInfoValueFromConfigMapKeyRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// The key to select.
	Key *string `pulumi:"key"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// ApplicationSpecInfoValueFromConfigMapKeyRefInput is an input type that accepts ApplicationSpecInfoValueFromConfigMapKeyRefArgs and ApplicationSpecInfoValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `ApplicationSpecInfoValueFromConfigMapKeyRefInput` via:
//
//          ApplicationSpecInfoValueFromConfigMapKeyRefArgs{...}
type ApplicationSpecInfoValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToApplicationSpecInfoValueFromConfigMapKeyRefOutput() ApplicationSpecInfoValueFromConfigMapKeyRefOutput
	ToApplicationSpecInfoValueFromConfigMapKeyRefOutputWithContext(context.Context) ApplicationSpecInfoValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type ApplicationSpecInfoValueFromConfigMapKeyRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// The key to select.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ApplicationSpecInfoValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecInfoValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i ApplicationSpecInfoValueFromConfigMapKeyRefArgs) ToApplicationSpecInfoValueFromConfigMapKeyRefOutput() ApplicationSpecInfoValueFromConfigMapKeyRefOutput {
	return i.ToApplicationSpecInfoValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i ApplicationSpecInfoValueFromConfigMapKeyRefArgs) ToApplicationSpecInfoValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecInfoValueFromConfigMapKeyRefOutput)
}

func (i ApplicationSpecInfoValueFromConfigMapKeyRefArgs) ToApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput() ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput {
	return i.ToApplicationSpecInfoValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i ApplicationSpecInfoValueFromConfigMapKeyRefArgs) ToApplicationSpecInfoValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecInfoValueFromConfigMapKeyRefOutput).ToApplicationSpecInfoValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// ApplicationSpecInfoValueFromConfigMapKeyRefPtrInput is an input type that accepts ApplicationSpecInfoValueFromConfigMapKeyRefArgs, ApplicationSpecInfoValueFromConfigMapKeyRefPtr and ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `ApplicationSpecInfoValueFromConfigMapKeyRefPtrInput` via:
//
//          ApplicationSpecInfoValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type ApplicationSpecInfoValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput() ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput
	ToApplicationSpecInfoValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput
}

type applicationSpecInfoValueFromConfigMapKeyRefPtrType ApplicationSpecInfoValueFromConfigMapKeyRefArgs

func ApplicationSpecInfoValueFromConfigMapKeyRefPtr(v *ApplicationSpecInfoValueFromConfigMapKeyRefArgs) ApplicationSpecInfoValueFromConfigMapKeyRefPtrInput {
	return (*applicationSpecInfoValueFromConfigMapKeyRefPtrType)(v)
}

func (*applicationSpecInfoValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecInfoValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *applicationSpecInfoValueFromConfigMapKeyRefPtrType) ToApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput() ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput {
	return i.ToApplicationSpecInfoValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *applicationSpecInfoValueFromConfigMapKeyRefPtrType) ToApplicationSpecInfoValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type ApplicationSpecInfoValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (ApplicationSpecInfoValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecInfoValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o ApplicationSpecInfoValueFromConfigMapKeyRefOutput) ToApplicationSpecInfoValueFromConfigMapKeyRefOutput() ApplicationSpecInfoValueFromConfigMapKeyRefOutput {
	return o
}

func (o ApplicationSpecInfoValueFromConfigMapKeyRefOutput) ToApplicationSpecInfoValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromConfigMapKeyRefOutput {
	return o
}

func (o ApplicationSpecInfoValueFromConfigMapKeyRefOutput) ToApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput() ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput {
	return o.ToApplicationSpecInfoValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o ApplicationSpecInfoValueFromConfigMapKeyRefOutput) ToApplicationSpecInfoValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromConfigMapKeyRef) *ApplicationSpecInfoValueFromConfigMapKeyRef {
		return &v
	}).(ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput)
}

// API version of the referent.
func (o ApplicationSpecInfoValueFromConfigMapKeyRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromConfigMapKeyRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o ApplicationSpecInfoValueFromConfigMapKeyRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromConfigMapKeyRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// The key to select.
func (o ApplicationSpecInfoValueFromConfigMapKeyRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromConfigMapKeyRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ApplicationSpecInfoValueFromConfigMapKeyRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromConfigMapKeyRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ApplicationSpecInfoValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o ApplicationSpecInfoValueFromConfigMapKeyRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromConfigMapKeyRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ApplicationSpecInfoValueFromConfigMapKeyRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromConfigMapKeyRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o ApplicationSpecInfoValueFromConfigMapKeyRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromConfigMapKeyRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecInfoValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput) ToApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput() ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput) ToApplicationSpecInfoValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput) Elem() ApplicationSpecInfoValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromConfigMapKeyRef) ApplicationSpecInfoValueFromConfigMapKeyRef {
		return *v
	}).(ApplicationSpecInfoValueFromConfigMapKeyRefOutput)
}

// API version of the referent.
func (o ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// The key to select.
func (o ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// Select an Ingress.
type ApplicationSpecInfoValueFromIngressRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// The optional host to select.
	Host *string `pulumi:"host"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// The optional HTTP path.
	Path *string `pulumi:"path"`
	// Protocol for the ingress
	Protocol *string `pulumi:"protocol"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// ApplicationSpecInfoValueFromIngressRefInput is an input type that accepts ApplicationSpecInfoValueFromIngressRefArgs and ApplicationSpecInfoValueFromIngressRefOutput values.
// You can construct a concrete instance of `ApplicationSpecInfoValueFromIngressRefInput` via:
//
//          ApplicationSpecInfoValueFromIngressRefArgs{...}
type ApplicationSpecInfoValueFromIngressRefInput interface {
	pulumi.Input

	ToApplicationSpecInfoValueFromIngressRefOutput() ApplicationSpecInfoValueFromIngressRefOutput
	ToApplicationSpecInfoValueFromIngressRefOutputWithContext(context.Context) ApplicationSpecInfoValueFromIngressRefOutput
}

// Select an Ingress.
type ApplicationSpecInfoValueFromIngressRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// The optional host to select.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The optional HTTP path.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Protocol for the ingress
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ApplicationSpecInfoValueFromIngressRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecInfoValueFromIngressRef)(nil)).Elem()
}

func (i ApplicationSpecInfoValueFromIngressRefArgs) ToApplicationSpecInfoValueFromIngressRefOutput() ApplicationSpecInfoValueFromIngressRefOutput {
	return i.ToApplicationSpecInfoValueFromIngressRefOutputWithContext(context.Background())
}

func (i ApplicationSpecInfoValueFromIngressRefArgs) ToApplicationSpecInfoValueFromIngressRefOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromIngressRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecInfoValueFromIngressRefOutput)
}

func (i ApplicationSpecInfoValueFromIngressRefArgs) ToApplicationSpecInfoValueFromIngressRefPtrOutput() ApplicationSpecInfoValueFromIngressRefPtrOutput {
	return i.ToApplicationSpecInfoValueFromIngressRefPtrOutputWithContext(context.Background())
}

func (i ApplicationSpecInfoValueFromIngressRefArgs) ToApplicationSpecInfoValueFromIngressRefPtrOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromIngressRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecInfoValueFromIngressRefOutput).ToApplicationSpecInfoValueFromIngressRefPtrOutputWithContext(ctx)
}

// ApplicationSpecInfoValueFromIngressRefPtrInput is an input type that accepts ApplicationSpecInfoValueFromIngressRefArgs, ApplicationSpecInfoValueFromIngressRefPtr and ApplicationSpecInfoValueFromIngressRefPtrOutput values.
// You can construct a concrete instance of `ApplicationSpecInfoValueFromIngressRefPtrInput` via:
//
//          ApplicationSpecInfoValueFromIngressRefArgs{...}
//
//  or:
//
//          nil
type ApplicationSpecInfoValueFromIngressRefPtrInput interface {
	pulumi.Input

	ToApplicationSpecInfoValueFromIngressRefPtrOutput() ApplicationSpecInfoValueFromIngressRefPtrOutput
	ToApplicationSpecInfoValueFromIngressRefPtrOutputWithContext(context.Context) ApplicationSpecInfoValueFromIngressRefPtrOutput
}

type applicationSpecInfoValueFromIngressRefPtrType ApplicationSpecInfoValueFromIngressRefArgs

func ApplicationSpecInfoValueFromIngressRefPtr(v *ApplicationSpecInfoValueFromIngressRefArgs) ApplicationSpecInfoValueFromIngressRefPtrInput {
	return (*applicationSpecInfoValueFromIngressRefPtrType)(v)
}

func (*applicationSpecInfoValueFromIngressRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecInfoValueFromIngressRef)(nil)).Elem()
}

func (i *applicationSpecInfoValueFromIngressRefPtrType) ToApplicationSpecInfoValueFromIngressRefPtrOutput() ApplicationSpecInfoValueFromIngressRefPtrOutput {
	return i.ToApplicationSpecInfoValueFromIngressRefPtrOutputWithContext(context.Background())
}

func (i *applicationSpecInfoValueFromIngressRefPtrType) ToApplicationSpecInfoValueFromIngressRefPtrOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromIngressRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecInfoValueFromIngressRefPtrOutput)
}

// Select an Ingress.
type ApplicationSpecInfoValueFromIngressRefOutput struct{ *pulumi.OutputState }

func (ApplicationSpecInfoValueFromIngressRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecInfoValueFromIngressRef)(nil)).Elem()
}

func (o ApplicationSpecInfoValueFromIngressRefOutput) ToApplicationSpecInfoValueFromIngressRefOutput() ApplicationSpecInfoValueFromIngressRefOutput {
	return o
}

func (o ApplicationSpecInfoValueFromIngressRefOutput) ToApplicationSpecInfoValueFromIngressRefOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromIngressRefOutput {
	return o
}

func (o ApplicationSpecInfoValueFromIngressRefOutput) ToApplicationSpecInfoValueFromIngressRefPtrOutput() ApplicationSpecInfoValueFromIngressRefPtrOutput {
	return o.ToApplicationSpecInfoValueFromIngressRefPtrOutputWithContext(context.Background())
}

func (o ApplicationSpecInfoValueFromIngressRefOutput) ToApplicationSpecInfoValueFromIngressRefPtrOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromIngressRefPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromIngressRef) *ApplicationSpecInfoValueFromIngressRef {
		return &v
	}).(ApplicationSpecInfoValueFromIngressRefPtrOutput)
}

// API version of the referent.
func (o ApplicationSpecInfoValueFromIngressRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromIngressRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o ApplicationSpecInfoValueFromIngressRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromIngressRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// The optional host to select.
func (o ApplicationSpecInfoValueFromIngressRefOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromIngressRef) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ApplicationSpecInfoValueFromIngressRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromIngressRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ApplicationSpecInfoValueFromIngressRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromIngressRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o ApplicationSpecInfoValueFromIngressRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromIngressRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The optional HTTP path.
func (o ApplicationSpecInfoValueFromIngressRefOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromIngressRef) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Protocol for the ingress
func (o ApplicationSpecInfoValueFromIngressRefOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromIngressRef) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ApplicationSpecInfoValueFromIngressRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromIngressRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o ApplicationSpecInfoValueFromIngressRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromIngressRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ApplicationSpecInfoValueFromIngressRefPtrOutput struct{ *pulumi.OutputState }

func (ApplicationSpecInfoValueFromIngressRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecInfoValueFromIngressRef)(nil)).Elem()
}

func (o ApplicationSpecInfoValueFromIngressRefPtrOutput) ToApplicationSpecInfoValueFromIngressRefPtrOutput() ApplicationSpecInfoValueFromIngressRefPtrOutput {
	return o
}

func (o ApplicationSpecInfoValueFromIngressRefPtrOutput) ToApplicationSpecInfoValueFromIngressRefPtrOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromIngressRefPtrOutput {
	return o
}

func (o ApplicationSpecInfoValueFromIngressRefPtrOutput) Elem() ApplicationSpecInfoValueFromIngressRefOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromIngressRef) ApplicationSpecInfoValueFromIngressRef { return *v }).(ApplicationSpecInfoValueFromIngressRefOutput)
}

// API version of the referent.
func (o ApplicationSpecInfoValueFromIngressRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromIngressRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o ApplicationSpecInfoValueFromIngressRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromIngressRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// The optional host to select.
func (o ApplicationSpecInfoValueFromIngressRefPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromIngressRef) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ApplicationSpecInfoValueFromIngressRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromIngressRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ApplicationSpecInfoValueFromIngressRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromIngressRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o ApplicationSpecInfoValueFromIngressRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromIngressRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The optional HTTP path.
func (o ApplicationSpecInfoValueFromIngressRefPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromIngressRef) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Protocol for the ingress
func (o ApplicationSpecInfoValueFromIngressRefPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromIngressRef) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ApplicationSpecInfoValueFromIngressRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromIngressRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o ApplicationSpecInfoValueFromIngressRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromIngressRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a Secret.
type ApplicationSpecInfoValueFromSecretKeyRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// The key to select.
	Key *string `pulumi:"key"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// ApplicationSpecInfoValueFromSecretKeyRefInput is an input type that accepts ApplicationSpecInfoValueFromSecretKeyRefArgs and ApplicationSpecInfoValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `ApplicationSpecInfoValueFromSecretKeyRefInput` via:
//
//          ApplicationSpecInfoValueFromSecretKeyRefArgs{...}
type ApplicationSpecInfoValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToApplicationSpecInfoValueFromSecretKeyRefOutput() ApplicationSpecInfoValueFromSecretKeyRefOutput
	ToApplicationSpecInfoValueFromSecretKeyRefOutputWithContext(context.Context) ApplicationSpecInfoValueFromSecretKeyRefOutput
}

// Selects a key of a Secret.
type ApplicationSpecInfoValueFromSecretKeyRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// The key to select.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ApplicationSpecInfoValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecInfoValueFromSecretKeyRef)(nil)).Elem()
}

func (i ApplicationSpecInfoValueFromSecretKeyRefArgs) ToApplicationSpecInfoValueFromSecretKeyRefOutput() ApplicationSpecInfoValueFromSecretKeyRefOutput {
	return i.ToApplicationSpecInfoValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i ApplicationSpecInfoValueFromSecretKeyRefArgs) ToApplicationSpecInfoValueFromSecretKeyRefOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecInfoValueFromSecretKeyRefOutput)
}

func (i ApplicationSpecInfoValueFromSecretKeyRefArgs) ToApplicationSpecInfoValueFromSecretKeyRefPtrOutput() ApplicationSpecInfoValueFromSecretKeyRefPtrOutput {
	return i.ToApplicationSpecInfoValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i ApplicationSpecInfoValueFromSecretKeyRefArgs) ToApplicationSpecInfoValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecInfoValueFromSecretKeyRefOutput).ToApplicationSpecInfoValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// ApplicationSpecInfoValueFromSecretKeyRefPtrInput is an input type that accepts ApplicationSpecInfoValueFromSecretKeyRefArgs, ApplicationSpecInfoValueFromSecretKeyRefPtr and ApplicationSpecInfoValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `ApplicationSpecInfoValueFromSecretKeyRefPtrInput` via:
//
//          ApplicationSpecInfoValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type ApplicationSpecInfoValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToApplicationSpecInfoValueFromSecretKeyRefPtrOutput() ApplicationSpecInfoValueFromSecretKeyRefPtrOutput
	ToApplicationSpecInfoValueFromSecretKeyRefPtrOutputWithContext(context.Context) ApplicationSpecInfoValueFromSecretKeyRefPtrOutput
}

type applicationSpecInfoValueFromSecretKeyRefPtrType ApplicationSpecInfoValueFromSecretKeyRefArgs

func ApplicationSpecInfoValueFromSecretKeyRefPtr(v *ApplicationSpecInfoValueFromSecretKeyRefArgs) ApplicationSpecInfoValueFromSecretKeyRefPtrInput {
	return (*applicationSpecInfoValueFromSecretKeyRefPtrType)(v)
}

func (*applicationSpecInfoValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecInfoValueFromSecretKeyRef)(nil)).Elem()
}

func (i *applicationSpecInfoValueFromSecretKeyRefPtrType) ToApplicationSpecInfoValueFromSecretKeyRefPtrOutput() ApplicationSpecInfoValueFromSecretKeyRefPtrOutput {
	return i.ToApplicationSpecInfoValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *applicationSpecInfoValueFromSecretKeyRefPtrType) ToApplicationSpecInfoValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecInfoValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a Secret.
type ApplicationSpecInfoValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (ApplicationSpecInfoValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecInfoValueFromSecretKeyRef)(nil)).Elem()
}

func (o ApplicationSpecInfoValueFromSecretKeyRefOutput) ToApplicationSpecInfoValueFromSecretKeyRefOutput() ApplicationSpecInfoValueFromSecretKeyRefOutput {
	return o
}

func (o ApplicationSpecInfoValueFromSecretKeyRefOutput) ToApplicationSpecInfoValueFromSecretKeyRefOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromSecretKeyRefOutput {
	return o
}

func (o ApplicationSpecInfoValueFromSecretKeyRefOutput) ToApplicationSpecInfoValueFromSecretKeyRefPtrOutput() ApplicationSpecInfoValueFromSecretKeyRefPtrOutput {
	return o.ToApplicationSpecInfoValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o ApplicationSpecInfoValueFromSecretKeyRefOutput) ToApplicationSpecInfoValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromSecretKeyRef) *ApplicationSpecInfoValueFromSecretKeyRef {
		return &v
	}).(ApplicationSpecInfoValueFromSecretKeyRefPtrOutput)
}

// API version of the referent.
func (o ApplicationSpecInfoValueFromSecretKeyRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromSecretKeyRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o ApplicationSpecInfoValueFromSecretKeyRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromSecretKeyRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// The key to select.
func (o ApplicationSpecInfoValueFromSecretKeyRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromSecretKeyRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ApplicationSpecInfoValueFromSecretKeyRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromSecretKeyRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ApplicationSpecInfoValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o ApplicationSpecInfoValueFromSecretKeyRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromSecretKeyRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ApplicationSpecInfoValueFromSecretKeyRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromSecretKeyRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o ApplicationSpecInfoValueFromSecretKeyRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromSecretKeyRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ApplicationSpecInfoValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (ApplicationSpecInfoValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecInfoValueFromSecretKeyRef)(nil)).Elem()
}

func (o ApplicationSpecInfoValueFromSecretKeyRefPtrOutput) ToApplicationSpecInfoValueFromSecretKeyRefPtrOutput() ApplicationSpecInfoValueFromSecretKeyRefPtrOutput {
	return o
}

func (o ApplicationSpecInfoValueFromSecretKeyRefPtrOutput) ToApplicationSpecInfoValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromSecretKeyRefPtrOutput {
	return o
}

func (o ApplicationSpecInfoValueFromSecretKeyRefPtrOutput) Elem() ApplicationSpecInfoValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromSecretKeyRef) ApplicationSpecInfoValueFromSecretKeyRef { return *v }).(ApplicationSpecInfoValueFromSecretKeyRefOutput)
}

// API version of the referent.
func (o ApplicationSpecInfoValueFromSecretKeyRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o ApplicationSpecInfoValueFromSecretKeyRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// The key to select.
func (o ApplicationSpecInfoValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ApplicationSpecInfoValueFromSecretKeyRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ApplicationSpecInfoValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o ApplicationSpecInfoValueFromSecretKeyRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ApplicationSpecInfoValueFromSecretKeyRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o ApplicationSpecInfoValueFromSecretKeyRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// Select a Service.
type ApplicationSpecInfoValueFromServiceRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// The optional HTTP path.
	Path *string `pulumi:"path"`
	// The optional port to select.
	Port *int `pulumi:"port"`
	// Protocol for the service
	Protocol *string `pulumi:"protocol"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// ApplicationSpecInfoValueFromServiceRefInput is an input type that accepts ApplicationSpecInfoValueFromServiceRefArgs and ApplicationSpecInfoValueFromServiceRefOutput values.
// You can construct a concrete instance of `ApplicationSpecInfoValueFromServiceRefInput` via:
//
//          ApplicationSpecInfoValueFromServiceRefArgs{...}
type ApplicationSpecInfoValueFromServiceRefInput interface {
	pulumi.Input

	ToApplicationSpecInfoValueFromServiceRefOutput() ApplicationSpecInfoValueFromServiceRefOutput
	ToApplicationSpecInfoValueFromServiceRefOutputWithContext(context.Context) ApplicationSpecInfoValueFromServiceRefOutput
}

// Select a Service.
type ApplicationSpecInfoValueFromServiceRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The optional HTTP path.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The optional port to select.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Protocol for the service
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ApplicationSpecInfoValueFromServiceRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecInfoValueFromServiceRef)(nil)).Elem()
}

func (i ApplicationSpecInfoValueFromServiceRefArgs) ToApplicationSpecInfoValueFromServiceRefOutput() ApplicationSpecInfoValueFromServiceRefOutput {
	return i.ToApplicationSpecInfoValueFromServiceRefOutputWithContext(context.Background())
}

func (i ApplicationSpecInfoValueFromServiceRefArgs) ToApplicationSpecInfoValueFromServiceRefOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromServiceRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecInfoValueFromServiceRefOutput)
}

func (i ApplicationSpecInfoValueFromServiceRefArgs) ToApplicationSpecInfoValueFromServiceRefPtrOutput() ApplicationSpecInfoValueFromServiceRefPtrOutput {
	return i.ToApplicationSpecInfoValueFromServiceRefPtrOutputWithContext(context.Background())
}

func (i ApplicationSpecInfoValueFromServiceRefArgs) ToApplicationSpecInfoValueFromServiceRefPtrOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromServiceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecInfoValueFromServiceRefOutput).ToApplicationSpecInfoValueFromServiceRefPtrOutputWithContext(ctx)
}

// ApplicationSpecInfoValueFromServiceRefPtrInput is an input type that accepts ApplicationSpecInfoValueFromServiceRefArgs, ApplicationSpecInfoValueFromServiceRefPtr and ApplicationSpecInfoValueFromServiceRefPtrOutput values.
// You can construct a concrete instance of `ApplicationSpecInfoValueFromServiceRefPtrInput` via:
//
//          ApplicationSpecInfoValueFromServiceRefArgs{...}
//
//  or:
//
//          nil
type ApplicationSpecInfoValueFromServiceRefPtrInput interface {
	pulumi.Input

	ToApplicationSpecInfoValueFromServiceRefPtrOutput() ApplicationSpecInfoValueFromServiceRefPtrOutput
	ToApplicationSpecInfoValueFromServiceRefPtrOutputWithContext(context.Context) ApplicationSpecInfoValueFromServiceRefPtrOutput
}

type applicationSpecInfoValueFromServiceRefPtrType ApplicationSpecInfoValueFromServiceRefArgs

func ApplicationSpecInfoValueFromServiceRefPtr(v *ApplicationSpecInfoValueFromServiceRefArgs) ApplicationSpecInfoValueFromServiceRefPtrInput {
	return (*applicationSpecInfoValueFromServiceRefPtrType)(v)
}

func (*applicationSpecInfoValueFromServiceRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecInfoValueFromServiceRef)(nil)).Elem()
}

func (i *applicationSpecInfoValueFromServiceRefPtrType) ToApplicationSpecInfoValueFromServiceRefPtrOutput() ApplicationSpecInfoValueFromServiceRefPtrOutput {
	return i.ToApplicationSpecInfoValueFromServiceRefPtrOutputWithContext(context.Background())
}

func (i *applicationSpecInfoValueFromServiceRefPtrType) ToApplicationSpecInfoValueFromServiceRefPtrOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromServiceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecInfoValueFromServiceRefPtrOutput)
}

// Select a Service.
type ApplicationSpecInfoValueFromServiceRefOutput struct{ *pulumi.OutputState }

func (ApplicationSpecInfoValueFromServiceRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecInfoValueFromServiceRef)(nil)).Elem()
}

func (o ApplicationSpecInfoValueFromServiceRefOutput) ToApplicationSpecInfoValueFromServiceRefOutput() ApplicationSpecInfoValueFromServiceRefOutput {
	return o
}

func (o ApplicationSpecInfoValueFromServiceRefOutput) ToApplicationSpecInfoValueFromServiceRefOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromServiceRefOutput {
	return o
}

func (o ApplicationSpecInfoValueFromServiceRefOutput) ToApplicationSpecInfoValueFromServiceRefPtrOutput() ApplicationSpecInfoValueFromServiceRefPtrOutput {
	return o.ToApplicationSpecInfoValueFromServiceRefPtrOutputWithContext(context.Background())
}

func (o ApplicationSpecInfoValueFromServiceRefOutput) ToApplicationSpecInfoValueFromServiceRefPtrOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromServiceRefPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromServiceRef) *ApplicationSpecInfoValueFromServiceRef {
		return &v
	}).(ApplicationSpecInfoValueFromServiceRefPtrOutput)
}

// API version of the referent.
func (o ApplicationSpecInfoValueFromServiceRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromServiceRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o ApplicationSpecInfoValueFromServiceRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromServiceRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ApplicationSpecInfoValueFromServiceRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromServiceRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ApplicationSpecInfoValueFromServiceRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromServiceRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o ApplicationSpecInfoValueFromServiceRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromServiceRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The optional HTTP path.
func (o ApplicationSpecInfoValueFromServiceRefOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromServiceRef) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The optional port to select.
func (o ApplicationSpecInfoValueFromServiceRefOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromServiceRef) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Protocol for the service
func (o ApplicationSpecInfoValueFromServiceRefOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromServiceRef) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ApplicationSpecInfoValueFromServiceRefOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromServiceRef) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o ApplicationSpecInfoValueFromServiceRefOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecInfoValueFromServiceRef) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ApplicationSpecInfoValueFromServiceRefPtrOutput struct{ *pulumi.OutputState }

func (ApplicationSpecInfoValueFromServiceRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecInfoValueFromServiceRef)(nil)).Elem()
}

func (o ApplicationSpecInfoValueFromServiceRefPtrOutput) ToApplicationSpecInfoValueFromServiceRefPtrOutput() ApplicationSpecInfoValueFromServiceRefPtrOutput {
	return o
}

func (o ApplicationSpecInfoValueFromServiceRefPtrOutput) ToApplicationSpecInfoValueFromServiceRefPtrOutputWithContext(ctx context.Context) ApplicationSpecInfoValueFromServiceRefPtrOutput {
	return o
}

func (o ApplicationSpecInfoValueFromServiceRefPtrOutput) Elem() ApplicationSpecInfoValueFromServiceRefOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromServiceRef) ApplicationSpecInfoValueFromServiceRef { return *v }).(ApplicationSpecInfoValueFromServiceRefOutput)
}

// API version of the referent.
func (o ApplicationSpecInfoValueFromServiceRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromServiceRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o ApplicationSpecInfoValueFromServiceRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromServiceRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ApplicationSpecInfoValueFromServiceRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromServiceRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ApplicationSpecInfoValueFromServiceRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromServiceRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o ApplicationSpecInfoValueFromServiceRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromServiceRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The optional HTTP path.
func (o ApplicationSpecInfoValueFromServiceRefPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromServiceRef) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// The optional port to select.
func (o ApplicationSpecInfoValueFromServiceRefPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromServiceRef) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Protocol for the service
func (o ApplicationSpecInfoValueFromServiceRefPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromServiceRef) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ApplicationSpecInfoValueFromServiceRefPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromServiceRef) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o ApplicationSpecInfoValueFromServiceRefPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecInfoValueFromServiceRef) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// Selector is a label query over kinds that created by the application. It must match the component objects' labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
type ApplicationSpecSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ApplicationSpecSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ApplicationSpecSelectorInput is an input type that accepts ApplicationSpecSelectorArgs and ApplicationSpecSelectorOutput values.
// You can construct a concrete instance of `ApplicationSpecSelectorInput` via:
//
//          ApplicationSpecSelectorArgs{...}
type ApplicationSpecSelectorInput interface {
	pulumi.Input

	ToApplicationSpecSelectorOutput() ApplicationSpecSelectorOutput
	ToApplicationSpecSelectorOutputWithContext(context.Context) ApplicationSpecSelectorOutput
}

// Selector is a label query over kinds that created by the application. It must match the component objects' labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
type ApplicationSpecSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ApplicationSpecSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ApplicationSpecSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSelector)(nil)).Elem()
}

func (i ApplicationSpecSelectorArgs) ToApplicationSpecSelectorOutput() ApplicationSpecSelectorOutput {
	return i.ToApplicationSpecSelectorOutputWithContext(context.Background())
}

func (i ApplicationSpecSelectorArgs) ToApplicationSpecSelectorOutputWithContext(ctx context.Context) ApplicationSpecSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSelectorOutput)
}

func (i ApplicationSpecSelectorArgs) ToApplicationSpecSelectorPtrOutput() ApplicationSpecSelectorPtrOutput {
	return i.ToApplicationSpecSelectorPtrOutputWithContext(context.Background())
}

func (i ApplicationSpecSelectorArgs) ToApplicationSpecSelectorPtrOutputWithContext(ctx context.Context) ApplicationSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSelectorOutput).ToApplicationSpecSelectorPtrOutputWithContext(ctx)
}

// ApplicationSpecSelectorPtrInput is an input type that accepts ApplicationSpecSelectorArgs, ApplicationSpecSelectorPtr and ApplicationSpecSelectorPtrOutput values.
// You can construct a concrete instance of `ApplicationSpecSelectorPtrInput` via:
//
//          ApplicationSpecSelectorArgs{...}
//
//  or:
//
//          nil
type ApplicationSpecSelectorPtrInput interface {
	pulumi.Input

	ToApplicationSpecSelectorPtrOutput() ApplicationSpecSelectorPtrOutput
	ToApplicationSpecSelectorPtrOutputWithContext(context.Context) ApplicationSpecSelectorPtrOutput
}

type applicationSpecSelectorPtrType ApplicationSpecSelectorArgs

func ApplicationSpecSelectorPtr(v *ApplicationSpecSelectorArgs) ApplicationSpecSelectorPtrInput {
	return (*applicationSpecSelectorPtrType)(v)
}

func (*applicationSpecSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecSelector)(nil)).Elem()
}

func (i *applicationSpecSelectorPtrType) ToApplicationSpecSelectorPtrOutput() ApplicationSpecSelectorPtrOutput {
	return i.ToApplicationSpecSelectorPtrOutputWithContext(context.Background())
}

func (i *applicationSpecSelectorPtrType) ToApplicationSpecSelectorPtrOutputWithContext(ctx context.Context) ApplicationSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSelectorPtrOutput)
}

// Selector is a label query over kinds that created by the application. It must match the component objects' labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
type ApplicationSpecSelectorOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSelector)(nil)).Elem()
}

func (o ApplicationSpecSelectorOutput) ToApplicationSpecSelectorOutput() ApplicationSpecSelectorOutput {
	return o
}

func (o ApplicationSpecSelectorOutput) ToApplicationSpecSelectorOutputWithContext(ctx context.Context) ApplicationSpecSelectorOutput {
	return o
}

func (o ApplicationSpecSelectorOutput) ToApplicationSpecSelectorPtrOutput() ApplicationSpecSelectorPtrOutput {
	return o.ToApplicationSpecSelectorPtrOutputWithContext(context.Background())
}

func (o ApplicationSpecSelectorOutput) ToApplicationSpecSelectorPtrOutputWithContext(ctx context.Context) ApplicationSpecSelectorPtrOutput {
	return o.ApplyT(func(v ApplicationSpecSelector) *ApplicationSpecSelector {
		return &v
	}).(ApplicationSpecSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ApplicationSpecSelectorOutput) MatchExpressions() ApplicationSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v ApplicationSpecSelector) []ApplicationSpecSelectorMatchExpressions { return v.MatchExpressions }).(ApplicationSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ApplicationSpecSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ApplicationSpecSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type ApplicationSpecSelectorPtrOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecSelector)(nil)).Elem()
}

func (o ApplicationSpecSelectorPtrOutput) ToApplicationSpecSelectorPtrOutput() ApplicationSpecSelectorPtrOutput {
	return o
}

func (o ApplicationSpecSelectorPtrOutput) ToApplicationSpecSelectorPtrOutputWithContext(ctx context.Context) ApplicationSpecSelectorPtrOutput {
	return o
}

func (o ApplicationSpecSelectorPtrOutput) Elem() ApplicationSpecSelectorOutput {
	return o.ApplyT(func(v *ApplicationSpecSelector) ApplicationSpecSelector { return *v }).(ApplicationSpecSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ApplicationSpecSelectorPtrOutput) MatchExpressions() ApplicationSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *ApplicationSpecSelector) []ApplicationSpecSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ApplicationSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ApplicationSpecSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ApplicationSpecSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type ApplicationSpecSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// ApplicationSpecSelectorMatchExpressionsInput is an input type that accepts ApplicationSpecSelectorMatchExpressionsArgs and ApplicationSpecSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `ApplicationSpecSelectorMatchExpressionsInput` via:
//
//          ApplicationSpecSelectorMatchExpressionsArgs{...}
type ApplicationSpecSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToApplicationSpecSelectorMatchExpressionsOutput() ApplicationSpecSelectorMatchExpressionsOutput
	ToApplicationSpecSelectorMatchExpressionsOutputWithContext(context.Context) ApplicationSpecSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type ApplicationSpecSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ApplicationSpecSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i ApplicationSpecSelectorMatchExpressionsArgs) ToApplicationSpecSelectorMatchExpressionsOutput() ApplicationSpecSelectorMatchExpressionsOutput {
	return i.ToApplicationSpecSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i ApplicationSpecSelectorMatchExpressionsArgs) ToApplicationSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) ApplicationSpecSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSelectorMatchExpressionsOutput)
}

// ApplicationSpecSelectorMatchExpressionsArrayInput is an input type that accepts ApplicationSpecSelectorMatchExpressionsArray and ApplicationSpecSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `ApplicationSpecSelectorMatchExpressionsArrayInput` via:
//
//          ApplicationSpecSelectorMatchExpressionsArray{ ApplicationSpecSelectorMatchExpressionsArgs{...} }
type ApplicationSpecSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToApplicationSpecSelectorMatchExpressionsArrayOutput() ApplicationSpecSelectorMatchExpressionsArrayOutput
	ToApplicationSpecSelectorMatchExpressionsArrayOutputWithContext(context.Context) ApplicationSpecSelectorMatchExpressionsArrayOutput
}

type ApplicationSpecSelectorMatchExpressionsArray []ApplicationSpecSelectorMatchExpressionsInput

func (ApplicationSpecSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i ApplicationSpecSelectorMatchExpressionsArray) ToApplicationSpecSelectorMatchExpressionsArrayOutput() ApplicationSpecSelectorMatchExpressionsArrayOutput {
	return i.ToApplicationSpecSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i ApplicationSpecSelectorMatchExpressionsArray) ToApplicationSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ApplicationSpecSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type ApplicationSpecSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o ApplicationSpecSelectorMatchExpressionsOutput) ToApplicationSpecSelectorMatchExpressionsOutput() ApplicationSpecSelectorMatchExpressionsOutput {
	return o
}

func (o ApplicationSpecSelectorMatchExpressionsOutput) ToApplicationSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) ApplicationSpecSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ApplicationSpecSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ApplicationSpecSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecSelectorMatchExpressions) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o ApplicationSpecSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationSpecSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ApplicationSpecSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSpecSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o ApplicationSpecSelectorMatchExpressionsArrayOutput) ToApplicationSpecSelectorMatchExpressionsArrayOutput() ApplicationSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ApplicationSpecSelectorMatchExpressionsArrayOutput) ToApplicationSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ApplicationSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ApplicationSpecSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) ApplicationSpecSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSpecSelectorMatchExpressions {
		return vs[0].([]ApplicationSpecSelectorMatchExpressions)[vs[1].(int)]
	}).(ApplicationSpecSelectorMatchExpressionsOutput)
}

// ApplicationStatus defines controller's the observed state of Application
type ApplicationStatus struct {
	// Object status array for all matching objects
	Components []ApplicationStatusComponents `pulumi:"components"`
	// ComponentsReady: status of the components in the format ready/total
	ComponentsReady *string `pulumi:"componentsReady"`
	// Conditions represents the latest state of the object
	Conditions []ApplicationStatusConditions `pulumi:"conditions"`
	// ObservedGeneration is the most recent generation observed. It corresponds to the Object's generation, which is updated on mutation by the API Server.
	ObservedGeneration *int `pulumi:"observedGeneration"`
}

// ApplicationStatusInput is an input type that accepts ApplicationStatusArgs and ApplicationStatusOutput values.
// You can construct a concrete instance of `ApplicationStatusInput` via:
//
//          ApplicationStatusArgs{...}
type ApplicationStatusInput interface {
	pulumi.Input

	ToApplicationStatusOutput() ApplicationStatusOutput
	ToApplicationStatusOutputWithContext(context.Context) ApplicationStatusOutput
}

// ApplicationStatus defines controller's the observed state of Application
type ApplicationStatusArgs struct {
	// Object status array for all matching objects
	Components ApplicationStatusComponentsArrayInput `pulumi:"components"`
	// ComponentsReady: status of the components in the format ready/total
	ComponentsReady pulumi.StringPtrInput `pulumi:"componentsReady"`
	// Conditions represents the latest state of the object
	Conditions ApplicationStatusConditionsArrayInput `pulumi:"conditions"`
	// ObservedGeneration is the most recent generation observed. It corresponds to the Object's generation, which is updated on mutation by the API Server.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
}

func (ApplicationStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatus)(nil)).Elem()
}

func (i ApplicationStatusArgs) ToApplicationStatusOutput() ApplicationStatusOutput {
	return i.ToApplicationStatusOutputWithContext(context.Background())
}

func (i ApplicationStatusArgs) ToApplicationStatusOutputWithContext(ctx context.Context) ApplicationStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOutput)
}

func (i ApplicationStatusArgs) ToApplicationStatusPtrOutput() ApplicationStatusPtrOutput {
	return i.ToApplicationStatusPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusArgs) ToApplicationStatusPtrOutputWithContext(ctx context.Context) ApplicationStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOutput).ToApplicationStatusPtrOutputWithContext(ctx)
}

// ApplicationStatusPtrInput is an input type that accepts ApplicationStatusArgs, ApplicationStatusPtr and ApplicationStatusPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusPtrInput` via:
//
//          ApplicationStatusArgs{...}
//
//  or:
//
//          nil
type ApplicationStatusPtrInput interface {
	pulumi.Input

	ToApplicationStatusPtrOutput() ApplicationStatusPtrOutput
	ToApplicationStatusPtrOutputWithContext(context.Context) ApplicationStatusPtrOutput
}

type applicationStatusPtrType ApplicationStatusArgs

func ApplicationStatusPtr(v *ApplicationStatusArgs) ApplicationStatusPtrInput {
	return (*applicationStatusPtrType)(v)
}

func (*applicationStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatus)(nil)).Elem()
}

func (i *applicationStatusPtrType) ToApplicationStatusPtrOutput() ApplicationStatusPtrOutput {
	return i.ToApplicationStatusPtrOutputWithContext(context.Background())
}

func (i *applicationStatusPtrType) ToApplicationStatusPtrOutputWithContext(ctx context.Context) ApplicationStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusPtrOutput)
}

// ApplicationStatus defines controller's the observed state of Application
type ApplicationStatusOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatus)(nil)).Elem()
}

func (o ApplicationStatusOutput) ToApplicationStatusOutput() ApplicationStatusOutput {
	return o
}

func (o ApplicationStatusOutput) ToApplicationStatusOutputWithContext(ctx context.Context) ApplicationStatusOutput {
	return o
}

func (o ApplicationStatusOutput) ToApplicationStatusPtrOutput() ApplicationStatusPtrOutput {
	return o.ToApplicationStatusPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusOutput) ToApplicationStatusPtrOutputWithContext(ctx context.Context) ApplicationStatusPtrOutput {
	return o.ApplyT(func(v ApplicationStatus) *ApplicationStatus {
		return &v
	}).(ApplicationStatusPtrOutput)
}

// Object status array for all matching objects
func (o ApplicationStatusOutput) Components() ApplicationStatusComponentsArrayOutput {
	return o.ApplyT(func(v ApplicationStatus) []ApplicationStatusComponents { return v.Components }).(ApplicationStatusComponentsArrayOutput)
}

// ComponentsReady: status of the components in the format ready/total
func (o ApplicationStatusOutput) ComponentsReady() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatus) *string { return v.ComponentsReady }).(pulumi.StringPtrOutput)
}

// Conditions represents the latest state of the object
func (o ApplicationStatusOutput) Conditions() ApplicationStatusConditionsArrayOutput {
	return o.ApplyT(func(v ApplicationStatus) []ApplicationStatusConditions { return v.Conditions }).(ApplicationStatusConditionsArrayOutput)
}

// ObservedGeneration is the most recent generation observed. It corresponds to the Object's generation, which is updated on mutation by the API Server.
func (o ApplicationStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

type ApplicationStatusPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatus)(nil)).Elem()
}

func (o ApplicationStatusPtrOutput) ToApplicationStatusPtrOutput() ApplicationStatusPtrOutput {
	return o
}

func (o ApplicationStatusPtrOutput) ToApplicationStatusPtrOutputWithContext(ctx context.Context) ApplicationStatusPtrOutput {
	return o
}

func (o ApplicationStatusPtrOutput) Elem() ApplicationStatusOutput {
	return o.ApplyT(func(v *ApplicationStatus) ApplicationStatus { return *v }).(ApplicationStatusOutput)
}

// Object status array for all matching objects
func (o ApplicationStatusPtrOutput) Components() ApplicationStatusComponentsArrayOutput {
	return o.ApplyT(func(v *ApplicationStatus) []ApplicationStatusComponents {
		if v == nil {
			return nil
		}
		return v.Components
	}).(ApplicationStatusComponentsArrayOutput)
}

// ComponentsReady: status of the components in the format ready/total
func (o ApplicationStatusPtrOutput) ComponentsReady() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatus) *string {
		if v == nil {
			return nil
		}
		return v.ComponentsReady
	}).(pulumi.StringPtrOutput)
}

// Conditions represents the latest state of the object
func (o ApplicationStatusPtrOutput) Conditions() ApplicationStatusConditionsArrayOutput {
	return o.ApplyT(func(v *ApplicationStatus) []ApplicationStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ApplicationStatusConditionsArrayOutput)
}

// ObservedGeneration is the most recent generation observed. It corresponds to the Object's generation, which is updated on mutation by the API Server.
func (o ApplicationStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// ObjectStatus is a generic status holder for objects
type ApplicationStatusComponents struct {
	// Object group
	Group *string `pulumi:"group"`
	// Kind of object
	Kind *string `pulumi:"kind"`
	// Link to object
	Link *string `pulumi:"link"`
	// Name of object
	Name *string `pulumi:"name"`
	// Status. Values: InProgress, Ready, Unknown
	Status *string `pulumi:"status"`
}

// ApplicationStatusComponentsInput is an input type that accepts ApplicationStatusComponentsArgs and ApplicationStatusComponentsOutput values.
// You can construct a concrete instance of `ApplicationStatusComponentsInput` via:
//
//          ApplicationStatusComponentsArgs{...}
type ApplicationStatusComponentsInput interface {
	pulumi.Input

	ToApplicationStatusComponentsOutput() ApplicationStatusComponentsOutput
	ToApplicationStatusComponentsOutputWithContext(context.Context) ApplicationStatusComponentsOutput
}

// ObjectStatus is a generic status holder for objects
type ApplicationStatusComponentsArgs struct {
	// Object group
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind of object
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Link to object
	Link pulumi.StringPtrInput `pulumi:"link"`
	// Name of object
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Status. Values: InProgress, Ready, Unknown
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ApplicationStatusComponentsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusComponents)(nil)).Elem()
}

func (i ApplicationStatusComponentsArgs) ToApplicationStatusComponentsOutput() ApplicationStatusComponentsOutput {
	return i.ToApplicationStatusComponentsOutputWithContext(context.Background())
}

func (i ApplicationStatusComponentsArgs) ToApplicationStatusComponentsOutputWithContext(ctx context.Context) ApplicationStatusComponentsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusComponentsOutput)
}

// ApplicationStatusComponentsArrayInput is an input type that accepts ApplicationStatusComponentsArray and ApplicationStatusComponentsArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusComponentsArrayInput` via:
//
//          ApplicationStatusComponentsArray{ ApplicationStatusComponentsArgs{...} }
type ApplicationStatusComponentsArrayInput interface {
	pulumi.Input

	ToApplicationStatusComponentsArrayOutput() ApplicationStatusComponentsArrayOutput
	ToApplicationStatusComponentsArrayOutputWithContext(context.Context) ApplicationStatusComponentsArrayOutput
}

type ApplicationStatusComponentsArray []ApplicationStatusComponentsInput

func (ApplicationStatusComponentsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusComponents)(nil)).Elem()
}

func (i ApplicationStatusComponentsArray) ToApplicationStatusComponentsArrayOutput() ApplicationStatusComponentsArrayOutput {
	return i.ToApplicationStatusComponentsArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusComponentsArray) ToApplicationStatusComponentsArrayOutputWithContext(ctx context.Context) ApplicationStatusComponentsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusComponentsArrayOutput)
}

// ObjectStatus is a generic status holder for objects
type ApplicationStatusComponentsOutput struct{ *pulumi.OutputState }

func (ApplicationStatusComponentsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusComponents)(nil)).Elem()
}

func (o ApplicationStatusComponentsOutput) ToApplicationStatusComponentsOutput() ApplicationStatusComponentsOutput {
	return o
}

func (o ApplicationStatusComponentsOutput) ToApplicationStatusComponentsOutputWithContext(ctx context.Context) ApplicationStatusComponentsOutput {
	return o
}

// Object group
func (o ApplicationStatusComponentsOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusComponents) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind of object
func (o ApplicationStatusComponentsOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusComponents) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Link to object
func (o ApplicationStatusComponentsOutput) Link() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusComponents) *string { return v.Link }).(pulumi.StringPtrOutput)
}

// Name of object
func (o ApplicationStatusComponentsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusComponents) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Status. Values: InProgress, Ready, Unknown
func (o ApplicationStatusComponentsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusComponents) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ApplicationStatusComponentsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusComponentsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusComponents)(nil)).Elem()
}

func (o ApplicationStatusComponentsArrayOutput) ToApplicationStatusComponentsArrayOutput() ApplicationStatusComponentsArrayOutput {
	return o
}

func (o ApplicationStatusComponentsArrayOutput) ToApplicationStatusComponentsArrayOutputWithContext(ctx context.Context) ApplicationStatusComponentsArrayOutput {
	return o
}

func (o ApplicationStatusComponentsArrayOutput) Index(i pulumi.IntInput) ApplicationStatusComponentsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusComponents {
		return vs[0].([]ApplicationStatusComponents)[vs[1].(int)]
	}).(ApplicationStatusComponentsOutput)
}

// Condition describes the state of an object at a certain point.
type ApplicationStatusConditions struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Last time the condition was probed
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// Type of condition.
	Type string `pulumi:"type"`
}

// ApplicationStatusConditionsInput is an input type that accepts ApplicationStatusConditionsArgs and ApplicationStatusConditionsOutput values.
// You can construct a concrete instance of `ApplicationStatusConditionsInput` via:
//
//          ApplicationStatusConditionsArgs{...}
type ApplicationStatusConditionsInput interface {
	pulumi.Input

	ToApplicationStatusConditionsOutput() ApplicationStatusConditionsOutput
	ToApplicationStatusConditionsOutputWithContext(context.Context) ApplicationStatusConditionsOutput
}

// Condition describes the state of an object at a certain point.
type ApplicationStatusConditionsArgs struct {
	// Last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Last time the condition was probed
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// Type of condition.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ApplicationStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusConditions)(nil)).Elem()
}

func (i ApplicationStatusConditionsArgs) ToApplicationStatusConditionsOutput() ApplicationStatusConditionsOutput {
	return i.ToApplicationStatusConditionsOutputWithContext(context.Background())
}

func (i ApplicationStatusConditionsArgs) ToApplicationStatusConditionsOutputWithContext(ctx context.Context) ApplicationStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusConditionsOutput)
}

// ApplicationStatusConditionsArrayInput is an input type that accepts ApplicationStatusConditionsArray and ApplicationStatusConditionsArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusConditionsArrayInput` via:
//
//          ApplicationStatusConditionsArray{ ApplicationStatusConditionsArgs{...} }
type ApplicationStatusConditionsArrayInput interface {
	pulumi.Input

	ToApplicationStatusConditionsArrayOutput() ApplicationStatusConditionsArrayOutput
	ToApplicationStatusConditionsArrayOutputWithContext(context.Context) ApplicationStatusConditionsArrayOutput
}

type ApplicationStatusConditionsArray []ApplicationStatusConditionsInput

func (ApplicationStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusConditions)(nil)).Elem()
}

func (i ApplicationStatusConditionsArray) ToApplicationStatusConditionsArrayOutput() ApplicationStatusConditionsArrayOutput {
	return i.ToApplicationStatusConditionsArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusConditionsArray) ToApplicationStatusConditionsArrayOutputWithContext(ctx context.Context) ApplicationStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusConditionsArrayOutput)
}

// Condition describes the state of an object at a certain point.
type ApplicationStatusConditionsOutput struct{ *pulumi.OutputState }

func (ApplicationStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusConditions)(nil)).Elem()
}

func (o ApplicationStatusConditionsOutput) ToApplicationStatusConditionsOutput() ApplicationStatusConditionsOutput {
	return o
}

func (o ApplicationStatusConditionsOutput) ToApplicationStatusConditionsOutputWithContext(ctx context.Context) ApplicationStatusConditionsOutput {
	return o
}

// Last time the condition transitioned from one status to another.
func (o ApplicationStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Last time the condition was probed
func (o ApplicationStatusConditionsOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusConditions) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about the transition.
func (o ApplicationStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition.
func (o ApplicationStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o ApplicationStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of condition.
func (o ApplicationStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type ApplicationStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusConditions)(nil)).Elem()
}

func (o ApplicationStatusConditionsArrayOutput) ToApplicationStatusConditionsArrayOutput() ApplicationStatusConditionsArrayOutput {
	return o
}

func (o ApplicationStatusConditionsArrayOutput) ToApplicationStatusConditionsArrayOutputWithContext(ctx context.Context) ApplicationStatusConditionsArrayOutput {
	return o
}

func (o ApplicationStatusConditionsArrayOutput) Index(i pulumi.IntInput) ApplicationStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusConditions {
		return vs[0].([]ApplicationStatusConditions)[vs[1].(int)]
	}).(ApplicationStatusConditionsOutput)
}

func init() {
	pulumi.RegisterOutputType(ApplicationTypeOutput{})
	pulumi.RegisterOutputType(ApplicationSpecOutput{})
	pulumi.RegisterOutputType(ApplicationSpecPtrOutput{})
	pulumi.RegisterOutputType(ApplicationSpecComponentKindsOutput{})
	pulumi.RegisterOutputType(ApplicationSpecComponentKindsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSpecDescriptorOutput{})
	pulumi.RegisterOutputType(ApplicationSpecDescriptorPtrOutput{})
	pulumi.RegisterOutputType(ApplicationSpecDescriptorIconsOutput{})
	pulumi.RegisterOutputType(ApplicationSpecDescriptorIconsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSpecDescriptorLinksOutput{})
	pulumi.RegisterOutputType(ApplicationSpecDescriptorLinksArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSpecDescriptorMaintainersOutput{})
	pulumi.RegisterOutputType(ApplicationSpecDescriptorMaintainersArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSpecDescriptorOwnersOutput{})
	pulumi.RegisterOutputType(ApplicationSpecDescriptorOwnersArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSpecInfoOutput{})
	pulumi.RegisterOutputType(ApplicationSpecInfoArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSpecInfoValueFromOutput{})
	pulumi.RegisterOutputType(ApplicationSpecInfoValueFromPtrOutput{})
	pulumi.RegisterOutputType(ApplicationSpecInfoValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(ApplicationSpecInfoValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(ApplicationSpecInfoValueFromIngressRefOutput{})
	pulumi.RegisterOutputType(ApplicationSpecInfoValueFromIngressRefPtrOutput{})
	pulumi.RegisterOutputType(ApplicationSpecInfoValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(ApplicationSpecInfoValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(ApplicationSpecInfoValueFromServiceRefOutput{})
	pulumi.RegisterOutputType(ApplicationSpecInfoValueFromServiceRefPtrOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSelectorOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSelectorPtrOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(ApplicationSpecSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOutput{})
	pulumi.RegisterOutputType(ApplicationStatusPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusComponentsOutput{})
	pulumi.RegisterOutputType(ApplicationStatusComponentsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusConditionsOutput{})
	pulumi.RegisterOutputType(ApplicationStatusConditionsArrayOutput{})
}

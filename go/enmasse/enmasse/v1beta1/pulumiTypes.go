// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Address describes a destination for sending and receiving messages. An Address has a type, which defines the semantics of sending messages to and receiving messages from that address. This resource is created by messaging tenants.
type AddressType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       *AddressSpec       `pulumi:"spec"`
	Status     *AddressStatus     `pulumi:"status"`
}

// AddressTypeInput is an input type that accepts AddressTypeArgs and AddressTypeOutput values.
// You can construct a concrete instance of `AddressTypeInput` via:
//
//          AddressTypeArgs{...}
type AddressTypeInput interface {
	pulumi.Input

	ToAddressTypeOutput() AddressTypeOutput
	ToAddressTypeOutputWithContext(context.Context) AddressTypeOutput
}

// Address describes a destination for sending and receiving messages. An Address has a type, which defines the semantics of sending messages to and receiving messages from that address. This resource is created by messaging tenants.
type AddressTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec       AddressSpecPtrInput       `pulumi:"spec"`
	Status     AddressStatusPtrInput     `pulumi:"status"`
}

func (AddressTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressType)(nil)).Elem()
}

func (i AddressTypeArgs) ToAddressTypeOutput() AddressTypeOutput {
	return i.ToAddressTypeOutputWithContext(context.Background())
}

func (i AddressTypeArgs) ToAddressTypeOutputWithContext(ctx context.Context) AddressTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressTypeOutput)
}

// Address describes a destination for sending and receiving messages. An Address has a type, which defines the semantics of sending messages to and receiving messages from that address. This resource is created by messaging tenants.
type AddressTypeOutput struct{ *pulumi.OutputState }

func (AddressTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressType)(nil)).Elem()
}

func (o AddressTypeOutput) ToAddressTypeOutput() AddressTypeOutput {
	return o
}

func (o AddressTypeOutput) ToAddressTypeOutputWithContext(ctx context.Context) AddressTypeOutput {
	return o
}

func (o AddressTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddressType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o AddressTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddressType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o AddressTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v AddressType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o AddressTypeOutput) Spec() AddressSpecPtrOutput {
	return o.ApplyT(func(v AddressType) *AddressSpec { return v.Spec }).(AddressSpecPtrOutput)
}

func (o AddressTypeOutput) Status() AddressStatusPtrOutput {
	return o.ApplyT(func(v AddressType) *AddressStatus { return v.Status }).(AddressStatusPtrOutput)
}

type AddressSpec struct {
	// Messaging address.
	Address string `pulumi:"address"`
	// Address forwarders for this address.
	Forwarders []AddressSpecForwarders `pulumi:"forwarders"`
	// Further restricts message time-to-live (TTL). Applies to address types queue and topic only. The maximum and minimum values must fall with the minimum/maximum range described by the plan's TTL settings.
	MessageTtl *AddressSpecMessageTtl `pulumi:"messageTtl"`
	// Plan referenced by this address.
	Plan string `pulumi:"plan"`
	// Properties that can be set for subscription type addresses.
	Subscription *AddressSpecSubscription `pulumi:"subscription"`
	// Address of topic that this subscription refers to (only applicable to subscription types).
	Topic *string `pulumi:"topic"`
	// Address type for this address.
	Type string `pulumi:"type"`
}

// AddressSpecInput is an input type that accepts AddressSpecArgs and AddressSpecOutput values.
// You can construct a concrete instance of `AddressSpecInput` via:
//
//          AddressSpecArgs{...}
type AddressSpecInput interface {
	pulumi.Input

	ToAddressSpecOutput() AddressSpecOutput
	ToAddressSpecOutputWithContext(context.Context) AddressSpecOutput
}

type AddressSpecArgs struct {
	// Messaging address.
	Address pulumi.StringInput `pulumi:"address"`
	// Address forwarders for this address.
	Forwarders AddressSpecForwardersArrayInput `pulumi:"forwarders"`
	// Further restricts message time-to-live (TTL). Applies to address types queue and topic only. The maximum and minimum values must fall with the minimum/maximum range described by the plan's TTL settings.
	MessageTtl AddressSpecMessageTtlPtrInput `pulumi:"messageTtl"`
	// Plan referenced by this address.
	Plan pulumi.StringInput `pulumi:"plan"`
	// Properties that can be set for subscription type addresses.
	Subscription AddressSpecSubscriptionPtrInput `pulumi:"subscription"`
	// Address of topic that this subscription refers to (only applicable to subscription types).
	Topic pulumi.StringPtrInput `pulumi:"topic"`
	// Address type for this address.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AddressSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressSpec)(nil)).Elem()
}

func (i AddressSpecArgs) ToAddressSpecOutput() AddressSpecOutput {
	return i.ToAddressSpecOutputWithContext(context.Background())
}

func (i AddressSpecArgs) ToAddressSpecOutputWithContext(ctx context.Context) AddressSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressSpecOutput)
}

func (i AddressSpecArgs) ToAddressSpecPtrOutput() AddressSpecPtrOutput {
	return i.ToAddressSpecPtrOutputWithContext(context.Background())
}

func (i AddressSpecArgs) ToAddressSpecPtrOutputWithContext(ctx context.Context) AddressSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressSpecOutput).ToAddressSpecPtrOutputWithContext(ctx)
}

// AddressSpecPtrInput is an input type that accepts AddressSpecArgs, AddressSpecPtr and AddressSpecPtrOutput values.
// You can construct a concrete instance of `AddressSpecPtrInput` via:
//
//          AddressSpecArgs{...}
//
//  or:
//
//          nil
type AddressSpecPtrInput interface {
	pulumi.Input

	ToAddressSpecPtrOutput() AddressSpecPtrOutput
	ToAddressSpecPtrOutputWithContext(context.Context) AddressSpecPtrOutput
}

type addressSpecPtrType AddressSpecArgs

func AddressSpecPtr(v *AddressSpecArgs) AddressSpecPtrInput {
	return (*addressSpecPtrType)(v)
}

func (*addressSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AddressSpec)(nil)).Elem()
}

func (i *addressSpecPtrType) ToAddressSpecPtrOutput() AddressSpecPtrOutput {
	return i.ToAddressSpecPtrOutputWithContext(context.Background())
}

func (i *addressSpecPtrType) ToAddressSpecPtrOutputWithContext(ctx context.Context) AddressSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressSpecPtrOutput)
}

type AddressSpecOutput struct{ *pulumi.OutputState }

func (AddressSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressSpec)(nil)).Elem()
}

func (o AddressSpecOutput) ToAddressSpecOutput() AddressSpecOutput {
	return o
}

func (o AddressSpecOutput) ToAddressSpecOutputWithContext(ctx context.Context) AddressSpecOutput {
	return o
}

func (o AddressSpecOutput) ToAddressSpecPtrOutput() AddressSpecPtrOutput {
	return o.ToAddressSpecPtrOutputWithContext(context.Background())
}

func (o AddressSpecOutput) ToAddressSpecPtrOutputWithContext(ctx context.Context) AddressSpecPtrOutput {
	return o.ApplyT(func(v AddressSpec) *AddressSpec {
		return &v
	}).(AddressSpecPtrOutput)
}

// Messaging address.
func (o AddressSpecOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v AddressSpec) string { return v.Address }).(pulumi.StringOutput)
}

// Address forwarders for this address.
func (o AddressSpecOutput) Forwarders() AddressSpecForwardersArrayOutput {
	return o.ApplyT(func(v AddressSpec) []AddressSpecForwarders { return v.Forwarders }).(AddressSpecForwardersArrayOutput)
}

// Further restricts message time-to-live (TTL). Applies to address types queue and topic only. The maximum and minimum values must fall with the minimum/maximum range described by the plan's TTL settings.
func (o AddressSpecOutput) MessageTtl() AddressSpecMessageTtlPtrOutput {
	return o.ApplyT(func(v AddressSpec) *AddressSpecMessageTtl { return v.MessageTtl }).(AddressSpecMessageTtlPtrOutput)
}

// Plan referenced by this address.
func (o AddressSpecOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v AddressSpec) string { return v.Plan }).(pulumi.StringOutput)
}

// Properties that can be set for subscription type addresses.
func (o AddressSpecOutput) Subscription() AddressSpecSubscriptionPtrOutput {
	return o.ApplyT(func(v AddressSpec) *AddressSpecSubscription { return v.Subscription }).(AddressSpecSubscriptionPtrOutput)
}

// Address of topic that this subscription refers to (only applicable to subscription types).
func (o AddressSpecOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddressSpec) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

// Address type for this address.
func (o AddressSpecOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AddressSpec) string { return v.Type }).(pulumi.StringOutput)
}

type AddressSpecPtrOutput struct{ *pulumi.OutputState }

func (AddressSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AddressSpec)(nil)).Elem()
}

func (o AddressSpecPtrOutput) ToAddressSpecPtrOutput() AddressSpecPtrOutput {
	return o
}

func (o AddressSpecPtrOutput) ToAddressSpecPtrOutputWithContext(ctx context.Context) AddressSpecPtrOutput {
	return o
}

func (o AddressSpecPtrOutput) Elem() AddressSpecOutput {
	return o.ApplyT(func(v *AddressSpec) AddressSpec { return *v }).(AddressSpecOutput)
}

// Messaging address.
func (o AddressSpecPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddressSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Address
	}).(pulumi.StringPtrOutput)
}

// Address forwarders for this address.
func (o AddressSpecPtrOutput) Forwarders() AddressSpecForwardersArrayOutput {
	return o.ApplyT(func(v *AddressSpec) []AddressSpecForwarders {
		if v == nil {
			return nil
		}
		return v.Forwarders
	}).(AddressSpecForwardersArrayOutput)
}

// Further restricts message time-to-live (TTL). Applies to address types queue and topic only. The maximum and minimum values must fall with the minimum/maximum range described by the plan's TTL settings.
func (o AddressSpecPtrOutput) MessageTtl() AddressSpecMessageTtlPtrOutput {
	return o.ApplyT(func(v *AddressSpec) *AddressSpecMessageTtl {
		if v == nil {
			return nil
		}
		return v.MessageTtl
	}).(AddressSpecMessageTtlPtrOutput)
}

// Plan referenced by this address.
func (o AddressSpecPtrOutput) Plan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddressSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Plan
	}).(pulumi.StringPtrOutput)
}

// Properties that can be set for subscription type addresses.
func (o AddressSpecPtrOutput) Subscription() AddressSpecSubscriptionPtrOutput {
	return o.ApplyT(func(v *AddressSpec) *AddressSpecSubscription {
		if v == nil {
			return nil
		}
		return v.Subscription
	}).(AddressSpecSubscriptionPtrOutput)
}

// Address of topic that this subscription refers to (only applicable to subscription types).
func (o AddressSpecPtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddressSpec) *string {
		if v == nil {
			return nil
		}
		return v.Topic
	}).(pulumi.StringPtrOutput)
}

// Address type for this address.
func (o AddressSpecPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddressSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type AddressSpecForwarders struct {
	Direction string `pulumi:"direction"`
	// Forwarder name.
	Name string `pulumi:"name"`
	// Remote address to forward to. Must be prefixed with connector name.
	RemoteAddress string `pulumi:"remoteAddress"`
}

// AddressSpecForwardersInput is an input type that accepts AddressSpecForwardersArgs and AddressSpecForwardersOutput values.
// You can construct a concrete instance of `AddressSpecForwardersInput` via:
//
//          AddressSpecForwardersArgs{...}
type AddressSpecForwardersInput interface {
	pulumi.Input

	ToAddressSpecForwardersOutput() AddressSpecForwardersOutput
	ToAddressSpecForwardersOutputWithContext(context.Context) AddressSpecForwardersOutput
}

type AddressSpecForwardersArgs struct {
	Direction pulumi.StringInput `pulumi:"direction"`
	// Forwarder name.
	Name pulumi.StringInput `pulumi:"name"`
	// Remote address to forward to. Must be prefixed with connector name.
	RemoteAddress pulumi.StringInput `pulumi:"remoteAddress"`
}

func (AddressSpecForwardersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressSpecForwarders)(nil)).Elem()
}

func (i AddressSpecForwardersArgs) ToAddressSpecForwardersOutput() AddressSpecForwardersOutput {
	return i.ToAddressSpecForwardersOutputWithContext(context.Background())
}

func (i AddressSpecForwardersArgs) ToAddressSpecForwardersOutputWithContext(ctx context.Context) AddressSpecForwardersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressSpecForwardersOutput)
}

// AddressSpecForwardersArrayInput is an input type that accepts AddressSpecForwardersArray and AddressSpecForwardersArrayOutput values.
// You can construct a concrete instance of `AddressSpecForwardersArrayInput` via:
//
//          AddressSpecForwardersArray{ AddressSpecForwardersArgs{...} }
type AddressSpecForwardersArrayInput interface {
	pulumi.Input

	ToAddressSpecForwardersArrayOutput() AddressSpecForwardersArrayOutput
	ToAddressSpecForwardersArrayOutputWithContext(context.Context) AddressSpecForwardersArrayOutput
}

type AddressSpecForwardersArray []AddressSpecForwardersInput

func (AddressSpecForwardersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AddressSpecForwarders)(nil)).Elem()
}

func (i AddressSpecForwardersArray) ToAddressSpecForwardersArrayOutput() AddressSpecForwardersArrayOutput {
	return i.ToAddressSpecForwardersArrayOutputWithContext(context.Background())
}

func (i AddressSpecForwardersArray) ToAddressSpecForwardersArrayOutputWithContext(ctx context.Context) AddressSpecForwardersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressSpecForwardersArrayOutput)
}

type AddressSpecForwardersOutput struct{ *pulumi.OutputState }

func (AddressSpecForwardersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressSpecForwarders)(nil)).Elem()
}

func (o AddressSpecForwardersOutput) ToAddressSpecForwardersOutput() AddressSpecForwardersOutput {
	return o
}

func (o AddressSpecForwardersOutput) ToAddressSpecForwardersOutputWithContext(ctx context.Context) AddressSpecForwardersOutput {
	return o
}

func (o AddressSpecForwardersOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v AddressSpecForwarders) string { return v.Direction }).(pulumi.StringOutput)
}

// Forwarder name.
func (o AddressSpecForwardersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AddressSpecForwarders) string { return v.Name }).(pulumi.StringOutput)
}

// Remote address to forward to. Must be prefixed with connector name.
func (o AddressSpecForwardersOutput) RemoteAddress() pulumi.StringOutput {
	return o.ApplyT(func(v AddressSpecForwarders) string { return v.RemoteAddress }).(pulumi.StringOutput)
}

type AddressSpecForwardersArrayOutput struct{ *pulumi.OutputState }

func (AddressSpecForwardersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AddressSpecForwarders)(nil)).Elem()
}

func (o AddressSpecForwardersArrayOutput) ToAddressSpecForwardersArrayOutput() AddressSpecForwardersArrayOutput {
	return o
}

func (o AddressSpecForwardersArrayOutput) ToAddressSpecForwardersArrayOutputWithContext(ctx context.Context) AddressSpecForwardersArrayOutput {
	return o
}

func (o AddressSpecForwardersArrayOutput) Index(i pulumi.IntInput) AddressSpecForwardersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AddressSpecForwarders {
		return vs[0].([]AddressSpecForwarders)[vs[1].(int)]
	}).(AddressSpecForwardersOutput)
}

// Further restricts message time-to-live (TTL). Applies to address types queue and topic only. The maximum and minimum values must fall with the minimum/maximum range described by the plan's TTL settings.
type AddressSpecMessageTtl struct {
	// Imposes a maximum TTL value (in milliseconds) for messages arriving at the address.  Messages arriving with TTL values greater than this value (or no TTL value) will have their expiration adjusted.
	Maximum *int `pulumi:"maximum"`
	// Imposes a minimum TTL value (in milliseconds) for messages arriving at the address.  Messages arriving with TTL values less than this value will have their expiration adjusted.
	Minimum *int `pulumi:"minimum"`
}

// AddressSpecMessageTtlInput is an input type that accepts AddressSpecMessageTtlArgs and AddressSpecMessageTtlOutput values.
// You can construct a concrete instance of `AddressSpecMessageTtlInput` via:
//
//          AddressSpecMessageTtlArgs{...}
type AddressSpecMessageTtlInput interface {
	pulumi.Input

	ToAddressSpecMessageTtlOutput() AddressSpecMessageTtlOutput
	ToAddressSpecMessageTtlOutputWithContext(context.Context) AddressSpecMessageTtlOutput
}

// Further restricts message time-to-live (TTL). Applies to address types queue and topic only. The maximum and minimum values must fall with the minimum/maximum range described by the plan's TTL settings.
type AddressSpecMessageTtlArgs struct {
	// Imposes a maximum TTL value (in milliseconds) for messages arriving at the address.  Messages arriving with TTL values greater than this value (or no TTL value) will have their expiration adjusted.
	Maximum pulumi.IntPtrInput `pulumi:"maximum"`
	// Imposes a minimum TTL value (in milliseconds) for messages arriving at the address.  Messages arriving with TTL values less than this value will have their expiration adjusted.
	Minimum pulumi.IntPtrInput `pulumi:"minimum"`
}

func (AddressSpecMessageTtlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressSpecMessageTtl)(nil)).Elem()
}

func (i AddressSpecMessageTtlArgs) ToAddressSpecMessageTtlOutput() AddressSpecMessageTtlOutput {
	return i.ToAddressSpecMessageTtlOutputWithContext(context.Background())
}

func (i AddressSpecMessageTtlArgs) ToAddressSpecMessageTtlOutputWithContext(ctx context.Context) AddressSpecMessageTtlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressSpecMessageTtlOutput)
}

func (i AddressSpecMessageTtlArgs) ToAddressSpecMessageTtlPtrOutput() AddressSpecMessageTtlPtrOutput {
	return i.ToAddressSpecMessageTtlPtrOutputWithContext(context.Background())
}

func (i AddressSpecMessageTtlArgs) ToAddressSpecMessageTtlPtrOutputWithContext(ctx context.Context) AddressSpecMessageTtlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressSpecMessageTtlOutput).ToAddressSpecMessageTtlPtrOutputWithContext(ctx)
}

// AddressSpecMessageTtlPtrInput is an input type that accepts AddressSpecMessageTtlArgs, AddressSpecMessageTtlPtr and AddressSpecMessageTtlPtrOutput values.
// You can construct a concrete instance of `AddressSpecMessageTtlPtrInput` via:
//
//          AddressSpecMessageTtlArgs{...}
//
//  or:
//
//          nil
type AddressSpecMessageTtlPtrInput interface {
	pulumi.Input

	ToAddressSpecMessageTtlPtrOutput() AddressSpecMessageTtlPtrOutput
	ToAddressSpecMessageTtlPtrOutputWithContext(context.Context) AddressSpecMessageTtlPtrOutput
}

type addressSpecMessageTtlPtrType AddressSpecMessageTtlArgs

func AddressSpecMessageTtlPtr(v *AddressSpecMessageTtlArgs) AddressSpecMessageTtlPtrInput {
	return (*addressSpecMessageTtlPtrType)(v)
}

func (*addressSpecMessageTtlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AddressSpecMessageTtl)(nil)).Elem()
}

func (i *addressSpecMessageTtlPtrType) ToAddressSpecMessageTtlPtrOutput() AddressSpecMessageTtlPtrOutput {
	return i.ToAddressSpecMessageTtlPtrOutputWithContext(context.Background())
}

func (i *addressSpecMessageTtlPtrType) ToAddressSpecMessageTtlPtrOutputWithContext(ctx context.Context) AddressSpecMessageTtlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressSpecMessageTtlPtrOutput)
}

// Further restricts message time-to-live (TTL). Applies to address types queue and topic only. The maximum and minimum values must fall with the minimum/maximum range described by the plan's TTL settings.
type AddressSpecMessageTtlOutput struct{ *pulumi.OutputState }

func (AddressSpecMessageTtlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressSpecMessageTtl)(nil)).Elem()
}

func (o AddressSpecMessageTtlOutput) ToAddressSpecMessageTtlOutput() AddressSpecMessageTtlOutput {
	return o
}

func (o AddressSpecMessageTtlOutput) ToAddressSpecMessageTtlOutputWithContext(ctx context.Context) AddressSpecMessageTtlOutput {
	return o
}

func (o AddressSpecMessageTtlOutput) ToAddressSpecMessageTtlPtrOutput() AddressSpecMessageTtlPtrOutput {
	return o.ToAddressSpecMessageTtlPtrOutputWithContext(context.Background())
}

func (o AddressSpecMessageTtlOutput) ToAddressSpecMessageTtlPtrOutputWithContext(ctx context.Context) AddressSpecMessageTtlPtrOutput {
	return o.ApplyT(func(v AddressSpecMessageTtl) *AddressSpecMessageTtl {
		return &v
	}).(AddressSpecMessageTtlPtrOutput)
}

// Imposes a maximum TTL value (in milliseconds) for messages arriving at the address.  Messages arriving with TTL values greater than this value (or no TTL value) will have their expiration adjusted.
func (o AddressSpecMessageTtlOutput) Maximum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AddressSpecMessageTtl) *int { return v.Maximum }).(pulumi.IntPtrOutput)
}

// Imposes a minimum TTL value (in milliseconds) for messages arriving at the address.  Messages arriving with TTL values less than this value will have their expiration adjusted.
func (o AddressSpecMessageTtlOutput) Minimum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AddressSpecMessageTtl) *int { return v.Minimum }).(pulumi.IntPtrOutput)
}

type AddressSpecMessageTtlPtrOutput struct{ *pulumi.OutputState }

func (AddressSpecMessageTtlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AddressSpecMessageTtl)(nil)).Elem()
}

func (o AddressSpecMessageTtlPtrOutput) ToAddressSpecMessageTtlPtrOutput() AddressSpecMessageTtlPtrOutput {
	return o
}

func (o AddressSpecMessageTtlPtrOutput) ToAddressSpecMessageTtlPtrOutputWithContext(ctx context.Context) AddressSpecMessageTtlPtrOutput {
	return o
}

func (o AddressSpecMessageTtlPtrOutput) Elem() AddressSpecMessageTtlOutput {
	return o.ApplyT(func(v *AddressSpecMessageTtl) AddressSpecMessageTtl { return *v }).(AddressSpecMessageTtlOutput)
}

// Imposes a maximum TTL value (in milliseconds) for messages arriving at the address.  Messages arriving with TTL values greater than this value (or no TTL value) will have their expiration adjusted.
func (o AddressSpecMessageTtlPtrOutput) Maximum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AddressSpecMessageTtl) *int {
		if v == nil {
			return nil
		}
		return v.Maximum
	}).(pulumi.IntPtrOutput)
}

// Imposes a minimum TTL value (in milliseconds) for messages arriving at the address.  Messages arriving with TTL values less than this value will have their expiration adjusted.
func (o AddressSpecMessageTtlPtrOutput) Minimum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AddressSpecMessageTtl) *int {
		if v == nil {
			return nil
		}
		return v.Minimum
	}).(pulumi.IntPtrOutput)
}

// Properties that can be set for subscription type addresses.
type AddressSpecSubscription struct {
	// Maximum number of concurrent consumers that can be attached to this subscription. If unspecified, 1 consumer is allowed per subscription
	MaxConsumers *int `pulumi:"maxConsumers"`
}

// AddressSpecSubscriptionInput is an input type that accepts AddressSpecSubscriptionArgs and AddressSpecSubscriptionOutput values.
// You can construct a concrete instance of `AddressSpecSubscriptionInput` via:
//
//          AddressSpecSubscriptionArgs{...}
type AddressSpecSubscriptionInput interface {
	pulumi.Input

	ToAddressSpecSubscriptionOutput() AddressSpecSubscriptionOutput
	ToAddressSpecSubscriptionOutputWithContext(context.Context) AddressSpecSubscriptionOutput
}

// Properties that can be set for subscription type addresses.
type AddressSpecSubscriptionArgs struct {
	// Maximum number of concurrent consumers that can be attached to this subscription. If unspecified, 1 consumer is allowed per subscription
	MaxConsumers pulumi.IntPtrInput `pulumi:"maxConsumers"`
}

func (AddressSpecSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressSpecSubscription)(nil)).Elem()
}

func (i AddressSpecSubscriptionArgs) ToAddressSpecSubscriptionOutput() AddressSpecSubscriptionOutput {
	return i.ToAddressSpecSubscriptionOutputWithContext(context.Background())
}

func (i AddressSpecSubscriptionArgs) ToAddressSpecSubscriptionOutputWithContext(ctx context.Context) AddressSpecSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressSpecSubscriptionOutput)
}

func (i AddressSpecSubscriptionArgs) ToAddressSpecSubscriptionPtrOutput() AddressSpecSubscriptionPtrOutput {
	return i.ToAddressSpecSubscriptionPtrOutputWithContext(context.Background())
}

func (i AddressSpecSubscriptionArgs) ToAddressSpecSubscriptionPtrOutputWithContext(ctx context.Context) AddressSpecSubscriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressSpecSubscriptionOutput).ToAddressSpecSubscriptionPtrOutputWithContext(ctx)
}

// AddressSpecSubscriptionPtrInput is an input type that accepts AddressSpecSubscriptionArgs, AddressSpecSubscriptionPtr and AddressSpecSubscriptionPtrOutput values.
// You can construct a concrete instance of `AddressSpecSubscriptionPtrInput` via:
//
//          AddressSpecSubscriptionArgs{...}
//
//  or:
//
//          nil
type AddressSpecSubscriptionPtrInput interface {
	pulumi.Input

	ToAddressSpecSubscriptionPtrOutput() AddressSpecSubscriptionPtrOutput
	ToAddressSpecSubscriptionPtrOutputWithContext(context.Context) AddressSpecSubscriptionPtrOutput
}

type addressSpecSubscriptionPtrType AddressSpecSubscriptionArgs

func AddressSpecSubscriptionPtr(v *AddressSpecSubscriptionArgs) AddressSpecSubscriptionPtrInput {
	return (*addressSpecSubscriptionPtrType)(v)
}

func (*addressSpecSubscriptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AddressSpecSubscription)(nil)).Elem()
}

func (i *addressSpecSubscriptionPtrType) ToAddressSpecSubscriptionPtrOutput() AddressSpecSubscriptionPtrOutput {
	return i.ToAddressSpecSubscriptionPtrOutputWithContext(context.Background())
}

func (i *addressSpecSubscriptionPtrType) ToAddressSpecSubscriptionPtrOutputWithContext(ctx context.Context) AddressSpecSubscriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressSpecSubscriptionPtrOutput)
}

// Properties that can be set for subscription type addresses.
type AddressSpecSubscriptionOutput struct{ *pulumi.OutputState }

func (AddressSpecSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressSpecSubscription)(nil)).Elem()
}

func (o AddressSpecSubscriptionOutput) ToAddressSpecSubscriptionOutput() AddressSpecSubscriptionOutput {
	return o
}

func (o AddressSpecSubscriptionOutput) ToAddressSpecSubscriptionOutputWithContext(ctx context.Context) AddressSpecSubscriptionOutput {
	return o
}

func (o AddressSpecSubscriptionOutput) ToAddressSpecSubscriptionPtrOutput() AddressSpecSubscriptionPtrOutput {
	return o.ToAddressSpecSubscriptionPtrOutputWithContext(context.Background())
}

func (o AddressSpecSubscriptionOutput) ToAddressSpecSubscriptionPtrOutputWithContext(ctx context.Context) AddressSpecSubscriptionPtrOutput {
	return o.ApplyT(func(v AddressSpecSubscription) *AddressSpecSubscription {
		return &v
	}).(AddressSpecSubscriptionPtrOutput)
}

// Maximum number of concurrent consumers that can be attached to this subscription. If unspecified, 1 consumer is allowed per subscription
func (o AddressSpecSubscriptionOutput) MaxConsumers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AddressSpecSubscription) *int { return v.MaxConsumers }).(pulumi.IntPtrOutput)
}

type AddressSpecSubscriptionPtrOutput struct{ *pulumi.OutputState }

func (AddressSpecSubscriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AddressSpecSubscription)(nil)).Elem()
}

func (o AddressSpecSubscriptionPtrOutput) ToAddressSpecSubscriptionPtrOutput() AddressSpecSubscriptionPtrOutput {
	return o
}

func (o AddressSpecSubscriptionPtrOutput) ToAddressSpecSubscriptionPtrOutputWithContext(ctx context.Context) AddressSpecSubscriptionPtrOutput {
	return o
}

func (o AddressSpecSubscriptionPtrOutput) Elem() AddressSpecSubscriptionOutput {
	return o.ApplyT(func(v *AddressSpecSubscription) AddressSpecSubscription { return *v }).(AddressSpecSubscriptionOutput)
}

// Maximum number of concurrent consumers that can be attached to this subscription. If unspecified, 1 consumer is allowed per subscription
func (o AddressSpecSubscriptionPtrOutput) MaxConsumers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AddressSpecSubscription) *int {
		if v == nil {
			return nil
		}
		return v.MaxConsumers
	}).(pulumi.IntPtrOutput)
}

type AddressStatus struct {
	// The status of this address in brokers.
	BrokerStatuses []AddressStatusBrokerStatuses `pulumi:"brokerStatuses"`
	// Forwarder status for this address.
	Forwarders []AddressStatusForwarders `pulumi:"forwarders"`
	// Whether address is ready to use or not.
	IsReady *bool `pulumi:"isReady"`
	// Applied message TTL properties.
	MessageTtl *AddressStatusMessageTtl `pulumi:"messageTtl"`
	// Status and error messages for address.
	Messages []string `pulumi:"messages"`
	// Phase of address.
	Phase      *string                  `pulumi:"phase"`
	PlanStatus *AddressStatusPlanStatus `pulumi:"planStatus"`
	// Applied properties for subscription type addresses.
	Subscription *AddressStatusSubscription `pulumi:"subscription"`
}

// AddressStatusInput is an input type that accepts AddressStatusArgs and AddressStatusOutput values.
// You can construct a concrete instance of `AddressStatusInput` via:
//
//          AddressStatusArgs{...}
type AddressStatusInput interface {
	pulumi.Input

	ToAddressStatusOutput() AddressStatusOutput
	ToAddressStatusOutputWithContext(context.Context) AddressStatusOutput
}

type AddressStatusArgs struct {
	// The status of this address in brokers.
	BrokerStatuses AddressStatusBrokerStatusesArrayInput `pulumi:"brokerStatuses"`
	// Forwarder status for this address.
	Forwarders AddressStatusForwardersArrayInput `pulumi:"forwarders"`
	// Whether address is ready to use or not.
	IsReady pulumi.BoolPtrInput `pulumi:"isReady"`
	// Applied message TTL properties.
	MessageTtl AddressStatusMessageTtlPtrInput `pulumi:"messageTtl"`
	// Status and error messages for address.
	Messages pulumi.StringArrayInput `pulumi:"messages"`
	// Phase of address.
	Phase      pulumi.StringPtrInput           `pulumi:"phase"`
	PlanStatus AddressStatusPlanStatusPtrInput `pulumi:"planStatus"`
	// Applied properties for subscription type addresses.
	Subscription AddressStatusSubscriptionPtrInput `pulumi:"subscription"`
}

func (AddressStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressStatus)(nil)).Elem()
}

func (i AddressStatusArgs) ToAddressStatusOutput() AddressStatusOutput {
	return i.ToAddressStatusOutputWithContext(context.Background())
}

func (i AddressStatusArgs) ToAddressStatusOutputWithContext(ctx context.Context) AddressStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressStatusOutput)
}

func (i AddressStatusArgs) ToAddressStatusPtrOutput() AddressStatusPtrOutput {
	return i.ToAddressStatusPtrOutputWithContext(context.Background())
}

func (i AddressStatusArgs) ToAddressStatusPtrOutputWithContext(ctx context.Context) AddressStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressStatusOutput).ToAddressStatusPtrOutputWithContext(ctx)
}

// AddressStatusPtrInput is an input type that accepts AddressStatusArgs, AddressStatusPtr and AddressStatusPtrOutput values.
// You can construct a concrete instance of `AddressStatusPtrInput` via:
//
//          AddressStatusArgs{...}
//
//  or:
//
//          nil
type AddressStatusPtrInput interface {
	pulumi.Input

	ToAddressStatusPtrOutput() AddressStatusPtrOutput
	ToAddressStatusPtrOutputWithContext(context.Context) AddressStatusPtrOutput
}

type addressStatusPtrType AddressStatusArgs

func AddressStatusPtr(v *AddressStatusArgs) AddressStatusPtrInput {
	return (*addressStatusPtrType)(v)
}

func (*addressStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AddressStatus)(nil)).Elem()
}

func (i *addressStatusPtrType) ToAddressStatusPtrOutput() AddressStatusPtrOutput {
	return i.ToAddressStatusPtrOutputWithContext(context.Background())
}

func (i *addressStatusPtrType) ToAddressStatusPtrOutputWithContext(ctx context.Context) AddressStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressStatusPtrOutput)
}

type AddressStatusOutput struct{ *pulumi.OutputState }

func (AddressStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressStatus)(nil)).Elem()
}

func (o AddressStatusOutput) ToAddressStatusOutput() AddressStatusOutput {
	return o
}

func (o AddressStatusOutput) ToAddressStatusOutputWithContext(ctx context.Context) AddressStatusOutput {
	return o
}

func (o AddressStatusOutput) ToAddressStatusPtrOutput() AddressStatusPtrOutput {
	return o.ToAddressStatusPtrOutputWithContext(context.Background())
}

func (o AddressStatusOutput) ToAddressStatusPtrOutputWithContext(ctx context.Context) AddressStatusPtrOutput {
	return o.ApplyT(func(v AddressStatus) *AddressStatus {
		return &v
	}).(AddressStatusPtrOutput)
}

// The status of this address in brokers.
func (o AddressStatusOutput) BrokerStatuses() AddressStatusBrokerStatusesArrayOutput {
	return o.ApplyT(func(v AddressStatus) []AddressStatusBrokerStatuses { return v.BrokerStatuses }).(AddressStatusBrokerStatusesArrayOutput)
}

// Forwarder status for this address.
func (o AddressStatusOutput) Forwarders() AddressStatusForwardersArrayOutput {
	return o.ApplyT(func(v AddressStatus) []AddressStatusForwarders { return v.Forwarders }).(AddressStatusForwardersArrayOutput)
}

// Whether address is ready to use or not.
func (o AddressStatusOutput) IsReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AddressStatus) *bool { return v.IsReady }).(pulumi.BoolPtrOutput)
}

// Applied message TTL properties.
func (o AddressStatusOutput) MessageTtl() AddressStatusMessageTtlPtrOutput {
	return o.ApplyT(func(v AddressStatus) *AddressStatusMessageTtl { return v.MessageTtl }).(AddressStatusMessageTtlPtrOutput)
}

// Status and error messages for address.
func (o AddressStatusOutput) Messages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AddressStatus) []string { return v.Messages }).(pulumi.StringArrayOutput)
}

// Phase of address.
func (o AddressStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddressStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

func (o AddressStatusOutput) PlanStatus() AddressStatusPlanStatusPtrOutput {
	return o.ApplyT(func(v AddressStatus) *AddressStatusPlanStatus { return v.PlanStatus }).(AddressStatusPlanStatusPtrOutput)
}

// Applied properties for subscription type addresses.
func (o AddressStatusOutput) Subscription() AddressStatusSubscriptionPtrOutput {
	return o.ApplyT(func(v AddressStatus) *AddressStatusSubscription { return v.Subscription }).(AddressStatusSubscriptionPtrOutput)
}

type AddressStatusPtrOutput struct{ *pulumi.OutputState }

func (AddressStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AddressStatus)(nil)).Elem()
}

func (o AddressStatusPtrOutput) ToAddressStatusPtrOutput() AddressStatusPtrOutput {
	return o
}

func (o AddressStatusPtrOutput) ToAddressStatusPtrOutputWithContext(ctx context.Context) AddressStatusPtrOutput {
	return o
}

func (o AddressStatusPtrOutput) Elem() AddressStatusOutput {
	return o.ApplyT(func(v *AddressStatus) AddressStatus { return *v }).(AddressStatusOutput)
}

// The status of this address in brokers.
func (o AddressStatusPtrOutput) BrokerStatuses() AddressStatusBrokerStatusesArrayOutput {
	return o.ApplyT(func(v *AddressStatus) []AddressStatusBrokerStatuses {
		if v == nil {
			return nil
		}
		return v.BrokerStatuses
	}).(AddressStatusBrokerStatusesArrayOutput)
}

// Forwarder status for this address.
func (o AddressStatusPtrOutput) Forwarders() AddressStatusForwardersArrayOutput {
	return o.ApplyT(func(v *AddressStatus) []AddressStatusForwarders {
		if v == nil {
			return nil
		}
		return v.Forwarders
	}).(AddressStatusForwardersArrayOutput)
}

// Whether address is ready to use or not.
func (o AddressStatusPtrOutput) IsReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AddressStatus) *bool {
		if v == nil {
			return nil
		}
		return v.IsReady
	}).(pulumi.BoolPtrOutput)
}

// Applied message TTL properties.
func (o AddressStatusPtrOutput) MessageTtl() AddressStatusMessageTtlPtrOutput {
	return o.ApplyT(func(v *AddressStatus) *AddressStatusMessageTtl {
		if v == nil {
			return nil
		}
		return v.MessageTtl
	}).(AddressStatusMessageTtlPtrOutput)
}

// Status and error messages for address.
func (o AddressStatusPtrOutput) Messages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AddressStatus) []string {
		if v == nil {
			return nil
		}
		return v.Messages
	}).(pulumi.StringArrayOutput)
}

// Phase of address.
func (o AddressStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddressStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

func (o AddressStatusPtrOutput) PlanStatus() AddressStatusPlanStatusPtrOutput {
	return o.ApplyT(func(v *AddressStatus) *AddressStatusPlanStatus {
		if v == nil {
			return nil
		}
		return v.PlanStatus
	}).(AddressStatusPlanStatusPtrOutput)
}

// Applied properties for subscription type addresses.
func (o AddressStatusPtrOutput) Subscription() AddressStatusSubscriptionPtrOutput {
	return o.ApplyT(func(v *AddressStatus) *AddressStatusSubscription {
		if v == nil {
			return nil
		}
		return v.Subscription
	}).(AddressStatusSubscriptionPtrOutput)
}

type AddressStatusBrokerStatuses struct {
	BrokerId  *string `pulumi:"brokerId"`
	ClusterId *string `pulumi:"clusterId"`
	State     *string `pulumi:"state"`
}

// AddressStatusBrokerStatusesInput is an input type that accepts AddressStatusBrokerStatusesArgs and AddressStatusBrokerStatusesOutput values.
// You can construct a concrete instance of `AddressStatusBrokerStatusesInput` via:
//
//          AddressStatusBrokerStatusesArgs{...}
type AddressStatusBrokerStatusesInput interface {
	pulumi.Input

	ToAddressStatusBrokerStatusesOutput() AddressStatusBrokerStatusesOutput
	ToAddressStatusBrokerStatusesOutputWithContext(context.Context) AddressStatusBrokerStatusesOutput
}

type AddressStatusBrokerStatusesArgs struct {
	BrokerId  pulumi.StringPtrInput `pulumi:"brokerId"`
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
	State     pulumi.StringPtrInput `pulumi:"state"`
}

func (AddressStatusBrokerStatusesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressStatusBrokerStatuses)(nil)).Elem()
}

func (i AddressStatusBrokerStatusesArgs) ToAddressStatusBrokerStatusesOutput() AddressStatusBrokerStatusesOutput {
	return i.ToAddressStatusBrokerStatusesOutputWithContext(context.Background())
}

func (i AddressStatusBrokerStatusesArgs) ToAddressStatusBrokerStatusesOutputWithContext(ctx context.Context) AddressStatusBrokerStatusesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressStatusBrokerStatusesOutput)
}

// AddressStatusBrokerStatusesArrayInput is an input type that accepts AddressStatusBrokerStatusesArray and AddressStatusBrokerStatusesArrayOutput values.
// You can construct a concrete instance of `AddressStatusBrokerStatusesArrayInput` via:
//
//          AddressStatusBrokerStatusesArray{ AddressStatusBrokerStatusesArgs{...} }
type AddressStatusBrokerStatusesArrayInput interface {
	pulumi.Input

	ToAddressStatusBrokerStatusesArrayOutput() AddressStatusBrokerStatusesArrayOutput
	ToAddressStatusBrokerStatusesArrayOutputWithContext(context.Context) AddressStatusBrokerStatusesArrayOutput
}

type AddressStatusBrokerStatusesArray []AddressStatusBrokerStatusesInput

func (AddressStatusBrokerStatusesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AddressStatusBrokerStatuses)(nil)).Elem()
}

func (i AddressStatusBrokerStatusesArray) ToAddressStatusBrokerStatusesArrayOutput() AddressStatusBrokerStatusesArrayOutput {
	return i.ToAddressStatusBrokerStatusesArrayOutputWithContext(context.Background())
}

func (i AddressStatusBrokerStatusesArray) ToAddressStatusBrokerStatusesArrayOutputWithContext(ctx context.Context) AddressStatusBrokerStatusesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressStatusBrokerStatusesArrayOutput)
}

type AddressStatusBrokerStatusesOutput struct{ *pulumi.OutputState }

func (AddressStatusBrokerStatusesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressStatusBrokerStatuses)(nil)).Elem()
}

func (o AddressStatusBrokerStatusesOutput) ToAddressStatusBrokerStatusesOutput() AddressStatusBrokerStatusesOutput {
	return o
}

func (o AddressStatusBrokerStatusesOutput) ToAddressStatusBrokerStatusesOutputWithContext(ctx context.Context) AddressStatusBrokerStatusesOutput {
	return o
}

func (o AddressStatusBrokerStatusesOutput) BrokerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddressStatusBrokerStatuses) *string { return v.BrokerId }).(pulumi.StringPtrOutput)
}

func (o AddressStatusBrokerStatusesOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddressStatusBrokerStatuses) *string { return v.ClusterId }).(pulumi.StringPtrOutput)
}

func (o AddressStatusBrokerStatusesOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddressStatusBrokerStatuses) *string { return v.State }).(pulumi.StringPtrOutput)
}

type AddressStatusBrokerStatusesArrayOutput struct{ *pulumi.OutputState }

func (AddressStatusBrokerStatusesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AddressStatusBrokerStatuses)(nil)).Elem()
}

func (o AddressStatusBrokerStatusesArrayOutput) ToAddressStatusBrokerStatusesArrayOutput() AddressStatusBrokerStatusesArrayOutput {
	return o
}

func (o AddressStatusBrokerStatusesArrayOutput) ToAddressStatusBrokerStatusesArrayOutputWithContext(ctx context.Context) AddressStatusBrokerStatusesArrayOutput {
	return o
}

func (o AddressStatusBrokerStatusesArrayOutput) Index(i pulumi.IntInput) AddressStatusBrokerStatusesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AddressStatusBrokerStatuses {
		return vs[0].([]AddressStatusBrokerStatuses)[vs[1].(int)]
	}).(AddressStatusBrokerStatusesOutput)
}

type AddressStatusForwarders struct {
	IsReady  *bool    `pulumi:"isReady"`
	Messages []string `pulumi:"messages"`
	Name     *string  `pulumi:"name"`
}

// AddressStatusForwardersInput is an input type that accepts AddressStatusForwardersArgs and AddressStatusForwardersOutput values.
// You can construct a concrete instance of `AddressStatusForwardersInput` via:
//
//          AddressStatusForwardersArgs{...}
type AddressStatusForwardersInput interface {
	pulumi.Input

	ToAddressStatusForwardersOutput() AddressStatusForwardersOutput
	ToAddressStatusForwardersOutputWithContext(context.Context) AddressStatusForwardersOutput
}

type AddressStatusForwardersArgs struct {
	IsReady  pulumi.BoolPtrInput     `pulumi:"isReady"`
	Messages pulumi.StringArrayInput `pulumi:"messages"`
	Name     pulumi.StringPtrInput   `pulumi:"name"`
}

func (AddressStatusForwardersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressStatusForwarders)(nil)).Elem()
}

func (i AddressStatusForwardersArgs) ToAddressStatusForwardersOutput() AddressStatusForwardersOutput {
	return i.ToAddressStatusForwardersOutputWithContext(context.Background())
}

func (i AddressStatusForwardersArgs) ToAddressStatusForwardersOutputWithContext(ctx context.Context) AddressStatusForwardersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressStatusForwardersOutput)
}

// AddressStatusForwardersArrayInput is an input type that accepts AddressStatusForwardersArray and AddressStatusForwardersArrayOutput values.
// You can construct a concrete instance of `AddressStatusForwardersArrayInput` via:
//
//          AddressStatusForwardersArray{ AddressStatusForwardersArgs{...} }
type AddressStatusForwardersArrayInput interface {
	pulumi.Input

	ToAddressStatusForwardersArrayOutput() AddressStatusForwardersArrayOutput
	ToAddressStatusForwardersArrayOutputWithContext(context.Context) AddressStatusForwardersArrayOutput
}

type AddressStatusForwardersArray []AddressStatusForwardersInput

func (AddressStatusForwardersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AddressStatusForwarders)(nil)).Elem()
}

func (i AddressStatusForwardersArray) ToAddressStatusForwardersArrayOutput() AddressStatusForwardersArrayOutput {
	return i.ToAddressStatusForwardersArrayOutputWithContext(context.Background())
}

func (i AddressStatusForwardersArray) ToAddressStatusForwardersArrayOutputWithContext(ctx context.Context) AddressStatusForwardersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressStatusForwardersArrayOutput)
}

type AddressStatusForwardersOutput struct{ *pulumi.OutputState }

func (AddressStatusForwardersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressStatusForwarders)(nil)).Elem()
}

func (o AddressStatusForwardersOutput) ToAddressStatusForwardersOutput() AddressStatusForwardersOutput {
	return o
}

func (o AddressStatusForwardersOutput) ToAddressStatusForwardersOutputWithContext(ctx context.Context) AddressStatusForwardersOutput {
	return o
}

func (o AddressStatusForwardersOutput) IsReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AddressStatusForwarders) *bool { return v.IsReady }).(pulumi.BoolPtrOutput)
}

func (o AddressStatusForwardersOutput) Messages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AddressStatusForwarders) []string { return v.Messages }).(pulumi.StringArrayOutput)
}

func (o AddressStatusForwardersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddressStatusForwarders) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AddressStatusForwardersArrayOutput struct{ *pulumi.OutputState }

func (AddressStatusForwardersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AddressStatusForwarders)(nil)).Elem()
}

func (o AddressStatusForwardersArrayOutput) ToAddressStatusForwardersArrayOutput() AddressStatusForwardersArrayOutput {
	return o
}

func (o AddressStatusForwardersArrayOutput) ToAddressStatusForwardersArrayOutputWithContext(ctx context.Context) AddressStatusForwardersArrayOutput {
	return o
}

func (o AddressStatusForwardersArrayOutput) Index(i pulumi.IntInput) AddressStatusForwardersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AddressStatusForwarders {
		return vs[0].([]AddressStatusForwarders)[vs[1].(int)]
	}).(AddressStatusForwardersOutput)
}

// Applied message TTL properties.
type AddressStatusMessageTtl struct {
	// Maximum TTL value
	Maximum *int `pulumi:"maximum"`
	// Minimum TTL value
	Minimum *int `pulumi:"minimum"`
}

// AddressStatusMessageTtlInput is an input type that accepts AddressStatusMessageTtlArgs and AddressStatusMessageTtlOutput values.
// You can construct a concrete instance of `AddressStatusMessageTtlInput` via:
//
//          AddressStatusMessageTtlArgs{...}
type AddressStatusMessageTtlInput interface {
	pulumi.Input

	ToAddressStatusMessageTtlOutput() AddressStatusMessageTtlOutput
	ToAddressStatusMessageTtlOutputWithContext(context.Context) AddressStatusMessageTtlOutput
}

// Applied message TTL properties.
type AddressStatusMessageTtlArgs struct {
	// Maximum TTL value
	Maximum pulumi.IntPtrInput `pulumi:"maximum"`
	// Minimum TTL value
	Minimum pulumi.IntPtrInput `pulumi:"minimum"`
}

func (AddressStatusMessageTtlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressStatusMessageTtl)(nil)).Elem()
}

func (i AddressStatusMessageTtlArgs) ToAddressStatusMessageTtlOutput() AddressStatusMessageTtlOutput {
	return i.ToAddressStatusMessageTtlOutputWithContext(context.Background())
}

func (i AddressStatusMessageTtlArgs) ToAddressStatusMessageTtlOutputWithContext(ctx context.Context) AddressStatusMessageTtlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressStatusMessageTtlOutput)
}

func (i AddressStatusMessageTtlArgs) ToAddressStatusMessageTtlPtrOutput() AddressStatusMessageTtlPtrOutput {
	return i.ToAddressStatusMessageTtlPtrOutputWithContext(context.Background())
}

func (i AddressStatusMessageTtlArgs) ToAddressStatusMessageTtlPtrOutputWithContext(ctx context.Context) AddressStatusMessageTtlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressStatusMessageTtlOutput).ToAddressStatusMessageTtlPtrOutputWithContext(ctx)
}

// AddressStatusMessageTtlPtrInput is an input type that accepts AddressStatusMessageTtlArgs, AddressStatusMessageTtlPtr and AddressStatusMessageTtlPtrOutput values.
// You can construct a concrete instance of `AddressStatusMessageTtlPtrInput` via:
//
//          AddressStatusMessageTtlArgs{...}
//
//  or:
//
//          nil
type AddressStatusMessageTtlPtrInput interface {
	pulumi.Input

	ToAddressStatusMessageTtlPtrOutput() AddressStatusMessageTtlPtrOutput
	ToAddressStatusMessageTtlPtrOutputWithContext(context.Context) AddressStatusMessageTtlPtrOutput
}

type addressStatusMessageTtlPtrType AddressStatusMessageTtlArgs

func AddressStatusMessageTtlPtr(v *AddressStatusMessageTtlArgs) AddressStatusMessageTtlPtrInput {
	return (*addressStatusMessageTtlPtrType)(v)
}

func (*addressStatusMessageTtlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AddressStatusMessageTtl)(nil)).Elem()
}

func (i *addressStatusMessageTtlPtrType) ToAddressStatusMessageTtlPtrOutput() AddressStatusMessageTtlPtrOutput {
	return i.ToAddressStatusMessageTtlPtrOutputWithContext(context.Background())
}

func (i *addressStatusMessageTtlPtrType) ToAddressStatusMessageTtlPtrOutputWithContext(ctx context.Context) AddressStatusMessageTtlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressStatusMessageTtlPtrOutput)
}

// Applied message TTL properties.
type AddressStatusMessageTtlOutput struct{ *pulumi.OutputState }

func (AddressStatusMessageTtlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressStatusMessageTtl)(nil)).Elem()
}

func (o AddressStatusMessageTtlOutput) ToAddressStatusMessageTtlOutput() AddressStatusMessageTtlOutput {
	return o
}

func (o AddressStatusMessageTtlOutput) ToAddressStatusMessageTtlOutputWithContext(ctx context.Context) AddressStatusMessageTtlOutput {
	return o
}

func (o AddressStatusMessageTtlOutput) ToAddressStatusMessageTtlPtrOutput() AddressStatusMessageTtlPtrOutput {
	return o.ToAddressStatusMessageTtlPtrOutputWithContext(context.Background())
}

func (o AddressStatusMessageTtlOutput) ToAddressStatusMessageTtlPtrOutputWithContext(ctx context.Context) AddressStatusMessageTtlPtrOutput {
	return o.ApplyT(func(v AddressStatusMessageTtl) *AddressStatusMessageTtl {
		return &v
	}).(AddressStatusMessageTtlPtrOutput)
}

// Maximum TTL value
func (o AddressStatusMessageTtlOutput) Maximum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AddressStatusMessageTtl) *int { return v.Maximum }).(pulumi.IntPtrOutput)
}

// Minimum TTL value
func (o AddressStatusMessageTtlOutput) Minimum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AddressStatusMessageTtl) *int { return v.Minimum }).(pulumi.IntPtrOutput)
}

type AddressStatusMessageTtlPtrOutput struct{ *pulumi.OutputState }

func (AddressStatusMessageTtlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AddressStatusMessageTtl)(nil)).Elem()
}

func (o AddressStatusMessageTtlPtrOutput) ToAddressStatusMessageTtlPtrOutput() AddressStatusMessageTtlPtrOutput {
	return o
}

func (o AddressStatusMessageTtlPtrOutput) ToAddressStatusMessageTtlPtrOutputWithContext(ctx context.Context) AddressStatusMessageTtlPtrOutput {
	return o
}

func (o AddressStatusMessageTtlPtrOutput) Elem() AddressStatusMessageTtlOutput {
	return o.ApplyT(func(v *AddressStatusMessageTtl) AddressStatusMessageTtl { return *v }).(AddressStatusMessageTtlOutput)
}

// Maximum TTL value
func (o AddressStatusMessageTtlPtrOutput) Maximum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AddressStatusMessageTtl) *int {
		if v == nil {
			return nil
		}
		return v.Maximum
	}).(pulumi.IntPtrOutput)
}

// Minimum TTL value
func (o AddressStatusMessageTtlPtrOutput) Minimum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AddressStatusMessageTtl) *int {
		if v == nil {
			return nil
		}
		return v.Minimum
	}).(pulumi.IntPtrOutput)
}

type AddressStatusPlanStatus struct {
	Name       string                 `pulumi:"name"`
	Partitions int                    `pulumi:"partitions"`
	Resources  map[string]interface{} `pulumi:"resources"`
}

// AddressStatusPlanStatusInput is an input type that accepts AddressStatusPlanStatusArgs and AddressStatusPlanStatusOutput values.
// You can construct a concrete instance of `AddressStatusPlanStatusInput` via:
//
//          AddressStatusPlanStatusArgs{...}
type AddressStatusPlanStatusInput interface {
	pulumi.Input

	ToAddressStatusPlanStatusOutput() AddressStatusPlanStatusOutput
	ToAddressStatusPlanStatusOutputWithContext(context.Context) AddressStatusPlanStatusOutput
}

type AddressStatusPlanStatusArgs struct {
	Name       pulumi.StringInput `pulumi:"name"`
	Partitions pulumi.IntInput    `pulumi:"partitions"`
	Resources  pulumi.MapInput    `pulumi:"resources"`
}

func (AddressStatusPlanStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressStatusPlanStatus)(nil)).Elem()
}

func (i AddressStatusPlanStatusArgs) ToAddressStatusPlanStatusOutput() AddressStatusPlanStatusOutput {
	return i.ToAddressStatusPlanStatusOutputWithContext(context.Background())
}

func (i AddressStatusPlanStatusArgs) ToAddressStatusPlanStatusOutputWithContext(ctx context.Context) AddressStatusPlanStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressStatusPlanStatusOutput)
}

func (i AddressStatusPlanStatusArgs) ToAddressStatusPlanStatusPtrOutput() AddressStatusPlanStatusPtrOutput {
	return i.ToAddressStatusPlanStatusPtrOutputWithContext(context.Background())
}

func (i AddressStatusPlanStatusArgs) ToAddressStatusPlanStatusPtrOutputWithContext(ctx context.Context) AddressStatusPlanStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressStatusPlanStatusOutput).ToAddressStatusPlanStatusPtrOutputWithContext(ctx)
}

// AddressStatusPlanStatusPtrInput is an input type that accepts AddressStatusPlanStatusArgs, AddressStatusPlanStatusPtr and AddressStatusPlanStatusPtrOutput values.
// You can construct a concrete instance of `AddressStatusPlanStatusPtrInput` via:
//
//          AddressStatusPlanStatusArgs{...}
//
//  or:
//
//          nil
type AddressStatusPlanStatusPtrInput interface {
	pulumi.Input

	ToAddressStatusPlanStatusPtrOutput() AddressStatusPlanStatusPtrOutput
	ToAddressStatusPlanStatusPtrOutputWithContext(context.Context) AddressStatusPlanStatusPtrOutput
}

type addressStatusPlanStatusPtrType AddressStatusPlanStatusArgs

func AddressStatusPlanStatusPtr(v *AddressStatusPlanStatusArgs) AddressStatusPlanStatusPtrInput {
	return (*addressStatusPlanStatusPtrType)(v)
}

func (*addressStatusPlanStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AddressStatusPlanStatus)(nil)).Elem()
}

func (i *addressStatusPlanStatusPtrType) ToAddressStatusPlanStatusPtrOutput() AddressStatusPlanStatusPtrOutput {
	return i.ToAddressStatusPlanStatusPtrOutputWithContext(context.Background())
}

func (i *addressStatusPlanStatusPtrType) ToAddressStatusPlanStatusPtrOutputWithContext(ctx context.Context) AddressStatusPlanStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressStatusPlanStatusPtrOutput)
}

type AddressStatusPlanStatusOutput struct{ *pulumi.OutputState }

func (AddressStatusPlanStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressStatusPlanStatus)(nil)).Elem()
}

func (o AddressStatusPlanStatusOutput) ToAddressStatusPlanStatusOutput() AddressStatusPlanStatusOutput {
	return o
}

func (o AddressStatusPlanStatusOutput) ToAddressStatusPlanStatusOutputWithContext(ctx context.Context) AddressStatusPlanStatusOutput {
	return o
}

func (o AddressStatusPlanStatusOutput) ToAddressStatusPlanStatusPtrOutput() AddressStatusPlanStatusPtrOutput {
	return o.ToAddressStatusPlanStatusPtrOutputWithContext(context.Background())
}

func (o AddressStatusPlanStatusOutput) ToAddressStatusPlanStatusPtrOutputWithContext(ctx context.Context) AddressStatusPlanStatusPtrOutput {
	return o.ApplyT(func(v AddressStatusPlanStatus) *AddressStatusPlanStatus {
		return &v
	}).(AddressStatusPlanStatusPtrOutput)
}
func (o AddressStatusPlanStatusOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AddressStatusPlanStatus) string { return v.Name }).(pulumi.StringOutput)
}

func (o AddressStatusPlanStatusOutput) Partitions() pulumi.IntOutput {
	return o.ApplyT(func(v AddressStatusPlanStatus) int { return v.Partitions }).(pulumi.IntOutput)
}

func (o AddressStatusPlanStatusOutput) Resources() pulumi.MapOutput {
	return o.ApplyT(func(v AddressStatusPlanStatus) map[string]interface{} { return v.Resources }).(pulumi.MapOutput)
}

type AddressStatusPlanStatusPtrOutput struct{ *pulumi.OutputState }

func (AddressStatusPlanStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AddressStatusPlanStatus)(nil)).Elem()
}

func (o AddressStatusPlanStatusPtrOutput) ToAddressStatusPlanStatusPtrOutput() AddressStatusPlanStatusPtrOutput {
	return o
}

func (o AddressStatusPlanStatusPtrOutput) ToAddressStatusPlanStatusPtrOutputWithContext(ctx context.Context) AddressStatusPlanStatusPtrOutput {
	return o
}

func (o AddressStatusPlanStatusPtrOutput) Elem() AddressStatusPlanStatusOutput {
	return o.ApplyT(func(v *AddressStatusPlanStatus) AddressStatusPlanStatus { return *v }).(AddressStatusPlanStatusOutput)
}

func (o AddressStatusPlanStatusPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddressStatusPlanStatus) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

func (o AddressStatusPlanStatusPtrOutput) Partitions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AddressStatusPlanStatus) *int {
		if v == nil {
			return nil
		}
		return &v.Partitions
	}).(pulumi.IntPtrOutput)
}

func (o AddressStatusPlanStatusPtrOutput) Resources() pulumi.MapOutput {
	return o.ApplyT(func(v *AddressStatusPlanStatus) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(pulumi.MapOutput)
}

type AddressStatusPlanStatusResources struct {
}

// AddressStatusPlanStatusResourcesInput is an input type that accepts AddressStatusPlanStatusResourcesArgs and AddressStatusPlanStatusResourcesOutput values.
// You can construct a concrete instance of `AddressStatusPlanStatusResourcesInput` via:
//
//          AddressStatusPlanStatusResourcesArgs{...}
type AddressStatusPlanStatusResourcesInput interface {
	pulumi.Input

	ToAddressStatusPlanStatusResourcesOutput() AddressStatusPlanStatusResourcesOutput
	ToAddressStatusPlanStatusResourcesOutputWithContext(context.Context) AddressStatusPlanStatusResourcesOutput
}

type AddressStatusPlanStatusResourcesArgs struct {
}

func (AddressStatusPlanStatusResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressStatusPlanStatusResources)(nil)).Elem()
}

func (i AddressStatusPlanStatusResourcesArgs) ToAddressStatusPlanStatusResourcesOutput() AddressStatusPlanStatusResourcesOutput {
	return i.ToAddressStatusPlanStatusResourcesOutputWithContext(context.Background())
}

func (i AddressStatusPlanStatusResourcesArgs) ToAddressStatusPlanStatusResourcesOutputWithContext(ctx context.Context) AddressStatusPlanStatusResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressStatusPlanStatusResourcesOutput)
}

type AddressStatusPlanStatusResourcesOutput struct{ *pulumi.OutputState }

func (AddressStatusPlanStatusResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressStatusPlanStatusResources)(nil)).Elem()
}

func (o AddressStatusPlanStatusResourcesOutput) ToAddressStatusPlanStatusResourcesOutput() AddressStatusPlanStatusResourcesOutput {
	return o
}

func (o AddressStatusPlanStatusResourcesOutput) ToAddressStatusPlanStatusResourcesOutputWithContext(ctx context.Context) AddressStatusPlanStatusResourcesOutput {
	return o
}

// Applied properties for subscription type addresses.
type AddressStatusSubscription struct {
	// Maximum number of concurrent consumers that can be attached to this subscription.
	MaxConsumers *int `pulumi:"maxConsumers"`
}

// AddressStatusSubscriptionInput is an input type that accepts AddressStatusSubscriptionArgs and AddressStatusSubscriptionOutput values.
// You can construct a concrete instance of `AddressStatusSubscriptionInput` via:
//
//          AddressStatusSubscriptionArgs{...}
type AddressStatusSubscriptionInput interface {
	pulumi.Input

	ToAddressStatusSubscriptionOutput() AddressStatusSubscriptionOutput
	ToAddressStatusSubscriptionOutputWithContext(context.Context) AddressStatusSubscriptionOutput
}

// Applied properties for subscription type addresses.
type AddressStatusSubscriptionArgs struct {
	// Maximum number of concurrent consumers that can be attached to this subscription.
	MaxConsumers pulumi.IntPtrInput `pulumi:"maxConsumers"`
}

func (AddressStatusSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressStatusSubscription)(nil)).Elem()
}

func (i AddressStatusSubscriptionArgs) ToAddressStatusSubscriptionOutput() AddressStatusSubscriptionOutput {
	return i.ToAddressStatusSubscriptionOutputWithContext(context.Background())
}

func (i AddressStatusSubscriptionArgs) ToAddressStatusSubscriptionOutputWithContext(ctx context.Context) AddressStatusSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressStatusSubscriptionOutput)
}

func (i AddressStatusSubscriptionArgs) ToAddressStatusSubscriptionPtrOutput() AddressStatusSubscriptionPtrOutput {
	return i.ToAddressStatusSubscriptionPtrOutputWithContext(context.Background())
}

func (i AddressStatusSubscriptionArgs) ToAddressStatusSubscriptionPtrOutputWithContext(ctx context.Context) AddressStatusSubscriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressStatusSubscriptionOutput).ToAddressStatusSubscriptionPtrOutputWithContext(ctx)
}

// AddressStatusSubscriptionPtrInput is an input type that accepts AddressStatusSubscriptionArgs, AddressStatusSubscriptionPtr and AddressStatusSubscriptionPtrOutput values.
// You can construct a concrete instance of `AddressStatusSubscriptionPtrInput` via:
//
//          AddressStatusSubscriptionArgs{...}
//
//  or:
//
//          nil
type AddressStatusSubscriptionPtrInput interface {
	pulumi.Input

	ToAddressStatusSubscriptionPtrOutput() AddressStatusSubscriptionPtrOutput
	ToAddressStatusSubscriptionPtrOutputWithContext(context.Context) AddressStatusSubscriptionPtrOutput
}

type addressStatusSubscriptionPtrType AddressStatusSubscriptionArgs

func AddressStatusSubscriptionPtr(v *AddressStatusSubscriptionArgs) AddressStatusSubscriptionPtrInput {
	return (*addressStatusSubscriptionPtrType)(v)
}

func (*addressStatusSubscriptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AddressStatusSubscription)(nil)).Elem()
}

func (i *addressStatusSubscriptionPtrType) ToAddressStatusSubscriptionPtrOutput() AddressStatusSubscriptionPtrOutput {
	return i.ToAddressStatusSubscriptionPtrOutputWithContext(context.Background())
}

func (i *addressStatusSubscriptionPtrType) ToAddressStatusSubscriptionPtrOutputWithContext(ctx context.Context) AddressStatusSubscriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressStatusSubscriptionPtrOutput)
}

// Applied properties for subscription type addresses.
type AddressStatusSubscriptionOutput struct{ *pulumi.OutputState }

func (AddressStatusSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressStatusSubscription)(nil)).Elem()
}

func (o AddressStatusSubscriptionOutput) ToAddressStatusSubscriptionOutput() AddressStatusSubscriptionOutput {
	return o
}

func (o AddressStatusSubscriptionOutput) ToAddressStatusSubscriptionOutputWithContext(ctx context.Context) AddressStatusSubscriptionOutput {
	return o
}

func (o AddressStatusSubscriptionOutput) ToAddressStatusSubscriptionPtrOutput() AddressStatusSubscriptionPtrOutput {
	return o.ToAddressStatusSubscriptionPtrOutputWithContext(context.Background())
}

func (o AddressStatusSubscriptionOutput) ToAddressStatusSubscriptionPtrOutputWithContext(ctx context.Context) AddressStatusSubscriptionPtrOutput {
	return o.ApplyT(func(v AddressStatusSubscription) *AddressStatusSubscription {
		return &v
	}).(AddressStatusSubscriptionPtrOutput)
}

// Maximum number of concurrent consumers that can be attached to this subscription.
func (o AddressStatusSubscriptionOutput) MaxConsumers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AddressStatusSubscription) *int { return v.MaxConsumers }).(pulumi.IntPtrOutput)
}

type AddressStatusSubscriptionPtrOutput struct{ *pulumi.OutputState }

func (AddressStatusSubscriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AddressStatusSubscription)(nil)).Elem()
}

func (o AddressStatusSubscriptionPtrOutput) ToAddressStatusSubscriptionPtrOutput() AddressStatusSubscriptionPtrOutput {
	return o
}

func (o AddressStatusSubscriptionPtrOutput) ToAddressStatusSubscriptionPtrOutputWithContext(ctx context.Context) AddressStatusSubscriptionPtrOutput {
	return o
}

func (o AddressStatusSubscriptionPtrOutput) Elem() AddressStatusSubscriptionOutput {
	return o.ApplyT(func(v *AddressStatusSubscription) AddressStatusSubscription { return *v }).(AddressStatusSubscriptionOutput)
}

// Maximum number of concurrent consumers that can be attached to this subscription.
func (o AddressStatusSubscriptionPtrOutput) MaxConsumers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AddressStatusSubscription) *int {
		if v == nil {
			return nil
		}
		return v.MaxConsumers
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AddressTypeOutput{})
	pulumi.RegisterOutputType(AddressSpecOutput{})
	pulumi.RegisterOutputType(AddressSpecPtrOutput{})
	pulumi.RegisterOutputType(AddressSpecForwardersOutput{})
	pulumi.RegisterOutputType(AddressSpecForwardersArrayOutput{})
	pulumi.RegisterOutputType(AddressSpecMessageTtlOutput{})
	pulumi.RegisterOutputType(AddressSpecMessageTtlPtrOutput{})
	pulumi.RegisterOutputType(AddressSpecSubscriptionOutput{})
	pulumi.RegisterOutputType(AddressSpecSubscriptionPtrOutput{})
	pulumi.RegisterOutputType(AddressStatusOutput{})
	pulumi.RegisterOutputType(AddressStatusPtrOutput{})
	pulumi.RegisterOutputType(AddressStatusBrokerStatusesOutput{})
	pulumi.RegisterOutputType(AddressStatusBrokerStatusesArrayOutput{})
	pulumi.RegisterOutputType(AddressStatusForwardersOutput{})
	pulumi.RegisterOutputType(AddressStatusForwardersArrayOutput{})
	pulumi.RegisterOutputType(AddressStatusMessageTtlOutput{})
	pulumi.RegisterOutputType(AddressStatusMessageTtlPtrOutput{})
	pulumi.RegisterOutputType(AddressStatusPlanStatusOutput{})
	pulumi.RegisterOutputType(AddressStatusPlanStatusPtrOutput{})
	pulumi.RegisterOutputType(AddressStatusPlanStatusResourcesOutput{})
	pulumi.RegisterOutputType(AddressStatusSubscriptionOutput{})
	pulumi.RegisterOutputType(AddressStatusSubscriptionPtrOutput{})
}

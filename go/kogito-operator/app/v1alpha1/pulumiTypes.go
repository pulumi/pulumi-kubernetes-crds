// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// KogitoBuild handles how to build a custom Kogito service in a Kubernetes/OpenShift cluster.
type KogitoBuildType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KogitoBuildSpec defines the desired state of KogitoBuild.
	Spec *KogitoBuildSpec `pulumi:"spec"`
	// KogitoBuildStatus defines the observed state of KogitoBuild.
	Status *KogitoBuildStatus `pulumi:"status"`
}

// KogitoBuildTypeInput is an input type that accepts KogitoBuildTypeArgs and KogitoBuildTypeOutput values.
// You can construct a concrete instance of `KogitoBuildTypeInput` via:
//
//          KogitoBuildTypeArgs{...}
type KogitoBuildTypeInput interface {
	pulumi.Input

	ToKogitoBuildTypeOutput() KogitoBuildTypeOutput
	ToKogitoBuildTypeOutputWithContext(context.Context) KogitoBuildTypeOutput
}

// KogitoBuild handles how to build a custom Kogito service in a Kubernetes/OpenShift cluster.
type KogitoBuildTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// KogitoBuildSpec defines the desired state of KogitoBuild.
	Spec KogitoBuildSpecPtrInput `pulumi:"spec"`
	// KogitoBuildStatus defines the observed state of KogitoBuild.
	Status KogitoBuildStatusPtrInput `pulumi:"status"`
}

func (KogitoBuildTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildType)(nil)).Elem()
}

func (i KogitoBuildTypeArgs) ToKogitoBuildTypeOutput() KogitoBuildTypeOutput {
	return i.ToKogitoBuildTypeOutputWithContext(context.Background())
}

func (i KogitoBuildTypeArgs) ToKogitoBuildTypeOutputWithContext(ctx context.Context) KogitoBuildTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildTypeOutput)
}

// KogitoBuild handles how to build a custom Kogito service in a Kubernetes/OpenShift cluster.
type KogitoBuildTypeOutput struct{ *pulumi.OutputState }

func (KogitoBuildTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildType)(nil)).Elem()
}

func (o KogitoBuildTypeOutput) ToKogitoBuildTypeOutput() KogitoBuildTypeOutput {
	return o
}

func (o KogitoBuildTypeOutput) ToKogitoBuildTypeOutputWithContext(ctx context.Context) KogitoBuildTypeOutput {
	return o
}

func (o KogitoBuildTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KogitoBuildTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KogitoBuildTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v KogitoBuildType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// KogitoBuildSpec defines the desired state of KogitoBuild.
func (o KogitoBuildTypeOutput) Spec() KogitoBuildSpecPtrOutput {
	return o.ApplyT(func(v KogitoBuildType) *KogitoBuildSpec { return v.Spec }).(KogitoBuildSpecPtrOutput)
}

// KogitoBuildStatus defines the observed state of KogitoBuild.
func (o KogitoBuildTypeOutput) Status() KogitoBuildStatusPtrOutput {
	return o.ApplyT(func(v KogitoBuildType) *KogitoBuildStatus { return v.Status }).(KogitoBuildStatusPtrOutput)
}

// KogitoBuildSpec defines the desired state of KogitoBuild.
type KogitoBuildSpec struct {
	// Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
	Artifact *KogitoBuildSpecArtifact `pulumi:"artifact"`
	// Image used to build the Kogito Service from source (Local and Remote). The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
	BuildImage *KogitoBuildSpecBuildImage `pulumi:"buildImage"`
	// DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.
	DisableIncremental *bool `pulumi:"disableIncremental"`
	// If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.
	EnableMavenDownloadOutput *bool `pulumi:"enableMavenDownloadOutput"`
	// Environment variables used during build time.
	Envs []KogitoBuildSpecEnvs `pulumi:"envs"`
	// Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
	GitSource *KogitoBuildSpecGitSource `pulumi:"gitSource"`
	// Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.
	MavenMirrorURL *string `pulumi:"mavenMirrorURL"`
	// Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.
	Native *bool `pulumi:"native"`
	// Resources Requirements for builder pods.
	Resources *KogitoBuildSpecResources `pulumi:"resources"`
	// Which runtime Kogito service base image to use when building the Kogito service. If "BuildImage" is set, this value is ignored by the operator. Default value: quarkus.
	Runtime *string `pulumi:"runtime"`
	// Image used as the base image for the final Kogito service. This image only has the required packages to run the application. For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
	RuntimeImage *KogitoBuildSpecRuntimeImage `pulumi:"runtimeImage"`
	// Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment.
	TargetKogitoRuntime *string `pulumi:"targetKogitoRuntime"`
	// Sets the type of build that this instance will handle: Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image.
	Type string `pulumi:"type"`
	// WebHooks secrets for source to image builds based on Git repositories (Remote Sources).
	WebHooks []KogitoBuildSpecWebHooks `pulumi:"webHooks"`
}

// KogitoBuildSpecInput is an input type that accepts KogitoBuildSpecArgs and KogitoBuildSpecOutput values.
// You can construct a concrete instance of `KogitoBuildSpecInput` via:
//
//          KogitoBuildSpecArgs{...}
type KogitoBuildSpecInput interface {
	pulumi.Input

	ToKogitoBuildSpecOutput() KogitoBuildSpecOutput
	ToKogitoBuildSpecOutputWithContext(context.Context) KogitoBuildSpecOutput
}

// KogitoBuildSpec defines the desired state of KogitoBuild.
type KogitoBuildSpecArgs struct {
	// Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
	Artifact KogitoBuildSpecArtifactPtrInput `pulumi:"artifact"`
	// Image used to build the Kogito Service from source (Local and Remote). The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
	BuildImage KogitoBuildSpecBuildImagePtrInput `pulumi:"buildImage"`
	// DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.
	DisableIncremental pulumi.BoolPtrInput `pulumi:"disableIncremental"`
	// If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.
	EnableMavenDownloadOutput pulumi.BoolPtrInput `pulumi:"enableMavenDownloadOutput"`
	// Environment variables used during build time.
	Envs KogitoBuildSpecEnvsArrayInput `pulumi:"envs"`
	// Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
	GitSource KogitoBuildSpecGitSourcePtrInput `pulumi:"gitSource"`
	// Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.
	MavenMirrorURL pulumi.StringPtrInput `pulumi:"mavenMirrorURL"`
	// Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.
	Native pulumi.BoolPtrInput `pulumi:"native"`
	// Resources Requirements for builder pods.
	Resources KogitoBuildSpecResourcesPtrInput `pulumi:"resources"`
	// Which runtime Kogito service base image to use when building the Kogito service. If "BuildImage" is set, this value is ignored by the operator. Default value: quarkus.
	Runtime pulumi.StringPtrInput `pulumi:"runtime"`
	// Image used as the base image for the final Kogito service. This image only has the required packages to run the application. For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
	RuntimeImage KogitoBuildSpecRuntimeImagePtrInput `pulumi:"runtimeImage"`
	// Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment.
	TargetKogitoRuntime pulumi.StringPtrInput `pulumi:"targetKogitoRuntime"`
	// Sets the type of build that this instance will handle: Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image.
	Type pulumi.StringInput `pulumi:"type"`
	// WebHooks secrets for source to image builds based on Git repositories (Remote Sources).
	WebHooks KogitoBuildSpecWebHooksArrayInput `pulumi:"webHooks"`
}

func (KogitoBuildSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpec)(nil)).Elem()
}

func (i KogitoBuildSpecArgs) ToKogitoBuildSpecOutput() KogitoBuildSpecOutput {
	return i.ToKogitoBuildSpecOutputWithContext(context.Background())
}

func (i KogitoBuildSpecArgs) ToKogitoBuildSpecOutputWithContext(ctx context.Context) KogitoBuildSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecOutput)
}

func (i KogitoBuildSpecArgs) ToKogitoBuildSpecPtrOutput() KogitoBuildSpecPtrOutput {
	return i.ToKogitoBuildSpecPtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecArgs) ToKogitoBuildSpecPtrOutputWithContext(ctx context.Context) KogitoBuildSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecOutput).ToKogitoBuildSpecPtrOutputWithContext(ctx)
}

// KogitoBuildSpecPtrInput is an input type that accepts KogitoBuildSpecArgs, KogitoBuildSpecPtr and KogitoBuildSpecPtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecPtrInput` via:
//
//          KogitoBuildSpecArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecPtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecPtrOutput() KogitoBuildSpecPtrOutput
	ToKogitoBuildSpecPtrOutputWithContext(context.Context) KogitoBuildSpecPtrOutput
}

type kogitoBuildSpecPtrType KogitoBuildSpecArgs

func KogitoBuildSpecPtr(v *KogitoBuildSpecArgs) KogitoBuildSpecPtrInput {
	return (*kogitoBuildSpecPtrType)(v)
}

func (*kogitoBuildSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpec)(nil)).Elem()
}

func (i *kogitoBuildSpecPtrType) ToKogitoBuildSpecPtrOutput() KogitoBuildSpecPtrOutput {
	return i.ToKogitoBuildSpecPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecPtrType) ToKogitoBuildSpecPtrOutputWithContext(ctx context.Context) KogitoBuildSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecPtrOutput)
}

// KogitoBuildSpec defines the desired state of KogitoBuild.
type KogitoBuildSpecOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpec)(nil)).Elem()
}

func (o KogitoBuildSpecOutput) ToKogitoBuildSpecOutput() KogitoBuildSpecOutput {
	return o
}

func (o KogitoBuildSpecOutput) ToKogitoBuildSpecOutputWithContext(ctx context.Context) KogitoBuildSpecOutput {
	return o
}

func (o KogitoBuildSpecOutput) ToKogitoBuildSpecPtrOutput() KogitoBuildSpecPtrOutput {
	return o.ToKogitoBuildSpecPtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecOutput) ToKogitoBuildSpecPtrOutputWithContext(ctx context.Context) KogitoBuildSpecPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *KogitoBuildSpec {
		return &v
	}).(KogitoBuildSpecPtrOutput)
}

// Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
func (o KogitoBuildSpecOutput) Artifact() KogitoBuildSpecArtifactPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *KogitoBuildSpecArtifact { return v.Artifact }).(KogitoBuildSpecArtifactPtrOutput)
}

// Image used to build the Kogito Service from source (Local and Remote). The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
func (o KogitoBuildSpecOutput) BuildImage() KogitoBuildSpecBuildImagePtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *KogitoBuildSpecBuildImage { return v.BuildImage }).(KogitoBuildSpecBuildImagePtrOutput)
}

// DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.
func (o KogitoBuildSpecOutput) DisableIncremental() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *bool { return v.DisableIncremental }).(pulumi.BoolPtrOutput)
}

// If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.
func (o KogitoBuildSpecOutput) EnableMavenDownloadOutput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *bool { return v.EnableMavenDownloadOutput }).(pulumi.BoolPtrOutput)
}

// Environment variables used during build time.
func (o KogitoBuildSpecOutput) Envs() KogitoBuildSpecEnvsArrayOutput {
	return o.ApplyT(func(v KogitoBuildSpec) []KogitoBuildSpecEnvs { return v.Envs }).(KogitoBuildSpecEnvsArrayOutput)
}

// Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
func (o KogitoBuildSpecOutput) GitSource() KogitoBuildSpecGitSourcePtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *KogitoBuildSpecGitSource { return v.GitSource }).(KogitoBuildSpecGitSourcePtrOutput)
}

// Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.
func (o KogitoBuildSpecOutput) MavenMirrorURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *string { return v.MavenMirrorURL }).(pulumi.StringPtrOutput)
}

// Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.
func (o KogitoBuildSpecOutput) Native() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *bool { return v.Native }).(pulumi.BoolPtrOutput)
}

// Resources Requirements for builder pods.
func (o KogitoBuildSpecOutput) Resources() KogitoBuildSpecResourcesPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *KogitoBuildSpecResources { return v.Resources }).(KogitoBuildSpecResourcesPtrOutput)
}

// Which runtime Kogito service base image to use when building the Kogito service. If "BuildImage" is set, this value is ignored by the operator. Default value: quarkus.
func (o KogitoBuildSpecOutput) Runtime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *string { return v.Runtime }).(pulumi.StringPtrOutput)
}

// Image used as the base image for the final Kogito service. This image only has the required packages to run the application. For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
func (o KogitoBuildSpecOutput) RuntimeImage() KogitoBuildSpecRuntimeImagePtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *KogitoBuildSpecRuntimeImage { return v.RuntimeImage }).(KogitoBuildSpecRuntimeImagePtrOutput)
}

// Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment.
func (o KogitoBuildSpecOutput) TargetKogitoRuntime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpec) *string { return v.TargetKogitoRuntime }).(pulumi.StringPtrOutput)
}

// Sets the type of build that this instance will handle: Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image.
func (o KogitoBuildSpecOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoBuildSpec) string { return v.Type }).(pulumi.StringOutput)
}

// WebHooks secrets for source to image builds based on Git repositories (Remote Sources).
func (o KogitoBuildSpecOutput) WebHooks() KogitoBuildSpecWebHooksArrayOutput {
	return o.ApplyT(func(v KogitoBuildSpec) []KogitoBuildSpecWebHooks { return v.WebHooks }).(KogitoBuildSpecWebHooksArrayOutput)
}

type KogitoBuildSpecPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpec)(nil)).Elem()
}

func (o KogitoBuildSpecPtrOutput) ToKogitoBuildSpecPtrOutput() KogitoBuildSpecPtrOutput {
	return o
}

func (o KogitoBuildSpecPtrOutput) ToKogitoBuildSpecPtrOutputWithContext(ctx context.Context) KogitoBuildSpecPtrOutput {
	return o
}

func (o KogitoBuildSpecPtrOutput) Elem() KogitoBuildSpecOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) KogitoBuildSpec { return *v }).(KogitoBuildSpecOutput)
}

// Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
func (o KogitoBuildSpecPtrOutput) Artifact() KogitoBuildSpecArtifactPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *KogitoBuildSpecArtifact {
		if v == nil {
			return nil
		}
		return v.Artifact
	}).(KogitoBuildSpecArtifactPtrOutput)
}

// Image used to build the Kogito Service from source (Local and Remote). The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
func (o KogitoBuildSpecPtrOutput) BuildImage() KogitoBuildSpecBuildImagePtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *KogitoBuildSpecBuildImage {
		if v == nil {
			return nil
		}
		return v.BuildImage
	}).(KogitoBuildSpecBuildImagePtrOutput)
}

// DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.
func (o KogitoBuildSpecPtrOutput) DisableIncremental() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *bool {
		if v == nil {
			return nil
		}
		return v.DisableIncremental
	}).(pulumi.BoolPtrOutput)
}

// If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.
func (o KogitoBuildSpecPtrOutput) EnableMavenDownloadOutput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *bool {
		if v == nil {
			return nil
		}
		return v.EnableMavenDownloadOutput
	}).(pulumi.BoolPtrOutput)
}

// Environment variables used during build time.
func (o KogitoBuildSpecPtrOutput) Envs() KogitoBuildSpecEnvsArrayOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) []KogitoBuildSpecEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(KogitoBuildSpecEnvsArrayOutput)
}

// Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
func (o KogitoBuildSpecPtrOutput) GitSource() KogitoBuildSpecGitSourcePtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *KogitoBuildSpecGitSource {
		if v == nil {
			return nil
		}
		return v.GitSource
	}).(KogitoBuildSpecGitSourcePtrOutput)
}

// Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.
func (o KogitoBuildSpecPtrOutput) MavenMirrorURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *string {
		if v == nil {
			return nil
		}
		return v.MavenMirrorURL
	}).(pulumi.StringPtrOutput)
}

// Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.
func (o KogitoBuildSpecPtrOutput) Native() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Native
	}).(pulumi.BoolPtrOutput)
}

// Resources Requirements for builder pods.
func (o KogitoBuildSpecPtrOutput) Resources() KogitoBuildSpecResourcesPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *KogitoBuildSpecResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(KogitoBuildSpecResourcesPtrOutput)
}

// Which runtime Kogito service base image to use when building the Kogito service. If "BuildImage" is set, this value is ignored by the operator. Default value: quarkus.
func (o KogitoBuildSpecPtrOutput) Runtime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *string {
		if v == nil {
			return nil
		}
		return v.Runtime
	}).(pulumi.StringPtrOutput)
}

// Image used as the base image for the final Kogito service. This image only has the required packages to run the application. For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
func (o KogitoBuildSpecPtrOutput) RuntimeImage() KogitoBuildSpecRuntimeImagePtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *KogitoBuildSpecRuntimeImage {
		if v == nil {
			return nil
		}
		return v.RuntimeImage
	}).(KogitoBuildSpecRuntimeImagePtrOutput)
}

// Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment.
func (o KogitoBuildSpecPtrOutput) TargetKogitoRuntime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *string {
		if v == nil {
			return nil
		}
		return v.TargetKogitoRuntime
	}).(pulumi.StringPtrOutput)
}

// Sets the type of build that this instance will handle: Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image.
func (o KogitoBuildSpecPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// WebHooks secrets for source to image builds based on Git repositories (Remote Sources).
func (o KogitoBuildSpecPtrOutput) WebHooks() KogitoBuildSpecWebHooksArrayOutput {
	return o.ApplyT(func(v *KogitoBuildSpec) []KogitoBuildSpecWebHooks {
		if v == nil {
			return nil
		}
		return v.WebHooks
	}).(KogitoBuildSpecWebHooksArrayOutput)
}

// Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
type KogitoBuildSpecArtifact struct {
	// Indicates the unique base name of the primary artifact being generated.
	ArtifactId *string `pulumi:"artifactId"`
	// Indicates the unique identifier of the organization or group that created the project.
	GroupId *string `pulumi:"groupId"`
	// Indicates the version of the artifact generated by the project.
	Version *string `pulumi:"version"`
}

// KogitoBuildSpecArtifactInput is an input type that accepts KogitoBuildSpecArtifactArgs and KogitoBuildSpecArtifactOutput values.
// You can construct a concrete instance of `KogitoBuildSpecArtifactInput` via:
//
//          KogitoBuildSpecArtifactArgs{...}
type KogitoBuildSpecArtifactInput interface {
	pulumi.Input

	ToKogitoBuildSpecArtifactOutput() KogitoBuildSpecArtifactOutput
	ToKogitoBuildSpecArtifactOutputWithContext(context.Context) KogitoBuildSpecArtifactOutput
}

// Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
type KogitoBuildSpecArtifactArgs struct {
	// Indicates the unique base name of the primary artifact being generated.
	ArtifactId pulumi.StringPtrInput `pulumi:"artifactId"`
	// Indicates the unique identifier of the organization or group that created the project.
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// Indicates the version of the artifact generated by the project.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (KogitoBuildSpecArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecArtifact)(nil)).Elem()
}

func (i KogitoBuildSpecArtifactArgs) ToKogitoBuildSpecArtifactOutput() KogitoBuildSpecArtifactOutput {
	return i.ToKogitoBuildSpecArtifactOutputWithContext(context.Background())
}

func (i KogitoBuildSpecArtifactArgs) ToKogitoBuildSpecArtifactOutputWithContext(ctx context.Context) KogitoBuildSpecArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecArtifactOutput)
}

func (i KogitoBuildSpecArtifactArgs) ToKogitoBuildSpecArtifactPtrOutput() KogitoBuildSpecArtifactPtrOutput {
	return i.ToKogitoBuildSpecArtifactPtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecArtifactArgs) ToKogitoBuildSpecArtifactPtrOutputWithContext(ctx context.Context) KogitoBuildSpecArtifactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecArtifactOutput).ToKogitoBuildSpecArtifactPtrOutputWithContext(ctx)
}

// KogitoBuildSpecArtifactPtrInput is an input type that accepts KogitoBuildSpecArtifactArgs, KogitoBuildSpecArtifactPtr and KogitoBuildSpecArtifactPtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecArtifactPtrInput` via:
//
//          KogitoBuildSpecArtifactArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecArtifactPtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecArtifactPtrOutput() KogitoBuildSpecArtifactPtrOutput
	ToKogitoBuildSpecArtifactPtrOutputWithContext(context.Context) KogitoBuildSpecArtifactPtrOutput
}

type kogitoBuildSpecArtifactPtrType KogitoBuildSpecArtifactArgs

func KogitoBuildSpecArtifactPtr(v *KogitoBuildSpecArtifactArgs) KogitoBuildSpecArtifactPtrInput {
	return (*kogitoBuildSpecArtifactPtrType)(v)
}

func (*kogitoBuildSpecArtifactPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecArtifact)(nil)).Elem()
}

func (i *kogitoBuildSpecArtifactPtrType) ToKogitoBuildSpecArtifactPtrOutput() KogitoBuildSpecArtifactPtrOutput {
	return i.ToKogitoBuildSpecArtifactPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecArtifactPtrType) ToKogitoBuildSpecArtifactPtrOutputWithContext(ctx context.Context) KogitoBuildSpecArtifactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecArtifactPtrOutput)
}

// Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
type KogitoBuildSpecArtifactOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecArtifact)(nil)).Elem()
}

func (o KogitoBuildSpecArtifactOutput) ToKogitoBuildSpecArtifactOutput() KogitoBuildSpecArtifactOutput {
	return o
}

func (o KogitoBuildSpecArtifactOutput) ToKogitoBuildSpecArtifactOutputWithContext(ctx context.Context) KogitoBuildSpecArtifactOutput {
	return o
}

func (o KogitoBuildSpecArtifactOutput) ToKogitoBuildSpecArtifactPtrOutput() KogitoBuildSpecArtifactPtrOutput {
	return o.ToKogitoBuildSpecArtifactPtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecArtifactOutput) ToKogitoBuildSpecArtifactPtrOutputWithContext(ctx context.Context) KogitoBuildSpecArtifactPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecArtifact) *KogitoBuildSpecArtifact {
		return &v
	}).(KogitoBuildSpecArtifactPtrOutput)
}

// Indicates the unique base name of the primary artifact being generated.
func (o KogitoBuildSpecArtifactOutput) ArtifactId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecArtifact) *string { return v.ArtifactId }).(pulumi.StringPtrOutput)
}

// Indicates the unique identifier of the organization or group that created the project.
func (o KogitoBuildSpecArtifactOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecArtifact) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// Indicates the version of the artifact generated by the project.
func (o KogitoBuildSpecArtifactOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecArtifact) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type KogitoBuildSpecArtifactPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecArtifactPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecArtifact)(nil)).Elem()
}

func (o KogitoBuildSpecArtifactPtrOutput) ToKogitoBuildSpecArtifactPtrOutput() KogitoBuildSpecArtifactPtrOutput {
	return o
}

func (o KogitoBuildSpecArtifactPtrOutput) ToKogitoBuildSpecArtifactPtrOutputWithContext(ctx context.Context) KogitoBuildSpecArtifactPtrOutput {
	return o
}

func (o KogitoBuildSpecArtifactPtrOutput) Elem() KogitoBuildSpecArtifactOutput {
	return o.ApplyT(func(v *KogitoBuildSpecArtifact) KogitoBuildSpecArtifact { return *v }).(KogitoBuildSpecArtifactOutput)
}

// Indicates the unique base name of the primary artifact being generated.
func (o KogitoBuildSpecArtifactPtrOutput) ArtifactId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecArtifact) *string {
		if v == nil {
			return nil
		}
		return v.ArtifactId
	}).(pulumi.StringPtrOutput)
}

// Indicates the unique identifier of the organization or group that created the project.
func (o KogitoBuildSpecArtifactPtrOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecArtifact) *string {
		if v == nil {
			return nil
		}
		return v.GroupId
	}).(pulumi.StringPtrOutput)
}

// Indicates the version of the artifact generated by the project.
func (o KogitoBuildSpecArtifactPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Image used to build the Kogito Service from source (Local and Remote). The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
type KogitoBuildSpecBuildImage struct {
	Domain    *string `pulumi:"domain"`
	Name      *string `pulumi:"name"`
	Namespace *string `pulumi:"namespace"`
	Tag       *string `pulumi:"tag"`
}

// KogitoBuildSpecBuildImageInput is an input type that accepts KogitoBuildSpecBuildImageArgs and KogitoBuildSpecBuildImageOutput values.
// You can construct a concrete instance of `KogitoBuildSpecBuildImageInput` via:
//
//          KogitoBuildSpecBuildImageArgs{...}
type KogitoBuildSpecBuildImageInput interface {
	pulumi.Input

	ToKogitoBuildSpecBuildImageOutput() KogitoBuildSpecBuildImageOutput
	ToKogitoBuildSpecBuildImageOutputWithContext(context.Context) KogitoBuildSpecBuildImageOutput
}

// Image used to build the Kogito Service from source (Local and Remote). The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
type KogitoBuildSpecBuildImageArgs struct {
	Domain    pulumi.StringPtrInput `pulumi:"domain"`
	Name      pulumi.StringPtrInput `pulumi:"name"`
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	Tag       pulumi.StringPtrInput `pulumi:"tag"`
}

func (KogitoBuildSpecBuildImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecBuildImage)(nil)).Elem()
}

func (i KogitoBuildSpecBuildImageArgs) ToKogitoBuildSpecBuildImageOutput() KogitoBuildSpecBuildImageOutput {
	return i.ToKogitoBuildSpecBuildImageOutputWithContext(context.Background())
}

func (i KogitoBuildSpecBuildImageArgs) ToKogitoBuildSpecBuildImageOutputWithContext(ctx context.Context) KogitoBuildSpecBuildImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecBuildImageOutput)
}

func (i KogitoBuildSpecBuildImageArgs) ToKogitoBuildSpecBuildImagePtrOutput() KogitoBuildSpecBuildImagePtrOutput {
	return i.ToKogitoBuildSpecBuildImagePtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecBuildImageArgs) ToKogitoBuildSpecBuildImagePtrOutputWithContext(ctx context.Context) KogitoBuildSpecBuildImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecBuildImageOutput).ToKogitoBuildSpecBuildImagePtrOutputWithContext(ctx)
}

// KogitoBuildSpecBuildImagePtrInput is an input type that accepts KogitoBuildSpecBuildImageArgs, KogitoBuildSpecBuildImagePtr and KogitoBuildSpecBuildImagePtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecBuildImagePtrInput` via:
//
//          KogitoBuildSpecBuildImageArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecBuildImagePtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecBuildImagePtrOutput() KogitoBuildSpecBuildImagePtrOutput
	ToKogitoBuildSpecBuildImagePtrOutputWithContext(context.Context) KogitoBuildSpecBuildImagePtrOutput
}

type kogitoBuildSpecBuildImagePtrType KogitoBuildSpecBuildImageArgs

func KogitoBuildSpecBuildImagePtr(v *KogitoBuildSpecBuildImageArgs) KogitoBuildSpecBuildImagePtrInput {
	return (*kogitoBuildSpecBuildImagePtrType)(v)
}

func (*kogitoBuildSpecBuildImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecBuildImage)(nil)).Elem()
}

func (i *kogitoBuildSpecBuildImagePtrType) ToKogitoBuildSpecBuildImagePtrOutput() KogitoBuildSpecBuildImagePtrOutput {
	return i.ToKogitoBuildSpecBuildImagePtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecBuildImagePtrType) ToKogitoBuildSpecBuildImagePtrOutputWithContext(ctx context.Context) KogitoBuildSpecBuildImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecBuildImagePtrOutput)
}

// Image used to build the Kogito Service from source (Local and Remote). The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
type KogitoBuildSpecBuildImageOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecBuildImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecBuildImage)(nil)).Elem()
}

func (o KogitoBuildSpecBuildImageOutput) ToKogitoBuildSpecBuildImageOutput() KogitoBuildSpecBuildImageOutput {
	return o
}

func (o KogitoBuildSpecBuildImageOutput) ToKogitoBuildSpecBuildImageOutputWithContext(ctx context.Context) KogitoBuildSpecBuildImageOutput {
	return o
}

func (o KogitoBuildSpecBuildImageOutput) ToKogitoBuildSpecBuildImagePtrOutput() KogitoBuildSpecBuildImagePtrOutput {
	return o.ToKogitoBuildSpecBuildImagePtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecBuildImageOutput) ToKogitoBuildSpecBuildImagePtrOutputWithContext(ctx context.Context) KogitoBuildSpecBuildImagePtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecBuildImage) *KogitoBuildSpecBuildImage {
		return &v
	}).(KogitoBuildSpecBuildImagePtrOutput)
}
func (o KogitoBuildSpecBuildImageOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecBuildImage) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o KogitoBuildSpecBuildImageOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecBuildImage) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o KogitoBuildSpecBuildImageOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecBuildImage) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o KogitoBuildSpecBuildImageOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecBuildImage) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type KogitoBuildSpecBuildImagePtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecBuildImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecBuildImage)(nil)).Elem()
}

func (o KogitoBuildSpecBuildImagePtrOutput) ToKogitoBuildSpecBuildImagePtrOutput() KogitoBuildSpecBuildImagePtrOutput {
	return o
}

func (o KogitoBuildSpecBuildImagePtrOutput) ToKogitoBuildSpecBuildImagePtrOutputWithContext(ctx context.Context) KogitoBuildSpecBuildImagePtrOutput {
	return o
}

func (o KogitoBuildSpecBuildImagePtrOutput) Elem() KogitoBuildSpecBuildImageOutput {
	return o.ApplyT(func(v *KogitoBuildSpecBuildImage) KogitoBuildSpecBuildImage { return *v }).(KogitoBuildSpecBuildImageOutput)
}

func (o KogitoBuildSpecBuildImagePtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecBuildImage) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

func (o KogitoBuildSpecBuildImagePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecBuildImage) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o KogitoBuildSpecBuildImagePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecBuildImage) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

func (o KogitoBuildSpecBuildImagePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecBuildImage) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// EnvVar represents an environment variable present in a Container.
type KogitoBuildSpecEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *KogitoBuildSpecEnvsValueFrom `pulumi:"valueFrom"`
}

// KogitoBuildSpecEnvsInput is an input type that accepts KogitoBuildSpecEnvsArgs and KogitoBuildSpecEnvsOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsInput` via:
//
//          KogitoBuildSpecEnvsArgs{...}
type KogitoBuildSpecEnvsInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsOutput() KogitoBuildSpecEnvsOutput
	ToKogitoBuildSpecEnvsOutputWithContext(context.Context) KogitoBuildSpecEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type KogitoBuildSpecEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom KogitoBuildSpecEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (KogitoBuildSpecEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvs)(nil)).Elem()
}

func (i KogitoBuildSpecEnvsArgs) ToKogitoBuildSpecEnvsOutput() KogitoBuildSpecEnvsOutput {
	return i.ToKogitoBuildSpecEnvsOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsArgs) ToKogitoBuildSpecEnvsOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsOutput)
}

// KogitoBuildSpecEnvsArrayInput is an input type that accepts KogitoBuildSpecEnvsArray and KogitoBuildSpecEnvsArrayOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsArrayInput` via:
//
//          KogitoBuildSpecEnvsArray{ KogitoBuildSpecEnvsArgs{...} }
type KogitoBuildSpecEnvsArrayInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsArrayOutput() KogitoBuildSpecEnvsArrayOutput
	ToKogitoBuildSpecEnvsArrayOutputWithContext(context.Context) KogitoBuildSpecEnvsArrayOutput
}

type KogitoBuildSpecEnvsArray []KogitoBuildSpecEnvsInput

func (KogitoBuildSpecEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoBuildSpecEnvs)(nil)).Elem()
}

func (i KogitoBuildSpecEnvsArray) ToKogitoBuildSpecEnvsArrayOutput() KogitoBuildSpecEnvsArrayOutput {
	return i.ToKogitoBuildSpecEnvsArrayOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsArray) ToKogitoBuildSpecEnvsArrayOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type KogitoBuildSpecEnvsOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvs)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsOutput) ToKogitoBuildSpecEnvsOutput() KogitoBuildSpecEnvsOutput {
	return o
}

func (o KogitoBuildSpecEnvsOutput) ToKogitoBuildSpecEnvsOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o KogitoBuildSpecEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o KogitoBuildSpecEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o KogitoBuildSpecEnvsOutput) ValueFrom() KogitoBuildSpecEnvsValueFromPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvs) *KogitoBuildSpecEnvsValueFrom { return v.ValueFrom }).(KogitoBuildSpecEnvsValueFromPtrOutput)
}

type KogitoBuildSpecEnvsArrayOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoBuildSpecEnvs)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsArrayOutput) ToKogitoBuildSpecEnvsArrayOutput() KogitoBuildSpecEnvsArrayOutput {
	return o
}

func (o KogitoBuildSpecEnvsArrayOutput) ToKogitoBuildSpecEnvsArrayOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsArrayOutput {
	return o
}

func (o KogitoBuildSpecEnvsArrayOutput) Index(i pulumi.IntInput) KogitoBuildSpecEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoBuildSpecEnvs {
		return vs[0].([]KogitoBuildSpecEnvs)[vs[1].(int)]
	}).(KogitoBuildSpecEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoBuildSpecEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *KogitoBuildSpecEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *KogitoBuildSpecEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *KogitoBuildSpecEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *KogitoBuildSpecEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// KogitoBuildSpecEnvsValueFromInput is an input type that accepts KogitoBuildSpecEnvsValueFromArgs and KogitoBuildSpecEnvsValueFromOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsValueFromInput` via:
//
//          KogitoBuildSpecEnvsValueFromArgs{...}
type KogitoBuildSpecEnvsValueFromInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsValueFromOutput() KogitoBuildSpecEnvsValueFromOutput
	ToKogitoBuildSpecEnvsValueFromOutputWithContext(context.Context) KogitoBuildSpecEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoBuildSpecEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef KogitoBuildSpecEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef KogitoBuildSpecEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef KogitoBuildSpecEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (KogitoBuildSpecEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvsValueFrom)(nil)).Elem()
}

func (i KogitoBuildSpecEnvsValueFromArgs) ToKogitoBuildSpecEnvsValueFromOutput() KogitoBuildSpecEnvsValueFromOutput {
	return i.ToKogitoBuildSpecEnvsValueFromOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsValueFromArgs) ToKogitoBuildSpecEnvsValueFromOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromOutput)
}

func (i KogitoBuildSpecEnvsValueFromArgs) ToKogitoBuildSpecEnvsValueFromPtrOutput() KogitoBuildSpecEnvsValueFromPtrOutput {
	return i.ToKogitoBuildSpecEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsValueFromArgs) ToKogitoBuildSpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromOutput).ToKogitoBuildSpecEnvsValueFromPtrOutputWithContext(ctx)
}

// KogitoBuildSpecEnvsValueFromPtrInput is an input type that accepts KogitoBuildSpecEnvsValueFromArgs, KogitoBuildSpecEnvsValueFromPtr and KogitoBuildSpecEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsValueFromPtrInput` via:
//
//          KogitoBuildSpecEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecEnvsValueFromPtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsValueFromPtrOutput() KogitoBuildSpecEnvsValueFromPtrOutput
	ToKogitoBuildSpecEnvsValueFromPtrOutputWithContext(context.Context) KogitoBuildSpecEnvsValueFromPtrOutput
}

type kogitoBuildSpecEnvsValueFromPtrType KogitoBuildSpecEnvsValueFromArgs

func KogitoBuildSpecEnvsValueFromPtr(v *KogitoBuildSpecEnvsValueFromArgs) KogitoBuildSpecEnvsValueFromPtrInput {
	return (*kogitoBuildSpecEnvsValueFromPtrType)(v)
}

func (*kogitoBuildSpecEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvsValueFrom)(nil)).Elem()
}

func (i *kogitoBuildSpecEnvsValueFromPtrType) ToKogitoBuildSpecEnvsValueFromPtrOutput() KogitoBuildSpecEnvsValueFromPtrOutput {
	return i.ToKogitoBuildSpecEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecEnvsValueFromPtrType) ToKogitoBuildSpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type KogitoBuildSpecEnvsValueFromOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvsValueFrom)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsValueFromOutput) ToKogitoBuildSpecEnvsValueFromOutput() KogitoBuildSpecEnvsValueFromOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromOutput) ToKogitoBuildSpecEnvsValueFromOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromOutput) ToKogitoBuildSpecEnvsValueFromPtrOutput() KogitoBuildSpecEnvsValueFromPtrOutput {
	return o.ToKogitoBuildSpecEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecEnvsValueFromOutput) ToKogitoBuildSpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFrom) *KogitoBuildSpecEnvsValueFrom {
		return &v
	}).(KogitoBuildSpecEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o KogitoBuildSpecEnvsValueFromOutput) ConfigMapKeyRef() KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFrom) *KogitoBuildSpecEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o KogitoBuildSpecEnvsValueFromOutput) FieldRef() KogitoBuildSpecEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFrom) *KogitoBuildSpecEnvsValueFromFieldRef { return v.FieldRef }).(KogitoBuildSpecEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o KogitoBuildSpecEnvsValueFromOutput) ResourceFieldRef() KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFrom) *KogitoBuildSpecEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o KogitoBuildSpecEnvsValueFromOutput) SecretKeyRef() KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFrom) *KogitoBuildSpecEnvsValueFromSecretKeyRef { return v.SecretKeyRef }).(KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput)
}

type KogitoBuildSpecEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvsValueFrom)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsValueFromPtrOutput) ToKogitoBuildSpecEnvsValueFromPtrOutput() KogitoBuildSpecEnvsValueFromPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromPtrOutput) ToKogitoBuildSpecEnvsValueFromPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromPtrOutput) Elem() KogitoBuildSpecEnvsValueFromOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFrom) KogitoBuildSpecEnvsValueFrom { return *v }).(KogitoBuildSpecEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o KogitoBuildSpecEnvsValueFromPtrOutput) ConfigMapKeyRef() KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFrom) *KogitoBuildSpecEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o KogitoBuildSpecEnvsValueFromPtrOutput) FieldRef() KogitoBuildSpecEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFrom) *KogitoBuildSpecEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(KogitoBuildSpecEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o KogitoBuildSpecEnvsValueFromPtrOutput) ResourceFieldRef() KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFrom) *KogitoBuildSpecEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o KogitoBuildSpecEnvsValueFromPtrOutput) SecretKeyRef() KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFrom) *KogitoBuildSpecEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type KogitoBuildSpecEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// KogitoBuildSpecEnvsValueFromConfigMapKeyRefInput is an input type that accepts KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs and KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsValueFromConfigMapKeyRefInput` via:
//
//          KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs{...}
type KogitoBuildSpecEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput() KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput
	ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput() KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput {
	return i.ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput)
}

func (i KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs) ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput).ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs, KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtr and KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput
	ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput
}

type kogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrType KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs

func KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtr(v *KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs) KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrInput {
	return (*kogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*kogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *kogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrType) ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrType) ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput() KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput) ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromConfigMapKeyRef) *KogitoBuildSpecEnvsValueFromConfigMapKeyRef {
		return &v
	}).(KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput) ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput() KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput) ToKogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput) Elem() KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromConfigMapKeyRef) KogitoBuildSpecEnvsValueFromConfigMapKeyRef {
		return *v
	}).(KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoBuildSpecEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// KogitoBuildSpecEnvsValueFromFieldRefInput is an input type that accepts KogitoBuildSpecEnvsValueFromFieldRefArgs and KogitoBuildSpecEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsValueFromFieldRefInput` via:
//
//          KogitoBuildSpecEnvsValueFromFieldRefArgs{...}
type KogitoBuildSpecEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsValueFromFieldRefOutput() KogitoBuildSpecEnvsValueFromFieldRefOutput
	ToKogitoBuildSpecEnvsValueFromFieldRefOutputWithContext(context.Context) KogitoBuildSpecEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoBuildSpecEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (KogitoBuildSpecEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (i KogitoBuildSpecEnvsValueFromFieldRefArgs) ToKogitoBuildSpecEnvsValueFromFieldRefOutput() KogitoBuildSpecEnvsValueFromFieldRefOutput {
	return i.ToKogitoBuildSpecEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsValueFromFieldRefArgs) ToKogitoBuildSpecEnvsValueFromFieldRefOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromFieldRefOutput)
}

func (i KogitoBuildSpecEnvsValueFromFieldRefArgs) ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutput() KogitoBuildSpecEnvsValueFromFieldRefPtrOutput {
	return i.ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsValueFromFieldRefArgs) ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromFieldRefOutput).ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// KogitoBuildSpecEnvsValueFromFieldRefPtrInput is an input type that accepts KogitoBuildSpecEnvsValueFromFieldRefArgs, KogitoBuildSpecEnvsValueFromFieldRefPtr and KogitoBuildSpecEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsValueFromFieldRefPtrInput` via:
//
//          KogitoBuildSpecEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutput() KogitoBuildSpecEnvsValueFromFieldRefPtrOutput
	ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutputWithContext(context.Context) KogitoBuildSpecEnvsValueFromFieldRefPtrOutput
}

type kogitoBuildSpecEnvsValueFromFieldRefPtrType KogitoBuildSpecEnvsValueFromFieldRefArgs

func KogitoBuildSpecEnvsValueFromFieldRefPtr(v *KogitoBuildSpecEnvsValueFromFieldRefArgs) KogitoBuildSpecEnvsValueFromFieldRefPtrInput {
	return (*kogitoBuildSpecEnvsValueFromFieldRefPtrType)(v)
}

func (*kogitoBuildSpecEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *kogitoBuildSpecEnvsValueFromFieldRefPtrType) ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutput() KogitoBuildSpecEnvsValueFromFieldRefPtrOutput {
	return i.ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecEnvsValueFromFieldRefPtrType) ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type KogitoBuildSpecEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsValueFromFieldRefOutput) ToKogitoBuildSpecEnvsValueFromFieldRefOutput() KogitoBuildSpecEnvsValueFromFieldRefOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromFieldRefOutput) ToKogitoBuildSpecEnvsValueFromFieldRefOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromFieldRefOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromFieldRefOutput) ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutput() KogitoBuildSpecEnvsValueFromFieldRefPtrOutput {
	return o.ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecEnvsValueFromFieldRefOutput) ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromFieldRef) *KogitoBuildSpecEnvsValueFromFieldRef {
		return &v
	}).(KogitoBuildSpecEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o KogitoBuildSpecEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o KogitoBuildSpecEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type KogitoBuildSpecEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvsValueFromFieldRef)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsValueFromFieldRefPtrOutput) ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutput() KogitoBuildSpecEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromFieldRefPtrOutput) ToKogitoBuildSpecEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromFieldRefPtrOutput) Elem() KogitoBuildSpecEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromFieldRef) KogitoBuildSpecEnvsValueFromFieldRef { return *v }).(KogitoBuildSpecEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o KogitoBuildSpecEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o KogitoBuildSpecEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoBuildSpecEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *KogitoBuildSpecEnvsValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// KogitoBuildSpecEnvsValueFromResourceFieldRefInput is an input type that accepts KogitoBuildSpecEnvsValueFromResourceFieldRefArgs and KogitoBuildSpecEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsValueFromResourceFieldRefInput` via:
//
//          KogitoBuildSpecEnvsValueFromResourceFieldRefArgs{...}
type KogitoBuildSpecEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsValueFromResourceFieldRefOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefOutput
	ToKogitoBuildSpecEnvsValueFromResourceFieldRefOutputWithContext(context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoBuildSpecEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (KogitoBuildSpecEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i KogitoBuildSpecEnvsValueFromResourceFieldRefArgs) ToKogitoBuildSpecEnvsValueFromResourceFieldRefOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefOutput {
	return i.ToKogitoBuildSpecEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsValueFromResourceFieldRefArgs) ToKogitoBuildSpecEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromResourceFieldRefOutput)
}

func (i KogitoBuildSpecEnvsValueFromResourceFieldRefArgs) ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsValueFromResourceFieldRefArgs) ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromResourceFieldRefOutput).ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// KogitoBuildSpecEnvsValueFromResourceFieldRefPtrInput is an input type that accepts KogitoBuildSpecEnvsValueFromResourceFieldRefArgs, KogitoBuildSpecEnvsValueFromResourceFieldRefPtr and KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsValueFromResourceFieldRefPtrInput` via:
//
//          KogitoBuildSpecEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput
	ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput
}

type kogitoBuildSpecEnvsValueFromResourceFieldRefPtrType KogitoBuildSpecEnvsValueFromResourceFieldRefArgs

func KogitoBuildSpecEnvsValueFromResourceFieldRefPtr(v *KogitoBuildSpecEnvsValueFromResourceFieldRefArgs) KogitoBuildSpecEnvsValueFromResourceFieldRefPtrInput {
	return (*kogitoBuildSpecEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*kogitoBuildSpecEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *kogitoBuildSpecEnvsValueFromResourceFieldRefPtrType) ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecEnvsValueFromResourceFieldRefPtrType) ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type KogitoBuildSpecEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefOutput) ToKogitoBuildSpecEnvsValueFromResourceFieldRefOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefOutput) ToKogitoBuildSpecEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefOutput) ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefOutput) ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromResourceFieldRef) *KogitoBuildSpecEnvsValueFromResourceFieldRef {
		return &v
	}).(KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o KogitoBuildSpecEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o KogitoBuildSpecEnvsValueFromResourceFieldRefOutput) Divisor() KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromResourceFieldRef) *KogitoBuildSpecEnvsValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o KogitoBuildSpecEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput) ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput) ToKogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput) Elem() KogitoBuildSpecEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromResourceFieldRef) KogitoBuildSpecEnvsValueFromResourceFieldRef {
		return *v
	}).(KogitoBuildSpecEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput) Divisor() KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromResourceFieldRef) *KogitoBuildSpecEnvsValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type KogitoBuildSpecEnvsValueFromResourceFieldRefDivisor struct {
}

// KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorInput is an input type that accepts KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs and KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorInput` via:
//
//          KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs{...}
type KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput
	ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput
}

type KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs struct {
}

func (KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return i.ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput)
}

func (i KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs) ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput).ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrInput is an input type that accepts KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs, KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtr and KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrInput` via:
//
//          KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput
	ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput
}

type kogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrType KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs

func KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtr(v *KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs) KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrInput {
	return (*kogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*kogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *kogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrType) ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrType) ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput) ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromResourceFieldRefDivisor) *KogitoBuildSpecEnvsValueFromResourceFieldRefDivisor {
		return &v
	}).(KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput) ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput() KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput) ToKogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput) Elem() KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromResourceFieldRefDivisor) KogitoBuildSpecEnvsValueFromResourceFieldRefDivisor {
		return *v
	}).(KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type KogitoBuildSpecEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// KogitoBuildSpecEnvsValueFromSecretKeyRefInput is an input type that accepts KogitoBuildSpecEnvsValueFromSecretKeyRefArgs and KogitoBuildSpecEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsValueFromSecretKeyRefInput` via:
//
//          KogitoBuildSpecEnvsValueFromSecretKeyRefArgs{...}
type KogitoBuildSpecEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsValueFromSecretKeyRefOutput() KogitoBuildSpecEnvsValueFromSecretKeyRefOutput
	ToKogitoBuildSpecEnvsValueFromSecretKeyRefOutputWithContext(context.Context) KogitoBuildSpecEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type KogitoBuildSpecEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (KogitoBuildSpecEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i KogitoBuildSpecEnvsValueFromSecretKeyRefArgs) ToKogitoBuildSpecEnvsValueFromSecretKeyRefOutput() KogitoBuildSpecEnvsValueFromSecretKeyRefOutput {
	return i.ToKogitoBuildSpecEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsValueFromSecretKeyRefArgs) ToKogitoBuildSpecEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromSecretKeyRefOutput)
}

func (i KogitoBuildSpecEnvsValueFromSecretKeyRefArgs) ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecEnvsValueFromSecretKeyRefArgs) ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromSecretKeyRefOutput).ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// KogitoBuildSpecEnvsValueFromSecretKeyRefPtrInput is an input type that accepts KogitoBuildSpecEnvsValueFromSecretKeyRefArgs, KogitoBuildSpecEnvsValueFromSecretKeyRefPtr and KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecEnvsValueFromSecretKeyRefPtrInput` via:
//
//          KogitoBuildSpecEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput
	ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput
}

type kogitoBuildSpecEnvsValueFromSecretKeyRefPtrType KogitoBuildSpecEnvsValueFromSecretKeyRefArgs

func KogitoBuildSpecEnvsValueFromSecretKeyRefPtr(v *KogitoBuildSpecEnvsValueFromSecretKeyRefArgs) KogitoBuildSpecEnvsValueFromSecretKeyRefPtrInput {
	return (*kogitoBuildSpecEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*kogitoBuildSpecEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *kogitoBuildSpecEnvsValueFromSecretKeyRefPtrType) ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecEnvsValueFromSecretKeyRefPtrType) ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type KogitoBuildSpecEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsValueFromSecretKeyRefOutput) ToKogitoBuildSpecEnvsValueFromSecretKeyRefOutput() KogitoBuildSpecEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromSecretKeyRefOutput) ToKogitoBuildSpecEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromSecretKeyRefOutput) ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecEnvsValueFromSecretKeyRefOutput) ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromSecretKeyRef) *KogitoBuildSpecEnvsValueFromSecretKeyRef {
		return &v
	}).(KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o KogitoBuildSpecEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoBuildSpecEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o KogitoBuildSpecEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput) ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput() KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput) ToKogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput) Elem() KogitoBuildSpecEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromSecretKeyRef) KogitoBuildSpecEnvsValueFromSecretKeyRef { return *v }).(KogitoBuildSpecEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
type KogitoBuildSpecGitSource struct {
	// Context/subdirectory where the code is located, relative to the repo root.
	ContextDir *string `pulumi:"contextDir"`
	// Branch to use in the Git repository.
	Reference *string `pulumi:"reference"`
	// Git URI for the s2i source.
	Uri string `pulumi:"uri"`
}

// KogitoBuildSpecGitSourceInput is an input type that accepts KogitoBuildSpecGitSourceArgs and KogitoBuildSpecGitSourceOutput values.
// You can construct a concrete instance of `KogitoBuildSpecGitSourceInput` via:
//
//          KogitoBuildSpecGitSourceArgs{...}
type KogitoBuildSpecGitSourceInput interface {
	pulumi.Input

	ToKogitoBuildSpecGitSourceOutput() KogitoBuildSpecGitSourceOutput
	ToKogitoBuildSpecGitSourceOutputWithContext(context.Context) KogitoBuildSpecGitSourceOutput
}

// Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
type KogitoBuildSpecGitSourceArgs struct {
	// Context/subdirectory where the code is located, relative to the repo root.
	ContextDir pulumi.StringPtrInput `pulumi:"contextDir"`
	// Branch to use in the Git repository.
	Reference pulumi.StringPtrInput `pulumi:"reference"`
	// Git URI for the s2i source.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (KogitoBuildSpecGitSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecGitSource)(nil)).Elem()
}

func (i KogitoBuildSpecGitSourceArgs) ToKogitoBuildSpecGitSourceOutput() KogitoBuildSpecGitSourceOutput {
	return i.ToKogitoBuildSpecGitSourceOutputWithContext(context.Background())
}

func (i KogitoBuildSpecGitSourceArgs) ToKogitoBuildSpecGitSourceOutputWithContext(ctx context.Context) KogitoBuildSpecGitSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecGitSourceOutput)
}

func (i KogitoBuildSpecGitSourceArgs) ToKogitoBuildSpecGitSourcePtrOutput() KogitoBuildSpecGitSourcePtrOutput {
	return i.ToKogitoBuildSpecGitSourcePtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecGitSourceArgs) ToKogitoBuildSpecGitSourcePtrOutputWithContext(ctx context.Context) KogitoBuildSpecGitSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecGitSourceOutput).ToKogitoBuildSpecGitSourcePtrOutputWithContext(ctx)
}

// KogitoBuildSpecGitSourcePtrInput is an input type that accepts KogitoBuildSpecGitSourceArgs, KogitoBuildSpecGitSourcePtr and KogitoBuildSpecGitSourcePtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecGitSourcePtrInput` via:
//
//          KogitoBuildSpecGitSourceArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecGitSourcePtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecGitSourcePtrOutput() KogitoBuildSpecGitSourcePtrOutput
	ToKogitoBuildSpecGitSourcePtrOutputWithContext(context.Context) KogitoBuildSpecGitSourcePtrOutput
}

type kogitoBuildSpecGitSourcePtrType KogitoBuildSpecGitSourceArgs

func KogitoBuildSpecGitSourcePtr(v *KogitoBuildSpecGitSourceArgs) KogitoBuildSpecGitSourcePtrInput {
	return (*kogitoBuildSpecGitSourcePtrType)(v)
}

func (*kogitoBuildSpecGitSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecGitSource)(nil)).Elem()
}

func (i *kogitoBuildSpecGitSourcePtrType) ToKogitoBuildSpecGitSourcePtrOutput() KogitoBuildSpecGitSourcePtrOutput {
	return i.ToKogitoBuildSpecGitSourcePtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecGitSourcePtrType) ToKogitoBuildSpecGitSourcePtrOutputWithContext(ctx context.Context) KogitoBuildSpecGitSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecGitSourcePtrOutput)
}

// Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
type KogitoBuildSpecGitSourceOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecGitSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecGitSource)(nil)).Elem()
}

func (o KogitoBuildSpecGitSourceOutput) ToKogitoBuildSpecGitSourceOutput() KogitoBuildSpecGitSourceOutput {
	return o
}

func (o KogitoBuildSpecGitSourceOutput) ToKogitoBuildSpecGitSourceOutputWithContext(ctx context.Context) KogitoBuildSpecGitSourceOutput {
	return o
}

func (o KogitoBuildSpecGitSourceOutput) ToKogitoBuildSpecGitSourcePtrOutput() KogitoBuildSpecGitSourcePtrOutput {
	return o.ToKogitoBuildSpecGitSourcePtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecGitSourceOutput) ToKogitoBuildSpecGitSourcePtrOutputWithContext(ctx context.Context) KogitoBuildSpecGitSourcePtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecGitSource) *KogitoBuildSpecGitSource {
		return &v
	}).(KogitoBuildSpecGitSourcePtrOutput)
}

// Context/subdirectory where the code is located, relative to the repo root.
func (o KogitoBuildSpecGitSourceOutput) ContextDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecGitSource) *string { return v.ContextDir }).(pulumi.StringPtrOutput)
}

// Branch to use in the Git repository.
func (o KogitoBuildSpecGitSourceOutput) Reference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecGitSource) *string { return v.Reference }).(pulumi.StringPtrOutput)
}

// Git URI for the s2i source.
func (o KogitoBuildSpecGitSourceOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoBuildSpecGitSource) string { return v.Uri }).(pulumi.StringOutput)
}

type KogitoBuildSpecGitSourcePtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecGitSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecGitSource)(nil)).Elem()
}

func (o KogitoBuildSpecGitSourcePtrOutput) ToKogitoBuildSpecGitSourcePtrOutput() KogitoBuildSpecGitSourcePtrOutput {
	return o
}

func (o KogitoBuildSpecGitSourcePtrOutput) ToKogitoBuildSpecGitSourcePtrOutputWithContext(ctx context.Context) KogitoBuildSpecGitSourcePtrOutput {
	return o
}

func (o KogitoBuildSpecGitSourcePtrOutput) Elem() KogitoBuildSpecGitSourceOutput {
	return o.ApplyT(func(v *KogitoBuildSpecGitSource) KogitoBuildSpecGitSource { return *v }).(KogitoBuildSpecGitSourceOutput)
}

// Context/subdirectory where the code is located, relative to the repo root.
func (o KogitoBuildSpecGitSourcePtrOutput) ContextDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecGitSource) *string {
		if v == nil {
			return nil
		}
		return v.ContextDir
	}).(pulumi.StringPtrOutput)
}

// Branch to use in the Git repository.
func (o KogitoBuildSpecGitSourcePtrOutput) Reference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecGitSource) *string {
		if v == nil {
			return nil
		}
		return v.Reference
	}).(pulumi.StringPtrOutput)
}

// Git URI for the s2i source.
func (o KogitoBuildSpecGitSourcePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecGitSource) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

// Resources Requirements for builder pods.
type KogitoBuildSpecResources struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits map[string]KogitoBuildSpecResourcesLimits `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests map[string]KogitoBuildSpecResourcesRequests `pulumi:"requests"`
}

// KogitoBuildSpecResourcesInput is an input type that accepts KogitoBuildSpecResourcesArgs and KogitoBuildSpecResourcesOutput values.
// You can construct a concrete instance of `KogitoBuildSpecResourcesInput` via:
//
//          KogitoBuildSpecResourcesArgs{...}
type KogitoBuildSpecResourcesInput interface {
	pulumi.Input

	ToKogitoBuildSpecResourcesOutput() KogitoBuildSpecResourcesOutput
	ToKogitoBuildSpecResourcesOutputWithContext(context.Context) KogitoBuildSpecResourcesOutput
}

// Resources Requirements for builder pods.
type KogitoBuildSpecResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits KogitoBuildSpecResourcesLimitsMapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests KogitoBuildSpecResourcesRequestsMapInput `pulumi:"requests"`
}

func (KogitoBuildSpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecResources)(nil)).Elem()
}

func (i KogitoBuildSpecResourcesArgs) ToKogitoBuildSpecResourcesOutput() KogitoBuildSpecResourcesOutput {
	return i.ToKogitoBuildSpecResourcesOutputWithContext(context.Background())
}

func (i KogitoBuildSpecResourcesArgs) ToKogitoBuildSpecResourcesOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecResourcesOutput)
}

func (i KogitoBuildSpecResourcesArgs) ToKogitoBuildSpecResourcesPtrOutput() KogitoBuildSpecResourcesPtrOutput {
	return i.ToKogitoBuildSpecResourcesPtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecResourcesArgs) ToKogitoBuildSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecResourcesOutput).ToKogitoBuildSpecResourcesPtrOutputWithContext(ctx)
}

// KogitoBuildSpecResourcesPtrInput is an input type that accepts KogitoBuildSpecResourcesArgs, KogitoBuildSpecResourcesPtr and KogitoBuildSpecResourcesPtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecResourcesPtrInput` via:
//
//          KogitoBuildSpecResourcesArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecResourcesPtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecResourcesPtrOutput() KogitoBuildSpecResourcesPtrOutput
	ToKogitoBuildSpecResourcesPtrOutputWithContext(context.Context) KogitoBuildSpecResourcesPtrOutput
}

type kogitoBuildSpecResourcesPtrType KogitoBuildSpecResourcesArgs

func KogitoBuildSpecResourcesPtr(v *KogitoBuildSpecResourcesArgs) KogitoBuildSpecResourcesPtrInput {
	return (*kogitoBuildSpecResourcesPtrType)(v)
}

func (*kogitoBuildSpecResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecResources)(nil)).Elem()
}

func (i *kogitoBuildSpecResourcesPtrType) ToKogitoBuildSpecResourcesPtrOutput() KogitoBuildSpecResourcesPtrOutput {
	return i.ToKogitoBuildSpecResourcesPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecResourcesPtrType) ToKogitoBuildSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecResourcesPtrOutput)
}

// Resources Requirements for builder pods.
type KogitoBuildSpecResourcesOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecResources)(nil)).Elem()
}

func (o KogitoBuildSpecResourcesOutput) ToKogitoBuildSpecResourcesOutput() KogitoBuildSpecResourcesOutput {
	return o
}

func (o KogitoBuildSpecResourcesOutput) ToKogitoBuildSpecResourcesOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesOutput {
	return o
}

func (o KogitoBuildSpecResourcesOutput) ToKogitoBuildSpecResourcesPtrOutput() KogitoBuildSpecResourcesPtrOutput {
	return o.ToKogitoBuildSpecResourcesPtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecResourcesOutput) ToKogitoBuildSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecResources) *KogitoBuildSpecResources {
		return &v
	}).(KogitoBuildSpecResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoBuildSpecResourcesOutput) Limits() KogitoBuildSpecResourcesLimitsMapOutput {
	return o.ApplyT(func(v KogitoBuildSpecResources) map[string]KogitoBuildSpecResourcesLimits { return v.Limits }).(KogitoBuildSpecResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoBuildSpecResourcesOutput) Requests() KogitoBuildSpecResourcesRequestsMapOutput {
	return o.ApplyT(func(v KogitoBuildSpecResources) map[string]KogitoBuildSpecResourcesRequests { return v.Requests }).(KogitoBuildSpecResourcesRequestsMapOutput)
}

type KogitoBuildSpecResourcesPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecResources)(nil)).Elem()
}

func (o KogitoBuildSpecResourcesPtrOutput) ToKogitoBuildSpecResourcesPtrOutput() KogitoBuildSpecResourcesPtrOutput {
	return o
}

func (o KogitoBuildSpecResourcesPtrOutput) ToKogitoBuildSpecResourcesPtrOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesPtrOutput {
	return o
}

func (o KogitoBuildSpecResourcesPtrOutput) Elem() KogitoBuildSpecResourcesOutput {
	return o.ApplyT(func(v *KogitoBuildSpecResources) KogitoBuildSpecResources { return *v }).(KogitoBuildSpecResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoBuildSpecResourcesPtrOutput) Limits() KogitoBuildSpecResourcesLimitsMapOutput {
	return o.ApplyT(func(v *KogitoBuildSpecResources) map[string]KogitoBuildSpecResourcesLimits {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(KogitoBuildSpecResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o KogitoBuildSpecResourcesPtrOutput) Requests() KogitoBuildSpecResourcesRequestsMapOutput {
	return o.ApplyT(func(v *KogitoBuildSpecResources) map[string]KogitoBuildSpecResourcesRequests {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(KogitoBuildSpecResourcesRequestsMapOutput)
}

type KogitoBuildSpecResourcesLimits struct {
}

// KogitoBuildSpecResourcesLimitsInput is an input type that accepts KogitoBuildSpecResourcesLimitsArgs and KogitoBuildSpecResourcesLimitsOutput values.
// You can construct a concrete instance of `KogitoBuildSpecResourcesLimitsInput` via:
//
//          KogitoBuildSpecResourcesLimitsArgs{...}
type KogitoBuildSpecResourcesLimitsInput interface {
	pulumi.Input

	ToKogitoBuildSpecResourcesLimitsOutput() KogitoBuildSpecResourcesLimitsOutput
	ToKogitoBuildSpecResourcesLimitsOutputWithContext(context.Context) KogitoBuildSpecResourcesLimitsOutput
}

type KogitoBuildSpecResourcesLimitsArgs struct {
}

func (KogitoBuildSpecResourcesLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecResourcesLimits)(nil)).Elem()
}

func (i KogitoBuildSpecResourcesLimitsArgs) ToKogitoBuildSpecResourcesLimitsOutput() KogitoBuildSpecResourcesLimitsOutput {
	return i.ToKogitoBuildSpecResourcesLimitsOutputWithContext(context.Background())
}

func (i KogitoBuildSpecResourcesLimitsArgs) ToKogitoBuildSpecResourcesLimitsOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecResourcesLimitsOutput)
}

// KogitoBuildSpecResourcesLimitsMapInput is an input type that accepts KogitoBuildSpecResourcesLimitsMap and KogitoBuildSpecResourcesLimitsMapOutput values.
// You can construct a concrete instance of `KogitoBuildSpecResourcesLimitsMapInput` via:
//
//          KogitoBuildSpecResourcesLimitsMap{ "key": KogitoBuildSpecResourcesLimitsArgs{...} }
type KogitoBuildSpecResourcesLimitsMapInput interface {
	pulumi.Input

	ToKogitoBuildSpecResourcesLimitsMapOutput() KogitoBuildSpecResourcesLimitsMapOutput
	ToKogitoBuildSpecResourcesLimitsMapOutputWithContext(context.Context) KogitoBuildSpecResourcesLimitsMapOutput
}

type KogitoBuildSpecResourcesLimitsMap map[string]KogitoBuildSpecResourcesLimitsInput

func (KogitoBuildSpecResourcesLimitsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoBuildSpecResourcesLimits)(nil)).Elem()
}

func (i KogitoBuildSpecResourcesLimitsMap) ToKogitoBuildSpecResourcesLimitsMapOutput() KogitoBuildSpecResourcesLimitsMapOutput {
	return i.ToKogitoBuildSpecResourcesLimitsMapOutputWithContext(context.Background())
}

func (i KogitoBuildSpecResourcesLimitsMap) ToKogitoBuildSpecResourcesLimitsMapOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesLimitsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecResourcesLimitsMapOutput)
}

type KogitoBuildSpecResourcesLimitsOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecResourcesLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecResourcesLimits)(nil)).Elem()
}

func (o KogitoBuildSpecResourcesLimitsOutput) ToKogitoBuildSpecResourcesLimitsOutput() KogitoBuildSpecResourcesLimitsOutput {
	return o
}

func (o KogitoBuildSpecResourcesLimitsOutput) ToKogitoBuildSpecResourcesLimitsOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesLimitsOutput {
	return o
}

type KogitoBuildSpecResourcesLimitsMapOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecResourcesLimitsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoBuildSpecResourcesLimits)(nil)).Elem()
}

func (o KogitoBuildSpecResourcesLimitsMapOutput) ToKogitoBuildSpecResourcesLimitsMapOutput() KogitoBuildSpecResourcesLimitsMapOutput {
	return o
}

func (o KogitoBuildSpecResourcesLimitsMapOutput) ToKogitoBuildSpecResourcesLimitsMapOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesLimitsMapOutput {
	return o
}

func (o KogitoBuildSpecResourcesLimitsMapOutput) MapIndex(k pulumi.StringInput) KogitoBuildSpecResourcesLimitsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KogitoBuildSpecResourcesLimits {
		return vs[0].(map[string]KogitoBuildSpecResourcesLimits)[vs[1].(string)]
	}).(KogitoBuildSpecResourcesLimitsOutput)
}

type KogitoBuildSpecResourcesRequests struct {
}

// KogitoBuildSpecResourcesRequestsInput is an input type that accepts KogitoBuildSpecResourcesRequestsArgs and KogitoBuildSpecResourcesRequestsOutput values.
// You can construct a concrete instance of `KogitoBuildSpecResourcesRequestsInput` via:
//
//          KogitoBuildSpecResourcesRequestsArgs{...}
type KogitoBuildSpecResourcesRequestsInput interface {
	pulumi.Input

	ToKogitoBuildSpecResourcesRequestsOutput() KogitoBuildSpecResourcesRequestsOutput
	ToKogitoBuildSpecResourcesRequestsOutputWithContext(context.Context) KogitoBuildSpecResourcesRequestsOutput
}

type KogitoBuildSpecResourcesRequestsArgs struct {
}

func (KogitoBuildSpecResourcesRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecResourcesRequests)(nil)).Elem()
}

func (i KogitoBuildSpecResourcesRequestsArgs) ToKogitoBuildSpecResourcesRequestsOutput() KogitoBuildSpecResourcesRequestsOutput {
	return i.ToKogitoBuildSpecResourcesRequestsOutputWithContext(context.Background())
}

func (i KogitoBuildSpecResourcesRequestsArgs) ToKogitoBuildSpecResourcesRequestsOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecResourcesRequestsOutput)
}

// KogitoBuildSpecResourcesRequestsMapInput is an input type that accepts KogitoBuildSpecResourcesRequestsMap and KogitoBuildSpecResourcesRequestsMapOutput values.
// You can construct a concrete instance of `KogitoBuildSpecResourcesRequestsMapInput` via:
//
//          KogitoBuildSpecResourcesRequestsMap{ "key": KogitoBuildSpecResourcesRequestsArgs{...} }
type KogitoBuildSpecResourcesRequestsMapInput interface {
	pulumi.Input

	ToKogitoBuildSpecResourcesRequestsMapOutput() KogitoBuildSpecResourcesRequestsMapOutput
	ToKogitoBuildSpecResourcesRequestsMapOutputWithContext(context.Context) KogitoBuildSpecResourcesRequestsMapOutput
}

type KogitoBuildSpecResourcesRequestsMap map[string]KogitoBuildSpecResourcesRequestsInput

func (KogitoBuildSpecResourcesRequestsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoBuildSpecResourcesRequests)(nil)).Elem()
}

func (i KogitoBuildSpecResourcesRequestsMap) ToKogitoBuildSpecResourcesRequestsMapOutput() KogitoBuildSpecResourcesRequestsMapOutput {
	return i.ToKogitoBuildSpecResourcesRequestsMapOutputWithContext(context.Background())
}

func (i KogitoBuildSpecResourcesRequestsMap) ToKogitoBuildSpecResourcesRequestsMapOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesRequestsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecResourcesRequestsMapOutput)
}

type KogitoBuildSpecResourcesRequestsOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecResourcesRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecResourcesRequests)(nil)).Elem()
}

func (o KogitoBuildSpecResourcesRequestsOutput) ToKogitoBuildSpecResourcesRequestsOutput() KogitoBuildSpecResourcesRequestsOutput {
	return o
}

func (o KogitoBuildSpecResourcesRequestsOutput) ToKogitoBuildSpecResourcesRequestsOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesRequestsOutput {
	return o
}

type KogitoBuildSpecResourcesRequestsMapOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecResourcesRequestsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KogitoBuildSpecResourcesRequests)(nil)).Elem()
}

func (o KogitoBuildSpecResourcesRequestsMapOutput) ToKogitoBuildSpecResourcesRequestsMapOutput() KogitoBuildSpecResourcesRequestsMapOutput {
	return o
}

func (o KogitoBuildSpecResourcesRequestsMapOutput) ToKogitoBuildSpecResourcesRequestsMapOutputWithContext(ctx context.Context) KogitoBuildSpecResourcesRequestsMapOutput {
	return o
}

func (o KogitoBuildSpecResourcesRequestsMapOutput) MapIndex(k pulumi.StringInput) KogitoBuildSpecResourcesRequestsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KogitoBuildSpecResourcesRequests {
		return vs[0].(map[string]KogitoBuildSpecResourcesRequests)[vs[1].(string)]
	}).(KogitoBuildSpecResourcesRequestsOutput)
}

// Image used as the base image for the final Kogito service. This image only has the required packages to run the application. For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
type KogitoBuildSpecRuntimeImage struct {
	Domain    *string `pulumi:"domain"`
	Name      *string `pulumi:"name"`
	Namespace *string `pulumi:"namespace"`
	Tag       *string `pulumi:"tag"`
}

// KogitoBuildSpecRuntimeImageInput is an input type that accepts KogitoBuildSpecRuntimeImageArgs and KogitoBuildSpecRuntimeImageOutput values.
// You can construct a concrete instance of `KogitoBuildSpecRuntimeImageInput` via:
//
//          KogitoBuildSpecRuntimeImageArgs{...}
type KogitoBuildSpecRuntimeImageInput interface {
	pulumi.Input

	ToKogitoBuildSpecRuntimeImageOutput() KogitoBuildSpecRuntimeImageOutput
	ToKogitoBuildSpecRuntimeImageOutputWithContext(context.Context) KogitoBuildSpecRuntimeImageOutput
}

// Image used as the base image for the final Kogito service. This image only has the required packages to run the application. For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
type KogitoBuildSpecRuntimeImageArgs struct {
	Domain    pulumi.StringPtrInput `pulumi:"domain"`
	Name      pulumi.StringPtrInput `pulumi:"name"`
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	Tag       pulumi.StringPtrInput `pulumi:"tag"`
}

func (KogitoBuildSpecRuntimeImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecRuntimeImage)(nil)).Elem()
}

func (i KogitoBuildSpecRuntimeImageArgs) ToKogitoBuildSpecRuntimeImageOutput() KogitoBuildSpecRuntimeImageOutput {
	return i.ToKogitoBuildSpecRuntimeImageOutputWithContext(context.Background())
}

func (i KogitoBuildSpecRuntimeImageArgs) ToKogitoBuildSpecRuntimeImageOutputWithContext(ctx context.Context) KogitoBuildSpecRuntimeImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecRuntimeImageOutput)
}

func (i KogitoBuildSpecRuntimeImageArgs) ToKogitoBuildSpecRuntimeImagePtrOutput() KogitoBuildSpecRuntimeImagePtrOutput {
	return i.ToKogitoBuildSpecRuntimeImagePtrOutputWithContext(context.Background())
}

func (i KogitoBuildSpecRuntimeImageArgs) ToKogitoBuildSpecRuntimeImagePtrOutputWithContext(ctx context.Context) KogitoBuildSpecRuntimeImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecRuntimeImageOutput).ToKogitoBuildSpecRuntimeImagePtrOutputWithContext(ctx)
}

// KogitoBuildSpecRuntimeImagePtrInput is an input type that accepts KogitoBuildSpecRuntimeImageArgs, KogitoBuildSpecRuntimeImagePtr and KogitoBuildSpecRuntimeImagePtrOutput values.
// You can construct a concrete instance of `KogitoBuildSpecRuntimeImagePtrInput` via:
//
//          KogitoBuildSpecRuntimeImageArgs{...}
//
//  or:
//
//          nil
type KogitoBuildSpecRuntimeImagePtrInput interface {
	pulumi.Input

	ToKogitoBuildSpecRuntimeImagePtrOutput() KogitoBuildSpecRuntimeImagePtrOutput
	ToKogitoBuildSpecRuntimeImagePtrOutputWithContext(context.Context) KogitoBuildSpecRuntimeImagePtrOutput
}

type kogitoBuildSpecRuntimeImagePtrType KogitoBuildSpecRuntimeImageArgs

func KogitoBuildSpecRuntimeImagePtr(v *KogitoBuildSpecRuntimeImageArgs) KogitoBuildSpecRuntimeImagePtrInput {
	return (*kogitoBuildSpecRuntimeImagePtrType)(v)
}

func (*kogitoBuildSpecRuntimeImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecRuntimeImage)(nil)).Elem()
}

func (i *kogitoBuildSpecRuntimeImagePtrType) ToKogitoBuildSpecRuntimeImagePtrOutput() KogitoBuildSpecRuntimeImagePtrOutput {
	return i.ToKogitoBuildSpecRuntimeImagePtrOutputWithContext(context.Background())
}

func (i *kogitoBuildSpecRuntimeImagePtrType) ToKogitoBuildSpecRuntimeImagePtrOutputWithContext(ctx context.Context) KogitoBuildSpecRuntimeImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecRuntimeImagePtrOutput)
}

// Image used as the base image for the final Kogito service. This image only has the required packages to run the application. For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
type KogitoBuildSpecRuntimeImageOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecRuntimeImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecRuntimeImage)(nil)).Elem()
}

func (o KogitoBuildSpecRuntimeImageOutput) ToKogitoBuildSpecRuntimeImageOutput() KogitoBuildSpecRuntimeImageOutput {
	return o
}

func (o KogitoBuildSpecRuntimeImageOutput) ToKogitoBuildSpecRuntimeImageOutputWithContext(ctx context.Context) KogitoBuildSpecRuntimeImageOutput {
	return o
}

func (o KogitoBuildSpecRuntimeImageOutput) ToKogitoBuildSpecRuntimeImagePtrOutput() KogitoBuildSpecRuntimeImagePtrOutput {
	return o.ToKogitoBuildSpecRuntimeImagePtrOutputWithContext(context.Background())
}

func (o KogitoBuildSpecRuntimeImageOutput) ToKogitoBuildSpecRuntimeImagePtrOutputWithContext(ctx context.Context) KogitoBuildSpecRuntimeImagePtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecRuntimeImage) *KogitoBuildSpecRuntimeImage {
		return &v
	}).(KogitoBuildSpecRuntimeImagePtrOutput)
}
func (o KogitoBuildSpecRuntimeImageOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecRuntimeImage) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o KogitoBuildSpecRuntimeImageOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecRuntimeImage) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o KogitoBuildSpecRuntimeImageOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecRuntimeImage) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o KogitoBuildSpecRuntimeImageOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecRuntimeImage) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type KogitoBuildSpecRuntimeImagePtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecRuntimeImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildSpecRuntimeImage)(nil)).Elem()
}

func (o KogitoBuildSpecRuntimeImagePtrOutput) ToKogitoBuildSpecRuntimeImagePtrOutput() KogitoBuildSpecRuntimeImagePtrOutput {
	return o
}

func (o KogitoBuildSpecRuntimeImagePtrOutput) ToKogitoBuildSpecRuntimeImagePtrOutputWithContext(ctx context.Context) KogitoBuildSpecRuntimeImagePtrOutput {
	return o
}

func (o KogitoBuildSpecRuntimeImagePtrOutput) Elem() KogitoBuildSpecRuntimeImageOutput {
	return o.ApplyT(func(v *KogitoBuildSpecRuntimeImage) KogitoBuildSpecRuntimeImage { return *v }).(KogitoBuildSpecRuntimeImageOutput)
}

func (o KogitoBuildSpecRuntimeImagePtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecRuntimeImage) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

func (o KogitoBuildSpecRuntimeImagePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecRuntimeImage) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o KogitoBuildSpecRuntimeImagePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecRuntimeImage) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

func (o KogitoBuildSpecRuntimeImagePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildSpecRuntimeImage) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// WebHookSecret Secret to use for a given webHook.
type KogitoBuildSpecWebHooks struct {
	// Secret value for webHook
	Secret *string `pulumi:"secret"`
	// WebHook type, either GitHub or Generic.
	Type *string `pulumi:"type"`
}

// KogitoBuildSpecWebHooksInput is an input type that accepts KogitoBuildSpecWebHooksArgs and KogitoBuildSpecWebHooksOutput values.
// You can construct a concrete instance of `KogitoBuildSpecWebHooksInput` via:
//
//          KogitoBuildSpecWebHooksArgs{...}
type KogitoBuildSpecWebHooksInput interface {
	pulumi.Input

	ToKogitoBuildSpecWebHooksOutput() KogitoBuildSpecWebHooksOutput
	ToKogitoBuildSpecWebHooksOutputWithContext(context.Context) KogitoBuildSpecWebHooksOutput
}

// WebHookSecret Secret to use for a given webHook.
type KogitoBuildSpecWebHooksArgs struct {
	// Secret value for webHook
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// WebHook type, either GitHub or Generic.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (KogitoBuildSpecWebHooksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecWebHooks)(nil)).Elem()
}

func (i KogitoBuildSpecWebHooksArgs) ToKogitoBuildSpecWebHooksOutput() KogitoBuildSpecWebHooksOutput {
	return i.ToKogitoBuildSpecWebHooksOutputWithContext(context.Background())
}

func (i KogitoBuildSpecWebHooksArgs) ToKogitoBuildSpecWebHooksOutputWithContext(ctx context.Context) KogitoBuildSpecWebHooksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecWebHooksOutput)
}

// KogitoBuildSpecWebHooksArrayInput is an input type that accepts KogitoBuildSpecWebHooksArray and KogitoBuildSpecWebHooksArrayOutput values.
// You can construct a concrete instance of `KogitoBuildSpecWebHooksArrayInput` via:
//
//          KogitoBuildSpecWebHooksArray{ KogitoBuildSpecWebHooksArgs{...} }
type KogitoBuildSpecWebHooksArrayInput interface {
	pulumi.Input

	ToKogitoBuildSpecWebHooksArrayOutput() KogitoBuildSpecWebHooksArrayOutput
	ToKogitoBuildSpecWebHooksArrayOutputWithContext(context.Context) KogitoBuildSpecWebHooksArrayOutput
}

type KogitoBuildSpecWebHooksArray []KogitoBuildSpecWebHooksInput

func (KogitoBuildSpecWebHooksArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoBuildSpecWebHooks)(nil)).Elem()
}

func (i KogitoBuildSpecWebHooksArray) ToKogitoBuildSpecWebHooksArrayOutput() KogitoBuildSpecWebHooksArrayOutput {
	return i.ToKogitoBuildSpecWebHooksArrayOutputWithContext(context.Background())
}

func (i KogitoBuildSpecWebHooksArray) ToKogitoBuildSpecWebHooksArrayOutputWithContext(ctx context.Context) KogitoBuildSpecWebHooksArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildSpecWebHooksArrayOutput)
}

// WebHookSecret Secret to use for a given webHook.
type KogitoBuildSpecWebHooksOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecWebHooksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildSpecWebHooks)(nil)).Elem()
}

func (o KogitoBuildSpecWebHooksOutput) ToKogitoBuildSpecWebHooksOutput() KogitoBuildSpecWebHooksOutput {
	return o
}

func (o KogitoBuildSpecWebHooksOutput) ToKogitoBuildSpecWebHooksOutputWithContext(ctx context.Context) KogitoBuildSpecWebHooksOutput {
	return o
}

// Secret value for webHook
func (o KogitoBuildSpecWebHooksOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecWebHooks) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// WebHook type, either GitHub or Generic.
func (o KogitoBuildSpecWebHooksOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildSpecWebHooks) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KogitoBuildSpecWebHooksArrayOutput struct{ *pulumi.OutputState }

func (KogitoBuildSpecWebHooksArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoBuildSpecWebHooks)(nil)).Elem()
}

func (o KogitoBuildSpecWebHooksArrayOutput) ToKogitoBuildSpecWebHooksArrayOutput() KogitoBuildSpecWebHooksArrayOutput {
	return o
}

func (o KogitoBuildSpecWebHooksArrayOutput) ToKogitoBuildSpecWebHooksArrayOutputWithContext(ctx context.Context) KogitoBuildSpecWebHooksArrayOutput {
	return o
}

func (o KogitoBuildSpecWebHooksArrayOutput) Index(i pulumi.IntInput) KogitoBuildSpecWebHooksOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoBuildSpecWebHooks {
		return vs[0].([]KogitoBuildSpecWebHooks)[vs[1].(int)]
	}).(KogitoBuildSpecWebHooksOutput)
}

// KogitoBuildStatus defines the observed state of KogitoBuild.
type KogitoBuildStatus struct {
	// History of builds
	Builds KogitoBuildStatusBuilds `pulumi:"builds"`
	// History of conditions for the resource, shows the status of the younger builder controlled by this instance
	Conditions  []KogitoBuildStatusConditions `pulumi:"conditions"`
	LatestBuild *string                       `pulumi:"latestBuild"`
}

// KogitoBuildStatusInput is an input type that accepts KogitoBuildStatusArgs and KogitoBuildStatusOutput values.
// You can construct a concrete instance of `KogitoBuildStatusInput` via:
//
//          KogitoBuildStatusArgs{...}
type KogitoBuildStatusInput interface {
	pulumi.Input

	ToKogitoBuildStatusOutput() KogitoBuildStatusOutput
	ToKogitoBuildStatusOutputWithContext(context.Context) KogitoBuildStatusOutput
}

// KogitoBuildStatus defines the observed state of KogitoBuild.
type KogitoBuildStatusArgs struct {
	// History of builds
	Builds KogitoBuildStatusBuildsInput `pulumi:"builds"`
	// History of conditions for the resource, shows the status of the younger builder controlled by this instance
	Conditions  KogitoBuildStatusConditionsArrayInput `pulumi:"conditions"`
	LatestBuild pulumi.StringPtrInput                 `pulumi:"latestBuild"`
}

func (KogitoBuildStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildStatus)(nil)).Elem()
}

func (i KogitoBuildStatusArgs) ToKogitoBuildStatusOutput() KogitoBuildStatusOutput {
	return i.ToKogitoBuildStatusOutputWithContext(context.Background())
}

func (i KogitoBuildStatusArgs) ToKogitoBuildStatusOutputWithContext(ctx context.Context) KogitoBuildStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildStatusOutput)
}

func (i KogitoBuildStatusArgs) ToKogitoBuildStatusPtrOutput() KogitoBuildStatusPtrOutput {
	return i.ToKogitoBuildStatusPtrOutputWithContext(context.Background())
}

func (i KogitoBuildStatusArgs) ToKogitoBuildStatusPtrOutputWithContext(ctx context.Context) KogitoBuildStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildStatusOutput).ToKogitoBuildStatusPtrOutputWithContext(ctx)
}

// KogitoBuildStatusPtrInput is an input type that accepts KogitoBuildStatusArgs, KogitoBuildStatusPtr and KogitoBuildStatusPtrOutput values.
// You can construct a concrete instance of `KogitoBuildStatusPtrInput` via:
//
//          KogitoBuildStatusArgs{...}
//
//  or:
//
//          nil
type KogitoBuildStatusPtrInput interface {
	pulumi.Input

	ToKogitoBuildStatusPtrOutput() KogitoBuildStatusPtrOutput
	ToKogitoBuildStatusPtrOutputWithContext(context.Context) KogitoBuildStatusPtrOutput
}

type kogitoBuildStatusPtrType KogitoBuildStatusArgs

func KogitoBuildStatusPtr(v *KogitoBuildStatusArgs) KogitoBuildStatusPtrInput {
	return (*kogitoBuildStatusPtrType)(v)
}

func (*kogitoBuildStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildStatus)(nil)).Elem()
}

func (i *kogitoBuildStatusPtrType) ToKogitoBuildStatusPtrOutput() KogitoBuildStatusPtrOutput {
	return i.ToKogitoBuildStatusPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildStatusPtrType) ToKogitoBuildStatusPtrOutputWithContext(ctx context.Context) KogitoBuildStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildStatusPtrOutput)
}

// KogitoBuildStatus defines the observed state of KogitoBuild.
type KogitoBuildStatusOutput struct{ *pulumi.OutputState }

func (KogitoBuildStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildStatus)(nil)).Elem()
}

func (o KogitoBuildStatusOutput) ToKogitoBuildStatusOutput() KogitoBuildStatusOutput {
	return o
}

func (o KogitoBuildStatusOutput) ToKogitoBuildStatusOutputWithContext(ctx context.Context) KogitoBuildStatusOutput {
	return o
}

func (o KogitoBuildStatusOutput) ToKogitoBuildStatusPtrOutput() KogitoBuildStatusPtrOutput {
	return o.ToKogitoBuildStatusPtrOutputWithContext(context.Background())
}

func (o KogitoBuildStatusOutput) ToKogitoBuildStatusPtrOutputWithContext(ctx context.Context) KogitoBuildStatusPtrOutput {
	return o.ApplyT(func(v KogitoBuildStatus) *KogitoBuildStatus {
		return &v
	}).(KogitoBuildStatusPtrOutput)
}

// History of builds
func (o KogitoBuildStatusOutput) Builds() KogitoBuildStatusBuildsOutput {
	return o.ApplyT(func(v KogitoBuildStatus) KogitoBuildStatusBuilds { return v.Builds }).(KogitoBuildStatusBuildsOutput)
}

// History of conditions for the resource, shows the status of the younger builder controlled by this instance
func (o KogitoBuildStatusOutput) Conditions() KogitoBuildStatusConditionsArrayOutput {
	return o.ApplyT(func(v KogitoBuildStatus) []KogitoBuildStatusConditions { return v.Conditions }).(KogitoBuildStatusConditionsArrayOutput)
}

func (o KogitoBuildStatusOutput) LatestBuild() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildStatus) *string { return v.LatestBuild }).(pulumi.StringPtrOutput)
}

type KogitoBuildStatusPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildStatus)(nil)).Elem()
}

func (o KogitoBuildStatusPtrOutput) ToKogitoBuildStatusPtrOutput() KogitoBuildStatusPtrOutput {
	return o
}

func (o KogitoBuildStatusPtrOutput) ToKogitoBuildStatusPtrOutputWithContext(ctx context.Context) KogitoBuildStatusPtrOutput {
	return o
}

func (o KogitoBuildStatusPtrOutput) Elem() KogitoBuildStatusOutput {
	return o.ApplyT(func(v *KogitoBuildStatus) KogitoBuildStatus { return *v }).(KogitoBuildStatusOutput)
}

// History of builds
func (o KogitoBuildStatusPtrOutput) Builds() KogitoBuildStatusBuildsPtrOutput {
	return o.ApplyT(func(v *KogitoBuildStatus) *KogitoBuildStatusBuilds {
		if v == nil {
			return nil
		}
		return &v.Builds
	}).(KogitoBuildStatusBuildsPtrOutput)
}

// History of conditions for the resource, shows the status of the younger builder controlled by this instance
func (o KogitoBuildStatusPtrOutput) Conditions() KogitoBuildStatusConditionsArrayOutput {
	return o.ApplyT(func(v *KogitoBuildStatus) []KogitoBuildStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(KogitoBuildStatusConditionsArrayOutput)
}

func (o KogitoBuildStatusPtrOutput) LatestBuild() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KogitoBuildStatus) *string {
		if v == nil {
			return nil
		}
		return v.LatestBuild
	}).(pulumi.StringPtrOutput)
}

// History of builds
type KogitoBuildStatusBuilds struct {
	// Builds have been stopped from executing.
	Cancelled []string `pulumi:"cancelled"`
	// Builds have executed and succeeded.
	Complete []string `pulumi:"complete"`
	// Builds have been prevented from executing by an error.
	Error []string `pulumi:"error"`
	// Builds have executed and failed.
	Failed []string `pulumi:"failed"`
	// Builds are being created.
	New []string `pulumi:"new"`
	// Builds are about to start running.
	Pending []string `pulumi:"pending"`
	// Builds are running.
	Running []string `pulumi:"running"`
}

// KogitoBuildStatusBuildsInput is an input type that accepts KogitoBuildStatusBuildsArgs and KogitoBuildStatusBuildsOutput values.
// You can construct a concrete instance of `KogitoBuildStatusBuildsInput` via:
//
//          KogitoBuildStatusBuildsArgs{...}
type KogitoBuildStatusBuildsInput interface {
	pulumi.Input

	ToKogitoBuildStatusBuildsOutput() KogitoBuildStatusBuildsOutput
	ToKogitoBuildStatusBuildsOutputWithContext(context.Context) KogitoBuildStatusBuildsOutput
}

// History of builds
type KogitoBuildStatusBuildsArgs struct {
	// Builds have been stopped from executing.
	Cancelled pulumi.StringArrayInput `pulumi:"cancelled"`
	// Builds have executed and succeeded.
	Complete pulumi.StringArrayInput `pulumi:"complete"`
	// Builds have been prevented from executing by an error.
	Error pulumi.StringArrayInput `pulumi:"error"`
	// Builds have executed and failed.
	Failed pulumi.StringArrayInput `pulumi:"failed"`
	// Builds are being created.
	New pulumi.StringArrayInput `pulumi:"new"`
	// Builds are about to start running.
	Pending pulumi.StringArrayInput `pulumi:"pending"`
	// Builds are running.
	Running pulumi.StringArrayInput `pulumi:"running"`
}

func (KogitoBuildStatusBuildsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildStatusBuilds)(nil)).Elem()
}

func (i KogitoBuildStatusBuildsArgs) ToKogitoBuildStatusBuildsOutput() KogitoBuildStatusBuildsOutput {
	return i.ToKogitoBuildStatusBuildsOutputWithContext(context.Background())
}

func (i KogitoBuildStatusBuildsArgs) ToKogitoBuildStatusBuildsOutputWithContext(ctx context.Context) KogitoBuildStatusBuildsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildStatusBuildsOutput)
}

func (i KogitoBuildStatusBuildsArgs) ToKogitoBuildStatusBuildsPtrOutput() KogitoBuildStatusBuildsPtrOutput {
	return i.ToKogitoBuildStatusBuildsPtrOutputWithContext(context.Background())
}

func (i KogitoBuildStatusBuildsArgs) ToKogitoBuildStatusBuildsPtrOutputWithContext(ctx context.Context) KogitoBuildStatusBuildsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildStatusBuildsOutput).ToKogitoBuildStatusBuildsPtrOutputWithContext(ctx)
}

// KogitoBuildStatusBuildsPtrInput is an input type that accepts KogitoBuildStatusBuildsArgs, KogitoBuildStatusBuildsPtr and KogitoBuildStatusBuildsPtrOutput values.
// You can construct a concrete instance of `KogitoBuildStatusBuildsPtrInput` via:
//
//          KogitoBuildStatusBuildsArgs{...}
//
//  or:
//
//          nil
type KogitoBuildStatusBuildsPtrInput interface {
	pulumi.Input

	ToKogitoBuildStatusBuildsPtrOutput() KogitoBuildStatusBuildsPtrOutput
	ToKogitoBuildStatusBuildsPtrOutputWithContext(context.Context) KogitoBuildStatusBuildsPtrOutput
}

type kogitoBuildStatusBuildsPtrType KogitoBuildStatusBuildsArgs

func KogitoBuildStatusBuildsPtr(v *KogitoBuildStatusBuildsArgs) KogitoBuildStatusBuildsPtrInput {
	return (*kogitoBuildStatusBuildsPtrType)(v)
}

func (*kogitoBuildStatusBuildsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildStatusBuilds)(nil)).Elem()
}

func (i *kogitoBuildStatusBuildsPtrType) ToKogitoBuildStatusBuildsPtrOutput() KogitoBuildStatusBuildsPtrOutput {
	return i.ToKogitoBuildStatusBuildsPtrOutputWithContext(context.Background())
}

func (i *kogitoBuildStatusBuildsPtrType) ToKogitoBuildStatusBuildsPtrOutputWithContext(ctx context.Context) KogitoBuildStatusBuildsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildStatusBuildsPtrOutput)
}

// History of builds
type KogitoBuildStatusBuildsOutput struct{ *pulumi.OutputState }

func (KogitoBuildStatusBuildsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildStatusBuilds)(nil)).Elem()
}

func (o KogitoBuildStatusBuildsOutput) ToKogitoBuildStatusBuildsOutput() KogitoBuildStatusBuildsOutput {
	return o
}

func (o KogitoBuildStatusBuildsOutput) ToKogitoBuildStatusBuildsOutputWithContext(ctx context.Context) KogitoBuildStatusBuildsOutput {
	return o
}

func (o KogitoBuildStatusBuildsOutput) ToKogitoBuildStatusBuildsPtrOutput() KogitoBuildStatusBuildsPtrOutput {
	return o.ToKogitoBuildStatusBuildsPtrOutputWithContext(context.Background())
}

func (o KogitoBuildStatusBuildsOutput) ToKogitoBuildStatusBuildsPtrOutputWithContext(ctx context.Context) KogitoBuildStatusBuildsPtrOutput {
	return o.ApplyT(func(v KogitoBuildStatusBuilds) *KogitoBuildStatusBuilds {
		return &v
	}).(KogitoBuildStatusBuildsPtrOutput)
}

// Builds have been stopped from executing.
func (o KogitoBuildStatusBuildsOutput) Cancelled() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KogitoBuildStatusBuilds) []string { return v.Cancelled }).(pulumi.StringArrayOutput)
}

// Builds have executed and succeeded.
func (o KogitoBuildStatusBuildsOutput) Complete() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KogitoBuildStatusBuilds) []string { return v.Complete }).(pulumi.StringArrayOutput)
}

// Builds have been prevented from executing by an error.
func (o KogitoBuildStatusBuildsOutput) Error() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KogitoBuildStatusBuilds) []string { return v.Error }).(pulumi.StringArrayOutput)
}

// Builds have executed and failed.
func (o KogitoBuildStatusBuildsOutput) Failed() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KogitoBuildStatusBuilds) []string { return v.Failed }).(pulumi.StringArrayOutput)
}

// Builds are being created.
func (o KogitoBuildStatusBuildsOutput) New() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KogitoBuildStatusBuilds) []string { return v.New }).(pulumi.StringArrayOutput)
}

// Builds are about to start running.
func (o KogitoBuildStatusBuildsOutput) Pending() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KogitoBuildStatusBuilds) []string { return v.Pending }).(pulumi.StringArrayOutput)
}

// Builds are running.
func (o KogitoBuildStatusBuildsOutput) Running() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KogitoBuildStatusBuilds) []string { return v.Running }).(pulumi.StringArrayOutput)
}

type KogitoBuildStatusBuildsPtrOutput struct{ *pulumi.OutputState }

func (KogitoBuildStatusBuildsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KogitoBuildStatusBuilds)(nil)).Elem()
}

func (o KogitoBuildStatusBuildsPtrOutput) ToKogitoBuildStatusBuildsPtrOutput() KogitoBuildStatusBuildsPtrOutput {
	return o
}

func (o KogitoBuildStatusBuildsPtrOutput) ToKogitoBuildStatusBuildsPtrOutputWithContext(ctx context.Context) KogitoBuildStatusBuildsPtrOutput {
	return o
}

func (o KogitoBuildStatusBuildsPtrOutput) Elem() KogitoBuildStatusBuildsOutput {
	return o.ApplyT(func(v *KogitoBuildStatusBuilds) KogitoBuildStatusBuilds { return *v }).(KogitoBuildStatusBuildsOutput)
}

// Builds have been stopped from executing.
func (o KogitoBuildStatusBuildsPtrOutput) Cancelled() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KogitoBuildStatusBuilds) []string {
		if v == nil {
			return nil
		}
		return v.Cancelled
	}).(pulumi.StringArrayOutput)
}

// Builds have executed and succeeded.
func (o KogitoBuildStatusBuildsPtrOutput) Complete() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KogitoBuildStatusBuilds) []string {
		if v == nil {
			return nil
		}
		return v.Complete
	}).(pulumi.StringArrayOutput)
}

// Builds have been prevented from executing by an error.
func (o KogitoBuildStatusBuildsPtrOutput) Error() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KogitoBuildStatusBuilds) []string {
		if v == nil {
			return nil
		}
		return v.Error
	}).(pulumi.StringArrayOutput)
}

// Builds have executed and failed.
func (o KogitoBuildStatusBuildsPtrOutput) Failed() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KogitoBuildStatusBuilds) []string {
		if v == nil {
			return nil
		}
		return v.Failed
	}).(pulumi.StringArrayOutput)
}

// Builds are being created.
func (o KogitoBuildStatusBuildsPtrOutput) New() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KogitoBuildStatusBuilds) []string {
		if v == nil {
			return nil
		}
		return v.New
	}).(pulumi.StringArrayOutput)
}

// Builds are about to start running.
func (o KogitoBuildStatusBuildsPtrOutput) Pending() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KogitoBuildStatusBuilds) []string {
		if v == nil {
			return nil
		}
		return v.Pending
	}).(pulumi.StringArrayOutput)
}

// Builds are running.
func (o KogitoBuildStatusBuildsPtrOutput) Running() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KogitoBuildStatusBuilds) []string {
		if v == nil {
			return nil
		}
		return v.Running
	}).(pulumi.StringArrayOutput)
}

// KogitoBuildConditions describes the conditions for this build instance according to Kubernetes status interface.
type KogitoBuildStatusConditions struct {
	// LastTransitionTime ...
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Message ...
	Message *string `pulumi:"message"`
	// Reason of this condition
	Reason *string `pulumi:"reason"`
	// Status ...
	Status string `pulumi:"status"`
	// Type of this condition
	Type string `pulumi:"type"`
}

// KogitoBuildStatusConditionsInput is an input type that accepts KogitoBuildStatusConditionsArgs and KogitoBuildStatusConditionsOutput values.
// You can construct a concrete instance of `KogitoBuildStatusConditionsInput` via:
//
//          KogitoBuildStatusConditionsArgs{...}
type KogitoBuildStatusConditionsInput interface {
	pulumi.Input

	ToKogitoBuildStatusConditionsOutput() KogitoBuildStatusConditionsOutput
	ToKogitoBuildStatusConditionsOutputWithContext(context.Context) KogitoBuildStatusConditionsOutput
}

// KogitoBuildConditions describes the conditions for this build instance according to Kubernetes status interface.
type KogitoBuildStatusConditionsArgs struct {
	// LastTransitionTime ...
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Message ...
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Reason of this condition
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status ...
	Status pulumi.StringInput `pulumi:"status"`
	// Type of this condition
	Type pulumi.StringInput `pulumi:"type"`
}

func (KogitoBuildStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildStatusConditions)(nil)).Elem()
}

func (i KogitoBuildStatusConditionsArgs) ToKogitoBuildStatusConditionsOutput() KogitoBuildStatusConditionsOutput {
	return i.ToKogitoBuildStatusConditionsOutputWithContext(context.Background())
}

func (i KogitoBuildStatusConditionsArgs) ToKogitoBuildStatusConditionsOutputWithContext(ctx context.Context) KogitoBuildStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildStatusConditionsOutput)
}

// KogitoBuildStatusConditionsArrayInput is an input type that accepts KogitoBuildStatusConditionsArray and KogitoBuildStatusConditionsArrayOutput values.
// You can construct a concrete instance of `KogitoBuildStatusConditionsArrayInput` via:
//
//          KogitoBuildStatusConditionsArray{ KogitoBuildStatusConditionsArgs{...} }
type KogitoBuildStatusConditionsArrayInput interface {
	pulumi.Input

	ToKogitoBuildStatusConditionsArrayOutput() KogitoBuildStatusConditionsArrayOutput
	ToKogitoBuildStatusConditionsArrayOutputWithContext(context.Context) KogitoBuildStatusConditionsArrayOutput
}

type KogitoBuildStatusConditionsArray []KogitoBuildStatusConditionsInput

func (KogitoBuildStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoBuildStatusConditions)(nil)).Elem()
}

func (i KogitoBuildStatusConditionsArray) ToKogitoBuildStatusConditionsArrayOutput() KogitoBuildStatusConditionsArrayOutput {
	return i.ToKogitoBuildStatusConditionsArrayOutputWithContext(context.Background())
}

func (i KogitoBuildStatusConditionsArray) ToKogitoBuildStatusConditionsArrayOutputWithContext(ctx context.Context) KogitoBuildStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KogitoBuildStatusConditionsArrayOutput)
}

// KogitoBuildConditions describes the conditions for this build instance according to Kubernetes status interface.
type KogitoBuildStatusConditionsOutput struct{ *pulumi.OutputState }

func (KogitoBuildStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KogitoBuildStatusConditions)(nil)).Elem()
}

func (o KogitoBuildStatusConditionsOutput) ToKogitoBuildStatusConditionsOutput() KogitoBuildStatusConditionsOutput {
	return o
}

func (o KogitoBuildStatusConditionsOutput) ToKogitoBuildStatusConditionsOutputWithContext(ctx context.Context) KogitoBuildStatusConditionsOutput {
	return o
}

// LastTransitionTime ...
func (o KogitoBuildStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Message ...
func (o KogitoBuildStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Reason of this condition
func (o KogitoBuildStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KogitoBuildStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status ...
func (o KogitoBuildStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoBuildStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of this condition
func (o KogitoBuildStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KogitoBuildStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type KogitoBuildStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (KogitoBuildStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KogitoBuildStatusConditions)(nil)).Elem()
}

func (o KogitoBuildStatusConditionsArrayOutput) ToKogitoBuildStatusConditionsArrayOutput() KogitoBuildStatusConditionsArrayOutput {
	return o
}

func (o KogitoBuildStatusConditionsArrayOutput) ToKogitoBuildStatusConditionsArrayOutputWithContext(ctx context.Context) KogitoBuildStatusConditionsArrayOutput {
	return o
}

func (o KogitoBuildStatusConditionsArrayOutput) Index(i pulumi.IntInput) KogitoBuildStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KogitoBuildStatusConditions {
		return vs[0].([]KogitoBuildStatusConditions)[vs[1].(int)]
	}).(KogitoBuildStatusConditionsOutput)
}

func init() {
	pulumi.RegisterOutputType(KogitoBuildTypeOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecArtifactOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecArtifactPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecBuildImageOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecBuildImagePtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsArrayOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsValueFromOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecGitSourceOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecGitSourcePtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecResourcesOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecResourcesPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecResourcesLimitsOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecResourcesLimitsMapOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecResourcesRequestsOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecResourcesRequestsMapOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecRuntimeImageOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecRuntimeImagePtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecWebHooksOutput{})
	pulumi.RegisterOutputType(KogitoBuildSpecWebHooksArrayOutput{})
	pulumi.RegisterOutputType(KogitoBuildStatusOutput{})
	pulumi.RegisterOutputType(KogitoBuildStatusPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildStatusBuildsOutput{})
	pulumi.RegisterOutputType(KogitoBuildStatusBuildsPtrOutput{})
	pulumi.RegisterOutputType(KogitoBuildStatusConditionsOutput{})
	pulumi.RegisterOutputType(KogitoBuildStatusConditionsArrayOutput{})
}
